{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nvar inspect = Symbol.for('nodejs.util.inspect.custom');\nvar DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\n/**\n * All configured {@link Resolver}s\n */\nexport var resolvers = new Map();\nvar symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n  if (addr == null) {\n    throw new Error('requires node address object');\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol');\n  }\n  var ip;\n  var host = addr.address;\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4';\n      break;\n    case 6:\n      ip = 'ip6';\n      if (host.includes('%')) {\n        var parts = host.split('%');\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr');\n        }\n        host = parts[0];\n        var zone = parts[1];\n        ip = \"/ip6zone/\".concat(zone, \"/ip6\");\n      }\n      break;\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.');\n  }\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n  if (!isMultiaddr(addr)) {\n    return false;\n  }\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some(function (proto) {\n    return proto.resolvable;\n  });\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n  return Boolean(value === null || value === void 0 ? void 0 : value[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nvar DefaultMultiaddr = /*#__PURE__*/function (_ref) {\n  function DefaultMultiaddr(addr) {\n    _classCallCheck(this, DefaultMultiaddr);\n    _DefaultMultiaddr_string.set(this, void 0);\n    _DefaultMultiaddr_tuples.set(this, void 0);\n    _DefaultMultiaddr_stringTuples.set(this, void 0);\n    this[_a] = true;\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(\"multiaddr \\\"\".concat(addr, \"\\\" must start with a \\\"/\\\"\"));\n      }\n      this.bytes = codec.fromString(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  _createClass(DefaultMultiaddr, [{\n    key: \"toString\",\n    value: function toString() {\n      if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n        __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n      }\n      return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toOptions\",\n    value: function toOptions() {\n      var family;\n      var transport;\n      var host;\n      var port;\n      var zone = '';\n      var tcp = getProtocol('tcp');\n      var udp = getProtocol('udp');\n      var ip4 = getProtocol('ip4');\n      var ip6 = getProtocol('ip6');\n      var dns6 = getProtocol('dns6');\n      var ip6zone = getProtocol('ip6zone');\n      var _iterator = _createForOfIteratorHelper(this.stringTuples()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            code = _step$value[0],\n            value = _step$value[1];\n          if (code === ip6zone.code) {\n            zone = \"%\".concat(value !== null && value !== void 0 ? value : '');\n          }\n          // default to https when protocol & port are omitted from DNS addrs\n          if (DNS_CODES.includes(code)) {\n            transport = tcp.name;\n            port = 443;\n            host = \"\".concat(value !== null && value !== void 0 ? value : '').concat(zone);\n            family = code === dns6.code ? 6 : 4;\n          }\n          if (code === tcp.code || code === udp.code) {\n            transport = getProtocol(code).name;\n            port = parseInt(value !== null && value !== void 0 ? value : '');\n          }\n          if (code === ip4.code || code === ip6.code) {\n            transport = getProtocol(code).name;\n            host = \"\".concat(value !== null && value !== void 0 ? value : '').concat(zone);\n            family = code === ip6.code ? 6 : 4;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (family == null || transport == null || host == null || port == null) {\n        throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n      }\n      var opts = {\n        family: family,\n        host: host,\n        transport: transport,\n        port: port\n      };\n      return opts;\n    }\n  }, {\n    key: \"protos\",\n    value: function protos() {\n      return this.protoCodes().map(function (code) {\n        return Object.assign({}, getProtocol(code));\n      });\n    }\n  }, {\n    key: \"protoCodes\",\n    value: function protoCodes() {\n      var codes = [];\n      var buf = this.bytes;\n      var i = 0;\n      while (i < buf.length) {\n        var _varint$decode$bytes;\n        var code = varint.decode(buf, i);\n        var n = (_varint$decode$bytes = varint.decode.bytes) !== null && _varint$decode$bytes !== void 0 ? _varint$decode$bytes : 0;\n        var p = getProtocol(code);\n        var size = codec.sizeForAddr(p, buf.slice(i + n));\n        i += size + n;\n        codes.push(code);\n      }\n      return codes;\n    }\n  }, {\n    key: \"protoNames\",\n    value: function protoNames() {\n      return this.protos().map(function (proto) {\n        return proto.name;\n      });\n    }\n  }, {\n    key: \"tuples\",\n    value: function tuples() {\n      if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n        __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n      }\n      return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n  }, {\n    key: \"stringTuples\",\n    value: function stringTuples() {\n      if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n        __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n      }\n      return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n  }, {\n    key: \"encapsulate\",\n    value: function encapsulate(addr) {\n      addr = new DefaultMultiaddr(addr);\n      return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n  }, {\n    key: \"decapsulate\",\n    value: function decapsulate(addr) {\n      var addrString = addr.toString();\n      var s = this.toString();\n      var i = s.lastIndexOf(addrString);\n      if (i < 0) {\n        throw new Error(\"Address \".concat(this.toString(), \" does not contain subaddress: \").concat(addr.toString()));\n      }\n      return new DefaultMultiaddr(s.slice(0, i));\n    }\n  }, {\n    key: \"decapsulateCode\",\n    value: function decapsulateCode(code) {\n      var tuples = this.tuples();\n      for (var i = tuples.length - 1; i >= 0; i--) {\n        if (tuples[i][0] === code) {\n          return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"getPeerId\",\n    value: function getPeerId() {\n      try {\n        var tuples = this.stringTuples().filter(function (tuple) {\n          if (tuple[0] === names.ipfs.code) {\n            return true;\n          }\n          return false;\n        });\n        // Get the last ipfs tuple ['ipfs', 'peerid string']\n        var tuple = tuples.pop();\n        if ((tuple === null || tuple === void 0 ? void 0 : tuple[1]) != null) {\n          var peerIdStr = tuple[1];\n          // peer id is base58btc encoded string but not multibase encoded so add the `z`\n          // prefix so we can validate that it is correctly encoded\n          if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n            return uint8ArrayToString(base58btc.decode(\"z\".concat(peerIdStr)), 'base58btc');\n          }\n          // try to parse peer id as CID\n          return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n        }\n        return null;\n      } catch (e) {\n        return null;\n      }\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      var path = null;\n      try {\n        path = this.stringTuples().filter(function (tuple) {\n          var proto = getProtocol(tuple[0]);\n          if (proto.path === true) {\n            return true;\n          }\n          return false;\n        })[0][1];\n        if (path == null) {\n          path = null;\n        }\n      } catch (_unused) {\n        path = null;\n      }\n      return path;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(addr) {\n      return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n  }, {\n    key: \"resolve\",\n    value: function () {\n      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var resolvableProto, resolver, addresses;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              resolvableProto = this.protos().find(function (p) {\n                return p.resolvable;\n              }); // Multiaddr is not resolvable?\n              if (!(resolvableProto == null)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", [this]);\n            case 3:\n              resolver = resolvers.get(resolvableProto.name);\n              if (!(resolver == null)) {\n                _context.next = 6;\n                break;\n              }\n              throw errCode(new Error(\"no available resolver for \".concat(resolvableProto.name)), 'ERR_NO_AVAILABLE_RESOLVER');\n            case 6:\n              _context.next = 8;\n              return resolver(this, options);\n            case 8:\n              addresses = _context.sent;\n              return _context.abrupt(\"return\", addresses.map(function (a) {\n                return new DefaultMultiaddr(a);\n              }));\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolve(_x) {\n        return _resolve.apply(this, arguments);\n      }\n      return resolve;\n    }()\n  }, {\n    key: \"nodeAddress\",\n    value: function nodeAddress() {\n      var options = this.toOptions();\n      if (options.transport !== 'tcp' && options.transport !== 'udp') {\n        throw new Error(\"multiaddr must have a valid format - no protocol with name: \\\"\".concat(options.transport, \"\\\". Must have a valid transport protocol: \\\"{tcp, udp}\\\"\"));\n      }\n      return {\n        family: options.family,\n        address: options.host,\n        port: options.port\n      };\n    }\n  }, {\n    key: \"isThinWaistAddress\",\n    value: function isThinWaistAddress(addr) {\n      var protos = (addr !== null && addr !== void 0 ? addr : this).protos();\n      if (protos.length !== 2) {\n        return false;\n      }\n      if (protos[0].code !== 4 && protos[0].code !== 41) {\n        return false;\n      }\n      if (protos[1].code !== 6 && protos[1].code !== 273) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n  }, {\n    key: _ref,\n    value: function value() {\n      return \"Multiaddr(\".concat(codec.bytesToString(this.bytes), \")\");\n    }\n  }]);\n  return DefaultMultiaddr;\n}((_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect));\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n  return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };","map":{"version":3,"names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","DNS_CODES","code","resolvers","Map","symbol","fromNodeAddress","addr","transport","Error","ip","host","address","family","includes","parts","split","length","zone","concat","DefaultMultiaddr","port","join","isName","isMultiaddr","protos","some","proto","resolvable","value","Boolean","_ref","_classCallCheck","_DefaultMultiaddr_string","set","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","_a","Uint8Array","bytes","fromBytes","charAt","fromString","_createClass","key","__classPrivateFieldGet","__classPrivateFieldSet","bytesToString","toJSON","toOptions","tcp","udp","ip4","ip6","dns6","ip6zone","_iterator","_createForOfIteratorHelper","stringTuples","_step","s","n","done","_step$value","_slicedToArray","name","parseInt","err","e","f","opts","protoCodes","map","Object","assign","codes","buf","i","_varint$decode$bytes","decode","p","size","sizeForAddr","slice","push","protoNames","tuples","bytesToTuples","tuplesToStringTuples","encapsulate","decapsulate","addrString","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","getPath","path","_unused","_resolve","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","resolvableProto","resolver","addresses","wrap","_callee$","_context","prev","next","find","abrupt","get","sent","a","stop","resolve","_x","apply","arguments","nodeAddress","isThinWaistAddress","WeakMap","multiaddr","protocols"],"sources":["/Users/apple/Documents/treasure/node_modules/@multiformats/multiaddr/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\n\nimport * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\n/**\n * Protocols are present in the protocol table\n */\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\n/**\n * A plain JavaScript object representation of a {@link Multiaddr}\n */\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\n/**\n * A NodeAddress is an IPv4/IPv6 address/TCP port combination\n */\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\n/**\n * These types can be parsed into a {@link Multiaddr} object\n */\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\n/**\n * A Resolver is a function that takes a {@link Multiaddr} and resolves it into one\n * or more string representations of that {@link Multiaddr}.\n */\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\n/**\n * A code/value pair\n */\nexport type Tuple = [number, Uint8Array?]\n\n/**\n * A code/value pair with the value as a string\n */\nexport type StringTuple = [number, string?]\n\n/**\n * Allows aborting long-lived operations\n */\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString: () => string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * JSON.stringify(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON: () => string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions: () => MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos: () => Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes: () => number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames: () => string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples: () => Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples: () => StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate: (addr: MultiaddrInput) => Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate: (addr: Multiaddr | string) => Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const addr = multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // Multiaddr(/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC)\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode: (code: number) => Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string)\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId: () => string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock)\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath: () => string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals: (addr: { bytes: Uint8Array }) => boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n   *\n   * resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)\n   * // ]\n   * ```\n   */\n  resolve: (options?: AbortOptions) => Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress: () => NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   * const mh2 = multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // Multiaddr(/ip4/192.168.2.1/tcp/5001)\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001)\n   * const mh4 = multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a)\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress: (addr?: Multiaddr) => boolean\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip: string | undefined\n  let host = addr.address\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n\n      if (host.includes('%')) {\n        const parts = host.split('%')\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr')\n        }\n\n        host = parts[0]\n        const zone = parts[1]\n        ip = `/ip6zone/${zone}/ip6`\n      }\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr implements Multiaddr {\n  public bytes: Uint8Array\n  #string?: string\n  #tuples?: Tuple[]\n  #stringTuples?: StringTuple[]\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  toString (): string {\n    if (this.#string == null) {\n      this.#string = codec.bytesToString(this.bytes)\n    }\n\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: string | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes ?? 0\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  protoNames (): string[] {\n    return this.protos().map(proto => proto.name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    if (this.#tuples == null) {\n      this.#tuples = codec.bytesToTuples(this.bytes)\n    }\n\n    return this.#tuples\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    if (this.#stringTuples == null) {\n      this.#stringTuples = codec.tuplesToStringTuples(this.tuples())\n    }\n\n    return this.#stringTuples\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new DefaultMultiaddr(addr)\n    return new DefaultMultiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new DefaultMultiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: AbortOptions): Promise<Multiaddr[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new DefaultMultiaddr(a))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${codec.bytesToString(this.bytes)})`\n  }\n}\n\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new DefaultMultiaddr(addr)\n}\n\nexport { getProtocol as protocols }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
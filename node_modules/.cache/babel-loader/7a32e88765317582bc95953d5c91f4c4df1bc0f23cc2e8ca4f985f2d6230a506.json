{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { namespaceLength, namespace, peerIdToRoutingKey } from 'ipns';\nimport { ipnsValidator } from 'ipns/validator';\nimport { ipnsSelector } from 'ipns/selector';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { PubSubDatastore } from 'datastore-pubsub';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport errcode from 'err-code';\nimport { logger } from '@libp2p/logger';\nimport { peerIdFromString } from '@libp2p/peer-id';\nvar log = logger('ipfs:ipns:pubsub');\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Pubsub datastore aims to manage the pubsub subscriptions for IPNS\nexport var IpnsPubsubDatastore = /*#__PURE__*/function () {\n  /**\n   * @param {import('@libp2p/interface-pubsub').PubSub} pubsub\n   * @param {import('interface-datastore').Datastore} localDatastore\n   * @param {import('@libp2p/interface-peer-id').PeerId} peerId\n   */\n  function IpnsPubsubDatastore(pubsub, localDatastore, peerId) {\n    _classCallCheck(this, IpnsPubsubDatastore);\n    /** @type {Record<string, string>} */\n    this._subscriptions = {};\n\n    // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.\n    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this);\n    this._pubsubDs = new PubSubDatastore(pubsub, localDatastore, peerId, ipnsValidator, ipnsSelector, this._handleSubscriptionKey);\n  }\n\n  /**\n   * Put a value to the pubsub datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  _createClass(IpnsPubsubDatastore, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, value, options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this._pubsubDs.put(key, value, options);\n            case 3:\n              _context.next = 9;\n              break;\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              log.error(_context.t0);\n              throw _context.t0;\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n      function put(_x, _x2, _x3) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\n     * Get a value from the pubsub datastore indexed by the received key properly encoded.\n     * Also, the identifier topic is subscribed to and the pubsub datastore records will be\n     * updated once new publishes occur.\n     *\n     * @param {Uint8Array} key - identifier of the value to be obtained.\n     * @param {AbortOptions} [options]\n     */\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key, options) {\n        var res, err, ns, stringifiedTopic, id;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return this._pubsubDs.get(key, options);\n            case 3:\n              res = _context2.sent;\n              _context2.next = 9;\n              break;\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              err = _context2.t0;\n            case 9:\n              // Add topic subscribed\n              ns = key.slice(0, namespaceLength);\n              if (uint8ArrayToString(ns) === namespace) {\n                stringifiedTopic = base58btc.encode(key).substring(1);\n                id = base58btc.encode(key.slice(namespaceLength)).substring(1);\n                this._subscriptions[stringifiedTopic] = id;\n                log(\"subscribed to pubsub topic \".concat(stringifiedTopic, \", id \").concat(id));\n              }\n\n              // If no data was obtained, after storing the subscription, return the error.\n              if (!err) {\n                _context2.next = 13;\n                break;\n              }\n              throw err;\n            case 13:\n              return _context2.abrupt(\"return\", res);\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n      function get(_x4, _x5) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n    /**\n     * Modify subscription key to have a proper encoding\n     *\n     * @param {Uint8Array | string} key\n     */\n  }, {\n    key: \"_handleSubscriptionKey\",\n    value: function _handleSubscriptionKey(key) {\n      if (key instanceof Uint8Array) {\n        key = uint8ArrayToString(key, 'base58btc');\n      }\n      var subscriber = this._subscriptions[key];\n      if (!subscriber) {\n        throw errcode(new Error(\"key \".concat(key, \" does not correspond to a subscription\")), 'ERR_INVALID_KEY');\n      }\n      try {\n        var k = peerIdToRoutingKey(peerIdFromString(subscriber));\n        return k;\n      } catch ( /** @type {any} */err) {\n        log.error(err);\n        throw err;\n      }\n    }\n\n    /**\n     * Get pubsub subscriptions related to ipns.\n     */\n  }, {\n    key: \"getSubscriptions\",\n    value: function getSubscriptions() {\n      var subscriptions = Object.values(this._subscriptions).filter(Boolean);\n      return subscriptions.map(function (sub) {\n        return \"\".concat(namespace).concat(sub);\n      });\n    }\n\n    /**\n     * Cancel pubsub subscriptions related to ipns.\n     *\n     * @param {string} name - ipns path to cancel the pubsub subscription.\n     */\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(name) {\n        var _this = this;\n        var stringifiedTopic, bufTopic;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(typeof name !== 'string')) {\n                _context3.next = 2;\n                break;\n              }\n              throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME');\n            case 2:\n              // Trim /ipns/ prefix from the name\n              if (name.startsWith(namespace)) {\n                name = name.substring(namespaceLength);\n              }\n              stringifiedTopic = Object.keys(this._subscriptions).find(function (key) {\n                return _this._subscriptions[key] === name;\n              }); // Not found topic\n              if (stringifiedTopic) {\n                _context3.next = 6;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                canceled: false\n              });\n            case 6:\n              // Unsubscribe topic\n              bufTopic = uint8ArrayFromString(stringifiedTopic);\n              this._pubsubDs.unsubscribe(bufTopic);\n              delete this._subscriptions[stringifiedTopic];\n              log(\"unsubscribed pubsub \".concat(stringifiedTopic, \": \").concat(name));\n              return _context3.abrupt(\"return\", {\n                canceled: true\n              });\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function cancel(_x6) {\n        return _cancel.apply(this, arguments);\n      }\n      return cancel;\n    }()\n  }]);\n  return IpnsPubsubDatastore;\n}();","map":{"version":3,"names":["namespaceLength","namespace","peerIdToRoutingKey","ipnsValidator","ipnsSelector","base58btc","PubSubDatastore","fromString","uint8ArrayFromString","toString","uint8ArrayToString","errcode","logger","peerIdFromString","log","IpnsPubsubDatastore","pubsub","localDatastore","peerId","_classCallCheck","_subscriptions","_handleSubscriptionKey","bind","_pubsubDs","_createClass","key","value","_put","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","wrap","_callee$","_context","prev","next","put","t0","error","stop","_x","_x2","_x3","apply","arguments","_get","_callee2","res","err","ns","stringifiedTopic","id","_callee2$","_context2","get","sent","slice","encode","substring","concat","abrupt","_x4","_x5","Uint8Array","subscriber","Error","k","getSubscriptions","subscriptions","Object","values","filter","Boolean","map","sub","_cancel","_callee3","name","_this","bufTopic","_callee3$","_context3","startsWith","keys","find","canceled","unsubscribe","cancel","_x6"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/ipns/routing/pubsub-datastore.js"],"sourcesContent":["import { namespaceLength, namespace, peerIdToRoutingKey } from 'ipns'\nimport { ipnsValidator } from 'ipns/validator'\nimport { ipnsSelector } from 'ipns/selector'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { PubSubDatastore } from 'datastore-pubsub'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nconst log = logger('ipfs:ipns:pubsub')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Pubsub datastore aims to manage the pubsub subscriptions for IPNS\nexport class IpnsPubsubDatastore {\n  /**\n   * @param {import('@libp2p/interface-pubsub').PubSub} pubsub\n   * @param {import('interface-datastore').Datastore} localDatastore\n   * @param {import('@libp2p/interface-peer-id').PeerId} peerId\n   */\n  constructor (pubsub, localDatastore, peerId) {\n    /** @type {Record<string, string>} */\n    this._subscriptions = {}\n\n    // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.\n    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this)\n\n    this._pubsubDs = new PubSubDatastore(pubsub, localDatastore, peerId, ipnsValidator, ipnsSelector, this._handleSubscriptionKey)\n  }\n\n  /**\n   * Put a value to the pubsub datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await this._pubsubDs.put(key, value, options)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get a value from the pubsub datastore indexed by the received key properly encoded.\n   * Also, the identifier topic is subscribed to and the pubsub datastore records will be\n   * updated once new publishes occur.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    let res\n    let err\n\n    try {\n      res = await this._pubsubDs.get(key, options)\n    } catch (/** @type {any} */ e) {\n      err = e\n    }\n\n    // Add topic subscribed\n    const ns = key.slice(0, namespaceLength)\n\n    if (uint8ArrayToString(ns) === namespace) {\n      const stringifiedTopic = base58btc.encode(key).substring(1)\n      const id = base58btc.encode(key.slice(namespaceLength)).substring(1)\n\n      this._subscriptions[stringifiedTopic] = id\n\n      log(`subscribed to pubsub topic ${stringifiedTopic}, id ${id}`)\n    }\n\n    // If no data was obtained, after storing the subscription, return the error.\n    if (err) {\n      throw err\n    }\n\n    return res\n  }\n\n  /**\n   * Modify subscription key to have a proper encoding\n   *\n   * @param {Uint8Array | string} key\n   */\n  _handleSubscriptionKey (key) {\n    if (key instanceof Uint8Array) {\n      key = uint8ArrayToString(key, 'base58btc')\n    }\n\n    const subscriber = this._subscriptions[key]\n\n    if (!subscriber) {\n      throw errcode(new Error(`key ${key} does not correspond to a subscription`), 'ERR_INVALID_KEY')\n    }\n\n    try {\n      const k = peerIdToRoutingKey(peerIdFromString(subscriber))\n      return k\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get pubsub subscriptions related to ipns.\n   */\n  getSubscriptions () {\n    const subscriptions = Object.values(this._subscriptions).filter(Boolean)\n\n    return subscriptions.map((sub) => `${namespace}${sub}`)\n  }\n\n  /**\n   * Cancel pubsub subscriptions related to ipns.\n   *\n   * @param {string} name - ipns path to cancel the pubsub subscription.\n   */\n  async cancel (name) { // eslint-disable-line require-await\n    if (typeof name !== 'string') {\n      throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME')\n    }\n\n    // Trim /ipns/ prefix from the name\n    if (name.startsWith(namespace)) {\n      name = name.substring(namespaceLength)\n    }\n\n    const stringifiedTopic = Object.keys(this._subscriptions).find((key) => this._subscriptions[key] === name)\n\n    // Not found topic\n    if (!stringifiedTopic) {\n      return {\n        canceled: false\n      }\n    }\n\n    // Unsubscribe topic\n    const bufTopic = uint8ArrayFromString(stringifiedTopic)\n\n    this._pubsubDs.unsubscribe(bufTopic)\n\n    delete this._subscriptions[stringifiedTopic]\n    log(`unsubscribed pubsub ${stringifiedTopic}: ${name}`)\n\n    return {\n      canceled: true\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { createBitswap } from 'ipfs-bitswap';\nimport { createLibp2p } from './libp2p.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { BlockStorage } from '../block-storage.js';\n\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport var Network = /*#__PURE__*/function () {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  function Network(peerId, libp2p, bitswap, repo, blockstore) {\n    _classCallCheck(this, Network);\n    this.peerId = peerId;\n    this.libp2p = libp2p;\n    this.bitswap = bitswap;\n    this.repo = repo;\n    this.blockstore = blockstore;\n  }\n\n  /**\n   * @param {Options} options\n   */\n  _createClass(Network, null, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var peerId, repo, print, hashers, options, config, libp2p, _iterator, _step, ma, bitswap, blockstore;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              peerId = _ref.peerId, repo = _ref.repo, print = _ref.print, hashers = _ref.hashers, options = _ref.options;\n              if (!repo.closed) {\n                _context.next = 4;\n                break;\n              }\n              _context.next = 4;\n              return repo.open();\n            case 4:\n              _context.next = 6;\n              return repo.config.getAll();\n            case 6:\n              config = _context.sent;\n              _context.next = 9;\n              return createLibp2p({\n                options: options,\n                repo: repo,\n                peerId: peerId,\n                multiaddrs: readAddrs(peerId, config),\n                config: config,\n                keychainConfig: undefined\n              });\n            case 9:\n              libp2p = _context.sent;\n              _context.next = 12;\n              return libp2p.start();\n            case 12:\n              _iterator = _createForOfIteratorHelper(libp2p.getMultiaddrs());\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  ma = _step.value;\n                  print(\"Swarm listening on \".concat(ma.toString()));\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              bitswap = createBitswap(libp2p, repo.blocks, {\n                statsEnabled: true,\n                hashLoader: hashers,\n                maxInboundStreams: 1024,\n                maxOutboundStreams: 1024\n              });\n              _context.next = 17;\n              return bitswap.start();\n            case 17:\n              blockstore = new BlockStorage(repo.blocks, bitswap);\n              repo.blocks = blockstore;\n              // @ts-expect-error private field\n              repo.pins.blockstore = blockstore;\n              return _context.abrupt(\"return\", new Network(peerId, libp2p, bitswap, repo, blockstore));\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function start(_x) {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n    /**\n     * @param {Network} network\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(network) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              network.repo.blocks = network.blockstore.unwrap();\n              // @ts-expect-error private field\n              network.repo.pins.blockstore = network.blockstore.unwrap();\n              _context2.next = 4;\n              return network.bitswap.stop();\n            case 4:\n              _context2.next = 6;\n              return network.libp2p.stop();\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function stop(_x2) {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n  }]);\n  return Network;\n}();\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nvar readAddrs = function readAddrs(peerId, config) {\n  var peerIdStr = peerId.toString();\n  /** @type {Multiaddr[]} */\n  var addrs = [];\n  var swarm = config.Addresses && config.Addresses.Swarm || [];\n  var _iterator2 = _createForOfIteratorHelper(swarm),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var addr = _step2.value;\n      var ma = multiaddr(addr);\n\n      // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n      // websocket-star support was removed from ipfs and libp2p\n      if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n        throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');\n      }\n\n      // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n      // webrtc-star) can have the intermediary's peer ID in the address, so append our\n      // peer ID to the end of it\n      var maId = ma.getPeerId();\n      if (maId && maId !== peerIdStr) {\n        ma = ma.encapsulate(\"/p2p/\".concat(peerIdStr));\n      }\n      addrs.push(ma);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return addrs;\n};\nvar WEBSOCKET_STAR_PROTO_CODE = 479;","map":{"version":3,"names":["createBitswap","createLibp2p","multiaddr","errCode","BlockStorage","Network","peerId","libp2p","bitswap","repo","blockstore","_classCallCheck","_createClass","key","value","_start","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","print","hashers","options","config","_iterator","_step","ma","wrap","_callee$","_context","prev","next","closed","open","getAll","sent","multiaddrs","readAddrs","keychainConfig","undefined","start","_createForOfIteratorHelper","getMultiaddrs","s","n","done","concat","toString","err","e","f","blocks","statsEnabled","hashLoader","maxInboundStreams","maxOutboundStreams","pins","abrupt","stop","_x","apply","arguments","_stop","_callee2","network","_callee2$","_context2","unwrap","_x2","peerIdStr","addrs","swarm","Addresses","Swarm","_iterator2","_step2","addr","protoCodes","includes","WEBSOCKET_STAR_PROTO_CODE","Error","maId","getPeerId","encapsulate","push"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/network.js"],"sourcesContent":["import { createBitswap } from 'ipfs-bitswap'\nimport { createLibp2p } from './libp2p.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport errCode from 'err-code'\nimport { BlockStorage } from '../block-storage.js'\n\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport class Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor (peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId\n    this.libp2p = libp2p\n    this.bitswap = bitswap\n    this.repo = repo\n    this.blockstore = blockstore\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async start ({ peerId, repo, print, hashers, options }) {\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open()\n    }\n\n    /** @type {IPFSConfig} */\n    const config = await repo.config.getAll()\n\n    const libp2p = await createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    })\n\n    await libp2p.start()\n\n    for (const ma of libp2p.getMultiaddrs()) {\n      print(`Swarm listening on ${ma.toString()}`)\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers,\n      maxInboundStreams: 1024,\n      maxOutboundStreams: 1024\n    })\n    await bitswap.start()\n\n    const blockstore = new BlockStorage(repo.blocks, bitswap)\n    repo.blocks = blockstore\n    // @ts-expect-error private field\n    repo.pins.blockstore = blockstore\n\n    return new Network(peerId, libp2p, bitswap, repo, blockstore)\n  }\n\n  /**\n   * @param {Network} network\n   */\n  static async stop (network) {\n    network.repo.blocks = network.blockstore.unwrap()\n    // @ts-expect-error private field\n    network.repo.pins.blockstore = network.blockstore.unwrap()\n\n    await network.bitswap.stop()\n    await network.libp2p.stop()\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toString()\n  /** @type {Multiaddr[]} */\n  const addrs = []\n  const swarm = (config.Addresses && config.Addresses.Swarm) || []\n  for (const addr of swarm) {\n    let ma = multiaddr(addr)\n\n    // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED')\n    }\n\n    // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n    const maId = ma.getPeerId()\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`)\n    }\n\n    addrs.push(ma)\n  }\n\n  return addrs\n}\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479\n"],"mappings":";;;;;AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,YAAY,QAAQ,qBAAqB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAaC,OAAO;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAAAA,QAAaC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAEC,UAAU,EAAE;IAAAC,eAAA,OAAAN,OAAA;IACtD,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;;EAEA;AACF;AACA;EAFEE,YAAA,CAAAP,OAAA;IAAAQ,GAAA;IAAAC,KAAA;MAAA,IAAAC,MAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAAC,QAAAC,IAAA;QAAA,IAAAd,MAAA,EAAAG,IAAA,EAAAY,KAAA,EAAAC,OAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAjB,MAAA,EAAAkB,SAAA,EAAAC,KAAA,EAAAC,EAAA,EAAAnB,OAAA,EAAAE,UAAA;QAAA,OAAAO,mBAAA,GAAAW,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAsB1B,MAAM,GAAAc,IAAA,CAANd,MAAM,EAAEG,IAAI,GAAAW,IAAA,CAAJX,IAAI,EAAEY,KAAK,GAAAD,IAAA,CAALC,KAAK,EAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO,EAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;cAAA,KAGrDd,IAAI,CAACwB,MAAM;gBAAAH,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACPvB,IAAI,CAACyB,IAAI,CAAC,CAAC;YAAA;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OAIEvB,IAAI,CAACe,MAAM,CAACW,MAAM,CAAC,CAAC;YAAA;cAAnCX,MAAM,GAAAM,QAAA,CAAAM,IAAA;cAAAN,QAAA,CAAAE,IAAA;cAAA,OAES/B,YAAY,CAAC;gBAChCsB,OAAO,EAAPA,OAAO;gBACPd,IAAI,EAAJA,IAAI;gBACJH,MAAM,EAANA,MAAM;gBACN+B,UAAU,EAAEC,SAAS,CAAChC,MAAM,EAAEkB,MAAM,CAAC;gBACrCA,MAAM,EAANA,MAAM;gBACNe,cAAc,EAAEC;cAClB,CAAC,CAAC;YAAA;cAPIjC,MAAM,GAAAuB,QAAA,CAAAM,IAAA;cAAAN,QAAA,CAAAE,IAAA;cAAA,OASNzB,MAAM,CAACkC,KAAK,CAAC,CAAC;YAAA;cAAAhB,SAAA,GAAAiB,0BAAA,CAEHnC,MAAM,CAACoC,aAAa,CAAC,CAAC;cAAA;gBAAvC,KAAAlB,SAAA,CAAAmB,CAAA,MAAAlB,KAAA,GAAAD,SAAA,CAAAoB,CAAA,IAAAC,IAAA,GAAyC;kBAA9BnB,EAAE,GAAAD,KAAA,CAAAZ,KAAA;kBACXO,KAAK,uBAAA0B,MAAA,CAAuBpB,EAAE,CAACqB,QAAQ,CAAC,CAAC,CAAE,CAAC;gBAC9C;cAAC,SAAAC,GAAA;gBAAAxB,SAAA,CAAAyB,CAAA,CAAAD,GAAA;cAAA;gBAAAxB,SAAA,CAAA0B,CAAA;cAAA;cAEK3C,OAAO,GAAGR,aAAa,CAACO,MAAM,EAAEE,IAAI,CAAC2C,MAAM,EAAE;gBACjDC,YAAY,EAAE,IAAI;gBAClBC,UAAU,EAAEhC,OAAO;gBACnBiC,iBAAiB,EAAE,IAAI;gBACvBC,kBAAkB,EAAE;cACtB,CAAC,CAAC;cAAA1B,QAAA,CAAAE,IAAA;cAAA,OACIxB,OAAO,CAACiC,KAAK,CAAC,CAAC;YAAA;cAEf/B,UAAU,GAAG,IAAIN,YAAY,CAACK,IAAI,CAAC2C,MAAM,EAAE5C,OAAO,CAAC;cACzDC,IAAI,CAAC2C,MAAM,GAAG1C,UAAU;cACxB;cACAD,IAAI,CAACgD,IAAI,CAAC/C,UAAU,GAAGA,UAAU;cAAA,OAAAoB,QAAA,CAAA4B,MAAA,WAE1B,IAAIrD,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAEC,UAAU,CAAC;YAAA;YAAA;cAAA,OAAAoB,QAAA,CAAA6B,IAAA;UAAA;QAAA,GAAAxC,OAAA;MAAA,CAC9D;MAAA,SAAAsB,MAAAmB,EAAA;QAAA,OAAA7C,MAAA,CAAA8C,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAArB,KAAA;IAAA;IAED;AACF;AACA;EAFE;IAAA5B,GAAA;IAAAC,KAAA;MAAA,IAAAiD,KAAA,GAAA/C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAA8C,SAAmBC,OAAO;QAAA,OAAAhD,mBAAA,GAAAW,IAAA,UAAAsC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApC,IAAA,GAAAoC,SAAA,CAAAnC,IAAA;YAAA;cACxBiC,OAAO,CAACxD,IAAI,CAAC2C,MAAM,GAAGa,OAAO,CAACvD,UAAU,CAAC0D,MAAM,CAAC,CAAC;cACjD;cACAH,OAAO,CAACxD,IAAI,CAACgD,IAAI,CAAC/C,UAAU,GAAGuD,OAAO,CAACvD,UAAU,CAAC0D,MAAM,CAAC,CAAC;cAAAD,SAAA,CAAAnC,IAAA;cAAA,OAEpDiC,OAAO,CAACzD,OAAO,CAACmD,IAAI,CAAC,CAAC;YAAA;cAAAQ,SAAA,CAAAnC,IAAA;cAAA,OACtBiC,OAAO,CAAC1D,MAAM,CAACoD,IAAI,CAAC,CAAC;YAAA;YAAA;cAAA,OAAAQ,SAAA,CAAAR,IAAA;UAAA;QAAA,GAAAK,QAAA;MAAA,CAC5B;MAAA,SAAAL,KAAAU,GAAA;QAAA,OAAAN,KAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,IAAA;IAAA;EAAA;EAAA,OAAAtD,OAAA;AAAA;;AAGH;AACA;AACA;AACA;AACA,IAAMiC,SAAS,GAAG,SAAZA,SAASA,CAAIhC,MAAM,EAAEkB,MAAM,EAAK;EACpC,IAAM8C,SAAS,GAAGhE,MAAM,CAAC0C,QAAQ,CAAC,CAAC;EACnC;EACA,IAAMuB,KAAK,GAAG,EAAE;EAChB,IAAMC,KAAK,GAAIhD,MAAM,CAACiD,SAAS,IAAIjD,MAAM,CAACiD,SAAS,CAACC,KAAK,IAAK,EAAE;EAAA,IAAAC,UAAA,GAAAjC,0BAAA,CAC7C8B,KAAK;IAAAI,MAAA;EAAA;IAAxB,KAAAD,UAAA,CAAA/B,CAAA,MAAAgC,MAAA,GAAAD,UAAA,CAAA9B,CAAA,IAAAC,IAAA,GAA0B;MAAA,IAAf+B,IAAI,GAAAD,MAAA,CAAA9D,KAAA;MACb,IAAIa,EAAE,GAAGzB,SAAS,CAAC2E,IAAI,CAAC;;MAExB;MACA;MACA,IAAIlD,EAAE,CAACmD,UAAU,CAAC,CAAC,CAACC,QAAQ,CAACC,yBAAyB,CAAC,EAAE;QACvD,MAAM7E,OAAO,CAAC,IAAI8E,KAAK,CAAC,mGAAmG,CAAC,EAAE,6CAA6C,CAAC;MAC9K;;MAEA;MACA;MACA;MACA,IAAMC,IAAI,GAAGvD,EAAE,CAACwD,SAAS,CAAC,CAAC;MAC3B,IAAID,IAAI,IAAIA,IAAI,KAAKZ,SAAS,EAAE;QAC9B3C,EAAE,GAAGA,EAAE,CAACyD,WAAW,SAAArC,MAAA,CAASuB,SAAS,CAAE,CAAC;MAC1C;MAEAC,KAAK,CAACc,IAAI,CAAC1D,EAAE,CAAC;IAChB;EAAC,SAAAsB,GAAA;IAAA0B,UAAA,CAAAzB,CAAA,CAAAD,GAAA;EAAA;IAAA0B,UAAA,CAAAxB,CAAA;EAAA;EAED,OAAOoB,KAAK;AACd,CAAC;AAED,IAAMS,yBAAyB,GAAG,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { logger } from '@libp2p/logger';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nvar log = logger('libp2p:dialer:auto-dialer');\nexport var AutoDialer = /*#__PURE__*/function () {\n  function AutoDialer(components, init) {\n    _classCallCheck(this, AutoDialer);\n    this.components = components;\n    this.enabled = init.enabled;\n    this.minConnections = init.minConnections;\n    this.dialTimeout = init.dialTimeout;\n  }\n  _createClass(AutoDialer, [{\n    key: \"handle\",\n    value: function handle(evt) {\n      var peer = evt.detail;\n      if (!this.enabled) {\n        return;\n      }\n      var connections = this.components.getConnectionManager().getConnections(peer.id);\n      // If auto dialing is on and we have no connection to the peer, check if we should dial\n      if (connections.length === 0) {\n        var _this$minConnections;\n        var minConnections = (_this$minConnections = this.minConnections) !== null && _this$minConnections !== void 0 ? _this$minConnections : 0;\n        var allConnections = this.components.getConnectionManager().getConnections();\n        if (minConnections > allConnections.length) {\n          log('auto-dialing discovered peer %p with timeout %d', peer.id, this.dialTimeout);\n          var controller = new TimeoutController(this.dialTimeout);\n          try {\n            // fails on node < 15.4\n            setMaxListeners === null || setMaxListeners === void 0 ? void 0 : setMaxListeners(Infinity, controller.signal);\n          } catch (_unused) {}\n          void this.components.getConnectionManager().openConnection(peer.id, {\n            signal: controller.signal\n          }).catch(function (err) {\n            log.error('could not connect to discovered peer %p with %o', peer.id, err);\n          }).finally(function () {\n            controller.clear();\n          });\n        }\n      }\n    }\n  }]);\n  return AutoDialer;\n}();","map":{"version":3,"names":["logger","TimeoutController","setMaxListeners","log","AutoDialer","components","init","_classCallCheck","enabled","minConnections","dialTimeout","_createClass","key","value","handle","evt","peer","detail","connections","getConnectionManager","getConnections","id","length","_this$minConnections","allConnections","controller","Infinity","signal","_unused","openConnection","catch","err","error","finally","clear"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/connection-manager/dialer/auto-dialer.ts"],"sourcesContent":["import type { PeerInfo } from '@libp2p/interface-peer-info'\nimport { logger } from '@libp2p/logger'\nimport type { Components } from '@libp2p/components'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { setMaxListeners } from 'events'\n\nconst log = logger('libp2p:dialer:auto-dialer')\n\nexport interface AutoDialerInit {\n  enabled: boolean\n  minConnections: number\n  dialTimeout: number\n}\n\nexport class AutoDialer {\n  private readonly components: Components\n  private readonly enabled: boolean\n  private readonly minConnections: number\n  private readonly dialTimeout: number\n\n  constructor (components: Components, init: AutoDialerInit) {\n    this.components = components\n    this.enabled = init.enabled\n    this.minConnections = init.minConnections\n    this.dialTimeout = init.dialTimeout\n  }\n\n  public handle (evt: CustomEvent<PeerInfo>) {\n    const { detail: peer } = evt\n\n    if (!this.enabled) {\n      return\n    }\n\n    const connections = this.components.getConnectionManager().getConnections(peer.id)\n\n    // If auto dialing is on and we have no connection to the peer, check if we should dial\n    if (connections.length === 0) {\n      const minConnections = this.minConnections ?? 0\n\n      const allConnections = this.components.getConnectionManager().getConnections()\n\n      if (minConnections > allConnections.length) {\n        log('auto-dialing discovered peer %p with timeout %d', peer.id, this.dialTimeout)\n\n        const controller = new TimeoutController(this.dialTimeout)\n\n        try {\n          // fails on node < 15.4\n          setMaxListeners?.(Infinity, controller.signal)\n        } catch {}\n\n        void this.components.getConnectionManager().openConnection(peer.id, {\n          signal: controller.signal\n        })\n          .catch(err => {\n            log.error('could not connect to discovered peer %p with %o', peer.id, err)\n          })\n          .finally(() => {\n            controller.clear()\n          })\n      }\n    }\n  }\n}\n"],"mappings":";;AACA,SAASA,MAAM,QAAQ,gBAAgB;AAEvC,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,eAAe,QAAQ,QAAQ;AAExC,IAAMC,GAAG,GAAGH,MAAM,CAAC,2BAA2B,CAAC;AAQ/C,WAAaI,UAAU;EAMrB,SAAAA,WAAaC,UAAsB,EAAEC,IAAoB;IAAAC,eAAA,OAAAH,UAAA;IACvD,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,OAAO,GAAGF,IAAI,CAACE,OAAO;IAC3B,IAAI,CAACC,cAAc,GAAGH,IAAI,CAACG,cAAc;IACzC,IAAI,CAACC,WAAW,GAAGJ,IAAI,CAACI,WAAW;EACrC;EAACC,YAAA,CAAAP,UAAA;IAAAQ,GAAA;IAAAC,KAAA,EAEM,SAAAC,OAAQC,GAA0B;MACvC,IAAgBC,IAAI,GAAKD,GAAG,CAApBE,MAAM;MAEd,IAAI,CAAC,IAAI,CAACT,OAAO,EAAE;QACjB;;MAGF,IAAMU,WAAW,GAAG,IAAI,CAACb,UAAU,CAACc,oBAAoB,EAAE,CAACC,cAAc,CAACJ,IAAI,CAACK,EAAE,CAAC;MAElF;MACA,IAAIH,WAAW,CAACI,MAAM,KAAK,CAAC,EAAE;QAAA,IAAAC,oBAAA;QAC5B,IAAMd,cAAc,IAAAc,oBAAA,GAAG,IAAI,CAACd,cAAc,cAAAc,oBAAA,cAAAA,oBAAA,GAAI,CAAC;QAE/C,IAAMC,cAAc,GAAG,IAAI,CAACnB,UAAU,CAACc,oBAAoB,EAAE,CAACC,cAAc,EAAE;QAE9E,IAAIX,cAAc,GAAGe,cAAc,CAACF,MAAM,EAAE;UAC1CnB,GAAG,CAAC,iDAAiD,EAAEa,IAAI,CAACK,EAAE,EAAE,IAAI,CAACX,WAAW,CAAC;UAEjF,IAAMe,UAAU,GAAG,IAAIxB,iBAAiB,CAAC,IAAI,CAACS,WAAW,CAAC;UAE1D,IAAI;YACF;YACAR,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAGwB,QAAQ,EAAED,UAAU,CAACE,MAAM,CAAC;WAC/C,CAAC,OAAAC,OAAA,EAAM;UAER,KAAK,IAAI,CAACvB,UAAU,CAACc,oBAAoB,EAAE,CAACU,cAAc,CAACb,IAAI,CAACK,EAAE,EAAE;YAClEM,MAAM,EAAEF,UAAU,CAACE;WACpB,CAAC,CACCG,KAAK,CAAC,UAAAC,GAAG,EAAG;YACX5B,GAAG,CAAC6B,KAAK,CAAC,iDAAiD,EAAEhB,IAAI,CAACK,EAAE,EAAEU,GAAG,CAAC;UAC5E,CAAC,CAAC,CACDE,OAAO,CAAC,YAAK;YACZR,UAAU,CAACS,KAAK,EAAE;UACpB,CAAC,CAAC;;;IAGV;EAAC;EAAA,OAAA9B,UAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
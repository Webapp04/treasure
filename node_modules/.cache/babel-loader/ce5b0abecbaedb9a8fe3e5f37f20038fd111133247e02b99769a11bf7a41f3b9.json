{"ast":null,"code":"import _defineProperty from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport errCode from 'err-code';\nimport { logger } from '@libp2p/logger';\nimport { MFS_MAX_CHUNK_SIZE } from '../../../utils.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nvar log = logger('ipfs:mfs:utils:to-async-iterator');\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator(content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = uint8ArrayFromString(content.toString());\n  }\n  if (content.length) {\n    log('Content was array-like');\n    return _defineProperty({}, Symbol.asyncIterator, /*#__PURE__*/_regeneratorRuntime().mark(function bufferContent() {\n      return _regeneratorRuntime().wrap(function bufferContent$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return content;\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, bufferContent);\n    }));\n  }\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob');\n    var index = 0;\n    var iterator = {\n      next: function next() {\n        if (index > content.size) {\n          return {\n            done: true\n          };\n        }\n        return new Promise(function (resolve, reject) {\n          var chunk = content.slice(index, MFS_MAX_CHUNK_SIZE);\n          index += MFS_MAX_CHUNK_SIZE;\n          var reader = new global.FileReader();\n\n          /**\n           * @param {{ error?: Error }} ev\n           */\n          var handleLoad = function handleLoad(ev) {\n            // @ts-expect-error No overload matches this call.\n            reader.removeEventListener('loadend', handleLoad, false);\n            if (ev.error) {\n              return reject(ev.error);\n            }\n            resolve({\n              done: false,\n              value: new Uint8Array( /** @type {ArrayBuffer} */reader.result)\n            });\n          };\n\n          // @ts-expect-error No overload matches this call.\n          reader.addEventListener('loadend', handleLoad);\n          reader.readAsArrayBuffer(chunk);\n        });\n      }\n    };\n    return _defineProperty({}, Symbol.asyncIterator, function () {\n      return iterator;\n    });\n  }\n  throw errCode(new Error(\"Don't know how to convert \".concat(content, \" into an async iterator\")), 'ERR_INVALID_PARAMS');\n}","map":{"version":3,"names":["errCode","logger","MFS_MAX_CHUNK_SIZE","fromString","uint8ArrayFromString","log","toAsyncIterator","content","Error","String","toString","length","_defineProperty","Symbol","asyncIterator","_regeneratorRuntime","mark","bufferContent","wrap","bufferContent$","_context","prev","next","stop","iterator","global","Blob","index","size","done","Promise","resolve","reject","chunk","slice","reader","FileReader","handleLoad","ev","removeEventListener","error","value","Uint8Array","result","addEventListener","readAsArrayBuffer","concat"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js"],"sourcesContent":["import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport {\n  MFS_MAX_CHUNK_SIZE\n} from '../../../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst log = logger('ipfs:mfs:utils:to-async-iterator')\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator (content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content.toString())\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n\n    let index = 0\n\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return {\n            done: true\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, MFS_MAX_CHUNK_SIZE)\n          index += MFS_MAX_CHUNK_SIZE\n\n          const reader = new global.FileReader()\n\n          /**\n           * @param {{ error?: Error }} ev\n           */\n          const handleLoad = (ev) => {\n            // @ts-expect-error No overload matches this call.\n            reader.removeEventListener('loadend', handleLoad, false)\n\n            if (ev.error) {\n              return reject(ev.error)\n            }\n\n            resolve({\n              done: false,\n              value: new Uint8Array(/** @type {ArrayBuffer} */(reader.result))\n            })\n          }\n\n          // @ts-expect-error No overload matches this call.\n          reader.addEventListener('loadend', handleLoad)\n          reader.readAsArrayBuffer(chunk)\n        })\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator\n      }\n    }\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as utils from '../utils.js';\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare';\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor';\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nexport var PeerDistanceList = /*#__PURE__*/function () {\n  function PeerDistanceList(originDhtKey, capacity) {\n    _classCallCheck(this, PeerDistanceList);\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n  _createClass(PeerDistanceList, [{\n    key: \"length\",\n    get: function get() {\n      return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n  }, {\n    key: \"peers\",\n    get: function get() {\n      return this.peerDistances.map(function (pd) {\n        return pd.peerId;\n      });\n    }\n    /**\n     * Add a peerId to the list.\n     */\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n        var dhtKey, el;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.peerDistances.find(function (pd) {\n                return pd.peerId.equals(peerId);\n              }) != null)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _context.next = 4;\n              return utils.convertPeerId(peerId);\n            case 4:\n              dhtKey = _context.sent;\n              el = {\n                peerId: peerId,\n                distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n              };\n              this.peerDistances.push(el);\n              this.peerDistances.sort(function (a, b) {\n                return uint8ArrayCompare(a.distance, b.distance);\n              });\n              this.peerDistances = this.peerDistances.slice(0, this.capacity);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n      return add;\n    }()\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     */\n  }, {\n    key: \"anyCloser\",\n    value: function () {\n      var _anyCloser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peerIds) {\n        var dhtKeys, furthestDistance, _iterator, _step, dhtKey, keyDistance;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(peerIds.length === 0)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 2:\n              if (!(this.length === 0)) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\", true);\n            case 4:\n              _context2.next = 6;\n              return Promise.all(peerIds.map(utils.convertPeerId));\n            case 6:\n              dhtKeys = _context2.sent;\n              furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n              _iterator = _createForOfIteratorHelper(dhtKeys);\n              _context2.prev = 9;\n              _iterator.s();\n            case 11:\n              if ((_step = _iterator.n()).done) {\n                _context2.next = 18;\n                break;\n              }\n              dhtKey = _step.value;\n              keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);\n              if (!(uint8ArrayCompare(keyDistance, furthestDistance) < 0)) {\n                _context2.next = 16;\n                break;\n              }\n              return _context2.abrupt(\"return\", true);\n            case 16:\n              _context2.next = 11;\n              break;\n            case 18:\n              _context2.next = 23;\n              break;\n            case 20:\n              _context2.prev = 20;\n              _context2.t0 = _context2[\"catch\"](9);\n              _iterator.e(_context2.t0);\n            case 23:\n              _context2.prev = 23;\n              _iterator.f();\n              return _context2.finish(23);\n            case 26:\n              return _context2.abrupt(\"return\", false);\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[9, 20, 23, 26]]);\n      }));\n      function anyCloser(_x2) {\n        return _anyCloser.apply(this, arguments);\n      }\n      return anyCloser;\n    }()\n  }]);\n  return PeerDistanceList;\n}();","map":{"version":3,"names":["utils","compare","uint8ArrayCompare","xor","uint8ArrayXor","PeerDistanceList","originDhtKey","capacity","_classCallCheck","peerDistances","_createClass","key","get","length","map","pd","peerId","value","_add","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dhtKey","el","wrap","_callee$","_context","prev","next","find","equals","abrupt","convertPeerId","sent","distance","push","sort","a","b","slice","stop","add","_x","apply","arguments","_anyCloser","_callee2","peerIds","dhtKeys","furthestDistance","_iterator","_step","keyDistance","_callee2$","_context2","Promise","all","_createForOfIteratorHelper","s","n","done","t0","e","f","finish","anyCloser","_x2"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/peer-list/peer-distance-list.ts"],"sourcesContent":["import * as utils from '../utils.js'\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare'\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\ninterface PeerDistance {\n  peerId: PeerId\n  distance: Uint8Array\n}\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nexport class PeerDistanceList {\n  /**\n   * The DHT key from which distance is calculated\n   */\n  private readonly originDhtKey: Uint8Array\n\n  /**\n   * The maximum size of the list\n   */\n  private readonly capacity: number\n\n  private peerDistances: PeerDistance[]\n\n  constructor (originDhtKey: Uint8Array, capacity: number) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n  get peers () {\n    return this.peerDistances.map(pd => pd.peerId)\n  }\n\n  /**\n   * Add a peerId to the list.\n   */\n  async add (peerId: PeerId) {\n    if (this.peerDistances.find(pd => pd.peerId.equals(peerId)) != null) {\n      return\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId)\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    }\n\n    this.peerDistances.push(el)\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance))\n    this.peerDistances = this.peerDistances.slice(0, this.capacity)\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   */\n  async anyCloser (peerIds: PeerId[]) {\n    if (peerIds.length === 0) {\n      return false\n    }\n\n    if (this.length === 0) {\n      return true\n    }\n\n    const dhtKeys = await Promise.all(peerIds.map(utils.convertPeerId))\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey)\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { configure } from './lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { abortSignal } from './lib/abort-signal.js';\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport var createAddAll = configure(function (api) {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator(function (source) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var controller, signal, _yield$_awaitAsyncGen, headers, body, total, parts, _ref, _ref2, progressFn, onUploadProgress, res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 4;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n            case 4:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              total = _yield$_awaitAsyncGen.total;\n              parts = _yield$_awaitAsyncGen.parts;\n              // In browser response body only starts streaming once upload is\n              // complete, at which point all the progress updates are invalid. If\n              // length of the content is computable we can interpret progress from\n              // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n              // in which case we disable progress updates to be written out.\n              _ref = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [undefined, undefined], _ref2 = _slicedToArray(_ref, 2), progressFn = _ref2[0], onUploadProgress = _ref2[1];\n              _context.next = 12;\n              return _awaitAsyncGenerator(api.post('add', {\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  'stream-channels': true\n                }, options), {}, {\n                  progress: Boolean(progressFn)\n                })),\n                onUploadProgress: onUploadProgress,\n                signal: signal,\n                headers: headers,\n                body: body\n              }));\n            case 12:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 15;\n              _iterator = _asyncIterator(res.ndjson());\n            case 17:\n              _context.next = 19;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 19:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 31;\n                break;\n              }\n              file = _step.value;\n              file = objectToCamel(file);\n              if (!(file.hash !== undefined)) {\n                _context.next = 27;\n                break;\n              }\n              _context.next = 25;\n              return toCoreInterface(file);\n            case 25:\n              _context.next = 28;\n              break;\n            case 27:\n              if (progressFn) {\n                progressFn(file.bytes || 0, file.name);\n              }\n            case 28:\n              _iteratorAbruptCompletion = false;\n              _context.next = 17;\n              break;\n            case 31:\n              _context.next = 37;\n              break;\n            case 33:\n              _context.prev = 33;\n              _context.t0 = _context[\"catch\"](15);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 37:\n              _context.prev = 37;\n              _context.prev = 38;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 42;\n                break;\n              }\n              _context.next = 42;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 42:\n              _context.prev = 42;\n              if (!_didIteratorError) {\n                _context.next = 45;\n                break;\n              }\n              throw _iteratorError;\n            case 45:\n              return _context.finish(42);\n            case 46:\n              return _context.finish(37);\n            case 47:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[15, 33, 37, 47], [38,, 42, 46]]);\n      })();\n    });\n    return _addAll.apply(this, arguments);\n  }\n  return addAll;\n});\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nvar createProgressHandler = function createProgressHandler(total, parts, progress) {\n  return parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n};\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nvar createOnUploadProgress = function createOnUploadProgress(size, parts, progress) {\n  var index = 0;\n  var count = parts.length;\n  return function (_ref3) {\n    var loaded = _ref3.loaded,\n      total = _ref3.total;\n    // Derive position from the current progress.\n    var position = Math.floor(loaded / total * size);\n    while (index < count) {\n      var _parts$index = parts[index],\n        start = _parts$index.start,\n        end = _parts$index.end,\n        name = _parts$index.name;\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name);\n        break;\n        // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface(_ref4) {\n  var name = _ref4.name,\n    hash = _ref4.hash,\n    size = _ref4.size,\n    mode = _ref4.mode,\n    mtime = _ref4.mtime,\n    mtimeNsecs = _ref4.mtimeNsecs;\n  /** @type {AddResult} */\n  var output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n  return output;\n}","map":{"version":3,"names":["CID","objectToCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","createAddAll","api","addAll","_x","_addAll","apply","arguments","_wrapAsyncGenerator","source","options","length","undefined","_regeneratorRuntime","mark","_callee","controller","signal","_yield$_awaitAsyncGen","headers","body","total","parts","_ref","_ref2","progressFn","onUploadProgress","res","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","file","wrap","_callee$","_context","prev","next","AbortController","_awaitAsyncGenerator","sent","progress","createProgressHandler","_slicedToArray","post","searchParams","_objectSpread","Boolean","_asyncIterator","ndjson","done","value","hash","toCoreInterface","bytes","name","t0","return","finish","stop","createOnUploadProgress","size","index","count","_ref3","loaded","position","Math","floor","_parts$index","start","end","_ref4","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
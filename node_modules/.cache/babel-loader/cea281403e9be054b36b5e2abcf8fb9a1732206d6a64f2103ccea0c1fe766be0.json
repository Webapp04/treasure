{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CID } from 'multiformats/cid';\nimport { bases } from 'multiformats/basics';\nimport { base58btc } from 'multiformats/bases/base58';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport errcode from 'err-code';\nimport { symbol } from '@libp2p/interface-peer-id';\nvar inspect = Symbol.for('nodejs.util.inspect.custom');\nvar baseDecoder = Object.values(bases).map(function (codec) {\n  return codec.decoder;\n})\n// @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n.reduce(function (acc, curr) {\n  return acc.or(curr);\n}, bases.identity.decoder);\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nvar LIBP2P_KEY_CODE = 0x72;\nvar MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;\nvar MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37;\nvar PeerIdImpl = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function PeerIdImpl(init) {\n    _classCallCheck(this, PeerIdImpl);\n    this.type = init.type;\n    this.multihash = init.multihash;\n    this.privateKey = init.privateKey;\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    });\n  }\n  _createClass(PeerIdImpl, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"PeerId(\".concat(this.toString(), \")\");\n    }\n  }, {\n    key: symbol,\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.string == null) {\n        this.string = base58btc.encode(this.multihash.bytes).slice(1);\n      }\n      return this.string;\n    }\n    // return self-describing String representation\n    // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  }, {\n    key: \"toCID\",\n    value: function toCID() {\n      return CID.createV1(LIBP2P_KEY_CODE, this.multihash);\n    }\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      return this.multihash.bytes;\n    }\n    /**\n     * Returns Multiaddr as a JSON encoded object\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * Checks the equality of `this` peer against a given PeerId\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(id) {\n      var _id$multihash;\n      if (id instanceof Uint8Array) {\n        return uint8ArrayEquals(this.multihash.bytes, id);\n      } else if (typeof id === 'string') {\n        return peerIdFromString(id).equals(this);\n      } else if ((id === null || id === void 0 || (_id$multihash = id.multihash) === null || _id$multihash === void 0 ? void 0 : _id$multihash.bytes) != null) {\n        return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes);\n      } else {\n        throw new Error('not valid Id');\n      }\n    }\n    /**\n     * Returns PeerId as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { peerIdFromString } from '@libp2p/peer-id'\n     *\n     * console.info(peerIdFromString('QmFoo'))\n     * // 'PeerId(QmFoo)'\n     * ```\n     */\n  }, {\n    key: inspect,\n    value: function value() {\n      return \"PeerId(\".concat(this.toString(), \")\");\n    }\n  }]);\n  return PeerIdImpl;\n}(Symbol.toStringTag);\nvar RSAPeerIdImpl = /*#__PURE__*/function (_PeerIdImpl) {\n  _inherits(RSAPeerIdImpl, _PeerIdImpl);\n  var _super = _createSuper(RSAPeerIdImpl);\n  function RSAPeerIdImpl(init) {\n    var _this;\n    _classCallCheck(this, RSAPeerIdImpl);\n    _this = _super.call(this, _objectSpread(_objectSpread({}, init), {}, {\n      type: 'RSA'\n    }));\n    _this.type = 'RSA';\n    _this.publicKey = init.publicKey;\n    return _this;\n  }\n  return _createClass(RSAPeerIdImpl);\n}(PeerIdImpl);\nvar Ed25519PeerIdImpl = /*#__PURE__*/function (_PeerIdImpl2) {\n  _inherits(Ed25519PeerIdImpl, _PeerIdImpl2);\n  var _super2 = _createSuper(Ed25519PeerIdImpl);\n  function Ed25519PeerIdImpl(init) {\n    var _this2;\n    _classCallCheck(this, Ed25519PeerIdImpl);\n    _this2 = _super2.call(this, _objectSpread(_objectSpread({}, init), {}, {\n      type: 'Ed25519'\n    }));\n    _this2.type = 'Ed25519';\n    _this2.publicKey = init.multihash.digest;\n    return _this2;\n  }\n  return _createClass(Ed25519PeerIdImpl);\n}(PeerIdImpl);\nvar Secp256k1PeerIdImpl = /*#__PURE__*/function (_PeerIdImpl3) {\n  _inherits(Secp256k1PeerIdImpl, _PeerIdImpl3);\n  var _super3 = _createSuper(Secp256k1PeerIdImpl);\n  function Secp256k1PeerIdImpl(init) {\n    var _this3;\n    _classCallCheck(this, Secp256k1PeerIdImpl);\n    _this3 = _super3.call(this, _objectSpread(_objectSpread({}, init), {}, {\n      type: 'secp256k1'\n    }));\n    _this3.type = 'secp256k1';\n    _this3.publicKey = init.multihash.digest;\n    return _this3;\n  }\n  return _createClass(Secp256k1PeerIdImpl);\n}(PeerIdImpl);\nexport function createPeerId(init) {\n  if (init.type === 'RSA') {\n    return new RSAPeerIdImpl(init);\n  }\n  if (init.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(init);\n  }\n  if (init.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(init);\n  }\n  throw errcode(new Error('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"'), 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromPeerId(other) {\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other);\n  }\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other);\n  }\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other);\n  }\n  throw errcode(new Error('Not a PeerId'), 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromString(str, decoder) {\n  var _decoder;\n  decoder = (_decoder = decoder) !== null && _decoder !== void 0 ? _decoder : baseDecoder;\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    var multihash = Digest.decode(base58btc.decode(\"z\".concat(str)));\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({\n        multihash: multihash\n      });\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({\n        multihash: multihash\n      });\n    } else {\n      return new RSAPeerIdImpl({\n        multihash: multihash\n      });\n    }\n  }\n  return peerIdFromBytes(baseDecoder.decode(str));\n}\nexport function peerIdFromBytes(buf) {\n  try {\n    var multihash = Digest.decode(buf);\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({\n          multihash: multihash\n        });\n      } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({\n          multihash: multihash\n        });\n      }\n    }\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({\n        multihash: multihash\n      });\n    }\n  } catch (_unused) {\n    return peerIdFromCID(CID.decode(buf));\n  }\n  throw new Error('Supplied PeerID CID is invalid');\n}\nexport function peerIdFromCID(cid) {\n  if (cid == null || cid.multihash == null || cid.version == null || cid.version === 1 && cid.code !== LIBP2P_KEY_CODE) {\n    throw new Error('Supplied PeerID CID is invalid');\n  }\n  var multihash = cid.multihash;\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({\n      multihash: cid.multihash\n    });\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({\n        multihash: cid.multihash\n      });\n    } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({\n        multihash: cid.multihash\n      });\n    }\n  }\n  throw new Error('Supplied PeerID CID is invalid');\n}\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport function peerIdFromKeys(_x, _x2) {\n  return _peerIdFromKeys.apply(this, arguments);\n}\nfunction _peerIdFromKeys() {\n  _peerIdFromKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(publicKey, privateKey) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", new Ed25519PeerIdImpl({\n            multihash: Digest.create(identity.code, publicKey),\n            privateKey: privateKey\n          }));\n        case 2:\n          if (!(publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH)) {\n            _context.next = 4;\n            break;\n          }\n          return _context.abrupt(\"return\", new Secp256k1PeerIdImpl({\n            multihash: Digest.create(identity.code, publicKey),\n            privateKey: privateKey\n          }));\n        case 4:\n          _context.t0 = RSAPeerIdImpl;\n          _context.next = 7;\n          return sha256.digest(publicKey);\n        case 7:\n          _context.t1 = _context.sent;\n          _context.t2 = publicKey;\n          _context.t3 = privateKey;\n          _context.t4 = {\n            multihash: _context.t1,\n            publicKey: _context.t2,\n            privateKey: _context.t3\n          };\n          return _context.abrupt(\"return\", new _context.t0(_context.t4));\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _peerIdFromKeys.apply(this, arguments);\n}","map":{"version":3,"names":["CID","bases","base58btc","Digest","identity","equals","uint8ArrayEquals","sha256","errcode","symbol","inspect","Symbol","for","baseDecoder","Object","values","map","codec","decoder","reduce","acc","curr","or","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","PeerIdImpl","_Symbol$toStringTag","init","_classCallCheck","type","multihash","privateKey","defineProperty","enumerable","writable","_createClass","key","get","concat","toString","value","string","encode","bytes","slice","toCID","createV1","toBytes","toJSON","id","_id$multihash","Uint8Array","peerIdFromString","Error","toStringTag","RSAPeerIdImpl","_PeerIdImpl","_inherits","_super","_createSuper","_this","call","_objectSpread","publicKey","Ed25519PeerIdImpl","_PeerIdImpl2","_super2","_this2","digest","Secp256k1PeerIdImpl","_PeerIdImpl3","_super3","_this3","createPeerId","peerIdFromPeerId","other","str","_decoder","charAt","decode","startsWith","peerIdFromBytes","buf","code","length","_unused","peerIdFromCID","cid","version","peerIdFromKeys","_x","_x2","_peerIdFromKeys","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","create","t0","t1","sent","t2","t3","t4","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/peer-id/src/index.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { bases } from 'multiformats/basics'\nimport { base58btc } from 'multiformats/bases/base58'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { identity } from 'multiformats/hashes/identity'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport errcode from 'err-code'\nimport { Ed25519PeerId, PeerIdType, RSAPeerId, Secp256k1PeerId, symbol } from '@libp2p/interface-peer-id'\nimport type { MultibaseDecoder } from 'multiformats/bases/interface'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst baseDecoder = Object\n  .values(bases)\n  .map(codec => codec.decoder)\n  // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n  .reduce((acc, curr) => acc.or(curr), bases.identity.decoder)\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72\n\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37\n\ninterface PeerIdInit {\n  type: PeerIdType\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface RSAPeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n  publicKey?: Uint8Array\n}\n\ninterface Ed25519PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface Secp256k1PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\nclass PeerIdImpl {\n  public type: PeerIdType\n  public readonly multihash: MultihashDigest\n  public readonly privateKey?: Uint8Array\n  public readonly publicKey?: Uint8Array\n  private string?: string\n\n  constructor (init: PeerIdInit) {\n    this.type = init.type\n    this.multihash = init.multihash\n    this.privateKey = init.privateKey\n\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return `PeerId(${this.toString()})`\n  }\n\n  get [symbol] () {\n    return true\n  }\n\n  toString () {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1)\n    }\n\n    return this.string\n  }\n\n  // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  toCID () {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash)\n  }\n\n  toBytes () {\n    return this.multihash.bytes\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n  equals (id: PeerId | Uint8Array | string): boolean {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id)\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this as PeerId)\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes)\n    } else {\n      throw new Error('not valid Id')\n    }\n  }\n\n  /**\n   * Returns PeerId as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { peerIdFromString } from '@libp2p/peer-id'\n   *\n   * console.info(peerIdFromString('QmFoo'))\n   * // 'PeerId(QmFoo)'\n   * ```\n   */\n  [inspect] (): string {\n    return `PeerId(${this.toString()})`\n  }\n}\n\nclass RSAPeerIdImpl extends PeerIdImpl implements RSAPeerId {\n  public readonly type = 'RSA'\n  public readonly publicKey?: Uint8Array\n\n  constructor (init: RSAPeerIdInit) {\n    super({ ...init, type: 'RSA' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\nclass Ed25519PeerIdImpl extends PeerIdImpl implements Ed25519PeerId {\n  public readonly type = 'Ed25519'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Ed25519PeerIdInit) {\n    super({ ...init, type: 'Ed25519' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nclass Secp256k1PeerIdImpl extends PeerIdImpl implements Secp256k1PeerId {\n  public readonly type = 'secp256k1'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Secp256k1PeerIdInit) {\n    super({ ...init, type: 'secp256k1' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nexport function createPeerId (init: PeerIdInit): PeerId {\n  if (init.type === 'RSA') {\n    return new RSAPeerIdImpl(init)\n  }\n\n  if (init.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(init)\n  }\n\n  if (init.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(init)\n  }\n\n  throw errcode(new Error('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"'), 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromPeerId (other: any): PeerId {\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other)\n  }\n\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other)\n  }\n\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other)\n  }\n\n  throw errcode(new Error('Not a PeerId'), 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromString (str: string, decoder?: MultibaseDecoder<any>): PeerId {\n  decoder = decoder ?? baseDecoder\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`))\n\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({ multihash })\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({ multihash })\n    } else {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  }\n\n  return peerIdFromBytes(baseDecoder.decode(str))\n}\n\nexport function peerIdFromBytes (buf: Uint8Array) {\n  try {\n    const multihash = Digest.decode(buf)\n\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash })\n      } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash })\n      }\n    }\n\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf))\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\nexport function peerIdFromCID (cid: CID): PeerId {\n  if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n    throw new Error('Supplied PeerID CID is invalid')\n  }\n\n  const multihash = cid.multihash\n\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({ multihash: cid.multihash })\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({ multihash: cid.multihash })\n    } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({ multihash: cid.multihash })\n    }\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys (publicKey: Uint8Array, privateKey?: Uint8Array): Promise<PeerId> {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey })\n}\n"],"mappings":";;;;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,SAAS,QAAQ,2BAA2B;AACrD,OAAO,KAAKC,MAAM,MAAM,4BAA4B;AACpD,SAASC,QAAQ,QAAQ,8BAA8B;AACvD,SAASC,MAAM,IAAIC,gBAAgB,QAAQ,oBAAoB;AAC/D,SAASC,MAAM,QAAQ,0BAA0B;AACjD,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAAgEC,MAAM,QAAQ,2BAA2B;AAKzG,IAAMC,OAAO,GAAGC,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC;AAExD,IAAMC,WAAW,GAAGC,MAAM,CACvBC,MAAM,CAACd,KAAK,CAAC,CACbe,GAAG,CAAC,UAAAC,KAAK;EAAA,OAAIA,KAAK,CAACC,OAAO;AAAA;AAC3B;AAAA,CACCC,MAAM,CAAC,UAACC,GAAG,EAAEC,IAAI;EAAA,OAAKD,GAAG,CAACE,EAAE,CAACD,IAAI,CAAC;AAAA,GAAEpB,KAAK,CAACG,QAAQ,CAACc,OAAO,CAAC;AAE9D;AACA,IAAMK,eAAe,GAAG,IAAI;AAE5B,IAAMC,qCAAqC,GAAG,EAAE;AAChD,IAAMC,sCAAsC,GAAG,EAAE;AAAA,IAwB3CC,UAAU,0BAAAC,mBAAA;EAOd,SAAAD,WAAaE,IAAgB;IAAAC,eAAA,OAAAH,UAAA;IAC3B,IAAI,CAACI,IAAI,GAAGF,IAAI,CAACE,IAAI;IACrB,IAAI,CAACC,SAAS,GAAGH,IAAI,CAACG,SAAS;IAC/B,IAAI,CAACC,UAAU,GAAGJ,IAAI,CAACI,UAAU;IAEjC;IACAlB,MAAM,CAACmB,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MACpCC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE;KACX,CAAC;EACJ;EAACC,YAAA,CAAAV,UAAA;IAAAW,GAAA,EAAAV,mBAAA;IAAAW,GAAA,EAED,SAAAA,IAAA,EAAwB;MACtB,iBAAAC,MAAA,CAAiB,IAAI,CAACC,QAAQ,EAAE;IAClC;EAAC;IAAAH,GAAA,EAEI5B,MAAM;IAAA6B,GAAA,EAAX,SAAAA,IAAA,EAAY;MACV,OAAO,IAAI;IACb;EAAC;IAAAD,GAAA;IAAAI,KAAA,EAED,SAAAD,SAAA,EAAQ;MACN,IAAI,IAAI,CAACE,MAAM,IAAI,IAAI,EAAE;QACvB,IAAI,CAACA,MAAM,GAAGxC,SAAS,CAACyC,MAAM,CAAC,IAAI,CAACZ,SAAS,CAACa,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;;MAG/D,OAAO,IAAI,CAACH,MAAM;IACpB;IAEA;IACA;EAAA;IAAAL,GAAA;IAAAI,KAAA,EACA,SAAAK,MAAA,EAAK;MACH,OAAO9C,GAAG,CAAC+C,QAAQ,CAACxB,eAAe,EAAE,IAAI,CAACQ,SAAS,CAAC;IACtD;EAAC;IAAAM,GAAA;IAAAI,KAAA,EAED,SAAAO,QAAA,EAAO;MACL,OAAO,IAAI,CAACjB,SAAS,CAACa,KAAK;IAC7B;IAEA;;;EAAA;IAAAP,GAAA;IAAAI,KAAA,EAGA,SAAAQ,OAAA,EAAM;MACJ,OAAO,IAAI,CAACT,QAAQ,EAAE;IACxB;IAEA;;;EAAA;IAAAH,GAAA;IAAAI,KAAA,EAGA,SAAApC,OAAQ6C,EAAgC;MAAA,IAAAC,aAAA;MACtC,IAAID,EAAE,YAAYE,UAAU,EAAE;QAC5B,OAAO9C,gBAAgB,CAAC,IAAI,CAACyB,SAAS,CAACa,KAAK,EAAEM,EAAE,CAAC;OAClD,MAAM,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;QACjC,OAAOG,gBAAgB,CAACH,EAAE,CAAC,CAAC7C,MAAM,CAAC,IAAc,CAAC;OACnD,MAAM,IAAI,CAAA6C,EAAE,aAAFA,EAAE,gBAAAC,aAAA,GAAFD,EAAE,CAAEnB,SAAS,cAAAoB,aAAA,uBAAbA,aAAA,CAAeP,KAAK,KAAI,IAAI,EAAE;QACvC,OAAOtC,gBAAgB,CAAC,IAAI,CAACyB,SAAS,CAACa,KAAK,EAAEM,EAAE,CAACnB,SAAS,CAACa,KAAK,CAAC;OAClE,MAAM;QACL,MAAM,IAAIU,KAAK,CAAC,cAAc,CAAC;;IAEnC;IAEA;;;;;;;;;;;;EAAA;IAAAjB,GAAA,EAYC3B,OAAO;IAAA+B,KAAA,EAAR,SAAAA,MAAA,EAAS;MACP,iBAAAF,MAAA,CAAiB,IAAI,CAACC,QAAQ,EAAE;IAClC;EAAC;EAAA,OAAAd,UAAA;AAAA,EA9DIf,MAAM,CAAC4C,WAAW;AAAA,IAiEnBC,aAAc,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,aAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,aAAA;EAIlB,SAAAA,cAAa5B,IAAmB;IAAA,IAAAiC,KAAA;IAAAhC,eAAA,OAAA2B,aAAA;IAC9BK,KAAA,GAAAF,MAAA,CAAAG,IAAA,OAAAC,aAAA,CAAAA,aAAA,KAAWnC,IAAI;MAAEE,IAAI,EAAE;IAAK;IAJd+B,KAAA,CAAA/B,IAAI,GAAG,KAAK;IAM1B+B,KAAA,CAAKG,SAAS,GAAGpC,IAAI,CAACoC,SAAS;IAAA,OAAAH,KAAA;EACjC;EAAC,OAAAzB,YAAA,CAAAoB,aAAA;AAAA,EARyB9B,UAAU;AAAA,IAWhCuC,iBAAkB,0BAAAC,YAAA;EAAAR,SAAA,CAAAO,iBAAA,EAAAC,YAAA;EAAA,IAAAC,OAAA,GAAAP,YAAA,CAAAK,iBAAA;EAItB,SAAAA,kBAAarC,IAAuB;IAAA,IAAAwC,MAAA;IAAAvC,eAAA,OAAAoC,iBAAA;IAClCG,MAAA,GAAAD,OAAA,CAAAL,IAAA,OAAAC,aAAA,CAAAA,aAAA,KAAWnC,IAAI;MAAEE,IAAI,EAAE;IAAS;IAJlBsC,MAAA,CAAAtC,IAAI,GAAG,SAAS;IAM9BsC,MAAA,CAAKJ,SAAS,GAAGpC,IAAI,CAACG,SAAS,CAACsC,MAAM;IAAA,OAAAD,MAAA;EACxC;EAAC,OAAAhC,YAAA,CAAA6B,iBAAA;AAAA,EAR6BvC,UAAU;AAAA,IAWpC4C,mBAAoB,0BAAAC,YAAA;EAAAb,SAAA,CAAAY,mBAAA,EAAAC,YAAA;EAAA,IAAAC,OAAA,GAAAZ,YAAA,CAAAU,mBAAA;EAIxB,SAAAA,oBAAa1C,IAAyB;IAAA,IAAA6C,MAAA;IAAA5C,eAAA,OAAAyC,mBAAA;IACpCG,MAAA,GAAAD,OAAA,CAAAV,IAAA,OAAAC,aAAA,CAAAA,aAAA,KAAWnC,IAAI;MAAEE,IAAI,EAAE;IAAW;IAJpB2C,MAAA,CAAA3C,IAAI,GAAG,WAAW;IAMhC2C,MAAA,CAAKT,SAAS,GAAGpC,IAAI,CAACG,SAAS,CAACsC,MAAM;IAAA,OAAAI,MAAA;EACxC;EAAC,OAAArC,YAAA,CAAAkC,mBAAA;AAAA,EAR+B5C,UAAU;AAW5C,OAAM,SAAUgD,YAAYA,CAAE9C,IAAgB;EAC5C,IAAIA,IAAI,CAACE,IAAI,KAAK,KAAK,EAAE;IACvB,OAAO,IAAI0B,aAAa,CAAC5B,IAAI,CAAC;;EAGhC,IAAIA,IAAI,CAACE,IAAI,KAAK,SAAS,EAAE;IAC3B,OAAO,IAAImC,iBAAiB,CAACrC,IAAI,CAAC;;EAGpC,IAAIA,IAAI,CAACE,IAAI,KAAK,WAAW,EAAE;IAC7B,OAAO,IAAIwC,mBAAmB,CAAC1C,IAAI,CAAC;;EAGtC,MAAMpB,OAAO,CAAC,IAAI8C,KAAK,CAAC,8CAA8C,CAAC,EAAE,wBAAwB,CAAC;AACpG;AAEA,OAAM,SAAUqB,gBAAgBA,CAAEC,KAAU;EAC1C,IAAIA,KAAK,CAAC9C,IAAI,KAAK,KAAK,EAAE;IACxB,OAAO,IAAI0B,aAAa,CAACoB,KAAK,CAAC;;EAGjC,IAAIA,KAAK,CAAC9C,IAAI,KAAK,SAAS,EAAE;IAC5B,OAAO,IAAImC,iBAAiB,CAACW,KAAK,CAAC;;EAGrC,IAAIA,KAAK,CAAC9C,IAAI,KAAK,WAAW,EAAE;IAC9B,OAAO,IAAIwC,mBAAmB,CAACM,KAAK,CAAC;;EAGvC,MAAMpE,OAAO,CAAC,IAAI8C,KAAK,CAAC,cAAc,CAAC,EAAE,wBAAwB,CAAC;AACpE;AAEA,OAAM,SAAUD,gBAAgBA,CAAEwB,GAAW,EAAE3D,OAA+B;EAAA,IAAA4D,QAAA;EAC5E5D,OAAO,IAAA4D,QAAA,GAAG5D,OAAO,cAAA4D,QAAA,cAAAA,QAAA,GAAIjE,WAAW;EAEhC,IAAIgE,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIF,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAClD;IACA;IACA,IAAMhD,SAAS,GAAG5B,MAAM,CAAC6E,MAAM,CAAC9E,SAAS,CAAC8E,MAAM,KAAAzC,MAAA,CAAKsC,GAAG,CAAE,CAAC,CAAC;IAE5D,IAAIA,GAAG,CAACI,UAAU,CAAC,KAAK,CAAC,EAAE;MACzB,OAAO,IAAIhB,iBAAiB,CAAC;QAAElC,SAAS,EAATA;MAAS,CAAE,CAAC;KAC5C,MAAM,IAAI8C,GAAG,CAACI,UAAU,CAAC,KAAK,CAAC,EAAE;MAChC,OAAO,IAAIX,mBAAmB,CAAC;QAAEvC,SAAS,EAATA;MAAS,CAAE,CAAC;KAC9C,MAAM;MACL,OAAO,IAAIyB,aAAa,CAAC;QAAEzB,SAAS,EAATA;MAAS,CAAE,CAAC;;;EAI3C,OAAOmD,eAAe,CAACrE,WAAW,CAACmE,MAAM,CAACH,GAAG,CAAC,CAAC;AACjD;AAEA,OAAM,SAAUK,eAAeA,CAAEC,GAAe;EAC9C,IAAI;IACF,IAAMpD,SAAS,GAAG5B,MAAM,CAAC6E,MAAM,CAACG,GAAG,CAAC;IAEpC,IAAIpD,SAAS,CAACqD,IAAI,KAAKhF,QAAQ,CAACgF,IAAI,EAAE;MACpC,IAAIrD,SAAS,CAACsC,MAAM,CAACgB,MAAM,KAAK7D,qCAAqC,EAAE;QACrE,OAAO,IAAIyC,iBAAiB,CAAC;UAAElC,SAAS,EAATA;QAAS,CAAE,CAAC;OAC5C,MAAM,IAAIA,SAAS,CAACsC,MAAM,CAACgB,MAAM,KAAK5D,sCAAsC,EAAE;QAC7E,OAAO,IAAI6C,mBAAmB,CAAC;UAAEvC,SAAS,EAATA;QAAS,CAAE,CAAC;;;IAIjD,IAAIA,SAAS,CAACqD,IAAI,KAAK7E,MAAM,CAAC6E,IAAI,EAAE;MAClC,OAAO,IAAI5B,aAAa,CAAC;QAAEzB,SAAS,EAATA;MAAS,CAAE,CAAC;;GAE1C,CAAC,OAAAuD,OAAA,EAAM;IACN,OAAOC,aAAa,CAACvF,GAAG,CAACgF,MAAM,CAACG,GAAG,CAAC,CAAC;;EAGvC,MAAM,IAAI7B,KAAK,CAAC,gCAAgC,CAAC;AACnD;AAEA,OAAM,SAAUiC,aAAaA,CAAEC,GAAQ;EACrC,IAAIA,GAAG,IAAI,IAAI,IAAIA,GAAG,CAACzD,SAAS,IAAI,IAAI,IAAIyD,GAAG,CAACC,OAAO,IAAI,IAAI,IAAKD,GAAG,CAACC,OAAO,KAAK,CAAC,IAAID,GAAG,CAACJ,IAAI,KAAK7D,eAAgB,EAAE;IACtH,MAAM,IAAI+B,KAAK,CAAC,gCAAgC,CAAC;;EAGnD,IAAMvB,SAAS,GAAGyD,GAAG,CAACzD,SAAS;EAE/B,IAAIA,SAAS,CAACqD,IAAI,KAAK7E,MAAM,CAAC6E,IAAI,EAAE;IAClC,OAAO,IAAI5B,aAAa,CAAC;MAAEzB,SAAS,EAAEyD,GAAG,CAACzD;IAAS,CAAE,CAAC;GACvD,MAAM,IAAIA,SAAS,CAACqD,IAAI,KAAKhF,QAAQ,CAACgF,IAAI,EAAE;IAC3C,IAAIrD,SAAS,CAACsC,MAAM,CAACgB,MAAM,KAAK7D,qCAAqC,EAAE;MACrE,OAAO,IAAIyC,iBAAiB,CAAC;QAAElC,SAAS,EAAEyD,GAAG,CAACzD;MAAS,CAAE,CAAC;KAC3D,MAAM,IAAIA,SAAS,CAACsC,MAAM,CAACgB,MAAM,KAAK5D,sCAAsC,EAAE;MAC7E,OAAO,IAAI6C,mBAAmB,CAAC;QAAEvC,SAAS,EAAEyD,GAAG,CAACzD;MAAS,CAAE,CAAC;;;EAIhE,MAAM,IAAIuB,KAAK,CAAC,gCAAgC,CAAC;AACnD;AAEA;;;;AAIA,gBAAsBoC,cAAcA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAUnC,SAAAF,gBAAA;EAAAA,eAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAVM,SAAAC,QAA+BnC,SAAqB,EAAEhC,UAAuB;IAAA,OAAAiE,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,MAC9ExC,SAAS,CAACqB,MAAM,KAAK7D,qCAAqC;YAAA8E,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACrD,IAAIxC,iBAAiB,CAAC;YAAElC,SAAS,EAAE5B,MAAM,CAACuG,MAAM,CAACtG,QAAQ,CAACgF,IAAI,EAAEpB,SAAS,CAAC;YAAEhC,UAAU,EAAVA;UAAU,CAAE,CAAC;QAAA;UAAA,MAG9FgC,SAAS,CAACqB,MAAM,KAAK5D,sCAAsC;YAAA6E,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACtD,IAAInC,mBAAmB,CAAC;YAAEvC,SAAS,EAAE5B,MAAM,CAACuG,MAAM,CAACtG,QAAQ,CAACgF,IAAI,EAAEpB,SAAS,CAAC;YAAEhC,UAAU,EAAVA;UAAU,CAAE,CAAC;QAAA;UAAAsE,QAAA,CAAAK,EAAA,GAGzFnD,aAAa;UAAA8C,QAAA,CAAAE,IAAA;UAAA,OAAoBjG,MAAM,CAAC8D,MAAM,CAACL,SAAS,CAAC;QAAA;UAAAsC,QAAA,CAAAM,EAAA,GAAAN,QAAA,CAAAO,IAAA;UAAAP,QAAA,CAAAQ,EAAA,GAAE9C,SAAS;UAAAsC,QAAA,CAAAS,EAAA,GAAE/E,UAAU;UAAAsE,QAAA,CAAAU,EAAA;YAAhEjF,SAAS,EAAAuE,QAAA,CAAAM,EAAA;YAAkC5C,SAAS,EAAAsC,QAAA,CAAAQ,EAAA;YAAE9E,UAAU,EAAAsE,QAAA,CAAAS;UAAA;UAAA,OAAAT,QAAA,CAAAG,MAAA,eAAAH,QAAA,CAAAK,EAAA,CAAAL,QAAA,CAAAU,EAAA;QAAA;QAAA;UAAA,OAAAV,QAAA,CAAAW,IAAA;MAAA;IAAA,GAAAd,OAAA;EAAA,CAC5F;EAAA,OAAAN,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
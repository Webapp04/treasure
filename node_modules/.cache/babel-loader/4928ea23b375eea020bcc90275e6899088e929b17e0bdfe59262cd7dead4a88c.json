{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive Protobuf encoded messages over\n * streams.\n *\n * @example\n *\n * ```typescript\n * import { pbStream } from 'it-pb-stream'\n * import { MessageType } from './src/my-message-type.js'\n *\n * // RequestType and ResponseType have been generate from `.proto` files and have\n * // `.encode` and `.decode` methods for serialization/deserialization\n *\n * const stream = pbStream(duplex)\n * stream.writePB({\n *   foo: 'bar'\n * }, MessageType)\n * const res = await stream.readPB(MessageType)\n * ```\n */\nimport { handshake } from 'it-handshake';\nimport * as lp from 'it-length-prefixed';\nexport function pbStream(duplex) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var shake = handshake(duplex);\n  var lpReader = lp.decode.fromReader(shake.reader, opts);\n  var W = {\n    read: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(bytes) {\n        var _yield$shake$reader$n, value;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return shake.reader.next(bytes);\n            case 2:\n              _yield$shake$reader$n = _context.sent;\n              value = _yield$shake$reader$n.value;\n              if (!(value == null)) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error('Value is null');\n            case 6:\n              return _context.abrupt(\"return\", value);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function read(_x) {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }(),\n    readLP: function () {\n      var _readLP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$lpReader$next, value;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return lpReader.next();\n            case 2:\n              _yield$lpReader$next = _context2.sent;\n              value = _yield$lpReader$next.value;\n              if (!(value == null)) {\n                _context2.next = 6;\n                break;\n              }\n              throw new Error('Value is null');\n            case 6:\n              return _context2.abrupt(\"return\", value);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function readLP() {\n        return _readLP.apply(this, arguments);\n      }\n      return readLP;\n    }(),\n    readPB: function () {\n      var _readPB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(proto) {\n        var value, buf;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return W.readLP();\n            case 2:\n              value = _context3.sent;\n              if (!(value == null)) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error('Value is null');\n            case 5:\n              // Is this a buffer?\n              buf = value instanceof Uint8Array ? value : value.subarray();\n              return _context3.abrupt(\"return\", proto.decode(buf));\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function readPB(_x2) {\n        return _readPB.apply(this, arguments);\n      }\n      return readPB;\n    }(),\n    write: function write(data) {\n      // just write\n      if (data instanceof Uint8Array) {\n        shake.writer.push(data);\n      } else {\n        shake.writer.push(data.subarray());\n      }\n    },\n    writeLP: function writeLP(data) {\n      // encode, write\n      W.write(lp.encode.single(data, opts));\n    },\n    writePB: function writePB(data, proto) {\n      // encode, writeLP\n      W.writeLP(proto.encode(data));\n    },\n    pb: function pb(proto) {\n      return {\n        read: function () {\n          var _read2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n              while (1) switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return W.readPB(proto);\n                case 2:\n                  return _context4.abrupt(\"return\", _context4.sent);\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }, _callee4);\n          }));\n          function read() {\n            return _read2.apply(this, arguments);\n          }\n          return read;\n        }(),\n        write: function write(d) {\n          W.writePB(d, proto);\n        }\n      };\n    },\n    unwrap: function unwrap() {\n      // returns vanilla duplex again, terminates all reads/writes from this object\n      shake.rest();\n      return shake.stream;\n    }\n  };\n  return W;\n}","map":{"version":3,"names":["handshake","lp","pbStream","duplex","opts","arguments","length","undefined","shake","lpReader","decode","fromReader","reader","W","read","_read","_asyncToGenerator","_regeneratorRuntime","mark","_callee","bytes","_yield$shake$reader$n","value","wrap","_callee$","_context","prev","next","sent","Error","abrupt","stop","_x","apply","readLP","_readLP","_callee2","_yield$lpReader$next","_callee2$","_context2","readPB","_readPB","_callee3","proto","buf","_callee3$","_context3","Uint8Array","subarray","_x2","write","data","writer","push","writeLP","encode","single","writePB","pb","_read2","_callee4","_callee4$","_context4","d","unwrap","rest","stream"],"sources":["/Users/apple/Documents/treasure/node_modules/it-pb-stream/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive Protobuf encoded messages over\n * streams.\n *\n * @example\n *\n * ```typescript\n * import { pbStream } from 'it-pb-stream'\n * import { MessageType } from './src/my-message-type.js'\n *\n * // RequestType and ResponseType have been generate from `.proto` files and have\n * // `.encode` and `.decode` methods for serialization/deserialization\n *\n * const stream = pbStream(duplex)\n * stream.writePB({\n *   foo: 'bar'\n * }, MessageType)\n * const res = await stream.readPB(MessageType)\n * ```\n */\n\nimport { handshake } from 'it-handshake'\nimport * as lp from 'it-length-prefixed'\nimport type { Duplex } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/**\n * A protobuf decoder - takes a byte array and returns an object\n */\nexport interface Decoder<T> {\n  (data: Uint8Array | Uint8ArrayList): T\n}\n\n/**\n * A protobuf encoder - takes an object and returns a byte array\n */\nexport interface Encoder<T> {\n  (data: T): Uint8Array\n}\n\n/**\n * Convinience methods for working with protobuf streams\n */\nexport interface ProtobufStream {\n  /**\n   * Read a set number of bytes from the stream\n   */\n  read: (bytes?: number) => Promise<Uint8ArrayList>\n\n  /**\n   * Read the next length-prefixed number of bytes from the stream\n   */\n  readLP: () => Promise<Uint8ArrayList>\n\n  /**\n   * Read the next length-prefixed byte array from the stream and decode it as the passed protobuf format\n   */\n  readPB: <T>(proto: { decode: Decoder<T> }) => Promise<T>\n\n  /**\n   * Write the passed bytes to the stream\n   */\n  write: (input: Uint8Array | Uint8ArrayList) => void\n\n  /**\n   * Write the passed bytes to the stream prefixed by their length\n   */\n  writeLP: (input: Uint8Array | Uint8ArrayList) => void\n\n  /**\n   * Encode the passed object as a protobuf message and write it's length-prefixed bytes tot he stream\n   */\n  writePB: <T>(data: T, proto: { encode: Encoder<T> }) => void\n\n  /**\n   * Returns an object with read/write methods for operating on protobuf messages\n   */\n  pb: <T> (proto: { encode: Encoder<T>, decode: Decoder<T> }) => { read: () => Promise<T>, write: (d: T) => void }\n\n  /**\n   * Returns the underlying stream\n   */\n  unwrap: () => Duplex<Uint8ArrayList, Uint8Array>\n}\n\nexport interface Opts {\n  // encoding opts\n  poolSize: number\n  minPoolSize: number\n  lengthEncoder: lp.LengthEncoderFunction\n\n  // decoding opts\n  lengthDecoder: lp.LengthDecoderFunction\n  maxLengthLength: number\n  maxDataLength: number\n}\n\nexport function pbStream (duplex: Duplex<Uint8ArrayList | Uint8Array, Uint8Array>, opts = {}): ProtobufStream {\n  const shake = handshake(duplex)\n  const lpReader = lp.decode.fromReader(\n    shake.reader,\n    opts\n  )\n\n  const W: ProtobufStream = {\n    read: async (bytes) => {\n      // just read\n      const { value } = await shake.reader.next(bytes)\n\n      if (value == null) {\n        throw new Error('Value is null')\n      }\n\n      return value\n    },\n    readLP: async () => {\n      // read, decode\n      // @ts-expect-error .next is part of the generator interface\n      const { value } = await lpReader.next()\n\n      if (value == null) {\n        throw new Error('Value is null')\n      }\n\n      return value\n    },\n    readPB: async (proto) => {\n      // readLP, decode\n      const value = await W.readLP()\n\n      if (value == null) {\n        throw new Error('Value is null')\n      }\n\n      // Is this a buffer?\n      const buf = value instanceof Uint8Array ? value : value.subarray()\n\n      return proto.decode(buf)\n    },\n    write: (data) => {\n      // just write\n      if (data instanceof Uint8Array) {\n        shake.writer.push(data)\n      } else {\n        shake.writer.push(data.subarray())\n      }\n    },\n    writeLP: (data) => {\n      // encode, write\n      W.write(lp.encode.single(data, opts))\n    },\n    writePB: (data, proto) => {\n      // encode, writeLP\n      W.writeLP(proto.encode(data))\n    },\n    pb: (proto) => {\n      return {\n        read: async () => await W.readPB(proto),\n        write: (d) => { W.writePB(d, proto) }\n      }\n    },\n    unwrap: () => {\n      // returns vanilla duplex again, terminates all reads/writes from this object\n      shake.rest()\n      return shake.stream\n    }\n  }\n\n  return W\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import errcode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n\n/**\n * @typedef {import('interface-datastore').Key} Key\n */\n\nvar namespace = '/record/';\n\n/**\n * @param {Uint8Array} buf\n */\nexport function encodeBase32(buf) {\n  return uint8ArrayToString(buf, 'base32');\n}\n\n/**\n * converts a binary record key to a pubsub topic key\n *\n * @param {Uint8Array | string} key\n */\nexport function keyToTopic(key) {\n  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs\n  // Encodes to \"/record/base64url(key)\"\n  if (typeof key === 'string' || key instanceof String) {\n    key = uint8ArrayFromString(key.toString());\n  }\n  var b64url = uint8ArrayToString(key, 'base64url');\n  return \"\".concat(namespace).concat(b64url);\n}\n\n/**\n * converts a pubsub topic key to a binary record key\n *\n * @param {string} topic\n */\nexport function topicToKey(topic) {\n  if (topic.substring(0, namespace.length) !== namespace) {\n    throw errcode(new Error('topic received is not from a record'), 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE');\n  }\n  var key = topic.substring(namespace.length);\n  return uint8ArrayFromString(key, 'base64url');\n}","map":{"version":3,"names":["errcode","toString","uint8ArrayToString","fromString","uint8ArrayFromString","namespace","encodeBase32","buf","keyToTopic","key","String","b64url","concat","topicToKey","topic","substring","length","Error"],"sources":["/Users/apple/Documents/treasure/node_modules/datastore-pubsub/src/utils.js"],"sourcesContent":["import errcode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('interface-datastore').Key} Key\n */\n\nconst namespace = '/record/'\n\n/**\n * @param {Uint8Array} buf\n */\nexport function encodeBase32 (buf) {\n  return uint8ArrayToString(buf, 'base32')\n}\n\n/**\n * converts a binary record key to a pubsub topic key\n *\n * @param {Uint8Array | string} key\n */\nexport function keyToTopic (key) {\n  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs\n  // Encodes to \"/record/base64url(key)\"\n  if (typeof key === 'string' || key instanceof String) {\n    key = uint8ArrayFromString(key.toString())\n  }\n\n  const b64url = uint8ArrayToString(key, 'base64url')\n\n  return `${namespace}${b64url}`\n}\n\n/**\n * converts a pubsub topic key to a binary record key\n *\n * @param {string} topic\n */\nexport function topicToKey (topic) {\n  if (topic.substring(0, namespace.length) !== namespace) {\n    throw errcode(new Error('topic received is not from a record'), 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE')\n  }\n\n  const key = topic.substring(namespace.length)\n\n  return uint8ArrayFromString(key, 'base64url')\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AACtE,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;;AAE5E;AACA;AACA;;AAEA,IAAMC,SAAS,GAAG,UAAU;;AAE5B;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAEC,GAAG,EAAE;EACjC,OAAOL,kBAAkB,CAACK,GAAG,EAAE,QAAQ,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAEC,GAAG,EAAE;EAC/B;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,YAAYC,MAAM,EAAE;IACpDD,GAAG,GAAGL,oBAAoB,CAACK,GAAG,CAACR,QAAQ,CAAC,CAAC,CAAC;EAC5C;EAEA,IAAMU,MAAM,GAAGT,kBAAkB,CAACO,GAAG,EAAE,WAAW,CAAC;EAEnD,UAAAG,MAAA,CAAUP,SAAS,EAAAO,MAAA,CAAGD,MAAM;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,UAAUA,CAAEC,KAAK,EAAE;EACjC,IAAIA,KAAK,CAACC,SAAS,CAAC,CAAC,EAAEV,SAAS,CAACW,MAAM,CAAC,KAAKX,SAAS,EAAE;IACtD,MAAML,OAAO,CAAC,IAAIiB,KAAK,CAAC,qCAAqC,CAAC,EAAE,wCAAwC,CAAC;EAC3G;EAEA,IAAMR,GAAG,GAAGK,KAAK,CAACC,SAAS,CAACV,SAAS,CAACW,MAAM,CAAC;EAE7C,OAAOZ,oBAAoB,CAACK,GAAG,EAAE,WAAW,CAAC;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}
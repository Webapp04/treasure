{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @packageDocumentation\n *\n * Provides strategies for resolving multiaddrs.\n */\nimport { getProtocol } from '../protocols-table.js';\nimport Resolver from './dns.js';\nvar _getProtocol = getProtocol('dnsaddr'),\n  dnsaddrCode = _getProtocol.code;\n/**\n * Resolver for dnsaddr addresses.\n *\n * @example\n *\n * ```typescript\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const addresses = await dnsaddrResolver(ma)\n *\n * console.info(addresses)\n * //[\n * //  '/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n * //  '/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n * //  '/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n * //  '/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN'\n * //]\n * ```\n */\nexport function dnsaddrResolver(_x) {\n  return _dnsaddrResolver.apply(this, arguments);\n}\nfunction _dnsaddrResolver() {\n  _dnsaddrResolver = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(addr) {\n    var _addr$stringTuples$fi;\n    var options,\n      resolver,\n      peerId,\n      _ref,\n      _ref2,\n      hostname,\n      records,\n      addresses,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          resolver = new Resolver();\n          if (options.signal != null) {\n            options.signal.addEventListener('abort', function () {\n              resolver.cancel();\n            });\n          }\n          peerId = addr.getPeerId();\n          _ref = (_addr$stringTuples$fi = addr.stringTuples().find(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 1),\n              proto = _ref4[0];\n            return proto === dnsaddrCode;\n          })) !== null && _addr$stringTuples$fi !== void 0 ? _addr$stringTuples$fi : [], _ref2 = _slicedToArray(_ref, 2), hostname = _ref2[1];\n          if (!(hostname == null)) {\n            _context.next = 7;\n            break;\n          }\n          throw new Error('No hostname found in multiaddr');\n        case 7:\n          _context.next = 9;\n          return resolver.resolveTxt(\"_dnsaddr.\".concat(hostname));\n        case 9:\n          records = _context.sent;\n          addresses = records.flat().map(function (a) {\n            return a.split('=')[1];\n          });\n          if (peerId != null) {\n            addresses = addresses.filter(function (entry) {\n              return entry.includes(peerId);\n            });\n          }\n          return _context.abrupt(\"return\", addresses);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _dnsaddrResolver.apply(this, arguments);\n}","map":{"version":3,"names":["getProtocol","Resolver","_getProtocol","dnsaddrCode","code","dnsaddrResolver","_x","_dnsaddrResolver","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","addr","_addr$stringTuples$fi","options","resolver","peerId","_ref","_ref2","hostname","records","addresses","_args","wrap","_callee$","_context","prev","next","length","undefined","signal","addEventListener","cancel","getPeerId","stringTuples","find","_ref3","_ref4","_slicedToArray","proto","Error","resolveTxt","concat","sent","flat","map","a","split","filter","entry","includes","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/@multiformats/multiaddr/src/resolvers/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Provides strategies for resolving multiaddrs.\n */\n\nimport { getProtocol } from '../protocols-table.js'\nimport Resolver from './dns.js'\nimport type { AbortOptions, Multiaddr } from '../index.js'\n\nconst { code: dnsaddrCode } = getProtocol('dnsaddr')\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @example\n *\n * ```typescript\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const addresses = await dnsaddrResolver(ma)\n *\n * console.info(addresses)\n * //[\n * //  '/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n * //  '/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n * //  '/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n * //  '/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN'\n * //]\n * ```\n */\nexport async function dnsaddrResolver (addr: Multiaddr, options: AbortOptions = {}): Promise<string[]> {\n  const resolver = new Resolver()\n\n  if (options.signal != null) {\n    options.signal.addEventListener('abort', () => {\n      resolver.cancel()\n    })\n  }\n\n  const peerId = addr.getPeerId()\n  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) ?? []\n\n  if (hostname == null) {\n    throw new Error('No hostname found in multiaddr')\n  }\n\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`)\n\n  let addresses = records.flat().map((a) => a.split('=')[1])\n\n  if (peerId != null) {\n    addresses = addresses.filter((entry) => entry.includes(peerId))\n  }\n\n  return addresses\n}\n"],"mappings":";;;AAAA;;;;;AAMA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,OAAOC,QAAQ,MAAM,UAAU;AAG/B,IAAAC,YAAA,GAA8BF,WAAW,CAAC,SAAS,CAAC;EAAtCG,WAAW,GAAAD,YAAA,CAAjBE,IAAI;AAEZ;;;;;;;;;;;;;;;;;;;;;AAqBA,gBAAsBC,eAAeA,CAAAC,EAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAyBpC,SAAAF,iBAAA;EAAAA,gBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAzBM,SAAAC,QAAgCC,IAAe;IAAA,IAAAC,qBAAA;IAAA,IAAAC,OAAA;MAAAC,QAAA;MAAAC,MAAA;MAAAC,IAAA;MAAAC,KAAA;MAAAC,QAAA;MAAAC,OAAA;MAAAC,SAAA;MAAAC,KAAA,GAAAf,SAAA;IAAA,OAAAE,mBAAA,GAAAc,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAEb,OAAA,GAAAQ,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAwB,EAAE;UAC1EP,QAAQ,GAAG,IAAIhB,QAAQ,EAAE;UAE/B,IAAIe,OAAO,CAACgB,MAAM,IAAI,IAAI,EAAE;YAC1BhB,OAAO,CAACgB,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAK;cAC5ChB,QAAQ,CAACiB,MAAM,EAAE;YACnB,CAAC,CAAC;;UAGEhB,MAAM,GAAGJ,IAAI,CAACqB,SAAS,EAAE;UAAAhB,IAAA,IAAAJ,qBAAA,GACVD,IAAI,CAACsB,YAAY,EAAE,CAACC,IAAI,CAAC,UAAAC,KAAA;YAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,KAAA;cAAEG,KAAK,GAAAF,KAAA;YAAA,OAAME,KAAK,KAAKtC,WAAW;UAAA,EAAC,cAAAY,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EAAAK,KAAA,GAAAoB,cAAA,CAAArB,IAAA,MAA9EE,QAAQ,GAAAD,KAAA;UAAA,MAEbC,QAAQ,IAAI,IAAI;YAAAM,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MACZ,IAAIa,KAAK,CAAC,gCAAgC,CAAC;QAAA;UAAAf,QAAA,CAAAE,IAAA;UAAA,OAG7BZ,QAAQ,CAAC0B,UAAU,aAAAC,MAAA,CAAavB,QAAQ,CAAE,CAAC;QAAA;UAA3DC,OAAO,GAAAK,QAAA,CAAAkB,IAAA;UAETtB,SAAS,GAAGD,OAAO,CAACwB,IAAI,EAAE,CAACC,GAAG,CAAC,UAACC,CAAC;YAAA,OAAKA,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAAA,EAAC;UAE1D,IAAI/B,MAAM,IAAI,IAAI,EAAE;YAClBK,SAAS,GAAGA,SAAS,CAAC2B,MAAM,CAAC,UAACC,KAAK;cAAA,OAAKA,KAAK,CAACC,QAAQ,CAAClC,MAAM,CAAC;YAAA,EAAC;;UAChE,OAAAS,QAAA,CAAA0B,MAAA,WAEM9B,SAAS;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAA2B,IAAA;MAAA;IAAA,GAAAzC,OAAA;EAAA,CACjB;EAAA,OAAAN,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createPeers(_ref) {\n  var network = _ref.network;\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  function peers() {\n    return _peers.apply(this, arguments);\n  }\n  function _peers() {\n    _peers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        _yield$network$use,\n        libp2p,\n        _peers2,\n        _iterator,\n        _step,\n        connection,\n        peer,\n        peers,\n        _iterator2,\n        _step2,\n        _connection,\n        _peer,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return network.use(options);\n          case 3:\n            _yield$network$use = _context.sent;\n            libp2p = _yield$network$use.libp2p;\n            if (!options.verbose) {\n              _context.next = 10;\n              break;\n            }\n            _peers2 = [];\n            _iterator = _createForOfIteratorHelper(libp2p.getConnections());\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                connection = _step.value;\n                /** @type {PeersResult} */\n                peer = {\n                  addr: connection.remoteAddr,\n                  peer: connection.remotePeer\n                };\n                if (options.verbose || options.direction) {\n                  peer.direction = connection.stat.direction;\n                }\n                if (options.verbose) {\n                  peer.muxer = connection.stat.multiplexer;\n                  peer.latency = 'n/a';\n                  peer.streams = []; // TODO: get this from libp2p\n                }\n\n                _peers2.push(peer);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            return _context.abrupt(\"return\", _peers2);\n          case 10:\n            /** @type {Map<string, PeersResult>} */\n            peers = new Map();\n            _iterator2 = _createForOfIteratorHelper(libp2p.getConnections());\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                _connection = _step2.value;\n                /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n                _peer = {\n                  addr: _connection.remoteAddr,\n                  peer: _connection.remotePeer\n                };\n                peers.set(_connection.remotePeer.toString(), _peer);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            return _context.abrupt(\"return\", Array.from(peers.values()));\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _peers.apply(this, arguments);\n  }\n  return withTimeoutOption(peers);\n}","map":{"version":3,"names":["withTimeoutOption","createPeers","_ref","network","peers","_peers","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","_yield$network$use","libp2p","_peers2","_iterator","_step","connection","peer","_iterator2","_step2","_connection","_peer","_args","wrap","_callee$","_context","prev","next","length","undefined","use","sent","verbose","_createForOfIteratorHelper","getConnections","s","n","done","value","addr","remoteAddr","remotePeer","direction","stat","muxer","multiplexer","latency","streams","push","err","e","f","abrupt","Map","set","toString","Array","from","values","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/swarm/peers.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createPeers ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (options.verbose) {\n      const peers = []\n      for (const connection of libp2p.getConnections()) {\n        /** @type {PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: connection.remotePeer\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n\n      return peers\n    }\n\n    /** @type {Map<string, PeersResult>} */\n    const peers = new Map()\n\n    for (const connection of libp2p.getConnections()) {\n      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n      const peer = {\n        addr: connection.remoteAddr,\n        peer: connection.remotePeer\n      }\n\n      peers.set(connection.remotePeer.toString(), peer)\n    }\n\n    return Array.from(peers.values())\n  }\n\n  return withTimeoutOption(peers)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { pipe } from 'it-pipe';\nimport { RecordEnvelope } from '@libp2p/peer-record';\nimport { peerIdFromBytes, peerIdFromString } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { MessageCache } from './message-cache.js';\nimport { RPC } from './message/rpc.js';\nimport * as constants from './constants.js';\nimport { createGossipRpc, shuffle, messageIdToString } from './utils/index.js';\nimport { PeerScore, createPeerScoreParams, createPeerScoreThresholds } from './score/index.js';\nimport { IWantTracer } from './tracer.js';\nimport { SimpleTimeCache } from './utils/time-cache.js';\nimport { ACCEPT_FROM_WHITELIST_DURATION_MS, ACCEPT_FROM_WHITELIST_MAX_MESSAGES, ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE } from './constants.js';\nimport { ChurnReason, getMetrics, IHaveIgnoreReason, InclusionReason, ScorePenalty } from './metrics.js';\nimport { MessageAcceptance, ValidateError, MessageStatus, RejectReason, rejectReasonFromAcceptance } from './types.js';\nimport { buildRawMessage, validateToRawMessage } from './utils/buildRawMessage.js';\nimport { msgIdFnStrictNoSign, msgIdFnStrictSign } from './utils/msgIdFn.js';\nimport { computeAllPeersScoreWeights } from './score/scoreMetrics.js';\nimport { getPublishConfigFromPeerId } from './utils/publishConfig.js';\nimport { Components } from '@libp2p/components';\nimport { StrictNoSign, StrictSign } from '@libp2p/interface-pubsub';\nimport { removeFirstNItemsFromSet, removeItemsFromSet } from './utils/set.js';\nimport { pushable } from 'it-pushable';\nimport { InboundStream, OutboundStream } from './stream.js';\nexport var multicodec = constants.GossipsubIDv11;\nvar GossipStatusCode;\n(function (GossipStatusCode) {\n  GossipStatusCode[GossipStatusCode[\"started\"] = 0] = \"started\";\n  GossipStatusCode[GossipStatusCode[\"stopped\"] = 1] = \"stopped\";\n})(GossipStatusCode || (GossipStatusCode = {}));\nexport var GossipSub = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(GossipSub, _EventEmitter);\n  var _super = _createSuper(GossipSub);\n  function GossipSub() {\n    var _opts$globalSignature, _opts$debugName, _options$msgIdToStrFn;\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, GossipSub);\n    _this = _super.call(this);\n    _this.multicodecs = [constants.GossipsubIDv11, constants.GossipsubIDv10];\n    // State\n    _this.peers = new Set();\n    _this.streamsInbound = new Map();\n    _this.streamsOutbound = new Map();\n    /** Ensures outbound streams are created sequentially */\n    _this.outboundInflightQueue = pushable({\n      objectMode: true\n    });\n    /** Direct peers */\n    _this.direct = new Set();\n    /** Floodsub peers */\n    _this.floodsubPeers = new Set();\n    /**\n     * Map of peer id and AcceptRequestWhileListEntry\n     */\n    _this.acceptFromWhitelist = new Map();\n    /**\n     * Map of topics to which peers are subscribed to\n     */\n    _this.topics = new Map();\n    /**\n     * List of our subscriptions\n     */\n    _this.subscriptions = new Set();\n    /**\n     * Map of topic meshes\n     * topic => peer id set\n     */\n    _this.mesh = new Map();\n    /**\n     * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership\n     * topic => peer id set\n     */\n    _this.fanout = new Map();\n    /**\n     * Map of last publish time for fanout topics\n     * topic => last publish time\n     */\n    _this.fanoutLastpub = new Map();\n    /**\n     * Map of pending messages to gossip\n     * peer id => control messages\n     */\n    _this.gossip = new Map();\n    /**\n     * Map of control messages\n     * peer id => control message\n     */\n    _this.control = new Map();\n    /**\n     * Number of IHAVEs received from peer in the last heartbeat\n     */\n    _this.peerhave = new Map();\n    /** Number of messages we have asked from peer in the last heartbeat */\n    _this.iasked = new Map();\n    /** Prune backoff map */\n    _this.backoff = new Map();\n    /**\n     * Connection direction cache, marks peers with outbound connections\n     * peer id => direction\n     */\n    _this.outbound = new Map();\n    _this.topicValidators = new Map();\n    /**\n     * Number of heartbeats since the beginning of time\n     * This allows us to amortize some resource cleanup -- eg: backoff cleanup\n     */\n    _this.heartbeatTicks = 0;\n    _this.components = new Components();\n    _this.directPeerInitial = null;\n    _this.status = {\n      code: GossipStatusCode.stopped\n    };\n    _this.heartbeatTimer = null;\n    _this.runHeartbeat = function () {\n      var _this$metrics;\n      var timer = (_this$metrics = _this.metrics) === null || _this$metrics === void 0 ? void 0 : _this$metrics.heartbeatDuration.startTimer();\n      _this.heartbeat().catch(function (err) {\n        _this.log('Error running heartbeat', err);\n      }).finally(function () {\n        if (timer != null) {\n          timer();\n        }\n        // Schedule the next run if still in started status\n        if (_this.status.code === GossipStatusCode.started) {\n          // Clear previous timeout before overwriting `status.heartbeatTimeout`, it should be completed tho.\n          clearTimeout(_this.status.heartbeatTimeout);\n          // NodeJS setInterval function is innexact, calls drift by a few miliseconds on each call.\n          // To run the heartbeat precisely setTimeout() must be used recomputing the delay on every loop.\n          var msToNextHeartbeat = _this.opts.heartbeatInterval - (Date.now() - _this.status.hearbeatStartMs) % _this.opts.heartbeatInterval;\n          // If too close to next heartbeat, skip one\n          if (msToNextHeartbeat < _this.opts.heartbeatInterval * 0.25) {\n            var _this$metrics2;\n            msToNextHeartbeat += _this.opts.heartbeatInterval;\n            (_this$metrics2 = _this.metrics) === null || _this$metrics2 === void 0 ? void 0 : _this$metrics2.heartbeatSkipped.inc();\n          }\n          _this.status.heartbeatTimeout = setTimeout(_this.runHeartbeat, msToNextHeartbeat);\n        }\n      });\n    };\n    var opts = _objectSpread(_objectSpread({\n      fallbackToFloodsub: true,\n      floodPublish: true,\n      doPX: false,\n      directPeers: [],\n      D: constants.GossipsubD,\n      Dlo: constants.GossipsubDlo,\n      Dhi: constants.GossipsubDhi,\n      Dscore: constants.GossipsubDscore,\n      Dout: constants.GossipsubDout,\n      Dlazy: constants.GossipsubDlazy,\n      heartbeatInterval: constants.GossipsubHeartbeatInterval,\n      fanoutTTL: constants.GossipsubFanoutTTL,\n      mcacheLength: constants.GossipsubHistoryLength,\n      mcacheGossip: constants.GossipsubHistoryGossip,\n      seenTTL: constants.GossipsubSeenTTL,\n      gossipsubIWantFollowupMs: constants.GossipsubIWantFollowupTime,\n      prunePeers: constants.GossipsubPrunePeers,\n      pruneBackoff: constants.GossipsubPruneBackoff,\n      graftFloodThreshold: constants.GossipsubGraftFloodThreshold,\n      opportunisticGraftPeers: constants.GossipsubOpportunisticGraftPeers,\n      opportunisticGraftTicks: constants.GossipsubOpportunisticGraftTicks,\n      directConnectTicks: constants.GossipsubDirectConnectTicks\n    }, options), {}, {\n      scoreParams: createPeerScoreParams(options.scoreParams),\n      scoreThresholds: createPeerScoreThresholds(options.scoreThresholds)\n    });\n    _this.globalSignaturePolicy = (_opts$globalSignature = opts.globalSignaturePolicy) !== null && _opts$globalSignature !== void 0 ? _opts$globalSignature : StrictSign;\n    // Also wants to get notified of peers connected using floodsub\n    if (opts.fallbackToFloodsub) {\n      _this.multicodecs.push(constants.FloodsubID);\n    }\n    // From pubsub\n    _this.log = logger((_opts$debugName = opts.debugName) !== null && _opts$debugName !== void 0 ? _opts$debugName : 'libp2p:gossipsub');\n    // Gossipsub\n    _this.opts = opts;\n    _this.direct = new Set(opts.directPeers.map(function (p) {\n      return p.id.toString();\n    }));\n    _this.seenCache = new SimpleTimeCache({\n      validityMs: opts.seenTTL\n    });\n    _this.publishedMessageIds = new SimpleTimeCache({\n      validityMs: opts.seenTTL\n    });\n    if (options.msgIdFn) {\n      // Use custom function\n      _this.msgIdFn = options.msgIdFn;\n    } else {\n      switch (_this.globalSignaturePolicy) {\n        case StrictSign:\n          _this.msgIdFn = msgIdFnStrictSign;\n          break;\n        case StrictNoSign:\n          _this.msgIdFn = msgIdFnStrictNoSign;\n          break;\n      }\n    }\n    if (options.fastMsgIdFn) {\n      _this.fastMsgIdFn = options.fastMsgIdFn;\n      _this.fastMsgIdCache = new SimpleTimeCache({\n        validityMs: opts.seenTTL\n      });\n    }\n    // By default, gossipsub only provide a browser friendly function to convert Uint8Array message id to string.\n    _this.msgIdToStrFn = (_options$msgIdToStrFn = options.msgIdToStrFn) !== null && _options$msgIdToStrFn !== void 0 ? _options$msgIdToStrFn : messageIdToString;\n    _this.mcache = options.messageCache || new MessageCache(opts.mcacheGossip, opts.mcacheLength, _this.msgIdToStrFn);\n    if (options.dataTransform) {\n      _this.dataTransform = options.dataTransform;\n    }\n    if (options.metricsRegister) {\n      if (!options.metricsTopicStrToLabel) {\n        throw Error('Must set metricsTopicStrToLabel with metrics');\n      }\n      // in theory, each topic has its own meshMessageDeliveriesWindow param\n      // however in lodestar, we configure it mostly the same so just pick the max of positive ones\n      // (some topics have meshMessageDeliveriesWindow as 0)\n      var maxMeshMessageDeliveriesWindowMs = Math.max.apply(Math, _toConsumableArray(Object.values(opts.scoreParams.topics).map(function (topicParam) {\n        return topicParam.meshMessageDeliveriesWindow;\n      })).concat([constants.DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS]));\n      var metrics = getMetrics(options.metricsRegister, options.metricsTopicStrToLabel, {\n        gossipPromiseExpireSec: _this.opts.gossipsubIWantFollowupMs / 1000,\n        behaviourPenaltyThreshold: opts.scoreParams.behaviourPenaltyThreshold,\n        maxMeshMessageDeliveriesWindowSec: maxMeshMessageDeliveriesWindowMs / 1000\n      });\n      metrics.mcacheSize.addCollect(function () {\n        return _this.onScrapeMetrics(metrics);\n      });\n      var _iterator3 = _createForOfIteratorHelper(_this.multicodecs),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var protocol = _step3.value;\n          metrics.protocolsEnabled.set({\n            protocol: protocol\n          }, 1);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      _this.metrics = metrics;\n    } else {\n      _this.metrics = null;\n    }\n    _this.gossipTracer = new IWantTracer(_this.opts.gossipsubIWantFollowupMs, _this.msgIdToStrFn, _this.metrics);\n    /**\n     * libp2p\n     */\n    _this.score = new PeerScore(_this.opts.scoreParams, _this.metrics, {\n      scoreCacheValidityMs: opts.heartbeatInterval\n    });\n    _this.maxInboundStreams = options.maxInboundStreams;\n    _this.maxOutboundStreams = options.maxOutboundStreams;\n    return _this;\n  }\n  _createClass(GossipSub, [{\n    key: \"getPeers\",\n    value: function getPeers() {\n      return _toConsumableArray(this.peers.keys()).map(function (str) {\n        return peerIdFromString(str);\n      });\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.status.code === GossipStatusCode.started;\n    }\n    // LIFECYCLE METHODS\n    /**\n     * Pass libp2p components to interested system components\n     */\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(components) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.components = components;\n              this.score.init(components);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\n     * Mounts the gossipsub protocol onto the libp2p node and sends our\n     * our subscriptions to every peer connected\n     */\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _this2 = this;\n        var registrar, topology, registrarTopologyIds, heartbeatTimeout;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!this.isStarted()) {\n                _context6.next = 2;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 2:\n              this.log('starting');\n              _context6.next = 5;\n              return getPublishConfigFromPeerId(this.globalSignaturePolicy, this.components.getPeerId());\n            case 5:\n              this.publishConfig = _context6.sent;\n              // Create the outbound inflight queue\n              // This ensures that outbound stream creation happens sequentially\n              this.outboundInflightQueue = pushable({\n                objectMode: true\n              });\n              pipe(this.outboundInflightQueue, /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(source) {\n                  var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, peerId, connection;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _iteratorAbruptCompletion = false;\n                        _didIteratorError = false;\n                        _context2.prev = 2;\n                        _iterator = _asyncIterator(source);\n                      case 4:\n                        _context2.next = 6;\n                        return _iterator.next();\n                      case 6:\n                        if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                          _context2.next = 13;\n                          break;\n                        }\n                        _step$value = _step.value, peerId = _step$value.peerId, connection = _step$value.connection;\n                        _context2.next = 10;\n                        return _this2.createOutboundStream(peerId, connection);\n                      case 10:\n                        _iteratorAbruptCompletion = false;\n                        _context2.next = 4;\n                        break;\n                      case 13:\n                        _context2.next = 19;\n                        break;\n                      case 15:\n                        _context2.prev = 15;\n                        _context2.t0 = _context2[\"catch\"](2);\n                        _didIteratorError = true;\n                        _iteratorError = _context2.t0;\n                      case 19:\n                        _context2.prev = 19;\n                        _context2.prev = 20;\n                        if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                          _context2.next = 24;\n                          break;\n                        }\n                        _context2.next = 24;\n                        return _iterator.return();\n                      case 24:\n                        _context2.prev = 24;\n                        if (!_didIteratorError) {\n                          _context2.next = 27;\n                          break;\n                        }\n                        throw _iteratorError;\n                      case 27:\n                        return _context2.finish(24);\n                      case 28:\n                        return _context2.finish(19);\n                      case 29:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n                }));\n                return function (_x2) {\n                  return _ref.apply(this, arguments);\n                };\n              }()).catch(function (e) {\n                return _this2.log.error('outbound inflight queue error', e);\n              });\n              // set direct peer addresses in the address book\n              _context6.next = 10;\n              return Promise.all(this.opts.directPeers.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(p) {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.next = 2;\n                        return _this2.components.getPeerStore().addressBook.add(p.id, p.addrs);\n                      case 2:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3);\n                }));\n                return function (_x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            case 10:\n              registrar = this.components.getRegistrar(); // Incoming streams\n              // Called after a peer dials us\n              _context6.next = 13;\n              return Promise.all(this.multicodecs.map(function (multicodec) {\n                return registrar.handle(multicodec, _this2.onIncomingStream.bind(_this2), {\n                  maxInboundStreams: _this2.maxInboundStreams,\n                  maxOutboundStreams: _this2.maxOutboundStreams\n                });\n              }));\n            case 13:\n              // # How does Gossipsub interact with libp2p? Rough guide from Mar 2022\n              //\n              // ## Setup:\n              // Gossipsub requests libp2p to callback, TBD\n              //\n              // `this.libp2p.handle()` registers a handler for `/meshsub/1.1.0` and other Gossipsub protocols\n              // The handler callback is registered in libp2p Upgrader.protocols map.\n              //\n              // Upgrader receives an inbound connection from some transport and (`Upgrader.upgradeInbound`):\n              // - Adds encryption (NOISE in our case)\n              // - Multiplex stream\n              // - Create a muxer and register that for each new stream call Upgrader.protocols handler\n              //\n              // ## Topology\n              // - new instance of Topology (unlinked to libp2p) with handlers\n              // - registar.register(topology)\n              // register protocol with topology\n              // Topology callbacks called on connection manager changes\n              topology = createTopology({\n                onConnect: this.onPeerConnected.bind(this),\n                onDisconnect: this.onPeerDisconnected.bind(this)\n              });\n              _context6.next = 16;\n              return Promise.all(this.multicodecs.map(function (multicodec) {\n                return registrar.register(multicodec, topology);\n              }));\n            case 16:\n              registrarTopologyIds = _context6.sent;\n              // Schedule to start heartbeat after `GossipsubHeartbeatInitialDelay`\n              heartbeatTimeout = setTimeout(this.runHeartbeat, constants.GossipsubHeartbeatInitialDelay); // Then, run heartbeat every `heartbeatInterval` offset by `GossipsubHeartbeatInitialDelay`\n              this.status = {\n                code: GossipStatusCode.started,\n                registrarTopologyIds: registrarTopologyIds,\n                heartbeatTimeout: heartbeatTimeout,\n                hearbeatStartMs: Date.now() + constants.GossipsubHeartbeatInitialDelay\n              };\n              this.score.start();\n              // connect to direct peers\n              this.directPeerInitial = setTimeout(function () {\n                Promise.resolve().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                    while (1) switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _context5.next = 2;\n                        return Promise.all(Array.from(_this2.direct).map( /*#__PURE__*/function () {\n                          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(id) {\n                            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                              while (1) switch (_context4.prev = _context4.next) {\n                                case 0:\n                                  _context4.next = 2;\n                                  return _this2.connect(id);\n                                case 2:\n                                  return _context4.abrupt(\"return\", _context4.sent);\n                                case 3:\n                                case \"end\":\n                                  return _context4.stop();\n                              }\n                            }, _callee4);\n                          }));\n                          return function (_x4) {\n                            return _ref4.apply(this, arguments);\n                          };\n                        }()));\n                      case 2:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }, _callee5);\n                }))).catch(function (err) {\n                  _this2.log(err);\n                });\n              }, constants.GossipsubDirectConnectInitialDelay);\n              this.log('started');\n            case 22:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n    /**\n     * Unmounts the gossipsub protocol and shuts down every connection\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var registrarTopologyIds, registrar, _iterator4, _step4, outboundStream, _iterator5, _step5, inboundStream;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              this.log('stopping');\n              // From pubsub\n              if (!(this.status.code !== GossipStatusCode.started)) {\n                _context7.next = 3;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 3:\n              registrarTopologyIds = this.status.registrarTopologyIds;\n              this.status = {\n                code: GossipStatusCode.stopped\n              };\n              // unregister protocol and handlers\n              registrar = this.components.getRegistrar();\n              registrarTopologyIds.forEach(function (id) {\n                return registrar.unregister(id);\n              });\n              this.outboundInflightQueue.end();\n              _iterator4 = _createForOfIteratorHelper(this.streamsOutbound.values());\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  outboundStream = _step4.value;\n                  outboundStream.close();\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              this.streamsOutbound.clear();\n              _iterator5 = _createForOfIteratorHelper(this.streamsInbound.values());\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  inboundStream = _step5.value;\n                  inboundStream.close();\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n              this.streamsInbound.clear();\n              this.peers.clear();\n              this.subscriptions.clear();\n              // Gossipsub\n              if (this.heartbeatTimer) {\n                this.heartbeatTimer.cancel();\n                this.heartbeatTimer = null;\n              }\n              this.score.stop();\n              this.mesh.clear();\n              this.fanout.clear();\n              this.fanoutLastpub.clear();\n              this.gossip.clear();\n              this.control.clear();\n              this.peerhave.clear();\n              this.iasked.clear();\n              this.backoff.clear();\n              this.outbound.clear();\n              this.gossipTracer.clear();\n              this.seenCache.clear();\n              if (this.fastMsgIdCache) this.fastMsgIdCache.clear();\n              if (this.directPeerInitial) clearTimeout(this.directPeerInitial);\n              this.log('stopped');\n            case 32:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }() /** FOR DEBUG ONLY - Dump peer stats for all peers. Data is cloned, safe to mutate */\n  }, {\n    key: \"dumpPeerScoreStats\",\n    value: function dumpPeerScoreStats() {\n      return this.score.dumpPeerScoreStats();\n    }\n    /**\n     * On an inbound stream opened\n     */\n  }, {\n    key: \"onIncomingStream\",\n    value: function onIncomingStream(_ref5) {\n      var stream = _ref5.stream,\n        connection = _ref5.connection;\n      if (!this.isStarted()) {\n        return;\n      }\n      var peerId = connection.remotePeer;\n      // add peer to router\n      this.addPeer(peerId, connection.stat.direction);\n      // create inbound stream\n      this.createInboundStream(peerId, stream);\n      // attempt to create outbound stream\n      this.outboundInflightQueue.push({\n        peerId: peerId,\n        connection: connection\n      });\n    }\n    /**\n     * Registrar notifies an established connection with pubsub protocol\n     */\n  }, {\n    key: \"onPeerConnected\",\n    value: function onPeerConnected(peerId, connection) {\n      if (!this.isStarted()) {\n        return;\n      }\n      this.addPeer(peerId, connection.stat.direction);\n      this.outboundInflightQueue.push({\n        peerId: peerId,\n        connection: connection\n      });\n    }\n    /**\n     * Registrar notifies a closing connection with pubsub protocol\n     */\n  }, {\n    key: \"onPeerDisconnected\",\n    value: function onPeerDisconnected(peerId) {\n      this.log('connection ended %p', peerId);\n      this.removePeer(peerId);\n    }\n  }, {\n    key: \"createOutboundStream\",\n    value: function () {\n      var _createOutboundStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(peerId, connection) {\n        var _this3 = this;\n        var id, _this$metrics3, stream, protocol;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this.isStarted()) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 2:\n              id = peerId.toString();\n              if (this.peers.has(id)) {\n                _context8.next = 5;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 5:\n              if (!this.streamsOutbound.has(id)) {\n                _context8.next = 7;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 7:\n              _context8.prev = 7;\n              _context8.t0 = OutboundStream;\n              _context8.next = 11;\n              return connection.newStream(this.multicodecs);\n            case 11:\n              _context8.t1 = _context8.sent;\n              _context8.t2 = function (e) {\n                return _this3.log.error('outbound pipe error', e);\n              };\n              _context8.t3 = {\n                maxBufferSize: this.opts.maxOutboundBufferSize\n              };\n              stream = new _context8.t0(_context8.t1, _context8.t2, _context8.t3);\n              this.log('create outbound stream %p', peerId);\n              this.streamsOutbound.set(id, stream);\n              protocol = stream.protocol;\n              if (protocol === constants.FloodsubID) {\n                this.floodsubPeers.add(id);\n              }\n              (_this$metrics3 = this.metrics) === null || _this$metrics3 === void 0 ? void 0 : _this$metrics3.peersPerProtocol.inc({\n                protocol: protocol\n              }, 1);\n              // Immediately send own subscriptions via the newly attached stream\n              if (this.subscriptions.size > 0) {\n                this.log('send subscriptions to', id);\n                this.sendSubscriptions(id, Array.from(this.subscriptions), true);\n              }\n              _context8.next = 26;\n              break;\n            case 23:\n              _context8.prev = 23;\n              _context8.t4 = _context8[\"catch\"](7);\n              this.log.error('createOutboundStream error', _context8.t4);\n            case 26:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[7, 23]]);\n      }));\n      function createOutboundStream(_x5, _x6) {\n        return _createOutboundStream.apply(this, arguments);\n      }\n      return createOutboundStream;\n    }()\n  }, {\n    key: \"createInboundStream\",\n    value: function () {\n      var _createInboundStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(peerId, stream) {\n        var _this4 = this;\n        var id, priorInboundStream, inboundStream;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (this.isStarted()) {\n                _context9.next = 2;\n                break;\n              }\n              return _context9.abrupt(\"return\");\n            case 2:\n              id = peerId.toString();\n              if (this.peers.has(id)) {\n                _context9.next = 5;\n                break;\n              }\n              return _context9.abrupt(\"return\");\n            case 5:\n              // TODO make this behavior more robust\n              // This behavior is different than for outbound streams\n              // If a peer initiates a new inbound connection\n              // we assume that one is the new canonical inbound stream\n              priorInboundStream = this.streamsInbound.get(id);\n              if (priorInboundStream !== undefined) {\n                this.log('replacing existing inbound steam %s', id);\n                priorInboundStream.close();\n              }\n              this.log('create inbound stream %s', id);\n              inboundStream = new InboundStream(stream);\n              this.streamsInbound.set(id, inboundStream);\n              this.pipePeerReadStream(peerId, inboundStream.source).catch(function (err) {\n                return _this4.log(err);\n              });\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function createInboundStream(_x7, _x8) {\n        return _createInboundStream.apply(this, arguments);\n      }\n      return createInboundStream;\n    }()\n    /**\n     * Add a peer to the router\n     */\n  }, {\n    key: \"addPeer\",\n    value: function addPeer(peerId, direction) {\n      var id = peerId.toString();\n      if (!this.peers.has(id)) {\n        this.log('new peer %p', peerId);\n        this.peers.add(id);\n        // Add to peer scoring\n        this.score.addPeer(id);\n        // track the connection direction. Don't allow to unset outbound\n        if (!this.outbound.has(id)) {\n          this.outbound.set(id, direction === 'outbound');\n        }\n      }\n    }\n    /**\n     * Removes a peer from the router\n     */\n  }, {\n    key: \"removePeer\",\n    value: function removePeer(peerId) {\n      var id = peerId.toString();\n      if (!this.peers.has(id)) {\n        return;\n      }\n      // delete peer\n      this.log('delete peer %p', peerId);\n      this.peers.delete(id);\n      var outboundStream = this.streamsOutbound.get(id);\n      var inboundStream = this.streamsInbound.get(id);\n      if (outboundStream) {\n        var _this$metrics4;\n        (_this$metrics4 = this.metrics) === null || _this$metrics4 === void 0 ? void 0 : _this$metrics4.peersPerProtocol.inc({\n          protocol: outboundStream.protocol\n        }, -1);\n      }\n      // close streams\n      outboundStream === null || outboundStream === void 0 ? void 0 : outboundStream.close();\n      inboundStream === null || inboundStream === void 0 ? void 0 : inboundStream.close();\n      // remove streams\n      this.streamsOutbound.delete(id);\n      this.streamsInbound.delete(id);\n      // remove peer from topics map\n      var _iterator6 = _createForOfIteratorHelper(this.topics.values()),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var peers = _step6.value;\n          peers.delete(id);\n        }\n        // Remove this peer from the mesh\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var _iterator7 = _createForOfIteratorHelper(this.mesh),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n            topicStr = _step7$value[0],\n            _peers = _step7$value[1];\n          if (_peers.delete(id) === true) {\n            var _this$metrics5;\n            (_this$metrics5 = this.metrics) === null || _this$metrics5 === void 0 ? void 0 : _this$metrics5.onRemoveFromMesh(topicStr, ChurnReason.Dc, 1);\n          }\n        }\n        // Remove this peer from the fanout\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      var _iterator8 = _createForOfIteratorHelper(this.fanout.values()),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _peers2 = _step8.value;\n          _peers2.delete(id);\n        }\n        // Remove from floodsubPeers\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      this.floodsubPeers.delete(id);\n      // Remove from gossip mapping\n      this.gossip.delete(id);\n      // Remove from control mapping\n      this.control.delete(id);\n      // Remove from backoff mapping\n      this.outbound.delete(id);\n      // Remove from peer scoring\n      this.score.removePeer(id);\n      this.acceptFromWhitelist.delete(id);\n    }\n    // API METHODS\n  }, {\n    key: \"started\",\n    get: function get() {\n      return this.status.code === GossipStatusCode.started;\n    }\n    /**\n     * Get a the peer-ids in a topic mesh\n     */\n  }, {\n    key: \"getMeshPeers\",\n    value: function getMeshPeers(topic) {\n      var peersInTopic = this.mesh.get(topic);\n      return peersInTopic ? Array.from(peersInTopic) : [];\n    }\n    /**\n     * Get a list of the peer-ids that are subscribed to one topic.\n     */\n  }, {\n    key: \"getSubscribers\",\n    value: function getSubscribers(topic) {\n      var peersInTopic = this.topics.get(topic);\n      return (peersInTopic ? Array.from(peersInTopic) : []).map(function (str) {\n        return peerIdFromString(str);\n      });\n    }\n    /**\n     * Get the list of topics which the peer is subscribed to.\n     */\n  }, {\n    key: \"getTopics\",\n    value: function getTopics() {\n      return Array.from(this.subscriptions);\n    }\n    // TODO: Reviewing Pubsub API\n    // MESSAGE METHODS\n    /**\n     * Responsible for processing each RPC message received by other peers.\n     */\n  }, {\n    key: \"pipePeerReadStream\",\n    value: function () {\n      var _pipePeerReadStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(peerId, stream) {\n        var _this5 = this;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return pipe(stream, /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(source) {\n                  var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, data, _this5$metrics, rpcBytes, rpc;\n                  return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                    while (1) switch (_context10.prev = _context10.next) {\n                      case 0:\n                        _iteratorAbruptCompletion2 = false;\n                        _didIteratorError2 = false;\n                        _context10.prev = 2;\n                        _iterator2 = _asyncIterator(source);\n                      case 4:\n                        _context10.next = 6;\n                        return _iterator2.next();\n                      case 6:\n                        if (!(_iteratorAbruptCompletion2 = !(_step2 = _context10.sent).done)) {\n                          _context10.next = 26;\n                          break;\n                        }\n                        data = _step2.value;\n                        _context10.prev = 8;\n                        // TODO: Check max gossip message size, before decodeRpc()\n                        rpcBytes = data.subarray(); // Note: This function may throw, it must be wrapped in a try {} catch {} to prevent closing the stream.\n                        // TODO: What should we do if the entire RPC is invalid?\n                        rpc = RPC.decode(rpcBytes);\n                        (_this5$metrics = _this5.metrics) === null || _this5$metrics === void 0 ? void 0 : _this5$metrics.onRpcRecv(rpc, rpcBytes.length);\n                        // Since processRpc may be overridden entirely in unsafe ways,\n                        // the simplest/safest option here is to wrap in a function and capture all errors\n                        // to prevent a top-level unhandled exception\n                        // This processing of rpc messages should happen without awaiting full validation/execution of prior messages\n                        if (!_this5.opts.awaitRpcHandler) {\n                          _context10.next = 17;\n                          break;\n                        }\n                        _context10.next = 15;\n                        return _this5.handleReceivedRpc(peerId, rpc);\n                      case 15:\n                        _context10.next = 18;\n                        break;\n                      case 17:\n                        _this5.handleReceivedRpc(peerId, rpc).catch(function (err) {\n                          return _this5.log(err);\n                        });\n                      case 18:\n                        _context10.next = 23;\n                        break;\n                      case 20:\n                        _context10.prev = 20;\n                        _context10.t0 = _context10[\"catch\"](8);\n                        _this5.log(_context10.t0);\n                      case 23:\n                        _iteratorAbruptCompletion2 = false;\n                        _context10.next = 4;\n                        break;\n                      case 26:\n                        _context10.next = 32;\n                        break;\n                      case 28:\n                        _context10.prev = 28;\n                        _context10.t1 = _context10[\"catch\"](2);\n                        _didIteratorError2 = true;\n                        _iteratorError2 = _context10.t1;\n                      case 32:\n                        _context10.prev = 32;\n                        _context10.prev = 33;\n                        if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                          _context10.next = 37;\n                          break;\n                        }\n                        _context10.next = 37;\n                        return _iterator2.return();\n                      case 37:\n                        _context10.prev = 37;\n                        if (!_didIteratorError2) {\n                          _context10.next = 40;\n                          break;\n                        }\n                        throw _iteratorError2;\n                      case 40:\n                        return _context10.finish(37);\n                      case 41:\n                        return _context10.finish(32);\n                      case 42:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }, _callee10, null, [[2, 28, 32, 42], [8, 20], [33,, 37, 41]]);\n                }));\n                return function (_x11) {\n                  return _ref6.apply(this, arguments);\n                };\n              }());\n            case 3:\n              _context11.next = 9;\n              break;\n            case 5:\n              _context11.prev = 5;\n              _context11.t0 = _context11[\"catch\"](0);\n              this.log.error(_context11.t0);\n              this.onPeerDisconnected(peerId);\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[0, 5]]);\n      }));\n      function pipePeerReadStream(_x9, _x10) {\n        return _pipePeerReadStream.apply(this, arguments);\n      }\n      return pipePeerReadStream;\n    }()\n    /**\n     * Handles an rpc request from a peer\n     */\n  }, {\n    key: \"handleReceivedRpc\",\n    value: function () {\n      var _handleReceivedRpc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(from, rpc) {\n        var _this6 = this;\n        var _this$metrics6, _iterator9, _step9, message, handleReceivedMessagePromise;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              if (this.acceptFrom(from.toString())) {\n                _context12.next = 4;\n                break;\n              }\n              this.log('received message from unacceptable peer %p', from);\n              (_this$metrics6 = this.metrics) === null || _this$metrics6 === void 0 ? void 0 : _this$metrics6.rpcRecvNotAccepted.inc();\n              return _context12.abrupt(\"return\");\n            case 4:\n              this.log('rpc from %p', from);\n              // Handle received subscriptions\n              if (rpc.subscriptions && rpc.subscriptions.length > 0) {\n                // update peer subscriptions\n                rpc.subscriptions.forEach(function (subOpt) {\n                  _this6.handleReceivedSubscription(from, subOpt);\n                });\n                this.dispatchEvent(new CustomEvent('subscription-change', {\n                  detail: {\n                    peerId: from,\n                    subscriptions: rpc.subscriptions.filter(function (sub) {\n                      return sub.topic !== null;\n                    }).map(function (sub) {\n                      var _sub$topic;\n                      return {\n                        topic: (_sub$topic = sub.topic) !== null && _sub$topic !== void 0 ? _sub$topic : '',\n                        subscribe: Boolean(sub.subscribe)\n                      };\n                    })\n                  }\n                }));\n              }\n              // Handle messages\n              // TODO: (up to limit)\n              if (!rpc.messages) {\n                _context12.next = 26;\n                break;\n              }\n              _iterator9 = _createForOfIteratorHelper(rpc.messages);\n              _context12.prev = 8;\n              _iterator9.s();\n            case 10:\n              if ((_step9 = _iterator9.n()).done) {\n                _context12.next = 18;\n                break;\n              }\n              message = _step9.value;\n              handleReceivedMessagePromise = this.handleReceivedMessage(from, message)\n              // Should never throw, but handle just in case\n              .catch(function (err) {\n                return _this6.log(err);\n              });\n              if (!this.opts.awaitRpcMessageHandler) {\n                _context12.next = 16;\n                break;\n              }\n              _context12.next = 16;\n              return handleReceivedMessagePromise;\n            case 16:\n              _context12.next = 10;\n              break;\n            case 18:\n              _context12.next = 23;\n              break;\n            case 20:\n              _context12.prev = 20;\n              _context12.t0 = _context12[\"catch\"](8);\n              _iterator9.e(_context12.t0);\n            case 23:\n              _context12.prev = 23;\n              _iterator9.f();\n              return _context12.finish(23);\n            case 26:\n              if (!rpc.control) {\n                _context12.next = 29;\n                break;\n              }\n              _context12.next = 29;\n              return this.handleControlMessage(from.toString(), rpc.control);\n            case 29:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[8, 20, 23, 26]]);\n      }));\n      function handleReceivedRpc(_x12, _x13) {\n        return _handleReceivedRpc.apply(this, arguments);\n      }\n      return handleReceivedRpc;\n    }()\n    /**\n     * Handles a subscription change from a peer\n     */\n  }, {\n    key: \"handleReceivedSubscription\",\n    value: function handleReceivedSubscription(from, subOpt) {\n      if (subOpt.topic == null) {\n        return;\n      }\n      this.log('subscription update from %p topic %s', from, subOpt.topic);\n      var topicSet = this.topics.get(subOpt.topic);\n      if (topicSet == null) {\n        topicSet = new Set();\n        this.topics.set(subOpt.topic, topicSet);\n      }\n      if (subOpt.subscribe) {\n        // subscribe peer to new topic\n        topicSet.add(from.toString());\n      } else {\n        // unsubscribe from existing topic\n        topicSet.delete(from.toString());\n      }\n      // TODO: rust-libp2p has A LOT more logic here\n    }\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */\n  }, {\n    key: \"handleReceivedMessage\",\n    value: function () {\n      var _handleReceivedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(from, rpcMsg) {\n        var _this$metrics7, _this$metrics8, _this$metrics9;\n        var validationResult, msgIdStr, isFromSelf;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              (_this$metrics7 = this.metrics) === null || _this$metrics7 === void 0 ? void 0 : _this$metrics7.onMsgRecvPreValidation(rpcMsg.topic);\n              _context13.next = 3;\n              return this.validateReceivedMessage(from, rpcMsg);\n            case 3:\n              validationResult = _context13.sent;\n              (_this$metrics8 = this.metrics) === null || _this$metrics8 === void 0 ? void 0 : _this$metrics8.onMsgRecvResult(rpcMsg.topic, validationResult.code);\n              _context13.t0 = validationResult.code;\n              _context13.next = _context13.t0 === MessageStatus.duplicate ? 8 : _context13.t0 === MessageStatus.invalid ? 11 : _context13.t0 === MessageStatus.valid ? 14 : 19;\n              break;\n            case 8:\n              // Report the duplicate\n              this.score.duplicateMessage(from.toString(), validationResult.msgIdStr, rpcMsg.topic);\n              this.mcache.observeDuplicate(validationResult.msgIdStr, from.toString());\n              return _context13.abrupt(\"return\");\n            case 11:\n              // invalid messages received\n              // metrics.register_invalid_message(&raw_message.topic)\n              // Tell peer_score about reject\n              // Reject the original source, and any duplicates we've seen from other peers.\n              if (validationResult.msgIdStr) {\n                msgIdStr = validationResult.msgIdStr;\n                this.score.rejectMessage(from.toString(), msgIdStr, rpcMsg.topic, validationResult.reason);\n                this.gossipTracer.rejectMessage(msgIdStr, validationResult.reason);\n              } else {\n                this.score.rejectInvalidMessage(from.toString(), rpcMsg.topic);\n              }\n              (_this$metrics9 = this.metrics) === null || _this$metrics9 === void 0 ? void 0 : _this$metrics9.onMsgRecvInvalid(rpcMsg.topic, validationResult);\n              return _context13.abrupt(\"return\");\n            case 14:\n              // Tells score that message arrived (but is maybe not fully validated yet).\n              // Consider the message as delivered for gossip promises.\n              this.score.validateMessage(validationResult.messageId.msgIdStr);\n              this.gossipTracer.deliverMessage(validationResult.messageId.msgIdStr);\n              // Add the message to our memcache\n              // if no validation is required, mark the message as validated\n              this.mcache.put(validationResult.messageId, rpcMsg, !this.opts.asyncValidation);\n              // Dispatch the message to the user if we are subscribed to the topic\n              if (this.subscriptions.has(rpcMsg.topic)) {\n                isFromSelf = this.components.getPeerId().equals(from);\n                if (!isFromSelf || this.opts.emitSelf) {\n                  _get(_getPrototypeOf(GossipSub.prototype), \"dispatchEvent\", this).call(this, new CustomEvent('gossipsub:message', {\n                    detail: {\n                      propagationSource: from,\n                      msgId: validationResult.messageId.msgIdStr,\n                      msg: validationResult.msg\n                    }\n                  }));\n                  // TODO: Add option to switch between emit per topic or all messages in one\n                  _get(_getPrototypeOf(GossipSub.prototype), \"dispatchEvent\", this).call(this, new CustomEvent('message', {\n                    detail: validationResult.msg\n                  }));\n                }\n              }\n              // Forward the message to mesh peers, if no validation is required\n              // If asyncValidation is ON, expect the app layer to call reportMessageValidationResult(), then forward\n              if (!this.opts.asyncValidation) {\n                // TODO: in rust-libp2p\n                // .forward_msg(&msg_id, raw_message, Some(propagation_source))\n                this.forwardMessage(validationResult.messageId.msgIdStr, rpcMsg, from.toString());\n              }\n            case 19:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function handleReceivedMessage(_x14, _x15) {\n        return _handleReceivedMessage.apply(this, arguments);\n      }\n      return handleReceivedMessage;\n    }()\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */\n  }, {\n    key: \"validateReceivedMessage\",\n    value: function () {\n      var _validateReceivedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(propagationSource, rpcMsg) {\n        var _this$fastMsgIdFn, _this$fastMsgIdCache, _this$fastMsgIdCache2;\n        var fastMsgIdStr, msgIdCached, validationResult, msg, msgId, msgIdStr, messageId, topicValidator, acceptance, errCode;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              // Fast message ID stuff\n              fastMsgIdStr = (_this$fastMsgIdFn = this.fastMsgIdFn) === null || _this$fastMsgIdFn === void 0 ? void 0 : _this$fastMsgIdFn.call(this, rpcMsg);\n              msgIdCached = fastMsgIdStr ? (_this$fastMsgIdCache = this.fastMsgIdCache) === null || _this$fastMsgIdCache === void 0 ? void 0 : _this$fastMsgIdCache.get(fastMsgIdStr) : undefined;\n              if (!msgIdCached) {\n                _context14.next = 4;\n                break;\n              }\n              return _context14.abrupt(\"return\", {\n                code: MessageStatus.duplicate,\n                msgIdStr: msgIdCached\n              });\n            case 4:\n              _context14.next = 6;\n              return validateToRawMessage(this.globalSignaturePolicy, rpcMsg);\n            case 6:\n              validationResult = _context14.sent;\n              if (validationResult.valid) {\n                _context14.next = 9;\n                break;\n              }\n              return _context14.abrupt(\"return\", {\n                code: MessageStatus.invalid,\n                reason: RejectReason.Error,\n                error: validationResult.error\n              });\n            case 9:\n              msg = validationResult.message; // Try and perform the data transform to the message. If it fails, consider it invalid.\n              _context14.prev = 10;\n              if (this.dataTransform) {\n                msg.data = this.dataTransform.inboundTransform(rpcMsg.topic, msg.data);\n              }\n              _context14.next = 18;\n              break;\n            case 14:\n              _context14.prev = 14;\n              _context14.t0 = _context14[\"catch\"](10);\n              this.log('Invalid message, transform failed', _context14.t0);\n              return _context14.abrupt(\"return\", {\n                code: MessageStatus.invalid,\n                reason: RejectReason.Error,\n                error: ValidateError.TransformFailed\n              });\n            case 18:\n              _context14.next = 20;\n              return this.msgIdFn(msg);\n            case 20:\n              msgId = _context14.sent;\n              msgIdStr = this.msgIdToStrFn(msgId);\n              messageId = {\n                msgId: msgId,\n                msgIdStr: msgIdStr\n              }; // Add the message to the duplicate caches\n              if (fastMsgIdStr) (_this$fastMsgIdCache2 = this.fastMsgIdCache) === null || _this$fastMsgIdCache2 === void 0 ? void 0 : _this$fastMsgIdCache2.put(fastMsgIdStr, msgIdStr);\n              if (!this.seenCache.has(msgIdStr)) {\n                _context14.next = 28;\n                break;\n              }\n              return _context14.abrupt(\"return\", {\n                code: MessageStatus.duplicate,\n                msgIdStr: msgIdStr\n              });\n            case 28:\n              this.seenCache.put(msgIdStr);\n            case 29:\n              // (Optional) Provide custom validation here with dynamic validators per topic\n              // NOTE: This custom topicValidator() must resolve fast (< 100ms) to allow scores\n              // to not penalize peers for long validation times.\n              topicValidator = this.topicValidators.get(rpcMsg.topic);\n              if (!(topicValidator != null)) {\n                _context14.next = 44;\n                break;\n              }\n              _context14.prev = 31;\n              _context14.next = 34;\n              return topicValidator(msg.topic, msg, propagationSource);\n            case 34:\n              acceptance = _context14.sent;\n              _context14.next = 42;\n              break;\n            case 37:\n              _context14.prev = 37;\n              _context14.t1 = _context14[\"catch\"](31);\n              errCode = _context14.t1.code;\n              if (errCode === constants.ERR_TOPIC_VALIDATOR_IGNORE) acceptance = MessageAcceptance.Ignore;\n              if (errCode === constants.ERR_TOPIC_VALIDATOR_REJECT) acceptance = MessageAcceptance.Reject;else acceptance = MessageAcceptance.Ignore;\n            case 42:\n              if (!(acceptance !== MessageAcceptance.Accept)) {\n                _context14.next = 44;\n                break;\n              }\n              return _context14.abrupt(\"return\", {\n                code: MessageStatus.invalid,\n                reason: rejectReasonFromAcceptance(acceptance),\n                msgIdStr: msgIdStr\n              });\n            case 44:\n              return _context14.abrupt(\"return\", {\n                code: MessageStatus.valid,\n                messageId: messageId,\n                msg: msg\n              });\n            case 45:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this, [[10, 14], [31, 37]]);\n      }));\n      function validateReceivedMessage(_x16, _x17) {\n        return _validateReceivedMessage.apply(this, arguments);\n      }\n      return validateReceivedMessage;\n    }()\n    /**\n     * Return score of a peer.\n     */\n  }, {\n    key: \"getScore\",\n    value: function getScore(peerId) {\n      return this.score.score(peerId);\n    }\n    /**\n     * Send an rpc object to a peer with subscriptions\n     */\n  }, {\n    key: \"sendSubscriptions\",\n    value: function sendSubscriptions(toPeer, topics, subscribe) {\n      this.sendRpc(toPeer, {\n        subscriptions: topics.map(function (topic) {\n          return {\n            topic: topic,\n            subscribe: subscribe\n          };\n        }),\n        messages: []\n      });\n    }\n    /**\n     * Handles an rpc control message from a peer\n     */\n  }, {\n    key: \"handleControlMessage\",\n    value: function () {\n      var _handleControlMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(id, controlMsg) {\n        var iwant, ihave, prune;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!(controlMsg === undefined)) {\n                _context15.next = 2;\n                break;\n              }\n              return _context15.abrupt(\"return\");\n            case 2:\n              iwant = controlMsg.ihave ? this.handleIHave(id, controlMsg.ihave) : [];\n              ihave = controlMsg.iwant ? this.handleIWant(id, controlMsg.iwant) : [];\n              if (!controlMsg.graft) {\n                _context15.next = 10;\n                break;\n              }\n              _context15.next = 7;\n              return this.handleGraft(id, controlMsg.graft);\n            case 7:\n              _context15.t0 = _context15.sent;\n              _context15.next = 11;\n              break;\n            case 10:\n              _context15.t0 = [];\n            case 11:\n              prune = _context15.t0;\n              _context15.t1 = controlMsg.prune;\n              if (!_context15.t1) {\n                _context15.next = 16;\n                break;\n              }\n              _context15.next = 16;\n              return this.handlePrune(id, controlMsg.prune);\n            case 16:\n              if (!(!iwant.length && !ihave.length && !prune.length)) {\n                _context15.next = 18;\n                break;\n              }\n              return _context15.abrupt(\"return\");\n            case 18:\n              this.sendRpc(id, createGossipRpc(ihave, {\n                iwant: iwant,\n                prune: prune\n              }));\n            case 19:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function handleControlMessage(_x18, _x19) {\n        return _handleControlMessage.apply(this, arguments);\n      }\n      return handleControlMessage;\n    }()\n    /**\n     * Whether to accept a message from a peer\n     */\n  }, {\n    key: \"acceptFrom\",\n    value: function acceptFrom(id) {\n      if (this.direct.has(id)) {\n        return true;\n      }\n      var now = Date.now();\n      var entry = this.acceptFromWhitelist.get(id);\n      if (entry && entry.messagesAccepted < ACCEPT_FROM_WHITELIST_MAX_MESSAGES && entry.acceptUntil >= now) {\n        entry.messagesAccepted += 1;\n        return true;\n      }\n      var score = this.score.score(id);\n      if (score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE) {\n        // peer is unlikely to be able to drop its score to `graylistThreshold`\n        // after 128 messages or 1s\n        this.acceptFromWhitelist.set(id, {\n          messagesAccepted: 0,\n          acceptUntil: now + ACCEPT_FROM_WHITELIST_DURATION_MS\n        });\n      } else {\n        this.acceptFromWhitelist.delete(id);\n      }\n      return score >= this.opts.scoreThresholds.graylistThreshold;\n    }\n    /**\n     * Handles IHAVE messages\n     */\n  }, {\n    key: \"handleIHave\",\n    value: function handleIHave(id, ihave) {\n      var _this$peerhave$get,\n        _this$iasked$get,\n        _this7 = this;\n      if (!ihave.length) {\n        return [];\n      }\n      // we ignore IHAVE gossip from any peer whose score is below the gossips threshold\n      var score = this.score.score(id);\n      if (score < this.opts.scoreThresholds.gossipThreshold) {\n        var _this$metrics10;\n        this.log('IHAVE: ignoring peer %s with score below threshold [ score = %d ]', id, score);\n        (_this$metrics10 = this.metrics) === null || _this$metrics10 === void 0 ? void 0 : _this$metrics10.ihaveRcvIgnored.inc({\n          reason: IHaveIgnoreReason.LowScore\n        });\n        return [];\n      }\n      // IHAVE flood protection\n      var peerhave = ((_this$peerhave$get = this.peerhave.get(id)) !== null && _this$peerhave$get !== void 0 ? _this$peerhave$get : 0) + 1;\n      this.peerhave.set(id, peerhave);\n      if (peerhave > constants.GossipsubMaxIHaveMessages) {\n        var _this$metrics11;\n        this.log('IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring', id, peerhave);\n        (_this$metrics11 = this.metrics) === null || _this$metrics11 === void 0 ? void 0 : _this$metrics11.ihaveRcvIgnored.inc({\n          reason: IHaveIgnoreReason.MaxIhave\n        });\n        return [];\n      }\n      var iasked = (_this$iasked$get = this.iasked.get(id)) !== null && _this$iasked$get !== void 0 ? _this$iasked$get : 0;\n      if (iasked >= constants.GossipsubMaxIHaveLength) {\n        var _this$metrics12;\n        this.log('IHAVE: peer %s has already advertised too many messages (%d); ignoring', id, iasked);\n        (_this$metrics12 = this.metrics) === null || _this$metrics12 === void 0 ? void 0 : _this$metrics12.ihaveRcvIgnored.inc({\n          reason: IHaveIgnoreReason.MaxIasked\n        });\n        return [];\n      }\n      // string msgId => msgId\n      var iwant = new Map();\n      ihave.forEach(function (_ref7) {\n        var _this7$metrics;\n        var topicID = _ref7.topicID,\n          messageIDs = _ref7.messageIDs;\n        if (!topicID || !messageIDs || !_this7.mesh.has(topicID)) {\n          return;\n        }\n        var idonthave = 0;\n        messageIDs.forEach(function (msgId) {\n          var msgIdStr = _this7.msgIdToStrFn(msgId);\n          if (!_this7.seenCache.has(msgIdStr)) {\n            iwant.set(msgIdStr, msgId);\n            idonthave++;\n          }\n        });\n        (_this7$metrics = _this7.metrics) === null || _this7$metrics === void 0 ? void 0 : _this7$metrics.onIhaveRcv(topicID, messageIDs.length, idonthave);\n      });\n      if (!iwant.size) {\n        return [];\n      }\n      var iask = iwant.size;\n      if (iask + iasked > constants.GossipsubMaxIHaveLength) {\n        iask = constants.GossipsubMaxIHaveLength - iasked;\n      }\n      this.log('IHAVE: Asking for %d out of %d messages from %s', iask, iwant.size, id);\n      var iwantList = Array.from(iwant.values());\n      // ask in random order\n      shuffle(iwantList);\n      // truncate to the messages we are actually asking for and update the iasked counter\n      iwantList = iwantList.slice(0, iask);\n      this.iasked.set(id, iasked + iask);\n      this.gossipTracer.addPromise(id, iwantList);\n      return [{\n        messageIDs: iwantList\n      }];\n    }\n    /**\n     * Handles IWANT messages\n     * Returns messages to send back to peer\n     */\n  }, {\n    key: \"handleIWant\",\n    value: function handleIWant(id, iwant) {\n      var _this8 = this,\n        _this$metrics13;\n      if (!iwant.length) {\n        return [];\n      }\n      // we don't respond to IWANT requests from any per whose score is below the gossip threshold\n      var score = this.score.score(id);\n      if (score < this.opts.scoreThresholds.gossipThreshold) {\n        this.log('IWANT: ignoring peer %s with score below threshold [score = %d]', id, score);\n        return [];\n      }\n      var ihave = new Map();\n      var iwantByTopic = new Map();\n      var iwantDonthave = 0;\n      iwant.forEach(function (_ref8) {\n        var messageIDs = _ref8.messageIDs;\n        messageIDs && messageIDs.forEach(function (msgId) {\n          var _iwantByTopic$get;\n          var msgIdStr = _this8.msgIdToStrFn(msgId);\n          var entry = _this8.mcache.getWithIWantCount(msgIdStr, id);\n          if (entry == null) {\n            iwantDonthave++;\n            return;\n          }\n          iwantByTopic.set(entry.msg.topic, 1 + ((_iwantByTopic$get = iwantByTopic.get(entry.msg.topic)) !== null && _iwantByTopic$get !== void 0 ? _iwantByTopic$get : 0));\n          if (entry.count > constants.GossipsubGossipRetransmission) {\n            _this8.log('IWANT: Peer %s has asked for message %s too many times: ignoring request', id, msgId);\n            return;\n          }\n          ihave.set(msgIdStr, entry.msg);\n        });\n      });\n      (_this$metrics13 = this.metrics) === null || _this$metrics13 === void 0 ? void 0 : _this$metrics13.onIwantRcv(iwantByTopic, iwantDonthave);\n      if (!ihave.size) {\n        this.log('IWANT: Could not provide any wanted messages to %s', id);\n        return [];\n      }\n      this.log('IWANT: Sending %d messages to %s', ihave.size, id);\n      return Array.from(ihave.values());\n    }\n    /**\n     * Handles Graft messages\n     */\n  }, {\n    key: \"handleGraft\",\n    value: function () {\n      var _handleGraft = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(id, graft) {\n        var _this9 = this;\n        var prune, score, now, doPX;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              prune = [];\n              score = this.score.score(id);\n              now = Date.now();\n              doPX = this.opts.doPX;\n              graft.forEach(function (_ref9) {\n                var _this9$backoff$get, _this9$metrics;\n                var topicID = _ref9.topicID;\n                if (!topicID) {\n                  return;\n                }\n                var peersInMesh = _this9.mesh.get(topicID);\n                if (!peersInMesh) {\n                  // don't do PX when there is an unknown topic to avoid leaking our peers\n                  doPX = false;\n                  // spam hardening: ignore GRAFTs for unknown topics\n                  return;\n                }\n                // check if peer is already in the mesh; if so do nothing\n                if (peersInMesh.has(id)) {\n                  return;\n                }\n                // we don't GRAFT to/from direct peers; complain loudly if this happens\n                if (_this9.direct.has(id)) {\n                  _this9.log('GRAFT: ignoring request from direct peer %s', id);\n                  // this is possibly a bug from a non-reciprical configuration; send a PRUNE\n                  prune.push(topicID);\n                  // but don't px\n                  doPX = false;\n                  return;\n                }\n                // make sure we are not backing off that peer\n                var expire = (_this9$backoff$get = _this9.backoff.get(topicID)) === null || _this9$backoff$get === void 0 ? void 0 : _this9$backoff$get.get(id);\n                if (typeof expire === 'number' && now < expire) {\n                  _this9.log('GRAFT: ignoring backed off peer %s', id);\n                  // add behavioral penalty\n                  _this9.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n                  // no PX\n                  doPX = false;\n                  // check the flood cutoff -- is the GRAFT coming too fast?\n                  var floodCutoff = expire + _this9.opts.graftFloodThreshold - _this9.opts.pruneBackoff;\n                  if (now < floodCutoff) {\n                    // extra penalty\n                    _this9.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n                  }\n                  // refresh the backoff\n                  _this9.addBackoff(id, topicID);\n                  prune.push(topicID);\n                  return;\n                }\n                // check the score\n                if (score < 0) {\n                  // we don't GRAFT peers with negative score\n                  _this9.log('GRAFT: ignoring peer %s with negative score: score=%d, topic=%s', id, score, topicID);\n                  // we do send them PRUNE however, because it's a matter of protocol correctness\n                  prune.push(topicID);\n                  // but we won't PX to them\n                  doPX = false;\n                  // add/refresh backoff so that we don't reGRAFT too early even if the score decays\n                  _this9.addBackoff(id, topicID);\n                  return;\n                }\n                // check the number of mesh peers; if it is at (or over) Dhi, we only accept grafts\n                // from peers with outbound connections; this is a defensive check to restrict potential\n                // mesh takeover attacks combined with love bombing\n                if (peersInMesh.size >= _this9.opts.Dhi && !_this9.outbound.get(id)) {\n                  prune.push(topicID);\n                  _this9.addBackoff(id, topicID);\n                  return;\n                }\n                _this9.log('GRAFT: Add mesh link from %s in %s', id, topicID);\n                _this9.score.graft(id, topicID);\n                peersInMesh.add(id);\n                (_this9$metrics = _this9.metrics) === null || _this9$metrics === void 0 ? void 0 : _this9$metrics.onAddToMesh(topicID, InclusionReason.Subscribed, 1);\n              });\n              if (prune.length) {\n                _context16.next = 7;\n                break;\n              }\n              return _context16.abrupt(\"return\", []);\n            case 7:\n              _context16.next = 9;\n              return Promise.all(prune.map(function (topic) {\n                return _this9.makePrune(id, topic, doPX);\n              }));\n            case 9:\n              return _context16.abrupt(\"return\", _context16.sent);\n            case 10:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function handleGraft(_x20, _x21) {\n        return _handleGraft.apply(this, arguments);\n      }\n      return handleGraft;\n    }()\n    /**\n     * Handles Prune messages\n     */\n  }, {\n    key: \"handlePrune\",\n    value: function () {\n      var _handlePrune = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(id, prune) {\n        var score, _iterator10, _step10, _step10$value, topicID, backoff, peers, peersInMesh, _this$metrics14;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              score = this.score.score(id);\n              _iterator10 = _createForOfIteratorHelper(prune);\n              _context17.prev = 2;\n              _iterator10.s();\n            case 4:\n              if ((_step10 = _iterator10.n()).done) {\n                _context17.next = 23;\n                break;\n              }\n              _step10$value = _step10.value, topicID = _step10$value.topicID, backoff = _step10$value.backoff, peers = _step10$value.peers;\n              if (!(topicID == null)) {\n                _context17.next = 8;\n                break;\n              }\n              return _context17.abrupt(\"continue\", 21);\n            case 8:\n              peersInMesh = this.mesh.get(topicID);\n              if (peersInMesh) {\n                _context17.next = 11;\n                break;\n              }\n              return _context17.abrupt(\"return\");\n            case 11:\n              this.log('PRUNE: Remove mesh link to %s in %s', id, topicID);\n              this.score.prune(id, topicID);\n              if (peersInMesh.has(id)) {\n                peersInMesh.delete(id);\n                (_this$metrics14 = this.metrics) === null || _this$metrics14 === void 0 ? void 0 : _this$metrics14.onRemoveFromMesh(topicID, ChurnReason.Unsub, 1);\n              }\n              // is there a backoff specified by the peer? if so obey it\n              if (typeof backoff === 'number' && backoff > 0) {\n                this.doAddBackoff(id, topicID, backoff * 1000);\n              } else {\n                this.addBackoff(id, topicID);\n              }\n              // PX\n              if (!(peers && peers.length)) {\n                _context17.next = 21;\n                break;\n              }\n              if (!(score < this.opts.scoreThresholds.acceptPXThreshold)) {\n                _context17.next = 19;\n                break;\n              }\n              this.log('PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]', id, score, topicID);\n              return _context17.abrupt(\"continue\", 21);\n            case 19:\n              _context17.next = 21;\n              return this.pxConnect(peers);\n            case 21:\n              _context17.next = 4;\n              break;\n            case 23:\n              _context17.next = 28;\n              break;\n            case 25:\n              _context17.prev = 25;\n              _context17.t0 = _context17[\"catch\"](2);\n              _iterator10.e(_context17.t0);\n            case 28:\n              _context17.prev = 28;\n              _iterator10.f();\n              return _context17.finish(28);\n            case 31:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this, [[2, 25, 28, 31]]);\n      }));\n      function handlePrune(_x22, _x23) {\n        return _handlePrune.apply(this, arguments);\n      }\n      return handlePrune;\n    }()\n    /**\n     * Add standard backoff log for a peer in a topic\n     */\n  }, {\n    key: \"addBackoff\",\n    value: function addBackoff(id, topic) {\n      this.doAddBackoff(id, topic, this.opts.pruneBackoff);\n    }\n    /**\n     * Add backoff expiry interval for a peer in a topic\n     *\n     * @param id\n     * @param topic\n     * @param interval - backoff duration in milliseconds\n     */\n  }, {\n    key: \"doAddBackoff\",\n    value: function doAddBackoff(id, topic, interval) {\n      var _backoff$get;\n      var backoff = this.backoff.get(topic);\n      if (!backoff) {\n        backoff = new Map();\n        this.backoff.set(topic, backoff);\n      }\n      var expire = Date.now() + interval;\n      var existingExpire = (_backoff$get = backoff.get(id)) !== null && _backoff$get !== void 0 ? _backoff$get : 0;\n      if (existingExpire < expire) {\n        backoff.set(id, expire);\n      }\n    }\n    /**\n     * Apply penalties from broken IHAVE/IWANT promises\n     */\n  }, {\n    key: \"applyIwantPenalties\",\n    value: function applyIwantPenalties() {\n      var _this10 = this;\n      this.gossipTracer.getBrokenPromises().forEach(function (count, p) {\n        _this10.log(\"peer %s didn't follow up in %d IWANT requests; adding penalty\", p, count);\n        _this10.score.addPenalty(p, count, ScorePenalty.BrokenPromise);\n      });\n    }\n    /**\n     * Clear expired backoff expiries\n     */\n  }, {\n    key: \"clearBackoff\",\n    value: function clearBackoff() {\n      var _this11 = this;\n      // we only clear once every GossipsubPruneBackoffTicks ticks to avoid iterating over the maps too much\n      if (this.heartbeatTicks % constants.GossipsubPruneBackoffTicks !== 0) {\n        return;\n      }\n      var now = Date.now();\n      this.backoff.forEach(function (backoff, topic) {\n        backoff.forEach(function (expire, id) {\n          if (expire < now) {\n            backoff.delete(id);\n          }\n        });\n        if (backoff.size === 0) {\n          _this11.backoff.delete(topic);\n        }\n      });\n    }\n    /**\n     * Maybe reconnect to direct peers\n     */\n  }, {\n    key: \"directConnect\",\n    value: function () {\n      var _directConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var _this12 = this;\n        var toconnect;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              toconnect = [];\n              this.direct.forEach(function (id) {\n                if (!_this12.streamsOutbound.has(id)) {\n                  toconnect.push(id);\n                }\n              });\n              _context19.next = 4;\n              return Promise.all(toconnect.map( /*#__PURE__*/function () {\n                var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(id) {\n                  return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n                    while (1) switch (_context18.prev = _context18.next) {\n                      case 0:\n                        _context18.next = 2;\n                        return _this12.connect(id);\n                      case 2:\n                        return _context18.abrupt(\"return\", _context18.sent);\n                      case 3:\n                      case \"end\":\n                        return _context18.stop();\n                    }\n                  }, _callee18);\n                }));\n                return function (_x24) {\n                  return _ref10.apply(this, arguments);\n                };\n              }()));\n            case 4:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }));\n      function directConnect() {\n        return _directConnect.apply(this, arguments);\n      }\n      return directConnect;\n    }()\n    /**\n     * Maybe attempt connection given signed peer records\n     */\n  }, {\n    key: \"pxConnect\",\n    value: function () {\n      var _pxConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(peers) {\n        var _this13 = this;\n        var toconnect;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              if (peers.length > this.opts.prunePeers) {\n                shuffle(peers);\n                peers = peers.slice(0, this.opts.prunePeers);\n              }\n              toconnect = [];\n              _context22.next = 4;\n              return Promise.all(peers.map( /*#__PURE__*/function () {\n                var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(pi) {\n                  var p, envelope, eid;\n                  return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n                    while (1) switch (_context20.prev = _context20.next) {\n                      case 0:\n                        if (pi.peerID) {\n                          _context20.next = 2;\n                          break;\n                        }\n                        return _context20.abrupt(\"return\");\n                      case 2:\n                        p = peerIdFromBytes(pi.peerID).toString();\n                        if (!_this13.peers.has(p)) {\n                          _context20.next = 5;\n                          break;\n                        }\n                        return _context20.abrupt(\"return\");\n                      case 5:\n                        if (pi.signedPeerRecord) {\n                          _context20.next = 8;\n                          break;\n                        }\n                        toconnect.push(p);\n                        return _context20.abrupt(\"return\");\n                      case 8:\n                        _context20.prev = 8;\n                        _context20.next = 11;\n                        return RecordEnvelope.openAndCertify(pi.signedPeerRecord, 'libp2p-peer-record');\n                      case 11:\n                        envelope = _context20.sent;\n                        eid = envelope.peerId;\n                        if (envelope.peerId.equals(p)) {\n                          _context20.next = 16;\n                          break;\n                        }\n                        _this13.log(\"bogus peer record obtained through px: peer ID %p doesn't match expected peer %p\", eid, p);\n                        return _context20.abrupt(\"return\");\n                      case 16:\n                        _context20.next = 18;\n                        return _this13.components.getPeerStore().addressBook.consumePeerRecord(envelope);\n                      case 18:\n                        if (_context20.sent) {\n                          _context20.next = 21;\n                          break;\n                        }\n                        _this13.log('bogus peer record obtained through px: could not add peer record to address book');\n                        return _context20.abrupt(\"return\");\n                      case 21:\n                        toconnect.push(p);\n                        _context20.next = 27;\n                        break;\n                      case 24:\n                        _context20.prev = 24;\n                        _context20.t0 = _context20[\"catch\"](8);\n                        _this13.log('bogus peer record obtained through px: invalid signature or not a peer record');\n                      case 27:\n                      case \"end\":\n                        return _context20.stop();\n                    }\n                  }, _callee20, null, [[8, 24]]);\n                }));\n                return function (_x26) {\n                  return _ref11.apply(this, arguments);\n                };\n              }()));\n            case 4:\n              if (toconnect.length) {\n                _context22.next = 6;\n                break;\n              }\n              return _context22.abrupt(\"return\");\n            case 6:\n              _context22.next = 8;\n              return Promise.all(toconnect.map( /*#__PURE__*/function () {\n                var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(id) {\n                  return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n                    while (1) switch (_context21.prev = _context21.next) {\n                      case 0:\n                        _context21.next = 2;\n                        return _this13.connect(id);\n                      case 2:\n                        return _context21.abrupt(\"return\", _context21.sent);\n                      case 3:\n                      case \"end\":\n                        return _context21.stop();\n                    }\n                  }, _callee21);\n                }));\n                return function (_x27) {\n                  return _ref12.apply(this, arguments);\n                };\n              }()));\n            case 8:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n      function pxConnect(_x25) {\n        return _pxConnect.apply(this, arguments);\n      }\n      return pxConnect;\n    }()\n    /**\n     * Connect to a peer using the gossipsub protocol\n     */\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(id) {\n        var peerId, connection, _iterator11, _step11, _multicodec, _iterator12, _step12, topology;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              this.log('Initiating connection with %s', id);\n              peerId = peerIdFromString(id);\n              _context23.next = 4;\n              return this.components.getConnectionManager().openConnection(peerId);\n            case 4:\n              connection = _context23.sent;\n              _iterator11 = _createForOfIteratorHelper(this.multicodecs);\n              try {\n                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                  _multicodec = _step11.value;\n                  _iterator12 = _createForOfIteratorHelper(this.components.getRegistrar().getTopologies(_multicodec));\n                  try {\n                    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                      topology = _step12.value;\n                      topology.onConnect(peerId, connection);\n                    }\n                  } catch (err) {\n                    _iterator12.e(err);\n                  } finally {\n                    _iterator12.f();\n                  }\n                }\n              } catch (err) {\n                _iterator11.e(err);\n              } finally {\n                _iterator11.f();\n              }\n            case 7:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n      function connect(_x28) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n    /**\n     * Subscribes to a topic\n     */\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(topic) {\n      if (this.status.code !== GossipStatusCode.started) {\n        throw new Error('Pubsub has not started');\n      }\n      if (!this.subscriptions.has(topic)) {\n        this.subscriptions.add(topic);\n        var _iterator13 = _createForOfIteratorHelper(this.peers.keys()),\n          _step13;\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var peerId = _step13.value;\n            this.sendSubscriptions(peerId, [topic], true);\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n      }\n      this.join(topic);\n    }\n    /**\n     * Unsubscribe to a topic\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(topic) {\n      var _this14 = this;\n      if (this.status.code !== GossipStatusCode.started) {\n        throw new Error('Pubsub is not started');\n      }\n      var wasSubscribed = this.subscriptions.delete(topic);\n      this.log('unsubscribe from %s - am subscribed %s', topic, wasSubscribed);\n      if (wasSubscribed) {\n        var _iterator14 = _createForOfIteratorHelper(this.peers.keys()),\n          _step14;\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var peerId = _step14.value;\n            this.sendSubscriptions(peerId, [topic], false);\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n      }\n      this.leave(topic).catch(function (err) {\n        _this14.log(err);\n      });\n    }\n    /**\n     * Join topic\n     */\n  }, {\n    key: \"join\",\n    value: function join(topic) {\n      var _this$metrics15,\n        _this15 = this;\n      if (this.status.code !== GossipStatusCode.started) {\n        throw new Error('Gossipsub has not started');\n      }\n      // if we are already in the mesh, return\n      if (this.mesh.has(topic)) {\n        return;\n      }\n      this.log('JOIN %s', topic);\n      (_this$metrics15 = this.metrics) === null || _this$metrics15 === void 0 ? void 0 : _this$metrics15.onJoin(topic);\n      var toAdd = new Set();\n      // check if we have mesh_n peers in fanout[topic] and add them to the mesh if we do,\n      // removing the fanout entry.\n      var fanoutPeers = this.fanout.get(topic);\n      if (fanoutPeers) {\n        var _this$metrics16;\n        // Remove fanout entry and the last published time\n        this.fanout.delete(topic);\n        this.fanoutLastpub.delete(topic);\n        // remove explicit peers, peers with negative scores, and backoffed peers\n        fanoutPeers.forEach(function (id) {\n          // TODO:rust-libp2p checks `self.backoffs.is_backoff_with_slack()`\n          if (!_this15.direct.has(id) && _this15.score.score(id) >= 0) {\n            toAdd.add(id);\n          }\n        });\n        (_this$metrics16 = this.metrics) === null || _this$metrics16 === void 0 ? void 0 : _this$metrics16.onAddToMesh(topic, InclusionReason.Fanout, toAdd.size);\n      }\n      // check if we need to get more peers, which we randomly select\n      if (toAdd.size < this.opts.D) {\n        var _this$metrics17;\n        var fanoutCount = toAdd.size;\n        var newPeers = this.getRandomGossipPeers(topic, this.opts.D, function (id) {\n          return (\n            // filter direct peers and peers with negative score\n            !toAdd.has(id) && !_this15.direct.has(id) && _this15.score.score(id) >= 0\n          );\n        });\n        newPeers.forEach(function (peer) {\n          toAdd.add(peer);\n        });\n        (_this$metrics17 = this.metrics) === null || _this$metrics17 === void 0 ? void 0 : _this$metrics17.onAddToMesh(topic, InclusionReason.Random, toAdd.size - fanoutCount);\n      }\n      this.mesh.set(topic, toAdd);\n      toAdd.forEach(function (id) {\n        _this15.log('JOIN: Add mesh link to %s in %s', id, topic);\n        _this15.sendGraft(id, topic);\n        // rust-libp2p\n        // - peer_score.graft()\n        // - Self::control_pool_add()\n        // - peer_added_to_mesh()\n      });\n    }\n    /**\n     * Leave topic\n     */\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _leave = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(topic) {\n        var _this$metrics18,\n          _this16 = this;\n        var meshPeers;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              if (!(this.status.code !== GossipStatusCode.started)) {\n                _context25.next = 2;\n                break;\n              }\n              throw new Error('Gossipsub has not started');\n            case 2:\n              this.log('LEAVE %s', topic);\n              (_this$metrics18 = this.metrics) === null || _this$metrics18 === void 0 ? void 0 : _this$metrics18.onLeave(topic);\n              // Send PRUNE to mesh peers\n              meshPeers = this.mesh.get(topic);\n              if (!meshPeers) {\n                _context25.next = 9;\n                break;\n              }\n              _context25.next = 8;\n              return Promise.all(Array.from(meshPeers).map( /*#__PURE__*/function () {\n                var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(id) {\n                  return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n                    while (1) switch (_context24.prev = _context24.next) {\n                      case 0:\n                        _this16.log('LEAVE: Remove mesh link to %s in %s', id, topic);\n                        _context24.next = 3;\n                        return _this16.sendPrune(id, topic);\n                      case 3:\n                        return _context24.abrupt(\"return\", _context24.sent);\n                      case 4:\n                      case \"end\":\n                        return _context24.stop();\n                    }\n                  }, _callee24);\n                }));\n                return function (_x30) {\n                  return _ref13.apply(this, arguments);\n                };\n              }()));\n            case 8:\n              this.mesh.delete(topic);\n            case 9:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n      function leave(_x29) {\n        return _leave.apply(this, arguments);\n      }\n      return leave;\n    }()\n  }, {\n    key: \"selectPeersToForward\",\n    value: function selectPeersToForward(topic, propagationSource, excludePeers) {\n      var _this17 = this;\n      var tosend = new Set();\n      // Add explicit peers\n      var peersInTopic = this.topics.get(topic);\n      if (peersInTopic) {\n        this.direct.forEach(function (peer) {\n          if (peersInTopic.has(peer) && propagationSource !== peer && !(excludePeers !== null && excludePeers !== void 0 && excludePeers.has(peer))) {\n            tosend.add(peer);\n          }\n        });\n        // As of Mar 2022, spec + golang-libp2p include this while rust-libp2p does not\n        // rust-libp2p: https://github.com/libp2p/rust-libp2p/blob/6cc3b4ec52c922bfcf562a29b5805c3150e37c75/protocols/gossipsub/src/behaviour.rs#L2693\n        // spec: https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.0.md?plain=1#L361\n        this.floodsubPeers.forEach(function (peer) {\n          if (peersInTopic.has(peer) && propagationSource !== peer && !(excludePeers !== null && excludePeers !== void 0 && excludePeers.has(peer)) && _this17.score.score(peer) >= _this17.opts.scoreThresholds.publishThreshold) {\n            tosend.add(peer);\n          }\n        });\n      }\n      // add mesh peers\n      var meshPeers = this.mesh.get(topic);\n      if (meshPeers && meshPeers.size > 0) {\n        meshPeers.forEach(function (peer) {\n          if (propagationSource !== peer && !(excludePeers !== null && excludePeers !== void 0 && excludePeers.has(peer))) {\n            tosend.add(peer);\n          }\n        });\n      }\n      return tosend;\n    }\n  }, {\n    key: \"selectPeersToPublish\",\n    value: function selectPeersToPublish(topic) {\n      var _this18 = this;\n      var tosend = new Set();\n      var tosendCount = {\n        direct: 0,\n        floodsub: 0,\n        mesh: 0,\n        fanout: 0\n      };\n      var peersInTopic = this.topics.get(topic);\n      if (peersInTopic) {\n        // flood-publish behavior\n        // send to direct peers and _all_ peers meeting the publishThreshold\n        if (this.opts.floodPublish) {\n          peersInTopic.forEach(function (id) {\n            if (_this18.direct.has(id)) {\n              tosend.add(id);\n              tosendCount.direct++;\n            } else if (_this18.score.score(id) >= _this18.opts.scoreThresholds.publishThreshold) {\n              tosend.add(id);\n              tosendCount.floodsub++;\n            }\n          });\n        } else {\n          // non-flood-publish behavior\n          // send to direct peers, subscribed floodsub peers\n          // and some mesh peers above publishThreshold\n          // direct peers (if subscribed)\n          this.direct.forEach(function (id) {\n            if (peersInTopic.has(id)) {\n              tosend.add(id);\n              tosendCount.direct++;\n            }\n          });\n          // floodsub peers\n          // Note: if there are no floodsub peers, we save a loop through peersInTopic Map\n          this.floodsubPeers.forEach(function (id) {\n            if (peersInTopic.has(id) && _this18.score.score(id) >= _this18.opts.scoreThresholds.publishThreshold) {\n              tosend.add(id);\n              tosendCount.floodsub++;\n            }\n          });\n          // Gossipsub peers handling\n          var meshPeers = this.mesh.get(topic);\n          if (meshPeers && meshPeers.size > 0) {\n            meshPeers.forEach(function (peer) {\n              tosend.add(peer);\n              tosendCount.mesh++;\n            });\n          }\n          // We are not in the mesh for topic, use fanout peers\n          else {\n            var fanoutPeers = this.fanout.get(topic);\n            if (fanoutPeers && fanoutPeers.size > 0) {\n              fanoutPeers.forEach(function (peer) {\n                tosend.add(peer);\n                tosendCount.fanout++;\n              });\n            }\n            // We have no fanout peers, select mesh_n of them and add them to the fanout\n            else {\n              // If we are not in the fanout, then pick peers in topic above the publishThreshold\n              var newFanoutPeers = this.getRandomGossipPeers(topic, this.opts.D, function (id) {\n                return _this18.score.score(id) >= _this18.opts.scoreThresholds.publishThreshold;\n              });\n              if (newFanoutPeers.size > 0) {\n                // eslint-disable-line max-depth\n                this.fanout.set(topic, newFanoutPeers);\n                newFanoutPeers.forEach(function (peer) {\n                  // eslint-disable-line max-depth\n                  tosend.add(peer);\n                  tosendCount.fanout++;\n                });\n              }\n            }\n            // We are publishing to fanout peers - update the time we published\n            this.fanoutLastpub.set(topic, Date.now());\n          }\n        }\n      }\n      return {\n        tosend: tosend,\n        tosendCount: tosendCount\n      };\n    }\n    /**\n     * Forwards a message from our peers.\n     *\n     * For messages published by us (the app layer), this class uses `publish`\n     */\n  }, {\n    key: \"forwardMessage\",\n    value: function forwardMessage(msgIdStr, rawMsg, propagationSource, excludePeers) {\n      var _this19 = this,\n        _this$metrics19;\n      // message is fully validated inform peer_score\n      if (propagationSource) {\n        this.score.deliverMessage(propagationSource, msgIdStr, rawMsg.topic);\n      }\n      var tosend = this.selectPeersToForward(rawMsg.topic, propagationSource, excludePeers);\n      // Note: Don't throw if tosend is empty, we can have a mesh with a single peer\n      // forward the message to peers\n      var rpc = createGossipRpc([rawMsg]);\n      tosend.forEach(function (id) {\n        // self.send_message(*peer_id, event.clone())?;\n        _this19.sendRpc(id, rpc);\n      });\n      (_this$metrics19 = this.metrics) === null || _this$metrics19 === void 0 ? void 0 : _this$metrics19.onForwardMsg(rawMsg.topic, tosend.size);\n    }\n    /**\n     * App layer publishes a message to peers, return number of peers this message is published to\n     * Note: `async` due to crypto only if `StrictSign`, otherwise it's a sync fn.\n     *\n     * For messages not from us, this class uses `forwardMessage`.\n     */\n  }, {\n    key: \"publish\",\n    value: function () {\n      var _publish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(topic, data) {\n        var _this$metrics20;\n        var transformedData, _yield$buildRawMessag, rawMsg, msg, msgId, msgIdStr, _this$selectPeersToPu, tosend, tosendCount, willSendToSelf, rpc, _iterator15, _step15, id, sent;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              transformedData = this.dataTransform ? this.dataTransform.outboundTransform(topic, data) : data;\n              if (!(this.publishConfig == null)) {\n                _context26.next = 3;\n                break;\n              }\n              throw Error('PublishError.Uninitialized');\n            case 3:\n              _context26.next = 5;\n              return buildRawMessage(this.publishConfig, topic, data, transformedData);\n            case 5:\n              _yield$buildRawMessag = _context26.sent;\n              rawMsg = _yield$buildRawMessag.raw;\n              msg = _yield$buildRawMessag.msg;\n              _context26.next = 10;\n              return this.msgIdFn(msg);\n            case 10:\n              msgId = _context26.sent;\n              msgIdStr = this.msgIdToStrFn(msgId);\n              if (!this.seenCache.has(msgIdStr)) {\n                _context26.next = 14;\n                break;\n              }\n              throw Error('PublishError.Duplicate');\n            case 14:\n              _this$selectPeersToPu = this.selectPeersToPublish(topic), tosend = _this$selectPeersToPu.tosend, tosendCount = _this$selectPeersToPu.tosendCount;\n              willSendToSelf = this.opts.emitSelf === true && this.subscriptions.has(topic);\n              if (!(tosend.size === 0 && !this.opts.allowPublishToZeroPeers && !willSendToSelf)) {\n                _context26.next = 18;\n                break;\n              }\n              throw Error('PublishError.InsufficientPeers');\n            case 18:\n              // If the message isn't a duplicate and we have sent it to some peers add it to the\n              // duplicate cache and memcache.\n              this.seenCache.put(msgIdStr);\n              // all published messages are valid\n              this.mcache.put({\n                msgId: msgId,\n                msgIdStr: msgIdStr\n              }, rawMsg, true);\n              // If the message is anonymous or has a random author add it to the published message ids cache.\n              this.publishedMessageIds.put(msgIdStr);\n              // Send to set of peers aggregated from direct, mesh, fanout\n              rpc = createGossipRpc([rawMsg]);\n              _iterator15 = _createForOfIteratorHelper(tosend);\n              try {\n                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                  id = _step15.value;\n                  // self.send_message(*peer_id, event.clone())?;\n                  sent = this.sendRpc(id, rpc); // did not actually send the message\n                  if (!sent) {\n                    tosend.delete(id);\n                  }\n                }\n              } catch (err) {\n                _iterator15.e(err);\n              } finally {\n                _iterator15.f();\n              }\n              (_this$metrics20 = this.metrics) === null || _this$metrics20 === void 0 ? void 0 : _this$metrics20.onPublishMsg(topic, tosendCount, tosend.size, rawMsg.data != null ? rawMsg.data.length : 0);\n              // Dispatch the message to the user if we are subscribed to the topic\n              if (willSendToSelf) {\n                tosend.add(this.components.getPeerId().toString());\n                _get(_getPrototypeOf(GossipSub.prototype), \"dispatchEvent\", this).call(this, new CustomEvent('gossipsub:message', {\n                  detail: {\n                    propagationSource: this.components.getPeerId(),\n                    msgId: msgIdStr,\n                    msg: msg\n                  }\n                }));\n                // TODO: Add option to switch between emit per topic or all messages in one\n                _get(_getPrototypeOf(GossipSub.prototype), \"dispatchEvent\", this).call(this, new CustomEvent('message', {\n                  detail: msg\n                }));\n              }\n              return _context26.abrupt(\"return\", {\n                recipients: Array.from(tosend.values()).map(function (str) {\n                  return peerIdFromString(str);\n                })\n              });\n            case 27:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n      function publish(_x31, _x32) {\n        return _publish.apply(this, arguments);\n      }\n      return publish;\n    }()\n    /**\n     * This function should be called when `asyncValidation` is `true` after\n     * the message got validated by the caller. Messages are stored in the `mcache` and\n     * validation is expected to be fast enough that the messages should still exist in the cache.\n     * There are three possible validation outcomes and the outcome is given in acceptance.\n     *\n     * If acceptance = `MessageAcceptance.Accept` the message will get propagated to the\n     * network. The `propagation_source` parameter indicates who the message was received by and\n     * will not be forwarded back to that peer.\n     *\n     * If acceptance = `MessageAcceptance.Reject` the message will be deleted from the memcache\n     * and the P₄ penalty will be applied to the `propagationSource`.\n     *\n     * If acceptance = `MessageAcceptance.Ignore` the message will be deleted from the memcache\n     * but no P₄ penalty will be applied.\n     *\n     * This function will return true if the message was found in the cache and false if was not\n     * in the cache anymore.\n     *\n     * This should only be called once per message.\n     */\n  }, {\n    key: \"reportMessageValidationResult\",\n    value: function reportMessageValidationResult(msgId, propagationSource, acceptance) {\n      if (acceptance === MessageAcceptance.Accept) {\n        var _this$metrics21;\n        var cacheEntry = this.mcache.validate(msgId);\n        (_this$metrics21 = this.metrics) === null || _this$metrics21 === void 0 ? void 0 : _this$metrics21.onReportValidationMcacheHit(cacheEntry !== null);\n        if (cacheEntry != null) {\n          var _this$metrics22;\n          var rawMsg = cacheEntry.message,\n            originatingPeers = cacheEntry.originatingPeers;\n          // message is fully validated inform peer_score\n          this.score.deliverMessage(propagationSource.toString(), msgId, rawMsg.topic);\n          this.forwardMessage(msgId, cacheEntry.message, propagationSource.toString(), originatingPeers);\n          (_this$metrics22 = this.metrics) === null || _this$metrics22 === void 0 ? void 0 : _this$metrics22.onReportValidation(rawMsg.topic, acceptance);\n        }\n        // else, Message not in cache. Ignoring forwarding\n      }\n      // Not valid\n      else {\n        var _this$metrics23;\n        var _cacheEntry = this.mcache.remove(msgId);\n        (_this$metrics23 = this.metrics) === null || _this$metrics23 === void 0 ? void 0 : _this$metrics23.onReportValidationMcacheHit(_cacheEntry !== null);\n        if (_cacheEntry) {\n          var _this$metrics24;\n          var rejectReason = rejectReasonFromAcceptance(acceptance);\n          var _rawMsg = _cacheEntry.message,\n            _originatingPeers = _cacheEntry.originatingPeers;\n          // Tell peer_score about reject\n          // Reject the original source, and any duplicates we've seen from other peers.\n          this.score.rejectMessage(propagationSource.toString(), msgId, _rawMsg.topic, rejectReason);\n          var _iterator16 = _createForOfIteratorHelper(_originatingPeers),\n            _step16;\n          try {\n            for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n              var peer = _step16.value;\n              this.score.rejectMessage(peer, msgId, _rawMsg.topic, rejectReason);\n            }\n          } catch (err) {\n            _iterator16.e(err);\n          } finally {\n            _iterator16.f();\n          }\n          (_this$metrics24 = this.metrics) === null || _this$metrics24 === void 0 ? void 0 : _this$metrics24.onReportValidation(_rawMsg.topic, acceptance);\n        }\n        // else, Message not in cache. Ignoring forwarding\n      }\n    }\n    /**\n     * Sends a GRAFT message to a peer\n     */\n  }, {\n    key: \"sendGraft\",\n    value: function sendGraft(id, topic) {\n      var graft = [{\n        topicID: topic\n      }];\n      var out = createGossipRpc([], {\n        graft: graft\n      });\n      this.sendRpc(id, out);\n    }\n    /**\n     * Sends a PRUNE message to a peer\n     */\n  }, {\n    key: \"sendPrune\",\n    value: function () {\n      var _sendPrune = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(id, topic) {\n        var prune, out;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              _context27.next = 2;\n              return this.makePrune(id, topic, this.opts.doPX);\n            case 2:\n              _context27.t0 = _context27.sent;\n              prune = [_context27.t0];\n              out = createGossipRpc([], {\n                prune: prune\n              });\n              this.sendRpc(id, out);\n            case 6:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this);\n      }));\n      function sendPrune(_x33, _x34) {\n        return _sendPrune.apply(this, arguments);\n      }\n      return sendPrune;\n    }()\n    /**\n     * Send an rpc object to a peer\n     */\n  }, {\n    key: \"sendRpc\",\n    value: function sendRpc(id, rpc) {\n      var _this$metrics25;\n      var outboundStream = this.streamsOutbound.get(id);\n      if (!outboundStream) {\n        this.log(\"Cannot send RPC to \".concat(id, \" as there is no open stream to it available\"));\n        return false;\n      }\n      // piggyback control message retries\n      var ctrl = this.control.get(id);\n      if (ctrl) {\n        this.piggybackControl(id, rpc, ctrl);\n        this.control.delete(id);\n      }\n      // piggyback gossip\n      var ihave = this.gossip.get(id);\n      if (ihave) {\n        this.piggybackGossip(id, rpc, ihave);\n        this.gossip.delete(id);\n      }\n      var rpcBytes = RPC.encode(rpc).finish();\n      try {\n        outboundStream.push(rpcBytes);\n      } catch (e) {\n        this.log.error(\"Cannot send rpc to \".concat(id), e);\n        // if the peer had control messages or gossip, re-attach\n        if (ctrl) {\n          this.control.set(id, ctrl);\n        }\n        if (ihave) {\n          this.gossip.set(id, ihave);\n        }\n        return false;\n      }\n      (_this$metrics25 = this.metrics) === null || _this$metrics25 === void 0 ? void 0 : _this$metrics25.onRpcSent(rpc, rpcBytes.length);\n      return true;\n    }\n  }, {\n    key: \"piggybackControl\",\n    value: function piggybackControl(id, outRpc, ctrl) {\n      var _this20 = this;\n      var tograft = (ctrl.graft || []).filter(function (_ref14) {\n        var topicID = _ref14.topicID;\n        return (topicID && _this20.mesh.get(topicID) || new Set()).has(id);\n      });\n      var toprune = (ctrl.prune || []).filter(function (_ref15) {\n        var topicID = _ref15.topicID;\n        return !(topicID && _this20.mesh.get(topicID) || new Set()).has(id);\n      });\n      if (!tograft.length && !toprune.length) {\n        return;\n      }\n      if (outRpc.control) {\n        outRpc.control.graft = outRpc.control.graft && outRpc.control.graft.concat(tograft);\n        outRpc.control.prune = outRpc.control.prune && outRpc.control.prune.concat(toprune);\n      } else {\n        outRpc.control = {\n          graft: tograft,\n          prune: toprune,\n          ihave: [],\n          iwant: []\n        };\n      }\n    }\n  }, {\n    key: \"piggybackGossip\",\n    value: function piggybackGossip(id, outRpc, ihave) {\n      if (!outRpc.control) {\n        outRpc.control = {\n          ihave: [],\n          iwant: [],\n          graft: [],\n          prune: []\n        };\n      }\n      outRpc.control.ihave = ihave;\n    }\n    /**\n     * Send graft and prune messages\n     *\n     * @param tograft - peer id => topic[]\n     * @param toprune - peer id => topic[]\n     */\n  }, {\n    key: \"sendGraftPrune\",\n    value: function () {\n      var _sendGraftPrune = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(tograft, toprune, noPX) {\n        var _this21 = this;\n        var doPX, _iterator17, _step17, _loop, _iterator18, _step18, _loop2;\n        return _regeneratorRuntime().wrap(function _callee30$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              doPX = this.opts.doPX;\n              _iterator17 = _createForOfIteratorHelper(tograft);\n              _context32.prev = 2;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var _step17$value, id, topics, graft, prune, pruning, outRpc;\n                return _regeneratorRuntime().wrap(function _loop$(_context29) {\n                  while (1) switch (_context29.prev = _context29.next) {\n                    case 0:\n                      _step17$value = _slicedToArray(_step17.value, 2), id = _step17$value[0], topics = _step17$value[1];\n                      graft = topics.map(function (topicID) {\n                        return {\n                          topicID: topicID\n                        };\n                      });\n                      prune = []; // If a peer also has prunes, process them now\n                      pruning = toprune.get(id);\n                      if (!pruning) {\n                        _context29.next = 9;\n                        break;\n                      }\n                      _context29.next = 7;\n                      return Promise.all(pruning.map( /*#__PURE__*/function () {\n                        var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(topicID) {\n                          var _noPX$get;\n                          return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n                            while (1) switch (_context28.prev = _context28.next) {\n                              case 0:\n                                _context28.next = 2;\n                                return _this21.makePrune(id, topicID, doPX && !((_noPX$get = noPX.get(id)) !== null && _noPX$get !== void 0 ? _noPX$get : false));\n                              case 2:\n                                return _context28.abrupt(\"return\", _context28.sent);\n                              case 3:\n                              case \"end\":\n                                return _context28.stop();\n                            }\n                          }, _callee28);\n                        }));\n                        return function (_x38) {\n                          return _ref16.apply(this, arguments);\n                        };\n                      }()));\n                    case 7:\n                      prune = _context29.sent;\n                      toprune.delete(id);\n                    case 9:\n                      outRpc = createGossipRpc([], {\n                        graft: graft,\n                        prune: prune\n                      });\n                      _this21.sendRpc(id, outRpc);\n                    case 11:\n                    case \"end\":\n                      return _context29.stop();\n                  }\n                }, _loop);\n              });\n              _iterator17.s();\n            case 5:\n              if ((_step17 = _iterator17.n()).done) {\n                _context32.next = 9;\n                break;\n              }\n              return _context32.delegateYield(_loop(), \"t0\", 7);\n            case 7:\n              _context32.next = 5;\n              break;\n            case 9:\n              _context32.next = 14;\n              break;\n            case 11:\n              _context32.prev = 11;\n              _context32.t1 = _context32[\"catch\"](2);\n              _iterator17.e(_context32.t1);\n            case 14:\n              _context32.prev = 14;\n              _iterator17.f();\n              return _context32.finish(14);\n            case 17:\n              _iterator18 = _createForOfIteratorHelper(toprune);\n              _context32.prev = 18;\n              _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n                var _step18$value, id, topics, prune, outRpc;\n                return _regeneratorRuntime().wrap(function _loop2$(_context31) {\n                  while (1) switch (_context31.prev = _context31.next) {\n                    case 0:\n                      _step18$value = _slicedToArray(_step18.value, 2), id = _step18$value[0], topics = _step18$value[1];\n                      _context31.next = 3;\n                      return Promise.all(topics.map( /*#__PURE__*/function () {\n                        var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(topicID) {\n                          var _noPX$get2;\n                          return _regeneratorRuntime().wrap(function _callee29$(_context30) {\n                            while (1) switch (_context30.prev = _context30.next) {\n                              case 0:\n                                _context30.next = 2;\n                                return _this21.makePrune(id, topicID, doPX && !((_noPX$get2 = noPX.get(id)) !== null && _noPX$get2 !== void 0 ? _noPX$get2 : false));\n                              case 2:\n                                return _context30.abrupt(\"return\", _context30.sent);\n                              case 3:\n                              case \"end\":\n                                return _context30.stop();\n                            }\n                          }, _callee29);\n                        }));\n                        return function (_x39) {\n                          return _ref17.apply(this, arguments);\n                        };\n                      }()));\n                    case 3:\n                      prune = _context31.sent;\n                      outRpc = createGossipRpc([], {\n                        prune: prune\n                      });\n                      _this21.sendRpc(id, outRpc);\n                    case 6:\n                    case \"end\":\n                      return _context31.stop();\n                  }\n                }, _loop2);\n              });\n              _iterator18.s();\n            case 21:\n              if ((_step18 = _iterator18.n()).done) {\n                _context32.next = 25;\n                break;\n              }\n              return _context32.delegateYield(_loop2(), \"t2\", 23);\n            case 23:\n              _context32.next = 21;\n              break;\n            case 25:\n              _context32.next = 30;\n              break;\n            case 27:\n              _context32.prev = 27;\n              _context32.t3 = _context32[\"catch\"](18);\n              _iterator18.e(_context32.t3);\n            case 30:\n              _context32.prev = 30;\n              _iterator18.f();\n              return _context32.finish(30);\n            case 33:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee30, this, [[2, 11, 14, 17], [18, 27, 30, 33]]);\n      }));\n      function sendGraftPrune(_x35, _x36, _x37) {\n        return _sendGraftPrune.apply(this, arguments);\n      }\n      return sendGraftPrune;\n    }()\n    /**\n     * Emits gossip - Send IHAVE messages to a random set of gossip peers\n     */\n  }, {\n    key: \"emitGossip\",\n    value: function emitGossip(peersToGossipByTopic) {\n      var gossipIDsByTopic = this.mcache.getGossipIDs(new Set(peersToGossipByTopic.keys()));\n      var _iterator19 = _createForOfIteratorHelper(peersToGossipByTopic),\n        _step19;\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var _gossipIDsByTopic$get;\n          var _step19$value = _slicedToArray(_step19.value, 2),\n            topic = _step19$value[0],\n            peersToGossip = _step19$value[1];\n          this.doEmitGossip(topic, peersToGossip, (_gossipIDsByTopic$get = gossipIDsByTopic.get(topic)) !== null && _gossipIDsByTopic$get !== void 0 ? _gossipIDsByTopic$get : []);\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n    }\n    /**\n     * Send gossip messages to GossipFactor peers above threshold with a minimum of D_lazy\n     * Peers are randomly selected from the heartbeat which exclude mesh + fanout peers\n     * We also exclude direct peers, as there is no reason to emit gossip to them\n     * @param topic\n     * @param candidateToGossip - peers to gossip\n     * @param messageIDs - message ids to gossip\n     */\n  }, {\n    key: \"doEmitGossip\",\n    value: function doEmitGossip(topic, candidateToGossip, messageIDs) {\n      var _this22 = this;\n      if (!messageIDs.length) {\n        return;\n      }\n      // shuffle to emit in random order\n      shuffle(messageIDs);\n      // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list\n      if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n        // we do the truncation (with shuffling) per peer below\n        this.log('too many messages for gossip; will truncate IHAVE list (%d messages)', messageIDs.length);\n      }\n      if (!candidateToGossip.size) return;\n      var target = this.opts.Dlazy;\n      var factor = constants.GossipsubGossipFactor * candidateToGossip.size;\n      var peersToGossip = candidateToGossip;\n      if (factor > target) {\n        target = factor;\n      }\n      if (target > peersToGossip.size) {\n        target = peersToGossip.size;\n      } else {\n        // only shuffle if needed\n        peersToGossip = shuffle(Array.from(peersToGossip)).slice(0, target);\n      }\n      // Emit the IHAVE gossip to the selected peers up to the target\n      peersToGossip.forEach(function (id) {\n        var peerMessageIDs = messageIDs;\n        if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n          // shuffle and slice message IDs per peer so that we emit a different set for each peer\n          // we have enough reduncancy in the system that this will significantly increase the message\n          // coverage when we do truncate\n          peerMessageIDs = shuffle(peerMessageIDs.slice()).slice(0, constants.GossipsubMaxIHaveLength);\n        }\n        _this22.pushGossip(id, {\n          topicID: topic,\n          messageIDs: peerMessageIDs\n        });\n      });\n    }\n    /**\n     * Flush gossip and control messages\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      // send gossip first, which will also piggyback control\n      var _iterator20 = _createForOfIteratorHelper(this.gossip.entries()),\n        _step20;\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var _step20$value = _slicedToArray(_step20.value, 2),\n            peer = _step20$value[0],\n            ihave = _step20$value[1];\n          this.gossip.delete(peer);\n          this.sendRpc(peer, createGossipRpc([], {\n            ihave: ihave\n          }));\n        }\n        // send the remaining control messages\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n      var _iterator21 = _createForOfIteratorHelper(this.control.entries()),\n        _step21;\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var _step21$value = _slicedToArray(_step21.value, 2),\n            _peer = _step21$value[0],\n            control = _step21$value[1];\n          this.control.delete(_peer);\n          this.sendRpc(_peer, createGossipRpc([], {\n            graft: control.graft,\n            prune: control.prune\n          }));\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n    }\n    /**\n     * Adds new IHAVE messages to pending gossip\n     */\n  }, {\n    key: \"pushGossip\",\n    value: function pushGossip(id, controlIHaveMsgs) {\n      this.log('Add gossip to %s', id);\n      var gossip = this.gossip.get(id) || [];\n      this.gossip.set(id, gossip.concat(controlIHaveMsgs));\n    }\n    /**\n     * Make a PRUNE control message for a peer in a topic\n     */\n  }, {\n    key: \"makePrune\",\n    value: function () {\n      var _makePrune = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(id, topic, doPX) {\n        var _this23 = this;\n        var backoff, peers, px;\n        return _regeneratorRuntime().wrap(function _callee32$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              this.score.prune(id, topic);\n              if (!(this.streamsOutbound.get(id).protocol === constants.GossipsubIDv10)) {\n                _context34.next = 3;\n                break;\n              }\n              return _context34.abrupt(\"return\", {\n                topicID: topic,\n                peers: []\n              });\n            case 3:\n              // backoff is measured in seconds\n              // GossipsubPruneBackoff is measured in milliseconds\n              // The protobuf has it as a uint64\n              backoff = this.opts.pruneBackoff / 1000;\n              if (doPX) {\n                _context34.next = 6;\n                break;\n              }\n              return _context34.abrupt(\"return\", {\n                topicID: topic,\n                peers: [],\n                backoff: backoff\n              });\n            case 6:\n              // select peers for Peer eXchange\n              peers = this.getRandomGossipPeers(topic, this.opts.prunePeers, function (xid) {\n                return xid !== id && _this23.score.score(xid) >= 0;\n              });\n              _context34.next = 9;\n              return Promise.all(Array.from(peers).map( /*#__PURE__*/function () {\n                var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(peerId) {\n                  var id;\n                  return _regeneratorRuntime().wrap(function _callee31$(_context33) {\n                    while (1) switch (_context33.prev = _context33.next) {\n                      case 0:\n                        // see if we have a signed record to send back; if we don't, just send\n                        // the peer ID and let the pruned peer find them in the DHT -- we can't trust\n                        // unsigned address records through PX anyways\n                        // Finding signed records in the DHT is not supported at the time of writing in js-libp2p\n                        id = peerIdFromString(peerId);\n                        _context33.t0 = id.toBytes();\n                        _context33.next = 4;\n                        return _this23.components.getPeerStore().addressBook.getRawEnvelope(id);\n                      case 4:\n                        _context33.t1 = _context33.sent;\n                        return _context33.abrupt(\"return\", {\n                          peerID: _context33.t0,\n                          signedPeerRecord: _context33.t1\n                        });\n                      case 6:\n                      case \"end\":\n                        return _context33.stop();\n                    }\n                  }, _callee31);\n                }));\n                return function (_x43) {\n                  return _ref18.apply(this, arguments);\n                };\n              }()));\n            case 9:\n              px = _context34.sent;\n              return _context34.abrupt(\"return\", {\n                topicID: topic,\n                peers: px,\n                backoff: backoff\n              });\n            case 11:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee32, this);\n      }));\n      function makePrune(_x40, _x41, _x42) {\n        return _makePrune.apply(this, arguments);\n      }\n      return makePrune;\n    }()\n    /**\n     * Maintains the mesh and fanout maps in gossipsub.\n     */\n  }, {\n    key: \"heartbeat\",\n    value: function () {\n      var _heartbeat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n        var _this24 = this,\n          _this$metrics26,\n          _this$fastMsgIdCache3;\n        var _this$opts, D, Dlo, Dhi, Dscore, Dout, fanoutTTL, scores, getScore, tograft, toprune, noPX, peersToGossipByTopic, now;\n        return _regeneratorRuntime().wrap(function _callee33$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              _this$opts = this.opts, D = _this$opts.D, Dlo = _this$opts.Dlo, Dhi = _this$opts.Dhi, Dscore = _this$opts.Dscore, Dout = _this$opts.Dout, fanoutTTL = _this$opts.fanoutTTL;\n              this.heartbeatTicks++;\n              // cache scores throught the heartbeat\n              scores = new Map();\n              getScore = function getScore(id) {\n                var s = scores.get(id);\n                if (s === undefined) {\n                  s = _this24.score.score(id);\n                  scores.set(id, s);\n                }\n                return s;\n              }; // peer id => topic[]\n              tograft = new Map(); // peer id => topic[]\n              toprune = new Map(); // peer id => don't px\n              noPX = new Map(); // clean up expired backoffs\n              this.clearBackoff();\n              // clean up peerhave/iasked counters\n              this.peerhave.clear();\n              (_this$metrics26 = this.metrics) === null || _this$metrics26 === void 0 ? void 0 : _this$metrics26.cacheSize.set({\n                cache: 'iasked'\n              }, this.iasked.size);\n              this.iasked.clear();\n              // apply IWANT request penalties\n              this.applyIwantPenalties();\n              // ensure direct peers are connected\n              if (!(this.heartbeatTicks % this.opts.directConnectTicks === 0)) {\n                _context35.next = 15;\n                break;\n              }\n              _context35.next = 15;\n              return this.directConnect();\n            case 15:\n              // EXTRA: Prune caches\n              (_this$fastMsgIdCache3 = this.fastMsgIdCache) === null || _this$fastMsgIdCache3 === void 0 ? void 0 : _this$fastMsgIdCache3.prune();\n              this.seenCache.prune();\n              this.gossipTracer.prune();\n              this.publishedMessageIds.prune();\n              /**\n               * Instead of calling getRandomGossipPeers multiple times to:\n               *   + get more mesh peers\n               *   + more outbound peers\n               *   + oppportunistic grafting\n               *   + emitGossip\n               *\n               * We want to loop through the topic peers only a single time and prepare gossip peers for all topics to improve the performance\n               */\n              peersToGossipByTopic = new Map(); // maintain the mesh for topics we have joined\n              this.mesh.forEach(function (peers, topic) {\n                var peersInTopic = _this24.topics.get(topic);\n                var candidateMeshPeers = new Set();\n                var peersToGossip = new Set();\n                peersToGossipByTopic.set(topic, peersToGossip);\n                if (peersInTopic) {\n                  var shuffledPeers = shuffle(Array.from(peersInTopic));\n                  var backoff = _this24.backoff.get(topic);\n                  var _iterator22 = _createForOfIteratorHelper(shuffledPeers),\n                    _step22;\n                  try {\n                    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n                      var id = _step22.value;\n                      var peerStreams = _this24.streamsOutbound.get(id);\n                      if (peerStreams && _this24.multicodecs.includes(peerStreams.protocol) && !peers.has(id) && !_this24.direct.has(id)) {\n                        var score = getScore(id);\n                        if ((!backoff || !backoff.has(id)) && score >= 0) candidateMeshPeers.add(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= _this24.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n                      }\n                    }\n                  } catch (err) {\n                    _iterator22.e(err);\n                  } finally {\n                    _iterator22.f();\n                  }\n                }\n                // prune/graft helper functions (defined per topic)\n                var prunePeer = function prunePeer(id, reason) {\n                  var _this24$metrics;\n                  _this24.log('HEARTBEAT: Remove mesh link to %s in %s', id, topic);\n                  // no need to update peer score here as we do it in makePrune\n                  // add prune backoff record\n                  _this24.addBackoff(id, topic);\n                  // remove peer from mesh\n                  peers.delete(id);\n                  // after pruning a peer from mesh, we want to gossip topic to it if its score meet the gossip threshold\n                  if (getScore(id) >= _this24.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n                  (_this24$metrics = _this24.metrics) === null || _this24$metrics === void 0 ? void 0 : _this24$metrics.onRemoveFromMesh(topic, reason, 1);\n                  // add to toprune\n                  var topics = toprune.get(id);\n                  if (!topics) {\n                    toprune.set(id, [topic]);\n                  } else {\n                    topics.push(topic);\n                  }\n                };\n                var graftPeer = function graftPeer(id, reason) {\n                  var _this24$metrics2;\n                  _this24.log('HEARTBEAT: Add mesh link to %s in %s', id, topic);\n                  // update peer score\n                  _this24.score.graft(id, topic);\n                  // add peer to mesh\n                  peers.add(id);\n                  // when we add a new mesh peer, we don't want to gossip messages to it\n                  peersToGossip.delete(id);\n                  (_this24$metrics2 = _this24.metrics) === null || _this24$metrics2 === void 0 ? void 0 : _this24$metrics2.onAddToMesh(topic, reason, 1);\n                  // add to tograft\n                  var topics = tograft.get(id);\n                  if (!topics) {\n                    tograft.set(id, [topic]);\n                  } else {\n                    topics.push(topic);\n                  }\n                };\n                // drop all peers with negative score, without PX\n                peers.forEach(function (id) {\n                  var score = getScore(id);\n                  // Record the score\n                  if (score < 0) {\n                    _this24.log('HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s', id, score, topic);\n                    prunePeer(id, ChurnReason.BadScore);\n                    noPX.set(id, true);\n                  }\n                });\n                // do we have enough peers?\n                if (peers.size < Dlo) {\n                  var ineed = D - peers.size;\n                  // slice up to first `ineed` items and remove them from candidateMeshPeers\n                  // same to `const newMeshPeers = candidateMeshPeers.slice(0, ineed)`\n                  var newMeshPeers = removeFirstNItemsFromSet(candidateMeshPeers, ineed);\n                  newMeshPeers.forEach(function (p) {\n                    graftPeer(p, InclusionReason.NotEnough);\n                  });\n                }\n                // do we have to many peers?\n                if (peers.size > Dhi) {\n                  var peersArray = Array.from(peers);\n                  // sort by score\n                  peersArray.sort(function (a, b) {\n                    return getScore(b) - getScore(a);\n                  });\n                  // We keep the first D_score peers by score and the remaining up to D randomly\n                  // under the constraint that we keep D_out peers in the mesh (if we have that many)\n                  peersArray = peersArray.slice(0, Dscore).concat(shuffle(peersArray.slice(Dscore)));\n                  // count the outbound peers we are keeping\n                  var outbound = 0;\n                  peersArray.slice(0, D).forEach(function (p) {\n                    if (_this24.outbound.get(p)) {\n                      outbound++;\n                    }\n                  });\n                  // if it's less than D_out, bubble up some outbound peers from the random selection\n                  if (outbound < Dout) {\n                    var rotate = function rotate(i) {\n                      // rotate the peersArray to the right and put the ith peer in the front\n                      var p = peersArray[i];\n                      for (var j = i; j > 0; j--) {\n                        peersArray[j] = peersArray[j - 1];\n                      }\n                      peersArray[0] = p;\n                    };\n                    // first bubble up all outbound peers already in the selection to the front\n                    if (outbound > 0) {\n                      var ihave = outbound;\n                      for (var i = 1; i < D && ihave > 0; i++) {\n                        if (_this24.outbound.get(peersArray[i])) {\n                          rotate(i);\n                          ihave--;\n                        }\n                      }\n                    }\n                    // now bubble up enough outbound peers outside the selection to the front\n                    var _ineed = D - outbound;\n                    for (var _i = D; _i < peersArray.length && _ineed > 0; _i++) {\n                      if (_this24.outbound.get(peersArray[_i])) {\n                        rotate(_i);\n                        _ineed--;\n                      }\n                    }\n                  }\n                  // prune the excess peers\n                  peersArray.slice(D).forEach(function (p) {\n                    prunePeer(p, ChurnReason.Excess);\n                  });\n                }\n                // do we have enough outbound peers?\n                if (peers.size >= Dlo) {\n                  // count the outbound peers we have\n                  var _outbound = 0;\n                  peers.forEach(function (p) {\n                    if (_this24.outbound.get(p)) {\n                      _outbound++;\n                    }\n                  });\n                  // if it's less than D_out, select some peers with outbound connections and graft them\n                  if (_outbound < Dout) {\n                    var _ineed2 = Dout - _outbound;\n                    var _newMeshPeers = removeItemsFromSet(candidateMeshPeers, _ineed2, function (id) {\n                      return _this24.outbound.get(id) === true;\n                    });\n                    _newMeshPeers.forEach(function (p) {\n                      graftPeer(p, InclusionReason.Outbound);\n                    });\n                  }\n                }\n                // should we try to improve the mesh with opportunistic grafting?\n                if (_this24.heartbeatTicks % _this24.opts.opportunisticGraftTicks === 0 && peers.size > 1) {\n                  // Opportunistic grafting works as follows: we check the median score of peers in the\n                  // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at\n                  // random with score over the median.\n                  // The intention is to (slowly) improve an underperforming mesh by introducing good\n                  // scoring peers that may have been gossiping at us. This allows us to get out of sticky\n                  // situations where we are stuck with poor peers and also recover from churn of good peers.\n                  // now compute the median peer score in the mesh\n                  var peersList = Array.from(peers).sort(function (a, b) {\n                    return getScore(a) - getScore(b);\n                  });\n                  var medianIndex = Math.floor(peers.size / 2);\n                  var medianScore = getScore(peersList[medianIndex]);\n                  // if the median score is below the threshold, select a better peer (if any) and GRAFT\n                  if (medianScore < _this24.opts.scoreThresholds.opportunisticGraftThreshold) {\n                    var _ineed3 = _this24.opts.opportunisticGraftPeers;\n                    var _newMeshPeers2 = removeItemsFromSet(candidateMeshPeers, _ineed3, function (id) {\n                      return getScore(id) > medianScore;\n                    });\n                    var _iterator23 = _createForOfIteratorHelper(_newMeshPeers2),\n                      _step23;\n                    try {\n                      for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n                        var _id = _step23.value;\n                        _this24.log('HEARTBEAT: Opportunistically graft peer %s on topic %s', _id, topic);\n                        graftPeer(_id, InclusionReason.Opportunistic);\n                      }\n                    } catch (err) {\n                      _iterator23.e(err);\n                    } finally {\n                      _iterator23.f();\n                    }\n                  }\n                }\n              });\n              // expire fanout for topics we haven't published to in a while\n              now = Date.now();\n              this.fanoutLastpub.forEach(function (lastpb, topic) {\n                if (lastpb + fanoutTTL < now) {\n                  _this24.fanout.delete(topic);\n                  _this24.fanoutLastpub.delete(topic);\n                }\n              });\n              // maintain our fanout for topics we are publishing but we have not joined\n              this.fanout.forEach(function (fanoutPeers, topic) {\n                // checks whether our peers are still in the topic and have a score above the publish threshold\n                var topicPeers = _this24.topics.get(topic);\n                fanoutPeers.forEach(function (id) {\n                  if (!topicPeers.has(id) || getScore(id) < _this24.opts.scoreThresholds.publishThreshold) {\n                    fanoutPeers.delete(id);\n                  }\n                });\n                var peersInTopic = _this24.topics.get(topic);\n                var candidateFanoutPeers = [];\n                // the fanout map contains topics to which we are not subscribed.\n                var peersToGossip = new Set();\n                peersToGossipByTopic.set(topic, peersToGossip);\n                if (peersInTopic) {\n                  var shuffledPeers = shuffle(Array.from(peersInTopic));\n                  var _iterator24 = _createForOfIteratorHelper(shuffledPeers),\n                    _step24;\n                  try {\n                    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n                      var id = _step24.value;\n                      var peerStreams = _this24.streamsOutbound.get(id);\n                      if (peerStreams && _this24.multicodecs.includes(peerStreams.protocol) && !fanoutPeers.has(id) && !_this24.direct.has(id)) {\n                        var score = getScore(id);\n                        if (score >= _this24.opts.scoreThresholds.publishThreshold) candidateFanoutPeers.push(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= _this24.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n                      }\n                    }\n                  } catch (err) {\n                    _iterator24.e(err);\n                  } finally {\n                    _iterator24.f();\n                  }\n                }\n                // do we need more peers?\n                if (fanoutPeers.size < D) {\n                  var ineed = D - fanoutPeers.size;\n                  candidateFanoutPeers.slice(0, ineed).forEach(function (id) {\n                    fanoutPeers.add(id);\n                    peersToGossip === null || peersToGossip === void 0 ? void 0 : peersToGossip.delete(id);\n                  });\n                }\n              });\n              this.emitGossip(peersToGossipByTopic);\n              // send coalesced GRAFT/PRUNE messages (will piggyback gossip)\n              _context35.next = 27;\n              return this.sendGraftPrune(tograft, toprune, noPX);\n            case 27:\n              // flush pending gossip that wasn't piggybacked above\n              this.flush();\n              // advance the message history window\n              this.mcache.shift();\n              this.dispatchEvent(new CustomEvent('gossipsub:heartbeat'));\n            case 30:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee33, this);\n      }));\n      function heartbeat() {\n        return _heartbeat.apply(this, arguments);\n      }\n      return heartbeat;\n    }()\n    /**\n     * Given a topic, returns up to count peers subscribed to that topic\n     * that pass an optional filter function\n     *\n     * @param topic\n     * @param count\n     * @param filter - a function to filter acceptable peers\n     */\n  }, {\n    key: \"getRandomGossipPeers\",\n    value: function getRandomGossipPeers(topic, count) {\n      var _this25 = this;\n      var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {\n        return true;\n      };\n      var peersInTopic = this.topics.get(topic);\n      if (!peersInTopic) {\n        return new Set();\n      }\n      // Adds all peers using our protocol\n      // that also pass the filter function\n      var peers = [];\n      peersInTopic.forEach(function (id) {\n        var peerStreams = _this25.streamsOutbound.get(id);\n        if (!peerStreams) {\n          return;\n        }\n        if (_this25.multicodecs.includes(peerStreams.protocol) && filter(id)) {\n          peers.push(id);\n        }\n      });\n      // Pseudo-randomly shuffles peers\n      peers = shuffle(peers);\n      if (count > 0 && peers.length > count) {\n        peers = peers.slice(0, count);\n      }\n      return new Set(peers);\n    }\n  }, {\n    key: \"onScrapeMetrics\",\n    value: function onScrapeMetrics(metrics) {\n      var _this$fastMsgIdCache$, _this$fastMsgIdCache4;\n      /* Data structure sizes */\n      metrics.mcacheSize.set(this.mcache.size);\n      // Arbitrary size\n      metrics.cacheSize.set({\n        cache: 'direct'\n      }, this.direct.size);\n      metrics.cacheSize.set({\n        cache: 'seenCache'\n      }, this.seenCache.size);\n      metrics.cacheSize.set({\n        cache: 'fastMsgIdCache'\n      }, (_this$fastMsgIdCache$ = (_this$fastMsgIdCache4 = this.fastMsgIdCache) === null || _this$fastMsgIdCache4 === void 0 ? void 0 : _this$fastMsgIdCache4.size) !== null && _this$fastMsgIdCache$ !== void 0 ? _this$fastMsgIdCache$ : 0);\n      metrics.cacheSize.set({\n        cache: 'publishedMessageIds'\n      }, this.publishedMessageIds.size);\n      metrics.cacheSize.set({\n        cache: 'mcache'\n      }, this.mcache.size);\n      metrics.cacheSize.set({\n        cache: 'score'\n      }, this.score.size);\n      metrics.cacheSize.set({\n        cache: 'gossipTracer.promises'\n      }, this.gossipTracer.size);\n      metrics.cacheSize.set({\n        cache: 'gossipTracer.requests'\n      }, this.gossipTracer.requestMsByMsgSize);\n      // Bounded by topic\n      metrics.cacheSize.set({\n        cache: 'topics'\n      }, this.topics.size);\n      metrics.cacheSize.set({\n        cache: 'subscriptions'\n      }, this.subscriptions.size);\n      metrics.cacheSize.set({\n        cache: 'mesh'\n      }, this.mesh.size);\n      metrics.cacheSize.set({\n        cache: 'fanout'\n      }, this.fanout.size);\n      // Bounded by peer\n      metrics.cacheSize.set({\n        cache: 'peers'\n      }, this.peers.size);\n      metrics.cacheSize.set({\n        cache: 'streamsOutbound'\n      }, this.streamsOutbound.size);\n      metrics.cacheSize.set({\n        cache: 'streamsInbound'\n      }, this.streamsInbound.size);\n      metrics.cacheSize.set({\n        cache: 'acceptFromWhitelist'\n      }, this.acceptFromWhitelist.size);\n      metrics.cacheSize.set({\n        cache: 'gossip'\n      }, this.gossip.size);\n      metrics.cacheSize.set({\n        cache: 'control'\n      }, this.control.size);\n      metrics.cacheSize.set({\n        cache: 'peerhave'\n      }, this.peerhave.size);\n      metrics.cacheSize.set({\n        cache: 'outbound'\n      }, this.outbound.size);\n      // 2D nested data structure\n      var backoffSize = 0;\n      var _iterator25 = _createForOfIteratorHelper(this.backoff.values()),\n        _step25;\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var backoff = _step25.value;\n          backoffSize += backoff.size;\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n      metrics.cacheSize.set({\n        cache: 'backoff'\n      }, backoffSize);\n      // Peer counts\n      var _iterator26 = _createForOfIteratorHelper(this.topics),\n        _step26;\n      try {\n        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n          var _step26$value = _slicedToArray(_step26.value, 2),\n            topicStr = _step26$value[0],\n            peers = _step26$value[1];\n          metrics.topicPeersCount.set({\n            topicStr: topicStr\n          }, peers.size);\n        }\n      } catch (err) {\n        _iterator26.e(err);\n      } finally {\n        _iterator26.f();\n      }\n      var _iterator27 = _createForOfIteratorHelper(this.mesh),\n        _step27;\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var _step27$value = _slicedToArray(_step27.value, 2),\n            _topicStr = _step27$value[0],\n            _peers3 = _step27$value[1];\n          metrics.meshPeerCounts.set({\n            topicStr: _topicStr\n          }, _peers3.size);\n        }\n        // Peer scores\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n      var scores = [];\n      var scoreByPeer = new Map();\n      metrics.behaviourPenalty.reset();\n      var _iterator28 = _createForOfIteratorHelper(this.peers.keys()),\n        _step28;\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var _this$score$peerStats, _this$score$peerStats2;\n          var peerIdStr = _step28.value;\n          var score = this.score.score(peerIdStr);\n          scores.push(score);\n          scoreByPeer.set(peerIdStr, score);\n          metrics.behaviourPenalty.observe((_this$score$peerStats = (_this$score$peerStats2 = this.score.peerStats.get(peerIdStr)) === null || _this$score$peerStats2 === void 0 ? void 0 : _this$score$peerStats2.behaviourPenalty) !== null && _this$score$peerStats !== void 0 ? _this$score$peerStats : 0);\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n      metrics.registerScores(scores, this.opts.scoreThresholds);\n      // Breakdown score per mesh topicLabel\n      metrics.registerScorePerMesh(this.mesh, scoreByPeer);\n      // Breakdown on each score weight\n      var sw = computeAllPeersScoreWeights(this.peers.keys(), this.score.peerStats, this.score.params, this.score.peerIPs, metrics.topicStrToLabel);\n      metrics.registerScoreWeights(sw);\n    }\n  }]);\n  return GossipSub;\n}(EventEmitter);\nGossipSub.multicodec = constants.GossipsubIDv11;","map":{"version":3,"names":["pipe","RecordEnvelope","peerIdFromBytes","peerIdFromString","logger","createTopology","CustomEvent","EventEmitter","MessageCache","RPC","constants","createGossipRpc","shuffle","messageIdToString","PeerScore","createPeerScoreParams","createPeerScoreThresholds","IWantTracer","SimpleTimeCache","ACCEPT_FROM_WHITELIST_DURATION_MS","ACCEPT_FROM_WHITELIST_MAX_MESSAGES","ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE","ChurnReason","getMetrics","IHaveIgnoreReason","InclusionReason","ScorePenalty","MessageAcceptance","ValidateError","MessageStatus","RejectReason","rejectReasonFromAcceptance","buildRawMessage","validateToRawMessage","msgIdFnStrictNoSign","msgIdFnStrictSign","computeAllPeersScoreWeights","getPublishConfigFromPeerId","Components","StrictNoSign","StrictSign","removeFirstNItemsFromSet","removeItemsFromSet","pushable","InboundStream","OutboundStream","multicodec","GossipsubIDv11","GossipStatusCode","GossipSub","_EventEmitter","_inherits","_super","_createSuper","_opts$globalSignature","_opts$debugName","_options$msgIdToStrFn","_this","options","arguments","length","undefined","_classCallCheck","call","multicodecs","GossipsubIDv10","peers","Set","streamsInbound","Map","streamsOutbound","outboundInflightQueue","objectMode","direct","floodsubPeers","acceptFromWhitelist","topics","subscriptions","mesh","fanout","fanoutLastpub","gossip","control","peerhave","iasked","backoff","outbound","topicValidators","heartbeatTicks","components","directPeerInitial","status","code","stopped","heartbeatTimer","runHeartbeat","_this$metrics","timer","metrics","heartbeatDuration","startTimer","heartbeat","catch","err","log","finally","started","clearTimeout","heartbeatTimeout","msToNextHeartbeat","opts","heartbeatInterval","Date","now","hearbeatStartMs","_this$metrics2","heartbeatSkipped","inc","setTimeout","_objectSpread","fallbackToFloodsub","floodPublish","doPX","directPeers","D","GossipsubD","Dlo","GossipsubDlo","Dhi","GossipsubDhi","Dscore","GossipsubDscore","Dout","GossipsubDout","Dlazy","GossipsubDlazy","GossipsubHeartbeatInterval","fanoutTTL","GossipsubFanoutTTL","mcacheLength","GossipsubHistoryLength","mcacheGossip","GossipsubHistoryGossip","seenTTL","GossipsubSeenTTL","gossipsubIWantFollowupMs","GossipsubIWantFollowupTime","prunePeers","GossipsubPrunePeers","pruneBackoff","GossipsubPruneBackoff","graftFloodThreshold","GossipsubGraftFloodThreshold","opportunisticGraftPeers","GossipsubOpportunisticGraftPeers","opportunisticGraftTicks","GossipsubOpportunisticGraftTicks","directConnectTicks","GossipsubDirectConnectTicks","scoreParams","scoreThresholds","globalSignaturePolicy","push","FloodsubID","debugName","map","p","id","toString","seenCache","validityMs","publishedMessageIds","msgIdFn","fastMsgIdFn","fastMsgIdCache","msgIdToStrFn","mcache","messageCache","dataTransform","metricsRegister","metricsTopicStrToLabel","Error","maxMeshMessageDeliveriesWindowMs","Math","max","apply","_toConsumableArray","Object","values","topicParam","meshMessageDeliveriesWindow","concat","DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS","gossipPromiseExpireSec","behaviourPenaltyThreshold","maxMeshMessageDeliveriesWindowSec","mcacheSize","addCollect","onScrapeMetrics","_iterator3","_createForOfIteratorHelper","_step3","s","n","done","protocol","value","protocolsEnabled","set","e","f","gossipTracer","score","scoreCacheValidityMs","maxInboundStreams","maxOutboundStreams","_createClass","key","getPeers","keys","str","isStarted","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","init","stop","_x","_start","_callee6","_this2","registrar","topology","registrarTopologyIds","_callee6$","_context6","abrupt","getPeerId","publishConfig","sent","_ref","_callee2","source","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_step$value","peerId","connection","_callee2$","_context2","_asyncIterator","createOutboundStream","t0","return","finish","_x2","error","Promise","all","_ref2","_callee3","_callee3$","_context3","getPeerStore","addressBook","add","addrs","_x3","getRegistrar","handle","onIncomingStream","bind","onConnect","onPeerConnected","onDisconnect","onPeerDisconnected","register","GossipsubHeartbeatInitialDelay","start","resolve","then","_callee5","_callee5$","_context5","Array","from","_ref4","_callee4","_callee4$","_context4","connect","_x4","GossipsubDirectConnectInitialDelay","_stop","_callee7","_iterator4","_step4","outboundStream","_iterator5","_step5","inboundStream","_callee7$","_context7","forEach","unregister","end","close","clear","cancel","dumpPeerScoreStats","_ref5","stream","remotePeer","addPeer","stat","direction","createInboundStream","removePeer","_createOutboundStream","_callee8","_this3","_this$metrics3","_callee8$","_context8","has","newStream","t1","t2","t3","maxBufferSize","maxOutboundBufferSize","peersPerProtocol","size","sendSubscriptions","t4","_x5","_x6","_createInboundStream","_callee9","_this4","priorInboundStream","_callee9$","_context9","get","pipePeerReadStream","_x7","_x8","delete","_this$metrics4","_iterator6","_step6","_iterator7","_step7","_step7$value","_slicedToArray","topicStr","_this$metrics5","onRemoveFromMesh","Dc","_iterator8","_step8","getMeshPeers","topic","peersInTopic","getSubscribers","getTopics","_pipePeerReadStream","_callee11","_this5","_callee11$","_context11","_ref6","_callee10","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","data","_this5$metrics","rpcBytes","rpc","_callee10$","_context10","subarray","decode","onRpcRecv","awaitRpcHandler","handleReceivedRpc","_x11","_x9","_x10","_handleReceivedRpc","_callee12","_this6","_this$metrics6","_iterator9","_step9","message","handleReceivedMessagePromise","_callee12$","_context12","acceptFrom","rpcRecvNotAccepted","subOpt","handleReceivedSubscription","dispatchEvent","detail","filter","sub","_sub$topic","subscribe","Boolean","messages","handleReceivedMessage","awaitRpcMessageHandler","handleControlMessage","_x12","_x13","topicSet","_handleReceivedMessage","_callee13","rpcMsg","_this$metrics7","_this$metrics8","_this$metrics9","validationResult","msgIdStr","isFromSelf","_callee13$","_context13","onMsgRecvPreValidation","validateReceivedMessage","onMsgRecvResult","duplicate","invalid","valid","duplicateMessage","observeDuplicate","rejectMessage","reason","rejectInvalidMessage","onMsgRecvInvalid","validateMessage","messageId","deliverMessage","put","asyncValidation","equals","emitSelf","_get","_getPrototypeOf","prototype","propagationSource","msgId","msg","forwardMessage","_x14","_x15","_validateReceivedMessage","_callee14","_this$fastMsgIdFn","_this$fastMsgIdCache","_this$fastMsgIdCache2","fastMsgIdStr","msgIdCached","topicValidator","acceptance","errCode","_callee14$","_context14","inboundTransform","TransformFailed","ERR_TOPIC_VALIDATOR_IGNORE","Ignore","ERR_TOPIC_VALIDATOR_REJECT","Reject","Accept","_x16","_x17","getScore","toPeer","sendRpc","_handleControlMessage","_callee15","controlMsg","iwant","ihave","prune","_callee15$","_context15","handleIHave","handleIWant","graft","handleGraft","handlePrune","_x18","_x19","entry","messagesAccepted","acceptUntil","graylistThreshold","_this$peerhave$get","_this$iasked$get","_this7","gossipThreshold","_this$metrics10","ihaveRcvIgnored","LowScore","GossipsubMaxIHaveMessages","_this$metrics11","MaxIhave","GossipsubMaxIHaveLength","_this$metrics12","MaxIasked","_ref7","_this7$metrics","topicID","messageIDs","idonthave","onIhaveRcv","iask","iwantList","slice","addPromise","_this8","_this$metrics13","iwantByTopic","iwantDonthave","_ref8","_iwantByTopic$get","getWithIWantCount","count","GossipsubGossipRetransmission","onIwantRcv","_handleGraft","_callee16","_this9","_callee16$","_context16","_ref9","_this9$backoff$get","_this9$metrics","peersInMesh","expire","addPenalty","GraftBackoff","floodCutoff","addBackoff","onAddToMesh","Subscribed","makePrune","_x20","_x21","_handlePrune","_callee17","_iterator10","_step10","_step10$value","_this$metrics14","_callee17$","_context17","Unsub","doAddBackoff","acceptPXThreshold","pxConnect","_x22","_x23","interval","_backoff$get","existingExpire","applyIwantPenalties","_this10","getBrokenPromises","BrokenPromise","clearBackoff","_this11","GossipsubPruneBackoffTicks","_directConnect","_callee19","_this12","toconnect","_callee19$","_context19","_ref10","_callee18","_callee18$","_context18","_x24","directConnect","_pxConnect","_callee22","_this13","_callee22$","_context22","_ref11","_callee20","pi","envelope","eid","_callee20$","_context20","peerID","signedPeerRecord","openAndCertify","consumePeerRecord","_x26","_ref12","_callee21","_callee21$","_context21","_x27","_x25","_connect","_callee23","_iterator11","_step11","_multicodec","_iterator12","_step12","_callee23$","_context23","getConnectionManager","openConnection","getTopologies","_x28","_iterator13","_step13","join","unsubscribe","_this14","wasSubscribed","_iterator14","_step14","leave","_this$metrics15","_this15","onJoin","toAdd","fanoutPeers","_this$metrics16","Fanout","_this$metrics17","fanoutCount","newPeers","getRandomGossipPeers","peer","Random","sendGraft","_leave","_callee25","_this$metrics18","_this16","meshPeers","_callee25$","_context25","onLeave","_ref13","_callee24","_callee24$","_context24","sendPrune","_x30","_x29","selectPeersToForward","excludePeers","_this17","tosend","publishThreshold","selectPeersToPublish","_this18","tosendCount","floodsub","newFanoutPeers","rawMsg","_this19","_this$metrics19","onForwardMsg","_publish","_callee26","_this$metrics20","transformedData","_yield$buildRawMessag","_this$selectPeersToPu","willSendToSelf","_iterator15","_step15","_callee26$","_context26","outboundTransform","raw","allowPublishToZeroPeers","onPublishMsg","recipients","publish","_x31","_x32","reportMessageValidationResult","_this$metrics21","cacheEntry","validate","onReportValidationMcacheHit","_this$metrics22","originatingPeers","onReportValidation","_this$metrics23","remove","_this$metrics24","rejectReason","_iterator16","_step16","out","_sendPrune","_callee27","_callee27$","_context27","_x33","_x34","_this$metrics25","ctrl","piggybackControl","piggybackGossip","encode","onRpcSent","outRpc","_this20","tograft","_ref14","toprune","_ref15","_sendGraftPrune","_callee30","noPX","_this21","_iterator17","_step17","_loop","_iterator18","_step18","_loop2","_callee30$","_context32","_step17$value","pruning","_loop$","_context29","_ref16","_callee28","_noPX$get","_callee28$","_context28","_x38","delegateYield","_step18$value","_loop2$","_context31","_ref17","_callee29","_noPX$get2","_callee29$","_context30","_x39","sendGraftPrune","_x35","_x36","_x37","emitGossip","peersToGossipByTopic","gossipIDsByTopic","getGossipIDs","_iterator19","_step19","_gossipIDsByTopic$get","_step19$value","peersToGossip","doEmitGossip","candidateToGossip","_this22","target","factor","GossipsubGossipFactor","peerMessageIDs","pushGossip","flush","_iterator20","entries","_step20","_step20$value","_iterator21","_step21","_step21$value","controlIHaveMsgs","_makePrune","_callee32","_this23","px","_callee32$","_context34","xid","_ref18","_callee31","_callee31$","_context33","toBytes","getRawEnvelope","_x43","_x40","_x41","_x42","_heartbeat","_callee33","_this24","_this$metrics26","_this$fastMsgIdCache3","_this$opts","scores","_callee33$","_context35","cacheSize","cache","candidateMeshPeers","shuffledPeers","_iterator22","_step22","peerStreams","includes","prunePeer","_this24$metrics","graftPeer","_this24$metrics2","BadScore","ineed","newMeshPeers","NotEnough","peersArray","sort","a","b","rotate","i","j","Excess","Outbound","peersList","medianIndex","floor","medianScore","opportunisticGraftThreshold","_iterator23","_step23","Opportunistic","lastpb","topicPeers","candidateFanoutPeers","_iterator24","_step24","shift","_this25","_this$fastMsgIdCache$","_this$fastMsgIdCache4","requestMsByMsgSize","backoffSize","_iterator25","_step25","_iterator26","_step26","_step26$value","topicPeersCount","_iterator27","_step27","_step27$value","meshPeerCounts","scoreByPeer","behaviourPenalty","reset","_iterator28","_step28","_this$score$peerStats","_this$score$peerStats2","peerIdStr","observe","peerStats","registerScores","registerScorePerMesh","sw","params","peerIPs","topicStrToLabel","registerScoreWeights"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
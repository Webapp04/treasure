{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { exporter } from 'ipfs-unixfs-exporter';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport map from 'it-map';\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('ipfs-core-types/src/files').MFSEntry} MFSEntry\n */\n\n/**\n * @param {import('ipfs-unixfs-exporter').UnixFSEntry} fsEntry\n */\nvar toOutput = function toOutput(fsEntry) {\n  /** @type {MFSEntry} */\n  var output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: fsEntry.type === 'directory' ? 'directory' : 'file',\n    size: fsEntry.size\n  };\n  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {\n    output.mode = fsEntry.unixfs.mode;\n    output.mtime = fsEntry.unixfs.mtime;\n  }\n  return output;\n};\n\n/**\n * @param {MfsContext} context\n */\nexport function createLs(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"ls\"]}\n   */\n  function mfsLs(_x) {\n    return _mfsLs.apply(this, arguments);\n  }\n  function _mfsLs() {\n    _mfsLs = _wrapAsyncGenerator(function (path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var mfsPath, fsEntry;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _awaitAsyncGenerator(toMfsPath(context, path, options));\n            case 2:\n              mfsPath = _context.sent;\n              _context.next = 5;\n              return _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.repo.blocks));\n            case 5:\n              fsEntry = _context.sent;\n              if (!(fsEntry.type === 'directory')) {\n                _context.next = 9;\n                break;\n              }\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(fsEntry.content(options), toOutput)), _awaitAsyncGenerator), \"t0\", 8);\n            case 8:\n              return _context.abrupt(\"return\");\n            case 9:\n              _context.next = 11;\n              return toOutput(fsEntry);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })();\n    });\n    return _mfsLs.apply(this, arguments);\n  }\n  return withTimeoutOption(mfsLs);\n}","map":{"version":3,"names":["exporter","toMfsPath","withTimeoutOption","map","toOutput","fsEntry","output","cid","name","type","size","mode","unixfs","mtime","createLs","context","mfsLs","_x","_mfsLs","apply","arguments","_wrapAsyncGenerator","path","options","length","undefined","_regeneratorRuntime","mark","_callee","mfsPath","wrap","_callee$","_context","prev","next","_awaitAsyncGenerator","sent","repo","blocks","delegateYield","_asyncGeneratorDelegate","_asyncIterator","content","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/ls.js"],"sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport map from 'it-map'\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('ipfs-core-types/src/files').MFSEntry} MFSEntry\n */\n\n/**\n * @param {import('ipfs-unixfs-exporter').UnixFSEntry} fsEntry\n */\nconst toOutput = (fsEntry) => {\n  /** @type {MFSEntry} */\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: fsEntry.type === 'directory' ? 'directory' : 'file',\n    size: fsEntry.size\n  }\n\n  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {\n    output.mode = fsEntry.unixfs.mode\n    output.mtime = fsEntry.unixfs.mtime\n  }\n\n  return output\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createLs (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"ls\"]}\n   */\n  async function * mfsLs (path, options = {}) {\n    const mfsPath = await toMfsPath(context, path, options)\n    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n    // directory, perhaps sharded\n    if (fsEntry.type === 'directory') {\n      yield * map(fsEntry.content(options), toOutput)\n\n      return\n    }\n\n    // single file/node\n    yield toOutput(fsEntry)\n  }\n\n  return withTimeoutOption(mfsLs)\n}\n"],"mappings":";;;;;AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,OAAOC,GAAG,MAAM,QAAQ;;AAExB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,OAAO,EAAK;EAC5B;EACA,IAAMC,MAAM,GAAG;IACbC,GAAG,EAAEF,OAAO,CAACE,GAAG;IAChBC,IAAI,EAAEH,OAAO,CAACG,IAAI;IAClBC,IAAI,EAAEJ,OAAO,CAACI,IAAI,KAAK,WAAW,GAAG,WAAW,GAAG,MAAM;IACzDC,IAAI,EAAEL,OAAO,CAACK;EAChB,CAAC;EAED,IAAIL,OAAO,CAACI,IAAI,KAAK,MAAM,IAAIJ,OAAO,CAACI,IAAI,KAAK,WAAW,EAAE;IAC3DH,MAAM,CAACK,IAAI,GAAGN,OAAO,CAACO,MAAM,CAACD,IAAI;IACjCL,MAAM,CAACO,KAAK,GAAGR,OAAO,CAACO,MAAM,CAACC,KAAK;EACrC;EAEA,OAAOP,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA,OAAO,SAASQ,QAAQA,CAAEC,OAAO,EAAE;EACjC;AACF;AACA;EAFE,SAGiBC,KAAKA,CAAAC,EAAA;IAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,OAAA;IAAAA,MAAA,GAAAG,mBAAA,CAAtB,UAAwBC,IAAI;MAAA,IAAEC,OAAO,GAAAH,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAAG,CAAC,CAAC;MAAA,oBAAAM,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,OAAA,EAAAxB,OAAA;QAAA,OAAAqB,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAAAC,oBAAA,CAClBlC,SAAS,CAACc,OAAO,EAAEO,IAAI,EAAEC,OAAO,CAAC;YAAA;cAAjDM,OAAO,GAAAG,QAAA,CAAAI,IAAA;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OAAAC,oBAAA,CACSnC,QAAQ,CAAC6B,OAAO,CAACA,OAAO,EAAEd,OAAO,CAACsB,IAAI,CAACC,MAAM,CAAC;YAAA;cAA9DjC,OAAO,GAAA2B,QAAA,CAAAI,IAAA;cAAA,MAGT/B,OAAO,CAACI,IAAI,KAAK,WAAW;gBAAAuB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAC9B,OAAAF,QAAA,CAAAO,aAAA,CAAAC,uBAAA,CAAAC,cAAA,CAAQtC,GAAG,CAACE,OAAO,CAACqC,OAAO,CAACnB,OAAO,CAAC,EAAEnB,QAAQ,CAAC,GAAA+B,oBAAA;YAAA;cAAA,OAAAH,QAAA,CAAAW,MAAA;YAAA;cAAAX,QAAA,CAAAE,IAAA;cAMjD,OAAM9B,QAAQ,CAACC,OAAO,CAAC;YAAA;YAAA;cAAA,OAAA2B,QAAA,CAAAY,IAAA;UAAA;QAAA,GAAAhB,OAAA;MAAA;IAAA,CACxB;IAAA,OAAAV,MAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOlB,iBAAiB,CAACc,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
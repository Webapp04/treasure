{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport mergeOpts from 'merge-options';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport { toTrail } from './utils/to-trail.js';\nimport { addLink } from './utils/add-link.js';\nimport { updateTree } from './utils/update-tree.js';\nimport { updateMfsRoot } from './utils/update-mfs-root.js';\nimport * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nvar mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nvar log = logger('ipfs:mfs:touch');\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nvar defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n};\n\n/**\n * @param {MfsContext} context\n */\nexport function createTouch(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"touch\"]}\n   */\n  function mfsTouch(_x) {\n    return _mfsTouch.apply(this, arguments);\n  }\n  function _mfsTouch() {\n    _mfsTouch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n        settings,\n        _yield$toMfsPath,\n        cid,\n        mfsDirectory,\n        name,\n        exists,\n        hashAlg,\n        hasher,\n        updatedBlock,\n        updatedCid,\n        cidVersion,\n        metadata,\n        hash,\n        block,\n        node,\n        _metadata,\n        _hash,\n        trail,\n        parent,\n        parentCid,\n        parentBlock,\n        parentNode,\n        result,\n        newRootCid,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            /** @type {DefaultOptions} */\n            settings = mergeOptions(defaultOptions, options);\n            settings.mtime = settings.mtime || new Date();\n            log(\"Touching \".concat(path, \" mtime: \").concat(settings.mtime));\n            _context.next = 6;\n            return toMfsPath(context, path, settings);\n          case 6:\n            _yield$toMfsPath = _context.sent;\n            cid = _yield$toMfsPath.cid;\n            mfsDirectory = _yield$toMfsPath.mfsDirectory;\n            name = _yield$toMfsPath.name;\n            exists = _yield$toMfsPath.exists;\n            hashAlg = options.hashAlg || defaultOptions.hashAlg;\n            _context.next = 14;\n            return context.hashers.getHasher(hashAlg);\n          case 14:\n            hasher = _context.sent;\n            cidVersion = settings.cidVersion;\n            if (exists) {\n              _context.next = 28;\n              break;\n            }\n            metadata = new UnixFS({\n              type: 'file',\n              mtime: settings.mtime\n            });\n            updatedBlock = dagPB.encode({\n              Data: metadata.marshal(),\n              Links: []\n            });\n            _context.next = 21;\n            return hasher.digest(updatedBlock);\n          case 21:\n            hash = _context.sent;\n            updatedCid = CID.create(settings.cidVersion, dagPB.code, hash);\n            if (!settings.flush) {\n              _context.next = 26;\n              break;\n            }\n            _context.next = 26;\n            return context.repo.blocks.put(updatedCid, updatedBlock);\n          case 26:\n            _context.next = 47;\n            break;\n          case 28:\n            if (!(cid.code !== dagPB.code)) {\n              _context.next = 30;\n              break;\n            }\n            throw errCode(new Error(\"\".concat(path, \" was not a UnixFS node\")), 'ERR_NOT_UNIXFS');\n          case 30:\n            cidVersion = cid.version;\n            _context.next = 33;\n            return context.repo.blocks.get(cid);\n          case 33:\n            block = _context.sent;\n            node = dagPB.decode(block);\n            if (node.Data) {\n              _context.next = 37;\n              break;\n            }\n            throw errCode(new Error(\"\".concat(path, \" had no data\")), 'ERR_INVALID_NODE');\n          case 37:\n            _metadata = UnixFS.unmarshal(node.Data); // @ts-expect-error TODO: restore setting all date types as mtime - it's in the code, just not the signature\n            _metadata.mtime = settings.mtime;\n            updatedBlock = dagPB.encode({\n              Data: _metadata.marshal(),\n              Links: node.Links\n            });\n            _context.next = 42;\n            return hasher.digest(updatedBlock);\n          case 42:\n            _hash = _context.sent;\n            updatedCid = CID.create(settings.cidVersion, dagPB.code, _hash);\n            if (!settings.flush) {\n              _context.next = 47;\n              break;\n            }\n            _context.next = 47;\n            return context.repo.blocks.put(updatedCid, updatedBlock);\n          case 47:\n            _context.next = 49;\n            return toTrail(context, mfsDirectory);\n          case 49:\n            trail = _context.sent;\n            parent = trail[trail.length - 1];\n            parentCid = parent.cid;\n            _context.next = 54;\n            return context.repo.blocks.get(parentCid);\n          case 54:\n            parentBlock = _context.sent;\n            parentNode = dagPB.decode(parentBlock);\n            _context.next = 58;\n            return addLink(context, {\n              parent: parentNode,\n              name: name,\n              cid: updatedCid,\n              size: updatedBlock.length,\n              flush: settings.flush,\n              shardSplitThreshold: settings.shardSplitThreshold,\n              hashAlg: settings.hashAlg,\n              cidVersion: cidVersion\n            });\n          case 58:\n            result = _context.sent;\n            parent.cid = result.cid;\n\n            // update the tree with the new child\n            _context.next = 62;\n            return updateTree(context, trail, settings);\n          case 62:\n            newRootCid = _context.sent;\n            _context.next = 65;\n            return updateMfsRoot(context, newRootCid, settings);\n          case 65:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _mfsTouch.apply(this, arguments);\n  }\n  return withTimeoutOption(mfsTouch);\n}","map":{"version":3,"names":["mergeOpts","toMfsPath","logger","errCode","UnixFS","toTrail","addLink","updateTree","updateMfsRoot","dagPB","CID","withTimeoutOption","mergeOptions","bind","ignoreUndefined","log","defaultOptions","flush","shardSplitThreshold","cidVersion","hashAlg","createTouch","context","mfsTouch","_x","_mfsTouch","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","path","options","settings","_yield$toMfsPath","cid","mfsDirectory","name","exists","hasher","updatedBlock","updatedCid","metadata","hash","block","node","_metadata","_hash","trail","parent","parentCid","parentBlock","parentNode","result","newRootCid","_args","wrap","_callee$","_context","prev","next","length","undefined","mtime","Date","concat","sent","hashers","getHasher","type","encode","Data","marshal","Links","digest","create","code","repo","blocks","put","Error","version","get","decode","unmarshal","size","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/touch.js"],"sourcesContent":["import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createTouch (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"touch\"]}\n   */\n  async function mfsTouch (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options)\n    settings.mtime = settings.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${settings.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings)\n\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n\n    let updatedBlock\n    let updatedCid\n\n    let cidVersion = settings.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: settings.mtime\n      })\n      updatedBlock = dagPB.encode({ Data: metadata.marshal(), Links: [] })\n\n      const hash = await hasher.digest(updatedBlock)\n\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    } else {\n      if (cid.code !== dagPB.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      const block = await context.repo.blocks.get(cid)\n      const node = dagPB.decode(block)\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE')\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data)\n\n      // @ts-expect-error TODO: restore setting all date types as mtime - it's in the code, just not the signature\n      metadata.mtime = settings.mtime\n\n      updatedBlock = dagPB.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      })\n\n      const hash = await hasher.digest(updatedBlock)\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = parent.cid\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, settings)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, settings)\n  }\n\n  return withTimeoutOption(mfsTouch)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
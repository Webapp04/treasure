{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport var DNS4 = base('dns4');\nexport var DNS6 = base('dns6');\nexport var DNSADDR = base('dnsaddr');\nexport var DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport var IP = or(base('ip4'), base('ip6'));\nexport var TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport var UDP = and(IP, base('udp'));\nexport var UTP = and(UDP, base('utp'));\nexport var QUIC = and(UDP, base('quic'));\nexport var WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport var WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport var HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport var HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nvar _WebRTC = and(UDP, base('webrtc'), base('certhash'));\nexport var WebRTC = or(and(_WebRTC, base('p2p')), _WebRTC);\nexport var WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport var WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\nexport var WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport var Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP, QUIC, DNS, WebRTC);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport var Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nvar _P2P = or(and(Reliable, base('p2p')), WebRTCStar, WebRTCDirect, WebRTC, base('p2p'));\nvar _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nvar CircuitRecursive = function CircuitRecursive() {\n  return or(and(_Circuit, CircuitRecursive), _Circuit);\n};\nexport var Circuit = CircuitRecursive();\nexport var P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport var IPFS = P2P;\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n  function matches(a) {\n    var ma;\n    try {\n      ma = multiaddr(a);\n    } catch (err) {\n      // catch error\n      return false; // also if it's invalid it's probably not matching as well so return false\n    }\n\n    var out = partialMatch(ma.protoNames());\n    if (out === null) {\n      return false;\n    }\n    if (out === true || out === false) {\n      return out;\n    }\n    return out.length === 0;\n  }\n  return matches;\n}\nfunction and() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  function partialMatch(a) {\n    if (a.length < args.length) {\n      return null;\n    }\n    var out = a;\n    args.some(function (arg) {\n      out = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n      if (Array.isArray(out)) {\n        a = out;\n      }\n      if (out === null) {\n        return true;\n      }\n      return false;\n    });\n    return out;\n  }\n  return {\n    toString: function toString() {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  };\n}\nfunction or() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  function partialMatch(a) {\n    var out = null;\n    args.some(function (arg) {\n      var res = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n      if (res != null) {\n        out = res;\n        return true;\n      }\n      return false;\n    });\n    return out;\n  }\n  var result = {\n    toString: function toString() {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  };\n  return result;\n}\nfunction base(n) {\n  var name = n;\n  function matches(a) {\n    var ma;\n    try {\n      ma = multiaddr(a);\n    } catch (err) {\n      // catch error\n      return false; // also if it's invalid it's probably not matching as well so return false\n    }\n\n    var pnames = ma.protoNames();\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true;\n    }\n    return false;\n  }\n  function partialMatch(protos) {\n    if (protos.length === 0) {\n      return null;\n    }\n    if (protos[0] === name) {\n      return protos.slice(1);\n    }\n    return null;\n  }\n  return {\n    toString: function toString() {\n      return name;\n    },\n    matches: matches,\n    partialMatch: partialMatch\n  };\n}","map":{"version":3,"names":["multiaddr","DNS4","base","DNS6","DNSADDR","DNS","or","IP","TCP","and","UDP","UTP","QUIC","WebSockets","WebSocketsSecure","HTTP","HTTPS","_WebRTC","WebRTC","WebRTCStar","WebSocketStar","WebRTCDirect","Reliable","Stardust","_P2P","_Circuit","CircuitRecursive","Circuit","P2P","IPFS","makeMatchesFunction","partialMatch","matches","a","ma","err","out","protoNames","length","_len","arguments","args","Array","_key","some","arg","isArray","toString","join","input","_len2","_key2","res","result","n","name","pnames","protos","slice"],"sources":["/Users/apple/Documents/treasure/node_modules/@multiformats/mafmt/src/index.ts"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface MatchesFunction { (a: string | Uint8Array | Multiaddr): boolean }\nexport interface PartialMatchesFunction { (protos: string[]): boolean | string[] | null }\n\nexport interface Mafmt {\n  toString: () => string\n  input?: Array<(Mafmt | (() => Mafmt))>\n  matches: MatchesFunction\n  partialMatch: PartialMatchesFunction\n}\n\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4')\nexport const DNS6 = base('dns6')\nexport const DNSADDR = base('dnsaddr')\nexport const DNS = or(\n  base('dns'),\n  DNSADDR,\n  DNS4,\n  DNS6\n)\n\nexport const IP = or(base('ip4'), base('ip6'))\nexport const TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nexport const UDP = and(IP, base('udp'))\nexport const UTP = and(UDP, base('utp'))\n\nexport const QUIC = and(UDP, base('quic'))\n\nexport const WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nexport const WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss')),\n  and(TCP, base('tls'), base('ws')),\n  and(DNS, base('tls'), base('ws'))\n)\n\nexport const HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nexport const HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst _WebRTC = and(UDP, base('webrtc'), base('certhash'))\nexport const WebRTC = or(\n  and(_WebRTC, base('p2p')),\n  _WebRTC\n)\n\nexport const WebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nexport const WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\nexport const WebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTPS, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nexport const Reliable = or(\n  WebSockets,\n  WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  WebRTCStar,\n  WebRTCDirect,\n  TCP,\n  UTP,\n  QUIC,\n  DNS,\n  WebRTC\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  WebRTCStar,\n  WebRTCDirect,\n  WebRTC,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = () => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nexport const Circuit = CircuitRecursive()\n\nexport const P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nexport const IPFS = P2P\n\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction (partialMatch: PartialMatchesFunction) {\n  function matches (a: string | Uint8Array | Multiaddr): boolean {\n    let ma\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const out = partialMatch(ma.protoNames())\n    if (out === null) {\n      return false\n    }\n\n    if (out === true || out === false) {\n      return out\n    }\n\n    return out.length === 0\n  }\n\n  return matches\n}\n\nfunction and (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    if (a.length < args.length) {\n      return null\n    }\n\n    let out: boolean | string[] | null = a\n\n    args.some((arg) => {\n      out = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (Array.isArray(out)) {\n        a = out\n      }\n\n      if (out === null) {\n        return true\n      }\n\n      return false\n    })\n\n    return out\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n}\n\nfunction or (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res != null) {\n        out = res\n        return true\n      }\n      return false\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n\n  return result\n}\n\nfunction base (n: string): Mafmt {\n  const name = n\n\n  function matches (a: string | Uint8Array | Multiaddr) {\n    let ma: Multiaddr\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const pnames = ma.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  function partialMatch (protos: string[]): boolean | string[] | null {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches: matches,\n    partialMatch: partialMatch\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
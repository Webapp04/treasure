{"ast":null,"code":"import{setPoolAllocationBalance,setBurnedSmrtrBalance,setBurnedTresrBalance,setVeTresrSharePBalance,setKeyLevelPBalance,setAvaxBalance,setLpTRESRAVAXBalance,setLpSMRTRAVAXBalance,setLpStakedTRESRAVAXBalance,setLpStakedSMRTRAVAXBalance,setLpTotalStakedTRESRAVAXBalance,setLpTotalStakedSMRTRAVAXBalance,setLpCommunityStakedTRESRAVAXBalance,setLpCommunityStakedSMRTRAVAXBalance,setSmrtrBalance,setTresrBalance,setTresrStakedBalance,setTresrStakedAllBalance,setTotalEarnedBalance,setTimeTresrToUnlockBalance,setTransactionHashBalance}from\"redux/slice/balanceSlice\";var balanceAction={SET_POOL_ALLOCATION:function SET_POOL_ALLOCATION(dispatch,value){dispatch(setPoolAllocationBalance(value));},SET_BURNED_SMRTR:function SET_BURNED_SMRTR(dispatch,value){dispatch(setBurnedSmrtrBalance(value));},SET_BURNED_TRESR:function SET_BURNED_TRESR(dispatch,value){dispatch(setBurnedTresrBalance(value));},SET_VETRESR_SHARE_P:function SET_VETRESR_SHARE_P(dispatch,value){dispatch(setVeTresrSharePBalance(value));},SET_KEYLEVEL_P:function SET_KEYLEVEL_P(dispatch,value){dispatch(setKeyLevelPBalance(value));},SET_BALANCE_AVAX:function SET_BALANCE_AVAX(dispatch,value){dispatch(setAvaxBalance(value));},SET_BALANCE_LP_TRESRAVAX:function SET_BALANCE_LP_TRESRAVAX(dispatch,value){dispatch(setLpTRESRAVAXBalance(value));},SET_BALANCE_LP_SMRTRAVAX:function SET_BALANCE_LP_SMRTRAVAX(dispatch,value){dispatch(setLpSMRTRAVAXBalance(value));},SET_BALANCE_LP_STAKED_TRESRAVAX:function SET_BALANCE_LP_STAKED_TRESRAVAX(dispatch,value){dispatch(setLpStakedTRESRAVAXBalance(value));},SET_BALANCE_LP_STAKED_SMRTRAVAX:function SET_BALANCE_LP_STAKED_SMRTRAVAX(dispatch,value){dispatch(setLpStakedSMRTRAVAXBalance(value));},SET_BALANCE_LP_TOTAL_STAKED_TRESRAVAX:function SET_BALANCE_LP_TOTAL_STAKED_TRESRAVAX(dispatch,value){dispatch(setLpTotalStakedTRESRAVAXBalance(value));},SET_BALANCE_LP_TOTAL_STAKED_SMRTRAVAX:function SET_BALANCE_LP_TOTAL_STAKED_SMRTRAVAX(dispatch,value){dispatch(setLpTotalStakedSMRTRAVAXBalance(value));},SET_BALANCE_LP_COMMUNITY_STAKED_TRESRAVAX:function SET_BALANCE_LP_COMMUNITY_STAKED_TRESRAVAX(dispatch,value){dispatch(setLpCommunityStakedTRESRAVAXBalance(value));},SET_BALANCE_LP_COMMUNITY_STAKED_SMRTRAVAX:function SET_BALANCE_LP_COMMUNITY_STAKED_SMRTRAVAX(dispatch,value){dispatch(setLpCommunityStakedSMRTRAVAXBalance(value));},SET_BALANCE_SMRTR:function SET_BALANCE_SMRTR(dispatch,value){dispatch(setSmrtrBalance(value));},SET_BALANCE_TRESR:function SET_BALANCE_TRESR(dispatch,value){dispatch(setTresrBalance(value));},SET_BALANCE_TRESR_STAKED:function SET_BALANCE_TRESR_STAKED(dispatch,value){dispatch(setTresrStakedBalance(value));},SET_BALANCE_TRESR_STAKED_ALL:function SET_BALANCE_TRESR_STAKED_ALL(dispatch,value){dispatch(setTresrStakedAllBalance(value));},SET_BALANCE_TOTAL_EARNED:function SET_BALANCE_TOTAL_EARNED(dispatch,value){dispatch(setTotalEarnedBalance(value));},SET_BALANCE_TRESR_TIME_UNLOCK:function SET_BALANCE_TRESR_TIME_UNLOCK(dispatch,value){dispatch(setTimeTresrToUnlockBalance(value));},SET_TRANSANCTION_HASH:function SET_TRANSANCTION_HASH(dispatch,value){dispatch(setTransactionHashBalance(value));}};export default balanceAction;","map":{"version":3,"names":["setPoolAllocationBalance","setBurnedSmrtrBalance","setBurnedTresrBalance","setVeTresrSharePBalance","setKeyLevelPBalance","setAvaxBalance","setLpTRESRAVAXBalance","setLpSMRTRAVAXBalance","setLpStakedTRESRAVAXBalance","setLpStakedSMRTRAVAXBalance","setLpTotalStakedTRESRAVAXBalance","setLpTotalStakedSMRTRAVAXBalance","setLpCommunityStakedTRESRAVAXBalance","setLpCommunityStakedSMRTRAVAXBalance","setSmrtrBalance","setTresrBalance","setTresrStakedBalance","setTresrStakedAllBalance","setTotalEarnedBalance","setTimeTresrToUnlockBalance","setTransactionHashBalance","balanceAction","SET_POOL_ALLOCATION","dispatch","value","SET_BURNED_SMRTR","SET_BURNED_TRESR","SET_VETRESR_SHARE_P","SET_KEYLEVEL_P","SET_BALANCE_AVAX","SET_BALANCE_LP_TRESRAVAX","SET_BALANCE_LP_SMRTRAVAX","SET_BALANCE_LP_STAKED_TRESRAVAX","SET_BALANCE_LP_STAKED_SMRTRAVAX","SET_BALANCE_LP_TOTAL_STAKED_TRESRAVAX","SET_BALANCE_LP_TOTAL_STAKED_SMRTRAVAX","SET_BALANCE_LP_COMMUNITY_STAKED_TRESRAVAX","SET_BALANCE_LP_COMMUNITY_STAKED_SMRTRAVAX","SET_BALANCE_SMRTR","SET_BALANCE_TRESR","SET_BALANCE_TRESR_STAKED","SET_BALANCE_TRESR_STAKED_ALL","SET_BALANCE_TOTAL_EARNED","SET_BALANCE_TRESR_TIME_UNLOCK","SET_TRANSANCTION_HASH"],"sources":["/Users/apple/Documents/treasure/src/redux/action/balanceAction.js"],"sourcesContent":["import {\n  setPoolAllocationBalance,\n  setBurnedSmrtrBalance,\n  setBurnedTresrBalance,\n  setVeTresrSharePBalance,\n  setKeyLevelPBalance,\n  setAvaxBalance,\n  setLpTRESRAVAXBalance,\n  setLpSMRTRAVAXBalance,\n  setLpStakedTRESRAVAXBalance,\n  setLpStakedSMRTRAVAXBalance,\n  setLpTotalStakedTRESRAVAXBalance,\n  setLpTotalStakedSMRTRAVAXBalance,\n  setLpCommunityStakedTRESRAVAXBalance,\n  setLpCommunityStakedSMRTRAVAXBalance,\n  setSmrtrBalance,\n  setTresrBalance,\n  setTresrStakedBalance,\n  setTresrStakedAllBalance,\n  setTotalEarnedBalance,\n  setTimeTresrToUnlockBalance,\n  setTransactionHashBalance,\n} from \"redux/slice/balanceSlice\";\n\nconst balanceAction = {\n  SET_POOL_ALLOCATION: (dispatch, value) => {\n    dispatch(setPoolAllocationBalance(value));\n  },\n  SET_BURNED_SMRTR: (dispatch, value) => {\n    dispatch(setBurnedSmrtrBalance(value));\n  },\n  SET_BURNED_TRESR: (dispatch, value) => {\n    dispatch(setBurnedTresrBalance(value));\n  },\n  SET_VETRESR_SHARE_P: (dispatch, value) => {\n    dispatch(setVeTresrSharePBalance(value));\n  },\n  SET_KEYLEVEL_P: (dispatch, value) => {\n    dispatch(setKeyLevelPBalance(value));\n  },\n  SET_BALANCE_AVAX: (dispatch, value) => {\n    dispatch(setAvaxBalance(value));\n  },\n  SET_BALANCE_LP_TRESRAVAX: (dispatch, value) => {\n    dispatch(setLpTRESRAVAXBalance(value));\n  },\n  SET_BALANCE_LP_SMRTRAVAX: (dispatch, value) => {\n    dispatch(setLpSMRTRAVAXBalance(value));\n  },\n  SET_BALANCE_LP_STAKED_TRESRAVAX: (dispatch, value) => {\n    dispatch(setLpStakedTRESRAVAXBalance(value));\n  },\n  SET_BALANCE_LP_STAKED_SMRTRAVAX: (dispatch, value) => {\n    dispatch(setLpStakedSMRTRAVAXBalance(value));\n  },\n  SET_BALANCE_LP_TOTAL_STAKED_TRESRAVAX: (dispatch, value) => {\n    dispatch(setLpTotalStakedTRESRAVAXBalance(value));\n  },\n  SET_BALANCE_LP_TOTAL_STAKED_SMRTRAVAX: (dispatch, value) => {\n    dispatch(setLpTotalStakedSMRTRAVAXBalance(value));\n  },\n  SET_BALANCE_LP_COMMUNITY_STAKED_TRESRAVAX: (dispatch, value) => {\n    dispatch(setLpCommunityStakedTRESRAVAXBalance(value));\n  },\n  SET_BALANCE_LP_COMMUNITY_STAKED_SMRTRAVAX: (dispatch, value) => {\n    dispatch(setLpCommunityStakedSMRTRAVAXBalance(value));\n  },\n  SET_BALANCE_SMRTR: (dispatch, value) => {\n    dispatch(setSmrtrBalance(value));\n  },\n  SET_BALANCE_TRESR: (dispatch, value) => {\n    dispatch(setTresrBalance(value));\n  },\n  SET_BALANCE_TRESR_STAKED: (dispatch, value) => {\n    dispatch(setTresrStakedBalance(value));\n  },\n  SET_BALANCE_TRESR_STAKED_ALL: (dispatch, value) => {\n    dispatch(setTresrStakedAllBalance(value));\n  },\n  SET_BALANCE_TOTAL_EARNED: (dispatch, value) => {\n    dispatch(setTotalEarnedBalance(value));\n  },\n  SET_BALANCE_TRESR_TIME_UNLOCK: (dispatch, value) => {\n    dispatch(setTimeTresrToUnlockBalance(value));\n  },\n  SET_TRANSANCTION_HASH: (dispatch, value) => {\n    dispatch(setTransactionHashBalance(value));\n  },\n};\n\nexport default balanceAction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
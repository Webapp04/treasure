{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nvar CIPHER_MODES = {\n  16: 'aes-128-ctr',\n  32: 'aes-256-ctr'\n};\nexport function cipherMode(key) {\n  if (key.length === 16 || key.length === 32) {\n    return CIPHER_MODES[key.length];\n  }\n  var modes = Object.entries(CIPHER_MODES).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      k = _ref2[0],\n      v = _ref2[1];\n    return \"\".concat(k, \" (\").concat(v, \")\");\n  }).join(' / ');\n  throw new CodeError(\"Invalid key length \".concat(key.length, \" bytes. Must be \").concat(modes), 'ERR_INVALID_KEY_LENGTH');\n}","map":{"version":3,"names":["CodeError","CIPHER_MODES","cipherMode","key","length","modes","Object","entries","map","_ref","_ref2","_slicedToArray","k","v","concat","join"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/aes/cipher-mode.ts"],"sourcesContent":["import { CodeError } from '@libp2p/interfaces/errors'\n\nconst CIPHER_MODES = {\n  16: 'aes-128-ctr',\n  32: 'aes-256-ctr'\n}\n\nexport function cipherMode (key: Uint8Array) {\n  if (key.length === 16 || key.length === 32) {\n    return CIPHER_MODES[key.length]\n  }\n\n  const modes = Object.entries(CIPHER_MODES).map(([k, v]) => `${k} (${v})`).join(' / ')\n  throw new CodeError(`Invalid key length ${key.length} bytes. Must be ${modes}`, 'ERR_INVALID_KEY_LENGTH')\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,2BAA2B;AAErD,IAAMC,YAAY,GAAG;EACnB,EAAE,EAAE,aAAa;EACjB,EAAE,EAAE;CACL;AAED,OAAM,SAAUC,UAAUA,CAAEC,GAAe;EACzC,IAAIA,GAAG,CAACC,MAAM,KAAK,EAAE,IAAID,GAAG,CAACC,MAAM,KAAK,EAAE,EAAE;IAC1C,OAAOH,YAAY,CAACE,GAAG,CAACC,MAAM,CAAC;;EAGjC,IAAMC,KAAK,GAAGC,MAAM,CAACC,OAAO,CAACN,YAAY,CAAC,CAACO,GAAG,CAAC,UAAAC,IAAA;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;MAAEG,CAAC,GAAAF,KAAA;MAAEG,CAAC,GAAAH,KAAA;IAAA,UAAAI,MAAA,CAASF,CAAC,QAAAE,MAAA,CAAKD,CAAC;EAAA,CAAG,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;EACrF,MAAM,IAAIf,SAAS,uBAAAc,MAAA,CAAuBX,GAAG,CAACC,MAAM,sBAAAU,MAAA,CAAmBT,KAAK,GAAI,wBAAwB,CAAC;AAC3G"},"metadata":{},"sourceType":"module","externalDependencies":[]}
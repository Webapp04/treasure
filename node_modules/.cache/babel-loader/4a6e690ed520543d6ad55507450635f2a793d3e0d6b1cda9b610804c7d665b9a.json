{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport function importer(_x, _x2) {\n  return _importer.apply(this, arguments);\n}\nfunction _importer() {\n  _importer = _wrapAsyncGenerator(function (source, blockstore) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var opts, dagBuilder, treeBuilder, candidates, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            opts = defaultOptions(options);\n            if (typeof options.dagBuilder === 'function') {\n              dagBuilder = options.dagBuilder;\n            } else {\n              dagBuilder = dagBuilderFn;\n            }\n            if (typeof options.treeBuilder === 'function') {\n              treeBuilder = options.treeBuilder;\n            } else {\n              treeBuilder = treeBuilderFn;\n            }\n\n            /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n\n            if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n              // @ts-ignore\n              candidates = source;\n            } else {\n              // @ts-ignore\n              candidates = [source];\n            }\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts));\n          case 8:\n            _context.next = 10;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 10:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 17;\n              break;\n            }\n            entry = _step.value;\n            _context.next = 14;\n            return {\n              cid: entry.cid,\n              path: entry.path,\n              unixfs: entry.unixfs,\n              size: entry.size\n            };\n          case 14:\n            _iteratorAbruptCompletion = false;\n            _context.next = 8;\n            break;\n          case 17:\n            _context.next = 23;\n            break;\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 23:\n            _context.prev = 23;\n            _context.prev = 24;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 28;\n              break;\n            }\n            _context.next = 28;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 28:\n            _context.prev = 28;\n            if (!_didIteratorError) {\n              _context.next = 31;\n              break;\n            }\n            throw _iteratorError;\n          case 31:\n            return _context.finish(28);\n          case 32:\n            return _context.finish(23);\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 19, 23, 33], [24,, 28, 32]]);\n    })();\n  });\n  return _importer.apply(this, arguments);\n}","map":{"version":3,"names":["parallelBatch","defaultOptions","dagBuilderFn","treeBuilderFn","importer","_x","_x2","_importer","apply","arguments","_wrapAsyncGenerator","source","blockstore","options","length","undefined","_regeneratorRuntime","mark","_callee","opts","dagBuilder","treeBuilder","candidates","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","entry","wrap","_callee$","_context","prev","next","Symbol","asyncIterator","iterator","_asyncIterator","fileImportConcurrency","_awaitAsyncGenerator","sent","done","value","cid","path","unixfs","size","t0","return","finish","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-importer/src/index.js"],"sourcesContent":["import parallelBatch from 'it-parallel-batch'\nimport defaultOptions from './options.js'\nimport dagBuilderFn from './dag-builder/index.js'\nimport treeBuilderFn from './tree-builder.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport async function * importer (source, blockstore, options = {}) {\n  const opts = defaultOptions(options)\n\n  let dagBuilder\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder\n  } else {\n    dagBuilder = dagBuilderFn\n  }\n\n  let treeBuilder\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder\n  } else {\n    treeBuilder = treeBuilderFn\n  }\n\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n  let candidates\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source\n  } else {\n    // @ts-ignore\n    candidates = [source]\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
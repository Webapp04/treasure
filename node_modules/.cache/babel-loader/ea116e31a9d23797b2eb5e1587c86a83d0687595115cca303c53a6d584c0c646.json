{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { exporter } from 'ipfs-unixfs-exporter';\nimport { normalizeCidPath } from '../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat(_ref) {\n  var repo = _ref.repo,\n    preload = _ref.preload;\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  function cat(_x) {\n    return _cat.apply(this, arguments);\n  }\n  function _cat() {\n    _cat = _wrapAsyncGenerator(function (ipfsPath) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var pathComponents, file;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              ipfsPath = normalizeCidPath(ipfsPath);\n              if (options.preload !== false) {\n                pathComponents = ipfsPath.split('/');\n                preload(CID.parse(pathComponents[0]));\n              }\n              _context.next = 4;\n              return _awaitAsyncGenerator(exporter(ipfsPath, repo.blocks, options));\n            case 4:\n              file = _context.sent;\n              if (!(file.type === 'directory')) {\n                _context.next = 7;\n                break;\n              }\n              throw new Error('this dag node is a directory');\n            case 7:\n              if (file.content) {\n                _context.next = 9;\n                break;\n              }\n              throw new Error('this dag node has no content');\n            case 9:\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(file.content(options)), _awaitAsyncGenerator), \"t0\", 10);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })();\n    });\n    return _cat.apply(this, arguments);\n  }\n  return withTimeoutOption(cat);\n}","map":{"version":3,"names":["exporter","normalizeCidPath","withTimeoutOption","CID","createCat","_ref","repo","preload","cat","_x","_cat","apply","arguments","_wrapAsyncGenerator","ipfsPath","options","length","undefined","_regeneratorRuntime","mark","_callee","pathComponents","file","wrap","_callee$","_context","prev","next","split","parse","_awaitAsyncGenerator","blocks","sent","type","Error","content","delegateYield","_asyncGeneratorDelegate","_asyncIterator","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/cat.js"],"sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n"],"mappings":";;;;;AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAAC,IAAA,EAAqB;EAAA,IAAjBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EACxC;AACF;AACA;EAFE,SAGiBC,GAAGA,CAAAC,EAAA;IAAA,OAAAC,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,KAAA;IAAAA,IAAA,GAAAG,mBAAA,CAApB,UAAsBC,QAAQ;MAAA,IAAEC,OAAO,GAAAH,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAAG,CAAC,CAAC;MAAA,oBAAAM,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,cAAA,EAAAC,IAAA;QAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAC1Cb,QAAQ,GAAGb,gBAAgB,CAACa,QAAQ,CAAC;cAErC,IAAIC,OAAO,CAACR,OAAO,KAAK,KAAK,EAAE;gBACvBc,cAAc,GAAGP,QAAQ,CAACc,KAAK,CAAC,GAAG,CAAC;gBAC1CrB,OAAO,CAACJ,GAAG,CAAC0B,KAAK,CAACR,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;cACvC;cAACI,QAAA,CAAAE,IAAA;cAAA,OAAAG,oBAAA,CAEkB9B,QAAQ,CAACc,QAAQ,EAAER,IAAI,CAACyB,MAAM,EAAEhB,OAAO,CAAC;YAAA;cAArDO,IAAI,GAAAG,QAAA,CAAAO,IAAA;cAAA,MAGNV,IAAI,CAACW,IAAI,KAAK,WAAW;gBAAAR,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MACrB,IAAIO,KAAK,CAAC,8BAA8B,CAAC;YAAA;cAAA,IAG5CZ,IAAI,CAACa,OAAO;gBAAAV,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MACT,IAAIO,KAAK,CAAC,8BAA8B,CAAC;YAAA;cAGjD,OAAAT,QAAA,CAAAW,aAAA,CAAAC,uBAAA,CAAAC,cAAA,CAAQhB,IAAI,CAACa,OAAO,CAACpB,OAAO,CAAC,GAAAe,oBAAA;YAAA;YAAA;cAAA,OAAAL,QAAA,CAAAc,IAAA;UAAA;QAAA,GAAAnB,OAAA;MAAA;IAAA,CAC9B;IAAA,OAAAV,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOV,iBAAiB,CAACM,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
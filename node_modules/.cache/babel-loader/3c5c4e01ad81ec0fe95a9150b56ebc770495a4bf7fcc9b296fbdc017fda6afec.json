{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { EventEmitter } from 'events';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as CONSTANTS from './constants.js';\nimport { logger } from './utils/index.js';\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nvar unwantEvent = function unwantEvent(cid) {\n  return \"unwant:\".concat(uint8ArrayToString(cid.multihash.bytes, 'base64'));\n};\n\n/**\n * @param {CID} cid\n */\nvar blockEvent = function blockEvent(cid) {\n  return \"block:\".concat(uint8ArrayToString(cid.multihash.bytes, 'base64'));\n};\nexport var Notifications = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Notifications, _EventEmitter);\n  var _super = _createSuper(Notifications);\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  function Notifications(peerId) {\n    var _this;\n    _classCallCheck(this, Notifications);\n    _this = _super.call(this);\n    _this.setMaxListeners(CONSTANTS.maxListeners);\n    _this._log = logger(peerId, 'notif');\n    return _this;\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  _createClass(Notifications, [{\n    key: \"hasBlock\",\n    value: function hasBlock(cid, block) {\n      var event = blockEvent(cid);\n      this._log(event);\n      this.emit(event, block);\n    }\n\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     * Returns a Promise that resolves to the block when it is received,\n     * or undefined when the block is unwanted.\n     *\n     * @param {CID} cid\n     * @param {object} [options]\n     * @param {AbortSignal} [options.signal]\n     * @returns {Promise<Uint8Array>}\n     */\n  }, {\n    key: \"wantBlock\",\n    value: function wantBlock(cid) {\n      var _this2 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!cid) {\n        throw new Error('Not a valid cid');\n      }\n      var blockEvt = blockEvent(cid);\n      var unwantEvt = unwantEvent(cid);\n      this._log(\"wantBlock:\".concat(cid));\n      return new Promise(function (resolve, reject) {\n        var onUnwant = function onUnwant() {\n          _this2.removeListener(blockEvt, onBlock);\n          reject(new Error(\"Block for \".concat(cid, \" unwanted\")));\n        };\n\n        /**\n         * @param {Uint8Array} data\n         */\n        var onBlock = function onBlock(data) {\n          _this2.removeListener(unwantEvt, onUnwant);\n          resolve(data);\n        };\n        _this2.once(unwantEvt, onUnwant);\n        _this2.once(blockEvt, onBlock);\n        if (options && options.signal) {\n          options.signal.addEventListener('abort', function () {\n            _this2.removeListener(blockEvt, onBlock);\n            _this2.removeListener(unwantEvt, onUnwant);\n            reject(new Error(\"Want for \".concat(cid, \" aborted\")));\n          });\n        }\n      });\n    }\n\n    /**\n     * Signal that the block is not wanted anymore.\n     *\n     * @param {CID} cid - the CID of the block that is not wanted anymore.\n     * @returns {void}\n     */\n  }, {\n    key: \"unwantBlock\",\n    value: function unwantBlock(cid) {\n      var event = unwantEvent(cid);\n      this._log(event);\n      this.emit(event);\n    }\n  }]);\n  return Notifications;\n}(EventEmitter);","map":{"version":3,"names":["EventEmitter","toString","uint8ArrayToString","CONSTANTS","logger","unwantEvent","cid","concat","multihash","bytes","blockEvent","Notifications","_EventEmitter","_inherits","_super","_createSuper","peerId","_this","_classCallCheck","call","setMaxListeners","maxListeners","_log","_createClass","key","value","hasBlock","block","event","emit","wantBlock","_this2","options","arguments","length","undefined","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","data","once","signal","addEventListener","unwantBlock"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-bitswap/src/notifications.js"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as CONSTANTS from './constants.js'\nimport { logger } from './utils/index.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\nexport class Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock (cid, block) {\n    const event = blockEvent(cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = (data) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        resolve(data)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
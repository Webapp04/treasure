{"ast":null,"code":"import 'node-forge/lib/asn1.js';\nimport 'node-forge/lib/rsa.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { bigIntegerToUintBase64url, base64urlToBigInteger } from './../util.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { CodeError } from '@libp2p/interfaces/errors';\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexport function pkcs1ToJwk(bytes) {\n  var asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n  var privateKey = forge.pki.privateKeyFromAsn1(asn1);\n  // https://tools.ietf.org/html/rfc7518#section-6.3.1\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256'\n  };\n}\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexport function jwkToPkcs1(jwk) {\n  if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n  }\n  var asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  });\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexport function pkixToJwk(bytes) {\n  var asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n  var publicKey = forge.pki.publicKeyFromAsn1(asn1);\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e)\n  };\n}\n// Convert a JWK key to PKCIX in ASN1 DER format\nexport function jwkToPkix(jwk) {\n  if (jwk.n == null || jwk.e == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n  }\n  var asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  });\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}","map":{"version":3,"names":["forge","bigIntegerToUintBase64url","base64urlToBigInteger","fromString","uint8ArrayFromString","toString","uint8ArrayToString","CodeError","pkcs1ToJwk","bytes","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","kty","n","e","d","p","q","dp","dP","dq","dQ","qi","qInv","alg","jwkToPkcs1","jwk","privateKeyToAsn1","toDer","getBytes","pkixToJwk","publicKey","publicKeyFromAsn1","jwkToPkix","publicKeyToAsn1"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/rsa-utils.ts"],"sourcesContent":["import 'node-forge/lib/asn1.js'\nimport 'node-forge/lib/rsa.js'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\nimport { bigIntegerToUintBase64url, base64urlToBigInteger } from './../util.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { CodeError } from '@libp2p/interfaces/errors'\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexport function pkcs1ToJwk (bytes: Uint8Array): JsonWebKey {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'))\n  const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n  // https://tools.ietf.org/html/rfc7518#section-6.3.1\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256'\n  }\n}\n\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexport function jwkToPkcs1 (jwk: JsonWebKey) {\n  if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS')\n  }\n\n  const asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  })\n\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii')\n}\n\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexport function pkixToJwk (bytes: Uint8Array): JsonWebKey {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'))\n  const publicKey = forge.pki.publicKeyFromAsn1(asn1)\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e)\n  }\n}\n\n// Convert a JWK key to PKCIX in ASN1 DER format\nexport function jwkToPkix (jwk: JsonWebKey) {\n  if (jwk.n == null || jwk.e == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS')\n  }\n\n  const asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  })\n\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
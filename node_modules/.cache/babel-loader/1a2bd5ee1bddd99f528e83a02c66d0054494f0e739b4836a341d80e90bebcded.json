{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport function createNode(_x, _x2, _x3) {\n  return _createNode.apply(this, arguments);\n}\nfunction _createNode() {\n  _createNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, type, options) {\n    var metadata, hasher, node, buf, hash, cid;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          metadata = new UnixFS({\n            type: type,\n            mode: options.mode,\n            mtime: options.mtime\n          }); // Persist the new parent PBNode\n          _context.next = 3;\n          return context.hashers.getHasher(options.hashAlg);\n        case 3:\n          hasher = _context.sent;\n          node = {\n            Data: metadata.marshal(),\n            Links: []\n          };\n          buf = dagPB.encode(node);\n          _context.next = 8;\n          return hasher.digest(buf);\n        case 8:\n          hash = _context.sent;\n          cid = CID.create(options.cidVersion, dagPB.code, hash);\n          if (!options.flush) {\n            _context.next = 13;\n            break;\n          }\n          _context.next = 13;\n          return context.repo.blocks.put(cid, buf);\n        case 13:\n          return _context.abrupt(\"return\", {\n            cid: cid,\n            node: node\n          });\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _createNode.apply(this, arguments);\n}","map":{"version":3,"names":["UnixFS","dagPB","CID","createNode","_x","_x2","_x3","_createNode","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","type","options","metadata","hasher","node","buf","hash","cid","wrap","_callee$","_context","prev","next","mode","mtime","hashers","getHasher","hashAlg","sent","Data","marshal","Links","encode","digest","create","cidVersion","code","flush","repo","blocks","put","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/utils/create-node.js"],"sourcesContent":["import { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport async function createNode (context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPB.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAsBC,UAAUA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAyB/B,SAAAF,YAAA;EAAAA,WAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAzBM,SAAAC,QAA2BC,OAAO,EAAEC,IAAI,EAAEC,OAAO;IAAA,IAAAC,QAAA,EAAAC,MAAA,EAAAC,IAAA,EAAAC,GAAA,EAAAC,IAAA,EAAAC,GAAA;IAAA,OAAAX,mBAAA,GAAAY,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAChDV,QAAQ,GAAG,IAAIjB,MAAM,CAAC;YAC1Be,IAAI,EAAJA,IAAI;YACJa,IAAI,EAAEZ,OAAO,CAACY,IAAI;YAClBC,KAAK,EAAEb,OAAO,CAACa;UACjB,CAAC,CAAC,EAEF;UAAAJ,QAAA,CAAAE,IAAA;UAAA,OACqBb,OAAO,CAACgB,OAAO,CAACC,SAAS,CAACf,OAAO,CAACgB,OAAO,CAAC;QAAA;UAAzDd,MAAM,GAAAO,QAAA,CAAAQ,IAAA;UACNd,IAAI,GAAG;YACXe,IAAI,EAAEjB,QAAQ,CAACkB,OAAO,CAAC,CAAC;YACxBC,KAAK,EAAE;UACT,CAAC;UACKhB,GAAG,GAAGnB,KAAK,CAACoC,MAAM,CAAClB,IAAI,CAAC;UAAAM,QAAA,CAAAE,IAAA;UAAA,OACXT,MAAM,CAACoB,MAAM,CAAClB,GAAG,CAAC;QAAA;UAA/BC,IAAI,GAAAI,QAAA,CAAAQ,IAAA;UACJX,GAAG,GAAGpB,GAAG,CAACqC,MAAM,CAACvB,OAAO,CAACwB,UAAU,EAAEvC,KAAK,CAACwC,IAAI,EAAEpB,IAAI,CAAC;UAAA,KAExDL,OAAO,CAAC0B,KAAK;YAAAjB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OACTb,OAAO,CAAC6B,IAAI,CAACC,MAAM,CAACC,GAAG,CAACvB,GAAG,EAAEF,GAAG,CAAC;QAAA;UAAA,OAAAK,QAAA,CAAAqB,MAAA,WAGlC;YACLxB,GAAG,EAAHA,GAAG;YACHH,IAAI,EAAJA;UACF,CAAC;QAAA;QAAA;UAAA,OAAAM,QAAA,CAAAsB,IAAA;MAAA;IAAA,GAAAlC,OAAA;EAAA,CACF;EAAA,OAAAN,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
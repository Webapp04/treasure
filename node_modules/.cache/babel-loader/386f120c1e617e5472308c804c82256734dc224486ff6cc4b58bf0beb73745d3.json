{"ast":null,"code":"import { peerIdFromString } from '@libp2p/peer-id';\nimport { multiaddr, isMultiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\nfunction peerIdFromMultiaddr(ma) {\n  var idStr = ma.getPeerId();\n  if (idStr == null) {\n    throw errCode(new Error(\"\".concat(ma.toString(), \" does not have a valid peer type\")), codes.ERR_INVALID_MULTIADDR);\n  }\n  try {\n    return peerIdFromString(idStr);\n  } catch (err) {\n    throw errCode(new Error(\"\".concat(ma.toString(), \" is not a valid peer type\")), codes.ERR_INVALID_MULTIADDR);\n  }\n}\n/**\n * Converts the given `peer` to a `Peer` object.\n */\nexport function getPeer(peer) {\n  if (isPeerId(peer)) {\n    return {\n      id: peer,\n      multiaddrs: [],\n      protocols: []\n    };\n  }\n  if (typeof peer === 'string') {\n    peer = multiaddr(peer);\n  }\n  var addr;\n  if (isMultiaddr(peer)) {\n    addr = peer;\n    peer = peerIdFromMultiaddr(peer);\n  }\n  return {\n    id: peer,\n    multiaddrs: addr != null ? [addr] : [],\n    protocols: []\n  };\n}","map":{"version":3,"names":["peerIdFromString","multiaddr","isMultiaddr","errCode","codes","isPeerId","peerIdFromMultiaddr","ma","idStr","getPeerId","Error","concat","toString","ERR_INVALID_MULTIADDR","err","getPeer","peer","id","multiaddrs","protocols","addr"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/get-peer.ts"],"sourcesContent":["import { peerIdFromString } from '@libp2p/peer-id'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport { multiaddr, isMultiaddr } from '@multiformats/multiaddr'\nimport errCode from 'err-code'\nimport { codes } from './errors.js'\nimport { isPeerId } from '@libp2p/interface-peer-id'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\n\nfunction peerIdFromMultiaddr (ma: Multiaddr) {\n  const idStr = ma.getPeerId()\n\n  if (idStr == null) {\n    throw errCode(\n      new Error(`${ma.toString()} does not have a valid peer type`),\n      codes.ERR_INVALID_MULTIADDR\n    )\n  }\n\n  try {\n    return peerIdFromString(idStr)\n  } catch (err: any) {\n    throw errCode(\n      new Error(`${ma.toString()} is not a valid peer type`),\n      codes.ERR_INVALID_MULTIADDR\n    )\n  }\n}\n\n/**\n * Converts the given `peer` to a `Peer` object.\n */\nexport function getPeer (peer: PeerId | Multiaddr | string): PeerInfo {\n  if (isPeerId(peer)) {\n    return {\n      id: peer,\n      multiaddrs: [],\n      protocols: []\n    }\n  }\n\n  if (typeof peer === 'string') {\n    peer = multiaddr(peer)\n  }\n\n  let addr\n\n  if (isMultiaddr(peer)) {\n    addr = peer\n    peer = peerIdFromMultiaddr(peer)\n  }\n\n  return {\n    id: peer,\n    multiaddrs: addr != null ? [addr] : [],\n    protocols: []\n  }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,iBAAiB;AAElD,SAASC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AAChE,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,QAAQ,QAAQ,2BAA2B;AAIpD,SAASC,mBAAmBA,CAAEC,EAAa;EACzC,IAAMC,KAAK,GAAGD,EAAE,CAACE,SAAS,EAAE;EAE5B,IAAID,KAAK,IAAI,IAAI,EAAE;IACjB,MAAML,OAAO,CACX,IAAIO,KAAK,IAAAC,MAAA,CAAIJ,EAAE,CAACK,QAAQ,EAAE,qCAAkC,CAAC,EAC7DR,KAAK,CAACS,qBAAqB,CAC5B;;EAGH,IAAI;IACF,OAAOb,gBAAgB,CAACQ,KAAK,CAAC;GAC/B,CAAC,OAAOM,GAAQ,EAAE;IACjB,MAAMX,OAAO,CACX,IAAIO,KAAK,IAAAC,MAAA,CAAIJ,EAAE,CAACK,QAAQ,EAAE,8BAA2B,CAAC,EACtDR,KAAK,CAACS,qBAAqB,CAC5B;;AAEL;AAEA;;;AAGA,OAAM,SAAUE,OAAOA,CAAEC,IAAiC;EACxD,IAAIX,QAAQ,CAACW,IAAI,CAAC,EAAE;IAClB,OAAO;MACLC,EAAE,EAAED,IAAI;MACRE,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE;KACZ;;EAGH,IAAI,OAAOH,IAAI,KAAK,QAAQ,EAAE;IAC5BA,IAAI,GAAGf,SAAS,CAACe,IAAI,CAAC;;EAGxB,IAAII,IAAI;EAER,IAAIlB,WAAW,CAACc,IAAI,CAAC,EAAE;IACrBI,IAAI,GAAGJ,IAAI;IACXA,IAAI,GAAGV,mBAAmB,CAACU,IAAI,CAAC;;EAGlC,OAAO;IACLC,EAAE,EAAED,IAAI;IACRE,UAAU,EAAEE,IAAI,IAAI,IAAI,GAAG,CAACA,IAAI,CAAC,GAAG,EAAE;IACtCD,SAAS,EAAE;GACZ;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}
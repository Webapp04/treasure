{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// @ts-ignore\nimport debounce from 'just-debounce-it';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { logger } from '../utils/index.js';\nimport { wantlistSendDebounceMs } from '../constants.js';\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport var MsgQueue = /*#__PURE__*/function () {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  function MsgQueue(selfPeerId, otherPeerId, network) {\n    _classCallCheck(this, MsgQueue);\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = [];\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue');\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  _createClass(MsgQueue, [{\n    key: \"addMessage\",\n    value: function addMessage(msg) {\n      if (msg.empty) {\n        return;\n      }\n      this.send(msg);\n    }\n\n    /**\n     * @param {{cid:CID, priority:number}[]} entries\n     */\n  }, {\n    key: \"addEntries\",\n    value: function addEntries(entries) {\n      this._entries = this._entries.concat(entries);\n      this.sendEntries();\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_sendEntries\",\n    value: function _sendEntries() {\n      if (!this._entries.length) {\n        return;\n      }\n      var msg = new Message(false);\n      this._entries.forEach(function (entry) {\n        if (entry.cancel) {\n          msg.cancel(entry.cid);\n        } else {\n          msg.addEntry(entry.cid, entry.priority);\n        }\n      });\n      this._entries = [];\n      this.addMessage(msg);\n    }\n\n    /**\n     * @param {Message} msg\n     */\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(msg) {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this.network.connectTo(this.peerId);\n            case 3:\n              _context.next = 9;\n              break;\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              this._log.error('cant connect to peer %s: %s', this.peerId.toString(), _context.t0.message);\n              return _context.abrupt(\"return\");\n            case 9:\n              this._log('sending message to peer %s', this.peerId.toString());\n\n              // Note: Don't wait for sendMessage() to complete\n              this.network.sendMessage(this.peerId, msg).catch(function (err) {\n                _this._log.error('send error: %s', err.message);\n              });\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }]);\n  return MsgQueue;\n}();","map":{"version":3,"names":["debounce","BitswapMessage","Message","logger","wantlistSendDebounceMs","MsgQueue","selfPeerId","otherPeerId","network","_classCallCheck","peerId","refcnt","_entries","_log","sendEntries","_sendEntries","bind","_createClass","key","value","addMessage","msg","empty","send","addEntries","entries","concat","length","forEach","entry","cancel","cid","addEntry","priority","_send","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this","wrap","_callee$","_context","prev","next","connectTo","t0","error","toString","message","abrupt","sendMessage","catch","err","stop","_x","apply","arguments"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js"],"sourcesContent":["\n// @ts-ignore\nimport debounce from 'just-debounce-it'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { logger } from '../utils/index.js'\nimport { wantlistSendDebounceMs } from '../constants.js'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = []\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue')\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  /**\n   * @private\n   */\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (/** @type {any} */ err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toString(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toString())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Key } from 'interface-datastore/key';\nimport debug from 'debug';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { getWithFallback, hasWithFallback } from './utils/level.js';\nvar log = debug('ipfs:repo:version');\nvar versionKey = new Key('version');\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version(store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    exists: function exists() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", hasWithFallback(versionKey, store.has.bind(store), store));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    get: function get() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n            case 2:\n              buf = _context2.sent;\n              return _context2.abrupt(\"return\", parseInt(uint8ArrayToString(buf), 10));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set: function set(version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)));\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    check: function check(expected) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var version, compatibleVersion;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this.get();\n            case 2:\n              version = _context3.sent;\n              log('comparing version: %s and %s', version, expected);\n              // Version 6 and 7 are the same\n              // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n              compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n              return _context3.abrupt(\"return\", version === expected || compatibleVersion);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n  };\n}","map":{"version":3,"names":["Key","debug","toString","uint8ArrayToString","fromString","uint8ArrayFromString","getWithFallback","hasWithFallback","log","versionKey","version","store","exists","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","has","bind","stop","get","_callee2","buf","_callee2$","_context2","sent","parseInt","set","put","String","check","expected","_this","_callee3","compatibleVersion","_callee3$","_context3"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-repo/src/version.js"],"sourcesContent":["\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\nconst log = debug('ipfs:repo:version')\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version (store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
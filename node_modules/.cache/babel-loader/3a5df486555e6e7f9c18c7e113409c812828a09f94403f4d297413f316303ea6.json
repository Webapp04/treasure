{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { concat } from 'uint8arrays/concat';\nimport { fromString } from 'uint8arrays/from-string';\nimport webcrypto from '../webcrypto.js';\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\nexport function create(opts) {\n  var _opts$algorithm, _opts$keyLength, _opts$nonceLength, _opts$digest, _opts$saltLength, _opts$iterations;\n  var algorithm = (_opts$algorithm = opts === null || opts === void 0 ? void 0 : opts.algorithm) !== null && _opts$algorithm !== void 0 ? _opts$algorithm : 'AES-GCM';\n  var keyLength = (_opts$keyLength = opts === null || opts === void 0 ? void 0 : opts.keyLength) !== null && _opts$keyLength !== void 0 ? _opts$keyLength : 16;\n  var nonceLength = (_opts$nonceLength = opts === null || opts === void 0 ? void 0 : opts.nonceLength) !== null && _opts$nonceLength !== void 0 ? _opts$nonceLength : 12;\n  var digest = (_opts$digest = opts === null || opts === void 0 ? void 0 : opts.digest) !== null && _opts$digest !== void 0 ? _opts$digest : 'SHA-256';\n  var saltLength = (_opts$saltLength = opts === null || opts === void 0 ? void 0 : opts.saltLength) !== null && _opts$saltLength !== void 0 ? _opts$saltLength : 16;\n  var iterations = (_opts$iterations = opts === null || opts === void 0 ? void 0 : opts.iterations) !== null && _opts$iterations !== void 0 ? _opts$iterations : 32767;\n  var crypto = webcrypto.get();\n  keyLength *= 8; // Browser crypto uses bits instead of bytes\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to encrypt the data.\n   */\n  function encrypt(_x, _x2) {\n    return _encrypt.apply(this, arguments);\n  }\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to decrypt the data. The options used to create\n   * this decryption cipher must be the same as those used to create\n   * the encryption cipher.\n   */\n  function _encrypt() {\n    _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, password) {\n      var salt, nonce, aesGcm, deriveParams, rawKey, cryptoKey, ciphertext;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            salt = crypto.getRandomValues(new Uint8Array(saltLength));\n            nonce = crypto.getRandomValues(new Uint8Array(nonceLength));\n            aesGcm = {\n              name: algorithm,\n              iv: nonce\n            };\n            if (typeof password === 'string') {\n              password = fromString(password);\n            }\n            // Derive a key using PBKDF2.\n            deriveParams = {\n              name: 'PBKDF2',\n              salt: salt,\n              iterations: iterations,\n              hash: {\n                name: digest\n              }\n            };\n            _context.next = 7;\n            return crypto.subtle.importKey('raw', password, {\n              name: 'PBKDF2'\n            }, false, ['deriveKey', 'deriveBits']);\n          case 7:\n            rawKey = _context.sent;\n            _context.next = 10;\n            return crypto.subtle.deriveKey(deriveParams, rawKey, {\n              name: algorithm,\n              length: keyLength\n            }, true, ['encrypt']);\n          case 10:\n            cryptoKey = _context.sent;\n            _context.next = 13;\n            return crypto.subtle.encrypt(aesGcm, cryptoKey, data);\n          case 13:\n            ciphertext = _context.sent;\n            return _context.abrupt(\"return\", concat([salt, aesGcm.iv, new Uint8Array(ciphertext)]));\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _encrypt.apply(this, arguments);\n  }\n  function decrypt(_x3, _x4) {\n    return _decrypt.apply(this, arguments);\n  }\n  function _decrypt() {\n    _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data, password) {\n      var salt, nonce, ciphertext, aesGcm, deriveParams, rawKey, cryptoKey, plaintext;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            salt = data.subarray(0, saltLength);\n            nonce = data.subarray(saltLength, saltLength + nonceLength);\n            ciphertext = data.subarray(saltLength + nonceLength);\n            aesGcm = {\n              name: algorithm,\n              iv: nonce\n            };\n            if (typeof password === 'string') {\n              password = fromString(password);\n            }\n            // Derive the key using PBKDF2.\n            deriveParams = {\n              name: 'PBKDF2',\n              salt: salt,\n              iterations: iterations,\n              hash: {\n                name: digest\n              }\n            };\n            _context2.next = 8;\n            return crypto.subtle.importKey('raw', password, {\n              name: 'PBKDF2'\n            }, false, ['deriveKey', 'deriveBits']);\n          case 8:\n            rawKey = _context2.sent;\n            _context2.next = 11;\n            return crypto.subtle.deriveKey(deriveParams, rawKey, {\n              name: algorithm,\n              length: keyLength\n            }, true, ['decrypt']);\n          case 11:\n            cryptoKey = _context2.sent;\n            _context2.next = 14;\n            return crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);\n          case 14:\n            plaintext = _context2.sent;\n            return _context2.abrupt(\"return\", new Uint8Array(plaintext));\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _decrypt.apply(this, arguments);\n  }\n  var cipher = {\n    encrypt: encrypt,\n    decrypt: decrypt\n  };\n  return cipher;\n}","map":{"version":3,"names":["concat","fromString","webcrypto","create","opts","_opts$algorithm","_opts$keyLength","_opts$nonceLength","_opts$digest","_opts$saltLength","_opts$iterations","algorithm","keyLength","nonceLength","digest","saltLength","iterations","crypto","get","encrypt","_x","_x2","_encrypt","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","password","salt","nonce","aesGcm","deriveParams","rawKey","cryptoKey","ciphertext","wrap","_callee$","_context","prev","next","getRandomValues","Uint8Array","name","iv","hash","subtle","importKey","sent","deriveKey","length","abrupt","stop","decrypt","_x3","_x4","_decrypt","_callee2","plaintext","_callee2$","_context2","subarray","cipher"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/ciphers/aes-gcm.browser.ts"],"sourcesContent":["import { concat } from 'uint8arrays/concat'\nimport { fromString } from 'uint8arrays/from-string'\nimport webcrypto from '../webcrypto.js'\nimport type { CreateOptions, AESCipher } from './interface.js'\n\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\n\nexport function create (opts?: CreateOptions) {\n  const algorithm = opts?.algorithm ?? 'AES-GCM'\n  let keyLength = opts?.keyLength ?? 16\n  const nonceLength = opts?.nonceLength ?? 12\n  const digest = opts?.digest ?? 'SHA-256'\n  const saltLength = opts?.saltLength ?? 16\n  const iterations = opts?.iterations ?? 32767\n\n  const crypto = webcrypto.get()\n  keyLength *= 8 // Browser crypto uses bits instead of bytes\n\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to encrypt the data.\n   */\n  async function encrypt (data: Uint8Array, password: string | Uint8Array) { // eslint-disable-line require-await\n    const salt = crypto.getRandomValues(new Uint8Array(saltLength))\n    const nonce = crypto.getRandomValues(new Uint8Array(nonceLength))\n    const aesGcm = { name: algorithm, iv: nonce }\n\n    if (typeof password === 'string') {\n      password = fromString(password)\n    }\n\n    // Derive a key using PBKDF2.\n    const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } }\n    const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey', 'deriveBits'])\n    const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['encrypt'])\n\n    // Encrypt the string.\n    const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data)\n    return concat([salt, aesGcm.iv, new Uint8Array(ciphertext)])\n  }\n\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to decrypt the data. The options used to create\n   * this decryption cipher must be the same as those used to create\n   * the encryption cipher.\n   */\n  async function decrypt (data: Uint8Array, password: string | Uint8Array) {\n    const salt = data.subarray(0, saltLength)\n    const nonce = data.subarray(saltLength, saltLength + nonceLength)\n    const ciphertext = data.subarray(saltLength + nonceLength)\n    const aesGcm = { name: algorithm, iv: nonce }\n\n    if (typeof password === 'string') {\n      password = fromString(password)\n    }\n\n    // Derive the key using PBKDF2.\n    const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } }\n    const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey', 'deriveBits'])\n    const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['decrypt'])\n\n    // Decrypt the string.\n    const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext)\n    return new Uint8Array(plaintext)\n  }\n\n  const cipher: AESCipher = {\n    encrypt,\n    decrypt\n  }\n\n  return cipher\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
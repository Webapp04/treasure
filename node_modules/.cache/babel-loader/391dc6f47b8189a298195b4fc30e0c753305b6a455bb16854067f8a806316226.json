{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/* eslint-env browser */\n\nimport { TLRU } from './utils/tlru.js';\nimport PQueue from 'p-queue';\nimport HTTP from 'ipfs-utils/src/http.js';\n\n// Avoid sending multiple queries for the same hostname by caching results\nvar cache = new TLRU(1000);\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nvar ttl = 60 * 1000;\n\n// @ts-expect-error PQueue@6 is broken\nvar Queue = PQueue.default ? PQueue.default : PQueue;\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nvar httpQueue = new Queue({\n  concurrency: 4\n});\n\n/**\n * @param {{ Path: string, Message: string }} response\n */\nvar ipfsPath = function ipfsPath(response) {\n  if (response.Path) return response.Path;\n  throw new Error(response.Message);\n};\n\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\nexport function resolveDnslink(_x, _x2) {\n  return _resolveDnslink.apply(this, arguments);\n}\nfunction _resolveDnslink() {\n  _resolveDnslink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(fqdn, opts) {\n    var resolve;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          // eslint-disable-line require-await\n          /**\n           * @param {string} fqdn\n           * @param {object} opts\n           * @param {boolean} [opts.nocache]\n           */\n          resolve = /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fqdn) {\n              var opts,\n                searchParams,\n                query,\n                _response,\n                response,\n                _args2 = arguments;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    opts = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                    // @ts-expect-error - URLSearchParams does not take boolean options, only strings\n                    searchParams = new URLSearchParams(opts);\n                    searchParams.set('arg', fqdn);\n\n                    // try cache first\n                    query = searchParams.toString();\n                    if (!(!opts.nocache && cache.has(query))) {\n                      _context2.next = 7;\n                      break;\n                    }\n                    _response = cache.get(query);\n                    return _context2.abrupt(\"return\", ipfsPath(_response));\n                  case 7:\n                    _context2.next = 9;\n                    return httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                      var res, query, json;\n                      return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while (1) switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return HTTP.get('https://ipfs.io/api/v0/dns', {\n                              searchParams: searchParams\n                            });\n                          case 2:\n                            res = _context.sent;\n                            query = new URL(res.url).search.slice(1);\n                            _context.next = 6;\n                            return res.json();\n                          case 6:\n                            json = _context.sent;\n                            cache.set(query, json, ttl);\n                            return _context.abrupt(\"return\", json);\n                          case 9:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }, _callee);\n                    })));\n                  case 9:\n                    response = _context2.sent;\n                    return _context2.abrupt(\"return\", ipfsPath(response));\n                  case 11:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            return function resolve(_x3) {\n              return _ref.apply(this, arguments);\n            };\n          }();\n          return _context3.abrupt(\"return\", resolve(fqdn, opts));\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _resolveDnslink.apply(this, arguments);\n}","map":{"version":3,"names":["TLRU","PQueue","HTTP","cache","ttl","Queue","default","httpQueue","concurrency","ipfsPath","response","Path","Error","Message","resolveDnslink","_x","_x2","_resolveDnslink","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","fqdn","opts","resolve","wrap","_callee3$","_context3","prev","next","_ref","_callee2","searchParams","query","_response","_args2","_callee2$","_context2","length","undefined","URLSearchParams","set","toString","nocache","has","get","abrupt","add","_callee","res","json","_callee$","_context","sent","URL","url","search","slice","stop","_x3"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core-config/src/dns.browser.js"],"sourcesContent":["/* eslint-env browser */\n\nimport { TLRU } from './utils/tlru.js'\nimport PQueue from 'p-queue'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n// Avoid sending multiple queries for the same hostname by caching results\nconst cache = new TLRU(1000)\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nconst ttl = 60 * 1000\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {{ Path: string, Message: string }} response\n */\nconst ipfsPath = (response) => {\n  if (response.Path) return response.Path\n  throw new Error(response.Message)\n}\n\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\nexport async function resolveDnslink (fqdn, opts) { // eslint-disable-line require-await\n  /**\n   * @param {string} fqdn\n   * @param {object} opts\n   * @param {boolean} [opts.nocache]\n   */\n  const resolve = async (fqdn, opts = {}) => {\n    // @ts-expect-error - URLSearchParams does not take boolean options, only strings\n    const searchParams = new URLSearchParams(opts)\n    searchParams.set('arg', fqdn)\n\n    // try cache first\n    const query = searchParams.toString()\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query)\n      return ipfsPath(response)\n    }\n\n    // fallback to delegated DNS resolver\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', { searchParams })\n      const query = new URL(res.url).search.slice(1)\n      const json = await res.json()\n      cache.set(query, json, ttl)\n\n      return json\n    })\n    return ipfsPath(response)\n  }\n\n  return resolve(fqdn, opts)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
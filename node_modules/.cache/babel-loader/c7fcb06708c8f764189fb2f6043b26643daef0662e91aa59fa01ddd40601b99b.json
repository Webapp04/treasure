{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Key } from 'interface-datastore/key';\nvar MFS_ROOT_KEY = new Key('/local/filesroot');\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nfunction storeMfsRootInDatastore(_x) {\n  return _storeMfsRootInDatastore.apply(this, arguments);\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nfunction _storeMfsRootInDatastore() {\n  _storeMfsRootInDatastore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(backends) {\n    var onProgress,\n      root,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          onProgress = _args.length > 1 && _args[1] !== undefined ? _args[1] : function () {};\n          onProgress(100, 'Migrating MFS root to repo datastore');\n          _context.next = 4;\n          return backends.root.open();\n        case 4:\n          _context.next = 6;\n          return backends.datastore.open();\n        case 6:\n          _context.next = 8;\n          return backends.root.has(MFS_ROOT_KEY);\n        case 8:\n          if (!_context.sent) {\n            _context.next = 16;\n            break;\n          }\n          _context.next = 11;\n          return backends.root.get(MFS_ROOT_KEY);\n        case 11:\n          root = _context.sent;\n          _context.next = 14;\n          return backends.datastore.put(MFS_ROOT_KEY, root);\n        case 14:\n          _context.next = 16;\n          return backends.root.delete(MFS_ROOT_KEY);\n        case 16:\n          _context.next = 18;\n          return backends.datastore.close();\n        case 18:\n          _context.next = 20;\n          return backends.root.close();\n        case 20:\n          onProgress(100, 'Stored MFS root in repo datastore');\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _storeMfsRootInDatastore.apply(this, arguments);\n}\nfunction storeMfsRootInRoot(_x2) {\n  return _storeMfsRootInRoot.apply(this, arguments);\n}\n/** @type {import('../../src/types').Migration} */\nfunction _storeMfsRootInRoot() {\n  _storeMfsRootInRoot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(backends) {\n    var onProgress,\n      root,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          onProgress = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : function () {};\n          onProgress(100, 'Migrating MFS root to repo root datastore');\n          _context2.next = 4;\n          return backends.root.open();\n        case 4:\n          _context2.next = 6;\n          return backends.datastore.open();\n        case 6:\n          _context2.next = 8;\n          return backends.datastore.has(MFS_ROOT_KEY);\n        case 8:\n          if (!_context2.sent) {\n            _context2.next = 16;\n            break;\n          }\n          _context2.next = 11;\n          return backends.datastore.get(MFS_ROOT_KEY);\n        case 11:\n          root = _context2.sent;\n          _context2.next = 14;\n          return backends.root.put(MFS_ROOT_KEY, root);\n        case 14:\n          _context2.next = 16;\n          return backends.datastore.delete(MFS_ROOT_KEY);\n        case 16:\n          _context2.next = 18;\n          return backends.datastore.close();\n        case 18:\n          _context2.next = 20;\n          return backends.root.close();\n        case 20:\n          onProgress(100, 'Stored MFS root in repo root datastore');\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _storeMfsRootInRoot.apply(this, arguments);\n}\nexport var migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n};","map":{"version":3,"names":["Key","MFS_ROOT_KEY","storeMfsRootInDatastore","_x","_storeMfsRootInDatastore","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","backends","onProgress","root","_args","wrap","_callee$","_context","prev","next","length","undefined","open","datastore","has","sent","get","put","delete","close","stop","storeMfsRootInRoot","_x2","_storeMfsRootInRoot","_callee2","_args2","_callee2$","_context2","migration","version","description","migrate","revert"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-repo-migrations/migrations/migration-11/index.js"],"sourcesContent":["\nimport { Key } from 'interface-datastore/key'\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../src/types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
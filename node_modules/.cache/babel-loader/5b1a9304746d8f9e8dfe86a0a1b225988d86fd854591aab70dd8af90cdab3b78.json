{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createLocalAddrs(_ref) {\n  var network = _ref.network;\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"localAddrs\"]}\n   */\n  function localAddrs() {\n    return _localAddrs.apply(this, arguments);\n  }\n  function _localAddrs() {\n    _localAddrs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        _yield$network$use,\n        libp2p,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return network.use(options);\n          case 3:\n            _yield$network$use = _context.sent;\n            libp2p = _yield$network$use.libp2p;\n            return _context.abrupt(\"return\", libp2p.getMultiaddrs());\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _localAddrs.apply(this, arguments);\n  }\n  return withTimeoutOption(localAddrs);\n}","map":{"version":3,"names":["withTimeoutOption","createLocalAddrs","_ref","network","localAddrs","_localAddrs","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","_yield$network$use","libp2p","_args","wrap","_callee$","_context","prev","next","length","undefined","use","sent","abrupt","getMultiaddrs","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/swarm/local-addrs.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createLocalAddrs ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.getMultiaddrs()\n  }\n\n  return withTimeoutOption(localAddrs)\n}\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAAAC,IAAA,EAAe;EAAA,IAAXC,OAAO,GAAAD,IAAA,CAAPC,OAAO;EACzC;AACF;AACA;EAFE,SAGeC,UAAUA,CAAA;IAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,YAAA;IAAAA,WAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAzB,SAAAC,QAAA;MAAA,IAAAC,OAAA;QAAAC,kBAAA;QAAAC,MAAA;QAAAC,KAAA,GAAAR,SAAA;MAAA,OAAAE,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAA2BR,OAAO,GAAAG,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OACZjB,OAAO,CAACoB,GAAG,CAACX,OAAO,CAAC;UAAA;YAAAC,kBAAA,GAAAK,QAAA,CAAAM,IAAA;YAArCV,MAAM,GAAAD,kBAAA,CAANC,MAAM;YAAA,OAAAI,QAAA,CAAAO,MAAA,WACPX,MAAM,CAACY,aAAa,CAAC,CAAC;UAAA;UAAA;YAAA,OAAAR,QAAA,CAAAS,IAAA;QAAA;MAAA,GAAAhB,OAAA;IAAA,CAC9B;IAAA,OAAAN,WAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOP,iBAAiB,CAACI,UAAU,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
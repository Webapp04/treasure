{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/* global crypto */\n\nimport { from } from './hasher.js';\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nvar sha = function sha(name) {\n  return (\n    /*#__PURE__*/\n    /**\n     * @param {Uint8Array} data\n     */\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = Uint8Array;\n              _context.next = 3;\n              return crypto.subtle.digest(name, data);\n            case 3:\n              _context.t1 = _context.sent;\n              return _context.abrupt(\"return\", new _context.t0(_context.t1));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n});\nexport var sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n});","map":{"version":3,"names":["from","sha","name","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_callee$","_context","prev","next","t0","Uint8Array","crypto","subtle","digest","t1","sent","abrupt","stop","_x","apply","arguments","sha256","code","encode","sha512"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/peer-id-factory/node_modules/uint8arrays/node_modules/multiformats/src/hashes/sha2-browser.js"],"sourcesContent":["/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n"],"mappings":";;AAAA;;AAEA,SAASA,IAAI,QAAQ,aAAa;;AAElC;AACA;AACA;AACA,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAGC,IAAI;EAAA;IAAA;IACd;AACF;AACA;IAFE;MAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAAC,QAAMC,IAAI;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAG,EAAA,GAAQC,UAAU;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OAAOG,MAAM,CAACC,MAAM,CAACC,MAAM,CAAChB,IAAI,EAAEM,IAAI,CAAC;YAAA;cAAAG,QAAA,CAAAQ,EAAA,GAAAR,QAAA,CAAAS,IAAA;cAAA,OAAAT,QAAA,CAAAU,MAAA,eAAAV,QAAA,CAAAG,EAAA,CAAAH,QAAA,CAAAQ,EAAA;YAAA;YAAA;cAAA,OAAAR,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAAf,OAAA;MAAA,CAAC;MAAA,iBAAAgB,EAAA;QAAA,OAAApB,IAAA,CAAAqB,KAAA,OAAAC,SAAA;MAAA;IAAA;EAAA;AAAA;AAEtE,OAAO,IAAMC,MAAM,GAAG1B,IAAI,CAAC;EACzBE,IAAI,EAAE,UAAU;EAChByB,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE3B,GAAG,CAAC,SAAS;AACvB,CAAC,CAAC;AAEF,OAAO,IAAM4B,MAAM,GAAG7B,IAAI,CAAC;EACzBE,IAAI,EAAE,UAAU;EAChByB,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE3B,GAAG,CAAC,SAAS;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
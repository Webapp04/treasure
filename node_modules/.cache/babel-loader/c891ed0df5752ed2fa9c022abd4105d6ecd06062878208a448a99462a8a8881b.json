{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport var createFlush = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  function flush(_x) {\n    return _flush.apply(this, arguments);\n  }\n  function _flush() {\n    _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n        res,\n        data,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            if (!(!path || typeof path !== 'string')) {\n              _context.next = 3;\n              break;\n            }\n            throw new Error('ipfs.files.flush requires a path');\n          case 3:\n            _context.next = 5;\n            return api.post('files/flush', {\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: path\n              }, options)),\n              headers: options.headers\n            });\n          case 5:\n            res = _context.sent;\n            _context.next = 8;\n            return res.json();\n          case 8:\n            data = _context.sent;\n            return _context.abrupt(\"return\", CID.parse(data.Cid));\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _flush.apply(this, arguments);\n  }\n  return flush;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createFlush","api","flush","_x","_flush","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","path","options","res","data","_args","wrap","_callee$","_context","prev","next","length","undefined","Error","post","signal","searchParams","_objectSpread","arg","headers","sent","json","abrupt","parse","Cid","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-http-client/src/files/flush.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,WAAW,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EAC1C;AACF;AACA;EAFE,SAGeC,KAAKA,CAAAC,EAAA;IAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,OAAA;IAAAA,MAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAC,QAAsBC,IAAI;MAAA,IAAAC,OAAA;QAAAC,GAAA;QAAAC,IAAA;QAAAC,KAAA,GAAAT,SAAA;MAAA,OAAAE,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAER,OAAO,GAAAG,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAA,MAClC,CAACJ,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ;cAAAO,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,MAC7B,IAAIG,KAAK,CAAC,kCAAkC,CAAC;UAAA;YAAAL,QAAA,CAAAE,IAAA;YAAA,OAGnCnB,GAAG,CAACuB,IAAI,CAAC,aAAa,EAAE;cACxCC,MAAM,EAAEb,OAAO,CAACa,MAAM;cACtBC,YAAY,EAAE3B,iBAAiB,CAAA4B,aAAA;gBAC7BC,GAAG,EAAEjB;cAAI,GACNC,OAAO,CACX,CAAC;cACFiB,OAAO,EAAEjB,OAAO,CAACiB;YACnB,CAAC,CAAC;UAAA;YAPIhB,GAAG,GAAAK,QAAA,CAAAY,IAAA;YAAAZ,QAAA,CAAAE,IAAA;YAAA,OAQUP,GAAG,CAACkB,IAAI,CAAC,CAAC;UAAA;YAAvBjB,IAAI,GAAAI,QAAA,CAAAY,IAAA;YAAA,OAAAZ,QAAA,CAAAc,MAAA,WAEHnC,GAAG,CAACoC,KAAK,CAACnB,IAAI,CAACoB,GAAG,CAAC;UAAA;UAAA;YAAA,OAAAhB,QAAA,CAAAiB,IAAA;QAAA;MAAA,GAAAzB,OAAA;IAAA,CAC3B;IAAA,OAAAN,MAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EACD,OAAOJ,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
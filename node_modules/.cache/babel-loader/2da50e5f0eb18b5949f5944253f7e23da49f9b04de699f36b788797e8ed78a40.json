{"ast":null,"code":"import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nvar code = 0x0;\nvar name = 'identity';\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nvar encode = coerce;\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nvar digest = function digest(input) {\n  return Digest.create(code, encode(input));\n};\nexport var identity = {\n  code: code,\n  name: name,\n  encode: encode,\n  digest: digest\n};","map":{"version":3,"names":["coerce","Digest","code","name","encode","digest","input","create","identity"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/webrtc-peer/node_modules/multiformats/src/hashes/identity.js"],"sourcesContent":["import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,OAAO,KAAKC,MAAM,MAAM,aAAa;AAErC,IAAMC,IAAI,GAAG,GAAG;AAChB,IAAMC,IAAI,GAAG,UAAU;;AAEvB;AACA,IAAMC,MAAM,GAAGJ,MAAM;;AAErB;AACA;AACA;AACA;AACA,IAAMK,MAAM,GAAG,SAATA,MAAMA,CAAIC,KAAK;EAAA,OAAKL,MAAM,CAACM,MAAM,CAACL,IAAI,EAAEE,MAAM,CAACE,KAAK,CAAC,CAAC;AAAA;AAE5D,OAAO,IAAME,QAAQ,GAAG;EAAEN,IAAI,EAAJA,IAAI;EAAEC,IAAI,EAAJA,IAAI;EAAEC,MAAM,EAANA,MAAM;EAAEC,MAAM,EAANA;AAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
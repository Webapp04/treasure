{"ast":null,"code":"var _classCallCheck = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nvar RateLimiterRes = require('./RateLimiterRes');\n\n/**\n * Get MongoDB driver version as upsert options differ\n * @params {Object} Client instance\n * @returns {Object} Version Object containing major, feature & minor versions.\n */\nfunction getDriverVersion(client) {\n  try {\n    var _client = client.client ? client.client : client;\n    var version = _client.topology.s.options.metadata.driver.version;\n    var _v = version.split('.').map(function (v) {\n      return parseInt(v);\n    });\n    return {\n      major: _v[0],\n      feature: _v[1],\n      patch: _v[2]\n    };\n  } catch (err) {\n    return {\n      major: 0,\n      feature: 0,\n      patch: 0\n    };\n  }\n}\nvar RateLimiterMongo = /*#__PURE__*/function (_RateLimiterStoreAbst) {\n  \"use strict\";\n\n  _inherits(RateLimiterMongo, _RateLimiterStoreAbst);\n  var _super = _createSuper(RateLimiterMongo);\n  /**\n   *\n   * @param {Object} opts\n   * Defaults {\n   *   indexKeyPrefix: {attr1: 1, attr2: 1}\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   mongo: MongoClient\n   * }\n   */\n  function RateLimiterMongo(opts) {\n    var _this;\n    _classCallCheck(this, RateLimiterMongo);\n    _this = _super.call(this, opts);\n    _this.dbName = opts.dbName;\n    _this.tableName = opts.tableName;\n    _this.indexKeyPrefix = opts.indexKeyPrefix;\n    if (opts.mongo) {\n      _this.client = opts.mongo;\n    } else {\n      _this.client = opts.storeClient;\n    }\n    if (typeof _this.client.then === 'function') {\n      // If Promise\n      _this.client.then(function (conn) {\n        _this.client = conn;\n        _this._initCollection();\n        _this._driverVersion = getDriverVersion(_this.client);\n      });\n    } else {\n      _this._initCollection();\n      _this._driverVersion = getDriverVersion(_this.client);\n    }\n    return _this;\n  }\n  _createClass(RateLimiterMongo, [{\n    key: \"dbName\",\n    get: function get() {\n      return this._dbName;\n    },\n    set: function set(value) {\n      this._dbName = typeof value === 'undefined' ? RateLimiterMongo.getDbName() : value;\n    }\n  }, {\n    key: \"tableName\",\n    get: function get() {\n      return this._tableName;\n    },\n    set: function set(value) {\n      this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n    }\n  }, {\n    key: \"client\",\n    get: function get() {\n      return this._client;\n    },\n    set: function set(value) {\n      if (typeof value === 'undefined') {\n        throw new Error('mongo is not set');\n      }\n      this._client = value;\n    }\n  }, {\n    key: \"indexKeyPrefix\",\n    get: function get() {\n      return this._indexKeyPrefix;\n    },\n    set: function set(obj) {\n      this._indexKeyPrefix = obj || {};\n    }\n  }, {\n    key: \"_initCollection\",\n    value: function _initCollection() {\n      var db = typeof this.client.db === 'function' ? this.client.db(this.dbName) : this.client;\n      var collection = db.collection(this.tableName);\n      collection.createIndex({\n        expire: -1\n      }, {\n        expireAfterSeconds: 0\n      });\n      collection.createIndex(Object.assign({}, this.indexKeyPrefix, {\n        key: 1\n      }), {\n        unique: true\n      });\n      this._collection = collection;\n    }\n  }, {\n    key: \"_getRateLimiterRes\",\n    value: function _getRateLimiterRes(rlKey, changedPoints, result) {\n      var res = new RateLimiterRes();\n      var doc;\n      if (typeof result.value === 'undefined') {\n        doc = result;\n      } else {\n        doc = result.value;\n      }\n      res.isFirstInDuration = doc.points === changedPoints;\n      res.consumedPoints = doc.points;\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n      res.msBeforeNext = doc.expire !== null ? Math.max(new Date(doc.expire).getTime() - Date.now(), 0) : -1;\n      return res;\n    }\n  }, {\n    key: \"_upsert\",\n    value: function _upsert(key, points, msDuration) {\n      var _this2 = this;\n      var forceExpire = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      if (!this._collection) {\n        return Promise.reject(Error('Mongo connection is not established'));\n      }\n      var docAttrs = options.attrs || {};\n      var where;\n      var upsertData;\n      if (forceExpire) {\n        where = {\n          key: key\n        };\n        where = Object.assign(where, docAttrs);\n        upsertData = {\n          $set: {\n            key: key,\n            points: points,\n            expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null\n          }\n        };\n        upsertData.$set = Object.assign(upsertData.$set, docAttrs);\n      } else {\n        where = {\n          $or: [{\n            expire: {\n              $gt: new Date()\n            }\n          }, {\n            expire: {\n              $eq: null\n            }\n          }],\n          key: key\n        };\n        where = Object.assign(where, docAttrs);\n        upsertData = {\n          $setOnInsert: {\n            key: key,\n            expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null\n          },\n          $inc: {\n            points: points\n          }\n        };\n        upsertData.$setOnInsert = Object.assign(upsertData.$setOnInsert, docAttrs);\n      }\n\n      // Options for collection updates differ between driver versions\n      var upsertOptions = {\n        upsert: true\n      };\n      if (this._driverVersion.major >= 4 || this._driverVersion.major === 3 && this._driverVersion.feature >= 7 || this._driverVersion.feature >= 6 && this._driverVersion.patch >= 7) {\n        upsertOptions.returnDocument = 'after';\n      } else {\n        upsertOptions.returnOriginal = false;\n      }\n\n      /*\n       * 1. Find actual limit and increment points\n       * 2. If limit expired, but Mongo doesn't clean doc by TTL yet, try to replace limit doc completely\n       * 3. If 2 or more Mongo threads try to insert the new limit doc, only the first succeed\n       * 4. Try to upsert from step 1. Actual limit is created now, points are incremented without problems\n       */\n      return new Promise(function (resolve, reject) {\n        _this2._collection.findOneAndUpdate(where, upsertData, upsertOptions).then(function (res) {\n          resolve(res);\n        }).catch(function (errUpsert) {\n          if (errUpsert && errUpsert.code === 11000) {\n            // E11000 duplicate key error collection\n            var replaceWhere = Object.assign({\n              // try to replace OLD limit doc\n              $or: [{\n                expire: {\n                  $lte: new Date()\n                }\n              }, {\n                expire: {\n                  $eq: null\n                }\n              }],\n              key: key\n            }, docAttrs);\n            var replaceTo = {\n              $set: Object.assign({\n                key: key,\n                points: points,\n                expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null\n              }, docAttrs)\n            };\n            _this2._collection.findOneAndUpdate(replaceWhere, replaceTo, upsertOptions).then(function (res) {\n              resolve(res);\n            }).catch(function (errReplace) {\n              if (errReplace && errReplace.code === 11000) {\n                // E11000 duplicate key error collection\n                _this2._upsert(key, points, msDuration, forceExpire).then(function (res) {\n                  return resolve(res);\n                }).catch(function (err) {\n                  return reject(err);\n                });\n              } else {\n                reject(errReplace);\n              }\n            });\n          } else {\n            reject(errUpsert);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(rlKey) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this._collection) {\n        return Promise.reject(Error('Mongo connection is not established'));\n      }\n      var docAttrs = options.attrs || {};\n      var where = Object.assign({\n        key: rlKey,\n        $or: [{\n          expire: {\n            $gt: new Date()\n          }\n        }, {\n          expire: {\n            $eq: null\n          }\n        }]\n      }, docAttrs);\n      return this._collection.findOne(where);\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(rlKey) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this._collection) {\n        return Promise.reject(Error('Mongo connection is not established'));\n      }\n      var docAttrs = options.attrs || {};\n      var where = Object.assign({\n        key: rlKey\n      }, docAttrs);\n      return this._collection.deleteOne(where).then(function (res) {\n        return res.deletedCount > 0;\n      });\n    }\n  }], [{\n    key: \"getDbName\",\n    value: function getDbName() {\n      return 'node-rate-limiter-flexible';\n    }\n  }]);\n  return RateLimiterMongo;\n}(RateLimiterStoreAbstract);\nmodule.exports = RateLimiterMongo;","map":{"version":3,"names":["RateLimiterStoreAbstract","require","RateLimiterRes","getDriverVersion","client","_client","version","topology","s","options","metadata","driver","_v","split","map","v","parseInt","major","feature","patch","err","RateLimiterMongo","_RateLimiterStoreAbst","_inherits","_super","_createSuper","opts","_this","_classCallCheck","call","dbName","tableName","indexKeyPrefix","mongo","storeClient","then","conn","_initCollection","_driverVersion","_createClass","key","get","_dbName","set","value","getDbName","_tableName","keyPrefix","Error","_indexKeyPrefix","obj","db","collection","createIndex","expire","expireAfterSeconds","Object","assign","unique","_collection","_getRateLimiterRes","rlKey","changedPoints","result","res","doc","isFirstInDuration","points","consumedPoints","remainingPoints","Math","max","msBeforeNext","Date","getTime","now","_upsert","msDuration","_this2","forceExpire","arguments","length","undefined","Promise","reject","docAttrs","attrs","where","upsertData","$set","$or","$gt","$eq","$setOnInsert","$inc","upsertOptions","upsert","returnDocument","returnOriginal","resolve","findOneAndUpdate","catch","errUpsert","code","replaceWhere","$lte","replaceTo","errReplace","_get","findOne","_delete","deleteOne","deletedCount","module","exports"],"sources":["/Users/apple/Documents/treasure/node_modules/rate-limiter-flexible/lib/RateLimiterMongo.js"],"sourcesContent":["const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\n/**\n * Get MongoDB driver version as upsert options differ\n * @params {Object} Client instance\n * @returns {Object} Version Object containing major, feature & minor versions.\n */\nfunction getDriverVersion(client) {\n  try {\n    const _client = client.client ? client.client : client;\n\n    const { version } = _client.topology.s.options.metadata.driver;\n    const _v = version.split('.').map(v => parseInt(v));\n\n    return {\n      major: _v[0],\n      feature: _v[1],\n      patch: _v[2],\n    };\n  } catch (err) {\n    return { major: 0, feature: 0, patch: 0 };\n  }\n}\n\nclass RateLimiterMongo extends RateLimiterStoreAbstract {\n  /**\n   *\n   * @param {Object} opts\n   * Defaults {\n   *   indexKeyPrefix: {attr1: 1, attr2: 1}\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   mongo: MongoClient\n   * }\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.dbName = opts.dbName;\n    this.tableName = opts.tableName;\n    this.indexKeyPrefix = opts.indexKeyPrefix;\n\n    if (opts.mongo) {\n      this.client = opts.mongo;\n    } else {\n      this.client = opts.storeClient;\n    }\n    if (typeof this.client.then === 'function') {\n      // If Promise\n      this.client\n        .then((conn) => {\n          this.client = conn;\n          this._initCollection();\n          this._driverVersion = getDriverVersion(this.client);\n        });\n    } else {\n      this._initCollection();\n      this._driverVersion = getDriverVersion(this.client);\n    }\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  set dbName(value) {\n    this._dbName = typeof value === 'undefined' ? RateLimiterMongo.getDbName() : value;\n  }\n\n  static getDbName() {\n    return 'node-rate-limiter-flexible';\n  }\n\n  get tableName() {\n    return this._tableName;\n  }\n\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n\n  get client() {\n    return this._client;\n  }\n\n  set client(value) {\n    if (typeof value === 'undefined') {\n      throw new Error('mongo is not set');\n    }\n    this._client = value;\n  }\n\n  get indexKeyPrefix() {\n    return this._indexKeyPrefix;\n  }\n\n  set indexKeyPrefix(obj) {\n    this._indexKeyPrefix = obj || {};\n  }\n\n  _initCollection() {\n    const db = typeof this.client.db === 'function'\n      ? this.client.db(this.dbName)\n      : this.client;\n\n    const collection = db.collection(this.tableName);\n    collection.createIndex({ expire: -1 }, { expireAfterSeconds: 0 });\n    collection.createIndex(Object.assign({}, this.indexKeyPrefix, { key: 1 }), { unique: true });\n\n    this._collection = collection;\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n\n    let doc;\n    if (typeof result.value === 'undefined') {\n      doc = result;\n    } else {\n      doc = result.value;\n    }\n\n    res.isFirstInDuration = doc.points === changedPoints;\n    res.consumedPoints = doc.points;\n\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = doc.expire !== null\n      ? Math.max(new Date(doc.expire).getTime() - Date.now(), 0)\n      : -1;\n\n    return res;\n  }\n\n  _upsert(key, points, msDuration, forceExpire = false, options = {}) {\n    if (!this._collection) {\n      return Promise.reject(Error('Mongo connection is not established'));\n    }\n\n    const docAttrs = options.attrs || {};\n\n    let where;\n    let upsertData;\n    if (forceExpire) {\n      where = { key };\n      where = Object.assign(where, docAttrs);\n      upsertData = {\n        $set: {\n          key,\n          points,\n          expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,\n        },\n      };\n      upsertData.$set = Object.assign(upsertData.$set, docAttrs);\n    } else {\n      where = {\n        $or: [\n          { expire: { $gt: new Date() } },\n          { expire: { $eq: null } },\n        ],\n        key,\n      };\n      where = Object.assign(where, docAttrs);\n      upsertData = {\n        $setOnInsert: {\n          key,\n          expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,\n        },\n        $inc: { points },\n      };\n      upsertData.$setOnInsert = Object.assign(upsertData.$setOnInsert, docAttrs);\n    }\n\n    // Options for collection updates differ between driver versions\n    const upsertOptions = {\n      upsert: true,\n    };\n    if ((this._driverVersion.major >= 4) ||\n        (this._driverVersion.major === 3 &&\n          (this._driverVersion.feature >=7) || \n          (this._driverVersion.feature >= 6 && \n              this._driverVersion.patch >= 7 ))) \n    {\n      upsertOptions.returnDocument = 'after';\n    } else {\n      upsertOptions.returnOriginal = false;\n    }\n\n    /*\n     * 1. Find actual limit and increment points\n     * 2. If limit expired, but Mongo doesn't clean doc by TTL yet, try to replace limit doc completely\n     * 3. If 2 or more Mongo threads try to insert the new limit doc, only the first succeed\n     * 4. Try to upsert from step 1. Actual limit is created now, points are incremented without problems\n     */\n    return new Promise((resolve, reject) => {\n      this._collection.findOneAndUpdate(\n        where,\n        upsertData,\n        upsertOptions\n      ).then((res) => {\n        resolve(res);\n      }).catch((errUpsert) => {\n        if (errUpsert && errUpsert.code === 11000) { // E11000 duplicate key error collection\n          const replaceWhere = Object.assign({ // try to replace OLD limit doc\n            $or: [\n              { expire: { $lte: new Date() } },\n              { expire: { $eq: null } },\n            ],\n            key,\n          }, docAttrs);\n\n          const replaceTo = {\n            $set: Object.assign({\n              key,\n              points,\n              expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,\n            }, docAttrs)\n          };\n\n          this._collection.findOneAndUpdate(\n            replaceWhere,\n            replaceTo,\n            upsertOptions\n          ).then((res) => {\n            resolve(res);\n          }).catch((errReplace) => {\n            if (errReplace && errReplace.code === 11000) { // E11000 duplicate key error collection\n              this._upsert(key, points, msDuration, forceExpire)\n                .then(res => resolve(res))\n                .catch(err => reject(err));\n            } else {\n              reject(errReplace);\n            }\n          });\n        } else {\n          reject(errUpsert);\n        }\n      });\n    });\n  }\n\n  _get(rlKey, options = {}) {\n    if (!this._collection) {\n      return Promise.reject(Error('Mongo connection is not established'));\n    }\n\n    const docAttrs = options.attrs || {};\n\n    const where = Object.assign({\n      key: rlKey,\n      $or: [\n        { expire: { $gt: new Date() } },\n        { expire: { $eq: null } },\n      ],\n    }, docAttrs);\n\n    return this._collection.findOne(where);\n  }\n\n  _delete(rlKey, options = {}) {\n    if (!this._collection) {\n      return Promise.reject(Error('Mongo connection is not established'));\n    }\n\n    const docAttrs = options.attrs || {};\n    const where = Object.assign({ key: rlKey }, docAttrs);\n\n    return this._collection.deleteOne(where)\n      .then(res => res.deletedCount > 0);\n  }\n}\n\nmodule.exports = RateLimiterMongo;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
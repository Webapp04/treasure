{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n/* eslint max-nested-callbacks: [\"error\", 5] */\nimport { logger } from '@libp2p/logger';\nimport sanitize from 'sanitize-filename';\nimport mergeOptions from 'merge-options';\nimport { Key } from 'interface-datastore/key';\nimport { CMS } from './cms.js';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { generateKeyPair, importKey as _importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { pbkdf2, randomBytes } from '@libp2p/crypto';\nvar log = logger('libp2p:keychain');\nvar keyPrefix = '/pkcs8/';\nvar infoPrefix = '/info/';\nvar privates = new WeakMap();\n// NIST SP 800-132\nvar NIST = {\n  minKeyLength: 112 / 8,\n  minSaltLength: 128 / 8,\n  minIterationCount: 1000\n};\nvar defaultOptions = {\n  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n  dek: {\n    keyLength: 512 / 8,\n    iterationCount: 10000,\n    salt: 'you should override this value with a crypto secure random number',\n    hash: 'sha2-512'\n  }\n};\nfunction validateKeyName(name) {\n  if (name == null) {\n    return false;\n  }\n  if (typeof name !== 'string') {\n    return false;\n  }\n  return name === sanitize(name.trim()) && name.length > 0;\n}\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n */\nfunction randomDelay() {\n  return _randomDelay.apply(this, arguments);\n}\n/**\n * Converts a key name into a datastore name\n */\nfunction _randomDelay() {\n  _randomDelay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n    var min, max, delay;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          min = 200;\n          max = 1000;\n          delay = Math.random() * (max - min) + min;\n          _context13.next = 5;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, delay);\n          });\n        case 5:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13);\n  }));\n  return _randomDelay.apply(this, arguments);\n}\nfunction DsName(name) {\n  return new Key(keyPrefix + name);\n}\n/**\n * Converts a key name into a datastore info name\n */\nfunction DsInfoName(name) {\n  return new Key(infoPrefix + name);\n}\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nexport var KeyChain = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of a key chain\n   */\n  function KeyChain(components, init) {\n    var _this$init$pass, _this$init$dek, _this$init$dek2, _this$init$dek3, _this$init$dek4, _this$init$dek5, _this$init$dek6, _this$init$dek7, _this$init$dek8;\n    _classCallCheck(this, KeyChain);\n    this.components = components;\n    this.init = mergeOptions(defaultOptions, init);\n    // Enforce NIST SP 800-132\n    if (this.init.pass != null && ((_this$init$pass = this.init.pass) === null || _this$init$pass === void 0 ? void 0 : _this$init$pass.length) < 20) {\n      throw new Error('pass must be least 20 characters');\n    }\n    if (((_this$init$dek = this.init.dek) === null || _this$init$dek === void 0 ? void 0 : _this$init$dek.keyLength) != null && this.init.dek.keyLength < NIST.minKeyLength) {\n      throw new Error(\"dek.keyLength must be least \".concat(NIST.minKeyLength, \" bytes\"));\n    }\n    if (((_this$init$dek2 = this.init.dek) === null || _this$init$dek2 === void 0 || (_this$init$dek2 = _this$init$dek2.salt) === null || _this$init$dek2 === void 0 ? void 0 : _this$init$dek2.length) != null && this.init.dek.salt.length < NIST.minSaltLength) {\n      throw new Error(\"dek.saltLength must be least \".concat(NIST.minSaltLength, \" bytes\"));\n    }\n    if (((_this$init$dek3 = this.init.dek) === null || _this$init$dek3 === void 0 ? void 0 : _this$init$dek3.iterationCount) != null && this.init.dek.iterationCount < NIST.minIterationCount) {\n      throw new Error(\"dek.iterationCount must be least \".concat(NIST.minIterationCount));\n    }\n    var dek = this.init.pass != null && ((_this$init$dek4 = this.init.dek) === null || _this$init$dek4 === void 0 ? void 0 : _this$init$dek4.salt) != null ? pbkdf2(this.init.pass, (_this$init$dek5 = this.init.dek) === null || _this$init$dek5 === void 0 ? void 0 : _this$init$dek5.salt, (_this$init$dek6 = this.init.dek) === null || _this$init$dek6 === void 0 ? void 0 : _this$init$dek6.iterationCount, (_this$init$dek7 = this.init.dek) === null || _this$init$dek7 === void 0 ? void 0 : _this$init$dek7.keyLength, (_this$init$dek8 = this.init.dek) === null || _this$init$dek8 === void 0 ? void 0 : _this$init$dek8.hash) : '';\n    privates.set(this, {\n      dek: dek\n    });\n    this.started = false;\n  }\n  _createClass(KeyChain, [{\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var dsname;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              dsname = DsInfoName('self');\n              _context.next = 3;\n              return this.components.getDatastore().has(dsname);\n            case 3:\n              if (_context.sent) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 6;\n              return this.importPeer('self', this.components.getPeerId());\n            case 6:\n              this.started = true;\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.started = false;\n    }\n    /**\n     * Gets an object that can encrypt/decrypt protected data\n     * using the Cryptographic Message Syntax (CMS).\n     *\n     * CMS describes an encapsulation syntax for data protection. It\n     * is used to digitally sign, digest, authenticate, or encrypt\n     * arbitrary message content\n     */\n  }, {\n    key: \"cms\",\n    get: function get() {\n      var cached = privates.get(this);\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n      }\n      var dek = cached.dek;\n      return new CMS(this, dek);\n    }\n    /**\n     * Generates the options for a keychain.  A random salt is produced.\n     *\n     * @returns {object}\n     */\n  }, {\n    key: \"createKey\",\n    value:\n    /**\n     * Create a new key.\n     *\n     * @param {string} name - The local key name; cannot already exist.\n     * @param {string} type - One of the key types; 'rsa'.\n     * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only\n     */\n    function () {\n      var _createKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name, type) {\n        var size,\n          dsname,\n          exists,\n          keyInfo,\n          keypair,\n          kid,\n          cached,\n          dek,\n          pem,\n          batch,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              size = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 2048;\n              if (!(!validateKeyName(name) || name === 'self')) {\n                _context2.next = 5;\n                break;\n              }\n              _context2.next = 4;\n              return randomDelay();\n            case 4:\n              throw errCode(new Error('Invalid key name'), codes.ERR_INVALID_KEY_NAME);\n            case 5:\n              if (!(typeof type !== 'string')) {\n                _context2.next = 9;\n                break;\n              }\n              _context2.next = 8;\n              return randomDelay();\n            case 8:\n              throw errCode(new Error('Invalid key type'), codes.ERR_INVALID_KEY_TYPE);\n            case 9:\n              dsname = DsName(name);\n              _context2.next = 12;\n              return this.components.getDatastore().has(dsname);\n            case 12:\n              exists = _context2.sent;\n              if (!exists) {\n                _context2.next = 17;\n                break;\n              }\n              _context2.next = 16;\n              return randomDelay();\n            case 16:\n              throw errCode(new Error('Key name already exists'), codes.ERR_KEY_ALREADY_EXISTS);\n            case 17:\n              _context2.t0 = type.toLowerCase();\n              _context2.next = _context2.t0 === 'rsa' ? 20 : 25;\n              break;\n            case 20:\n              if (!(!Number.isSafeInteger(size) || size < 2048)) {\n                _context2.next = 24;\n                break;\n              }\n              _context2.next = 23;\n              return randomDelay();\n            case 23:\n              throw errCode(new Error('Invalid RSA key size'), codes.ERR_INVALID_KEY_SIZE);\n            case 24:\n              return _context2.abrupt(\"break\", 26);\n            case 25:\n              return _context2.abrupt(\"break\", 26);\n            case 26:\n              _context2.prev = 26;\n              _context2.next = 29;\n              return generateKeyPair(type, size);\n            case 29:\n              keypair = _context2.sent;\n              _context2.next = 32;\n              return keypair.id();\n            case 32:\n              kid = _context2.sent;\n              cached = privates.get(this);\n              if (!(cached == null)) {\n                _context2.next = 36;\n                break;\n              }\n              throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            case 36:\n              dek = cached.dek;\n              _context2.next = 39;\n              return keypair.export(dek);\n            case 39:\n              pem = _context2.sent;\n              keyInfo = {\n                name: name,\n                id: kid\n              };\n              batch = this.components.getDatastore().batch();\n              batch.put(dsname, uint8ArrayFromString(pem));\n              batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n              _context2.next = 46;\n              return batch.commit();\n            case 46:\n              _context2.next = 53;\n              break;\n            case 48:\n              _context2.prev = 48;\n              _context2.t1 = _context2[\"catch\"](26);\n              _context2.next = 52;\n              return randomDelay();\n            case 52:\n              throw _context2.t1;\n            case 53:\n              return _context2.abrupt(\"return\", keyInfo);\n            case 54:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[26, 48]]);\n      }));\n      function createKey(_x, _x2) {\n        return _createKey.apply(this, arguments);\n      }\n      return createKey;\n    }()\n    /**\n     * List all the keys.\n     *\n     * @returns {Promise<KeyInfo[]>}\n     */\n  }, {\n    key: \"listKeys\",\n    value: function () {\n      var _listKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var query, info, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, value;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              query = {\n                prefix: infoPrefix\n              };\n              info = [];\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context3.prev = 4;\n              _iterator = _asyncIterator(this.components.getDatastore().query(query));\n            case 6:\n              _context3.next = 8;\n              return _iterator.next();\n            case 8:\n              if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n                _context3.next = 14;\n                break;\n              }\n              value = _step.value;\n              info.push(JSON.parse(uint8ArrayToString(value.value)));\n            case 11:\n              _iteratorAbruptCompletion = false;\n              _context3.next = 6;\n              break;\n            case 14:\n              _context3.next = 20;\n              break;\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](4);\n              _didIteratorError = true;\n              _iteratorError = _context3.t0;\n            case 20:\n              _context3.prev = 20;\n              _context3.prev = 21;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context3.next = 25;\n                break;\n              }\n              _context3.next = 25;\n              return _iterator.return();\n            case 25:\n              _context3.prev = 25;\n              if (!_didIteratorError) {\n                _context3.next = 28;\n                break;\n              }\n              throw _iteratorError;\n            case 28:\n              return _context3.finish(25);\n            case 29:\n              return _context3.finish(20);\n            case 30:\n              return _context3.abrupt(\"return\", info);\n            case 31:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 16, 20, 30], [21,, 25, 29]]);\n      }));\n      function listKeys() {\n        return _listKeys.apply(this, arguments);\n      }\n      return listKeys;\n    }()\n    /**\n     * Find a key by it's id\n     */\n  }, {\n    key: \"findKeyById\",\n    value: function () {\n      var _findKeyById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(id) {\n        var keys;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this.listKeys();\n            case 3:\n              keys = _context4.sent;\n              return _context4.abrupt(\"return\", keys.find(function (k) {\n                return k.id === id;\n              }));\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              _context4.next = 11;\n              return randomDelay();\n            case 11:\n              throw _context4.t0;\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n      function findKeyById(_x3) {\n        return _findKeyById.apply(this, arguments);\n      }\n      return findKeyById;\n    }()\n    /**\n     * Find a key by it's name.\n     *\n     * @param {string} name - The local key name.\n     * @returns {Promise<KeyInfo>}\n     */\n  }, {\n    key: \"findKeyByName\",\n    value: function () {\n      var _findKeyByName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(name) {\n        var dsname, res;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (validateKeyName(name)) {\n                _context5.next = 4;\n                break;\n              }\n              _context5.next = 3;\n              return randomDelay();\n            case 3:\n              throw errCode(new Error(\"Invalid key name '\".concat(name, \"'\")), codes.ERR_INVALID_KEY_NAME);\n            case 4:\n              dsname = DsInfoName(name);\n              _context5.prev = 5;\n              _context5.next = 8;\n              return this.components.getDatastore().get(dsname);\n            case 8:\n              res = _context5.sent;\n              return _context5.abrupt(\"return\", JSON.parse(uint8ArrayToString(res)));\n            case 12:\n              _context5.prev = 12;\n              _context5.t0 = _context5[\"catch\"](5);\n              _context5.next = 16;\n              return randomDelay();\n            case 16:\n              log.error(_context5.t0);\n              throw errCode(new Error(\"Key '\".concat(name, \"' does not exist.\")), codes.ERR_KEY_NOT_FOUND);\n            case 18:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[5, 12]]);\n      }));\n      function findKeyByName(_x4) {\n        return _findKeyByName.apply(this, arguments);\n      }\n      return findKeyByName;\n    }()\n    /**\n     * Remove an existing key.\n     *\n     * @param {string} name - The local key name; must already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n  }, {\n    key: \"removeKey\",\n    value: function () {\n      var _removeKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(name) {\n        var dsname, keyInfo, batch;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(!validateKeyName(name) || name === 'self')) {\n                _context6.next = 4;\n                break;\n              }\n              _context6.next = 3;\n              return randomDelay();\n            case 3:\n              throw errCode(new Error(\"Invalid key name '\".concat(name, \"'\")), codes.ERR_INVALID_KEY_NAME);\n            case 4:\n              dsname = DsName(name);\n              _context6.next = 7;\n              return this.findKeyByName(name);\n            case 7:\n              keyInfo = _context6.sent;\n              batch = this.components.getDatastore().batch();\n              batch.delete(dsname);\n              batch.delete(DsInfoName(name));\n              _context6.next = 13;\n              return batch.commit();\n            case 13:\n              return _context6.abrupt(\"return\", keyInfo);\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function removeKey(_x5) {\n        return _removeKey.apply(this, arguments);\n      }\n      return removeKey;\n    }()\n    /**\n     * Rename a key\n     *\n     * @param {string} oldName - The old local key name; must already exist.\n     * @param {string} newName - The new local key name; must not already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n  }, {\n    key: \"renameKey\",\n    value: function () {\n      var _renameKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(oldName, newName) {\n        var oldDsname, newDsname, oldInfoName, newInfoName, exists, pem, res, keyInfo, batch;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(!validateKeyName(oldName) || oldName === 'self')) {\n                _context7.next = 4;\n                break;\n              }\n              _context7.next = 3;\n              return randomDelay();\n            case 3:\n              throw errCode(new Error(\"Invalid old key name '\".concat(oldName, \"'\")), codes.ERR_OLD_KEY_NAME_INVALID);\n            case 4:\n              if (!(!validateKeyName(newName) || newName === 'self')) {\n                _context7.next = 8;\n                break;\n              }\n              _context7.next = 7;\n              return randomDelay();\n            case 7:\n              throw errCode(new Error(\"Invalid new key name '\".concat(newName, \"'\")), codes.ERR_NEW_KEY_NAME_INVALID);\n            case 8:\n              oldDsname = DsName(oldName);\n              newDsname = DsName(newName);\n              oldInfoName = DsInfoName(oldName);\n              newInfoName = DsInfoName(newName);\n              _context7.next = 14;\n              return this.components.getDatastore().has(newDsname);\n            case 14:\n              exists = _context7.sent;\n              if (!exists) {\n                _context7.next = 19;\n                break;\n              }\n              _context7.next = 18;\n              return randomDelay();\n            case 18:\n              throw errCode(new Error(\"Key '\".concat(newName, \"' already exists\")), codes.ERR_KEY_ALREADY_EXISTS);\n            case 19:\n              _context7.prev = 19;\n              _context7.next = 22;\n              return this.components.getDatastore().get(oldDsname);\n            case 22:\n              pem = _context7.sent;\n              _context7.next = 25;\n              return this.components.getDatastore().get(oldInfoName);\n            case 25:\n              res = _context7.sent;\n              keyInfo = JSON.parse(uint8ArrayToString(res));\n              keyInfo.name = newName;\n              batch = this.components.getDatastore().batch();\n              batch.put(newDsname, pem);\n              batch.put(newInfoName, uint8ArrayFromString(JSON.stringify(keyInfo)));\n              batch.delete(oldDsname);\n              batch.delete(oldInfoName);\n              _context7.next = 35;\n              return batch.commit();\n            case 35:\n              return _context7.abrupt(\"return\", keyInfo);\n            case 38:\n              _context7.prev = 38;\n              _context7.t0 = _context7[\"catch\"](19);\n              _context7.next = 42;\n              return randomDelay();\n            case 42:\n              throw _context7.t0;\n            case 43:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[19, 38]]);\n      }));\n      function renameKey(_x6, _x7) {\n        return _renameKey.apply(this, arguments);\n      }\n      return renameKey;\n    }()\n    /**\n     * Export an existing key as a PEM encrypted PKCS #8 string\n     */\n  }, {\n    key: \"exportKey\",\n    value: function () {\n      var _exportKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(name, password) {\n        var dsname, res, pem, cached, dek, privateKey;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (validateKeyName(name)) {\n                _context8.next = 4;\n                break;\n              }\n              _context8.next = 3;\n              return randomDelay();\n            case 3:\n              throw errCode(new Error(\"Invalid key name '\".concat(name, \"'\")), codes.ERR_INVALID_KEY_NAME);\n            case 4:\n              if (!(password == null)) {\n                _context8.next = 8;\n                break;\n              }\n              _context8.next = 7;\n              return randomDelay();\n            case 7:\n              throw errCode(new Error('Password is required'), codes.ERR_PASSWORD_REQUIRED);\n            case 8:\n              dsname = DsName(name);\n              _context8.prev = 9;\n              _context8.next = 12;\n              return this.components.getDatastore().get(dsname);\n            case 12:\n              res = _context8.sent;\n              pem = uint8ArrayToString(res);\n              cached = privates.get(this);\n              if (!(cached == null)) {\n                _context8.next = 17;\n                break;\n              }\n              throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            case 17:\n              dek = cached.dek;\n              _context8.next = 20;\n              return _importKey(pem, dek);\n            case 20:\n              privateKey = _context8.sent;\n              _context8.next = 23;\n              return privateKey.export(password);\n            case 23:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 26:\n              _context8.prev = 26;\n              _context8.t0 = _context8[\"catch\"](9);\n              _context8.next = 30;\n              return randomDelay();\n            case 30:\n              throw _context8.t0;\n            case 31:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[9, 26]]);\n      }));\n      function exportKey(_x8, _x9) {\n        return _exportKey.apply(this, arguments);\n      }\n      return exportKey;\n    }()\n    /**\n     * Import a new key from a PEM encoded PKCS #8 string\n     *\n     * @param {string} name - The local key name; must not already exist.\n     * @param {string} pem - The PEM encoded PKCS #8 string\n     * @param {string} password - The password.\n     * @returns {Promise<KeyInfo>}\n     */\n  }, {\n    key: \"importKey\",\n    value: function () {\n      var _importKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(name, pem, password) {\n        var dsname, exists, privateKey, kid, cached, dek, keyInfo, batch;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(!validateKeyName(name) || name === 'self')) {\n                _context9.next = 4;\n                break;\n              }\n              _context9.next = 3;\n              return randomDelay();\n            case 3:\n              throw errCode(new Error(\"Invalid key name '\".concat(name, \"'\")), codes.ERR_INVALID_KEY_NAME);\n            case 4:\n              if (!(pem == null)) {\n                _context9.next = 8;\n                break;\n              }\n              _context9.next = 7;\n              return randomDelay();\n            case 7:\n              throw errCode(new Error('PEM encoded key is required'), codes.ERR_PEM_REQUIRED);\n            case 8:\n              dsname = DsName(name);\n              _context9.next = 11;\n              return this.components.getDatastore().has(dsname);\n            case 11:\n              exists = _context9.sent;\n              if (!exists) {\n                _context9.next = 16;\n                break;\n              }\n              _context9.next = 15;\n              return randomDelay();\n            case 15:\n              throw errCode(new Error(\"Key '\".concat(name, \"' already exists\")), codes.ERR_KEY_ALREADY_EXISTS);\n            case 16:\n              _context9.prev = 16;\n              _context9.next = 19;\n              return _importKey(pem, password);\n            case 19:\n              privateKey = _context9.sent;\n              _context9.next = 27;\n              break;\n            case 22:\n              _context9.prev = 22;\n              _context9.t0 = _context9[\"catch\"](16);\n              _context9.next = 26;\n              return randomDelay();\n            case 26:\n              throw errCode(new Error('Cannot read the key, most likely the password is wrong'), codes.ERR_CANNOT_READ_KEY);\n            case 27:\n              _context9.prev = 27;\n              _context9.next = 30;\n              return privateKey.id();\n            case 30:\n              kid = _context9.sent;\n              cached = privates.get(this);\n              if (!(cached == null)) {\n                _context9.next = 34;\n                break;\n              }\n              throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            case 34:\n              dek = cached.dek;\n              _context9.next = 37;\n              return privateKey.export(dek);\n            case 37:\n              pem = _context9.sent;\n              _context9.next = 45;\n              break;\n            case 40:\n              _context9.prev = 40;\n              _context9.t1 = _context9[\"catch\"](27);\n              _context9.next = 44;\n              return randomDelay();\n            case 44:\n              throw _context9.t1;\n            case 45:\n              keyInfo = {\n                name: name,\n                id: kid\n              };\n              batch = this.components.getDatastore().batch();\n              batch.put(dsname, uint8ArrayFromString(pem));\n              batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n              _context9.next = 51;\n              return batch.commit();\n            case 51:\n              return _context9.abrupt(\"return\", keyInfo);\n            case 52:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[16, 22], [27, 40]]);\n      }));\n      function importKey(_x10, _x11, _x12) {\n        return _importKey2.apply(this, arguments);\n      }\n      return importKey;\n    }()\n    /**\n     * Import a peer key\n     */\n  }, {\n    key: \"importPeer\",\n    value: function () {\n      var _importPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(name, peer) {\n        var privateKey, dsname, exists, cached, dek, pem, keyInfo, batch;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              if (validateKeyName(name)) {\n                _context10.next = 3;\n                break;\n              }\n              throw errCode(new Error(\"Invalid key name '\".concat(name, \"'\")), codes.ERR_INVALID_KEY_NAME);\n            case 3:\n              if (!(peer == null)) {\n                _context10.next = 5;\n                break;\n              }\n              throw errCode(new Error('PeerId is required'), codes.ERR_MISSING_PRIVATE_KEY);\n            case 5:\n              if (!(peer.privateKey == null)) {\n                _context10.next = 7;\n                break;\n              }\n              throw errCode(new Error('PeerId.privKey is required'), codes.ERR_MISSING_PRIVATE_KEY);\n            case 7:\n              _context10.next = 9;\n              return unmarshalPrivateKey(peer.privateKey);\n            case 9:\n              privateKey = _context10.sent;\n              dsname = DsName(name);\n              _context10.next = 13;\n              return this.components.getDatastore().has(dsname);\n            case 13:\n              exists = _context10.sent;\n              if (!exists) {\n                _context10.next = 18;\n                break;\n              }\n              _context10.next = 17;\n              return randomDelay();\n            case 17:\n              throw errCode(new Error(\"Key '\".concat(name, \"' already exists\")), codes.ERR_KEY_ALREADY_EXISTS);\n            case 18:\n              cached = privates.get(this);\n              if (!(cached == null)) {\n                _context10.next = 21;\n                break;\n              }\n              throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            case 21:\n              dek = cached.dek;\n              _context10.next = 24;\n              return privateKey.export(dek);\n            case 24:\n              pem = _context10.sent;\n              keyInfo = {\n                name: name,\n                id: peer.toString()\n              };\n              batch = this.components.getDatastore().batch();\n              batch.put(dsname, uint8ArrayFromString(pem));\n              batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n              _context10.next = 31;\n              return batch.commit();\n            case 31:\n              return _context10.abrupt(\"return\", keyInfo);\n            case 34:\n              _context10.prev = 34;\n              _context10.t0 = _context10[\"catch\"](0);\n              _context10.next = 38;\n              return randomDelay();\n            case 38:\n              throw _context10.t0;\n            case 39:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[0, 34]]);\n      }));\n      function importPeer(_x13, _x14) {\n        return _importPeer.apply(this, arguments);\n      }\n      return importPeer;\n    }()\n    /**\n     * Gets the private key as PEM encoded PKCS #8 string\n     */\n  }, {\n    key: \"getPrivateKey\",\n    value: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(name) {\n        var dsname, res;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (validateKeyName(name)) {\n                _context11.next = 4;\n                break;\n              }\n              _context11.next = 3;\n              return randomDelay();\n            case 3:\n              throw errCode(new Error(\"Invalid key name '\".concat(name, \"'\")), codes.ERR_INVALID_KEY_NAME);\n            case 4:\n              _context11.prev = 4;\n              dsname = DsName(name);\n              _context11.next = 8;\n              return this.components.getDatastore().get(dsname);\n            case 8:\n              res = _context11.sent;\n              return _context11.abrupt(\"return\", uint8ArrayToString(res));\n            case 12:\n              _context11.prev = 12;\n              _context11.t0 = _context11[\"catch\"](4);\n              _context11.next = 16;\n              return randomDelay();\n            case 16:\n              log.error(_context11.t0);\n              throw errCode(new Error(\"Key '\".concat(name, \"' does not exist.\")), codes.ERR_KEY_NOT_FOUND);\n            case 18:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[4, 12]]);\n      }));\n      function getPrivateKey(_x15) {\n        return _getPrivateKey.apply(this, arguments);\n      }\n      return getPrivateKey;\n    }()\n    /**\n     * Rotate keychain password and re-encrypt all associated keys\n     */\n  }, {\n    key: \"rotateKeychainPass\",\n    value: function () {\n      var _rotateKeychainPass = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(oldPass, newPass) {\n        var _this$init$dek9, _this$init$dek10, _this$init$dek11, _this$init$dek12;\n        var cached, oldDek, newDek, keys, _iterator2, _step2, key, res, pem, privateKey, password, keyAsPEM, batch, keyInfo;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              if (!(typeof oldPass !== 'string')) {\n                _context12.next = 4;\n                break;\n              }\n              _context12.next = 3;\n              return randomDelay();\n            case 3:\n              throw errCode(new Error(\"Invalid old pass type '\".concat(typeof oldPass, \"'\")), codes.ERR_INVALID_OLD_PASS_TYPE);\n            case 4:\n              if (!(typeof newPass !== 'string')) {\n                _context12.next = 8;\n                break;\n              }\n              _context12.next = 7;\n              return randomDelay();\n            case 7:\n              throw errCode(new Error(\"Invalid new pass type '\".concat(typeof newPass, \"'\")), codes.ERR_INVALID_NEW_PASS_TYPE);\n            case 8:\n              if (!(newPass.length < 20)) {\n                _context12.next = 12;\n                break;\n              }\n              _context12.next = 11;\n              return randomDelay();\n            case 11:\n              throw errCode(new Error(\"Invalid pass length \".concat(newPass.length)), codes.ERR_INVALID_PASS_LENGTH);\n            case 12:\n              log('recreating keychain');\n              cached = privates.get(this);\n              if (!(cached == null)) {\n                _context12.next = 16;\n                break;\n              }\n              throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            case 16:\n              oldDek = cached.dek;\n              this.init.pass = newPass;\n              newDek = newPass != null && ((_this$init$dek9 = this.init.dek) === null || _this$init$dek9 === void 0 ? void 0 : _this$init$dek9.salt) != null ? pbkdf2(newPass, this.init.dek.salt, (_this$init$dek10 = this.init.dek) === null || _this$init$dek10 === void 0 ? void 0 : _this$init$dek10.iterationCount, (_this$init$dek11 = this.init.dek) === null || _this$init$dek11 === void 0 ? void 0 : _this$init$dek11.keyLength, (_this$init$dek12 = this.init.dek) === null || _this$init$dek12 === void 0 ? void 0 : _this$init$dek12.hash) : '';\n              privates.set(this, {\n                dek: newDek\n              });\n              _context12.next = 22;\n              return this.listKeys();\n            case 22:\n              keys = _context12.sent;\n              _iterator2 = _createForOfIteratorHelper(keys);\n              _context12.prev = 24;\n              _iterator2.s();\n            case 26:\n              if ((_step2 = _iterator2.n()).done) {\n                _context12.next = 47;\n                break;\n              }\n              key = _step2.value;\n              _context12.next = 30;\n              return this.components.getDatastore().get(DsName(key.name));\n            case 30:\n              res = _context12.sent;\n              pem = uint8ArrayToString(res);\n              _context12.next = 34;\n              return _importKey(pem, oldDek);\n            case 34:\n              privateKey = _context12.sent;\n              password = newDek.toString();\n              _context12.next = 38;\n              return privateKey.export(password);\n            case 38:\n              keyAsPEM = _context12.sent;\n              // Update stored key\n              batch = this.components.getDatastore().batch();\n              keyInfo = {\n                name: key.name,\n                id: key.id\n              };\n              batch.put(DsName(key.name), uint8ArrayFromString(keyAsPEM));\n              batch.put(DsInfoName(key.name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n              _context12.next = 45;\n              return batch.commit();\n            case 45:\n              _context12.next = 26;\n              break;\n            case 47:\n              _context12.next = 52;\n              break;\n            case 49:\n              _context12.prev = 49;\n              _context12.t0 = _context12[\"catch\"](24);\n              _iterator2.e(_context12.t0);\n            case 52:\n              _context12.prev = 52;\n              _iterator2.f();\n              return _context12.finish(52);\n            case 55:\n              log('keychain reconstructed');\n            case 56:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[24, 49, 52, 55]]);\n      }));\n      function rotateKeychainPass(_x16, _x17) {\n        return _rotateKeychainPass.apply(this, arguments);\n      }\n      return rotateKeychainPass;\n    }()\n  }], [{\n    key: \"generateOptions\",\n    value: function generateOptions() {\n      var options = Object.assign({}, defaultOptions);\n      var saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding\n      options.dek.salt = uint8ArrayToString(randomBytes(saltLength), 'base64');\n      return options;\n    }\n    /**\n     * Gets an object that can encrypt/decrypt protected data.\n     * The default options for a keychain.\n     *\n     * @returns {object}\n     */\n  }, {\n    key: \"options\",\n    get: function get() {\n      return defaultOptions;\n    }\n  }]);\n  return KeyChain;\n}();","map":{"version":3,"names":["logger","sanitize","mergeOptions","Key","CMS","errCode","codes","toString","uint8ArrayToString","fromString","uint8ArrayFromString","generateKeyPair","importKey","unmarshalPrivateKey","pbkdf2","randomBytes","log","keyPrefix","infoPrefix","privates","WeakMap","NIST","minKeyLength","minSaltLength","minIterationCount","defaultOptions","dek","keyLength","iterationCount","salt","hash","validateKeyName","name","trim","length","randomDelay","_randomDelay","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee13","min","max","delay","wrap","_callee13$","_context13","prev","next","Math","random","Promise","resolve","setTimeout","stop","DsName","DsInfoName","KeyChain","components","init","_this$init$pass","_this$init$dek","_this$init$dek2","_this$init$dek3","_this$init$dek4","_this$init$dek5","_this$init$dek6","_this$init$dek7","_this$init$dek8","_classCallCheck","pass","Error","concat","set","started","_createClass","key","value","isStarted","_start","_callee","dsname","_callee$","_context","getDatastore","has","sent","importPeer","getPeerId","start","get","cached","ERR_INVALID_PARAMETERS","_createKey","_callee2","type","size","exists","keyInfo","keypair","kid","pem","batch","_args2","_callee2$","_context2","undefined","ERR_INVALID_KEY_NAME","ERR_INVALID_KEY_TYPE","ERR_KEY_ALREADY_EXISTS","t0","toLowerCase","Number","isSafeInteger","ERR_INVALID_KEY_SIZE","abrupt","id","export","put","JSON","stringify","commit","t1","createKey","_x","_x2","_listKeys","_callee3","query","info","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_callee3$","_context3","prefix","_asyncIterator","done","push","parse","return","finish","listKeys","_findKeyById","_callee4","keys","_callee4$","_context4","find","k","findKeyById","_x3","_findKeyByName","_callee5","res","_callee5$","_context5","error","ERR_KEY_NOT_FOUND","findKeyByName","_x4","_removeKey","_callee6","_callee6$","_context6","delete","removeKey","_x5","_renameKey","_callee7","oldName","newName","oldDsname","newDsname","oldInfoName","newInfoName","_callee7$","_context7","ERR_OLD_KEY_NAME_INVALID","ERR_NEW_KEY_NAME_INVALID","renameKey","_x6","_x7","_exportKey","_callee8","password","privateKey","_callee8$","_context8","ERR_PASSWORD_REQUIRED","exportKey","_x8","_x9","_importKey2","_callee9","_callee9$","_context9","ERR_PEM_REQUIRED","ERR_CANNOT_READ_KEY","_x10","_x11","_x12","_importPeer","_callee10","peer","_callee10$","_context10","ERR_MISSING_PRIVATE_KEY","_x13","_x14","_getPrivateKey","_callee11","_callee11$","_context11","getPrivateKey","_x15","_rotateKeychainPass","_callee12","oldPass","newPass","_this$init$dek9","_this$init$dek10","_this$init$dek11","_this$init$dek12","oldDek","newDek","_iterator2","_step2","keyAsPEM","_callee12$","_context12","ERR_INVALID_OLD_PASS_TYPE","ERR_INVALID_NEW_PASS_TYPE","ERR_INVALID_PASS_LENGTH","_createForOfIteratorHelper","s","n","e","f","rotateKeychainPass","_x16","_x17","generateOptions","options","Object","assign","saltLength","ceil"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/keychain/index.ts"],"sourcesContent":["/* eslint max-nested-callbacks: [\"error\", 5] */\n\nimport { logger } from '@libp2p/logger'\nimport sanitize from 'sanitize-filename'\nimport mergeOptions from 'merge-options'\nimport { Key } from 'interface-datastore/key'\nimport { CMS } from './cms.js'\nimport errCode from 'err-code'\nimport { codes } from '../errors.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { generateKeyPair, importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { Components } from '@libp2p/components'\nimport { pbkdf2, randomBytes } from '@libp2p/crypto'\nimport type { Startable } from '@libp2p/interfaces/dist/src/startable'\n\nconst log = logger('libp2p:keychain')\n\nexport interface DekOptions {\n  hash: string\n  salt: string\n  iterationCount: number\n  keyLength: number\n}\n\nexport interface KeyChainInit {\n  pass?: string\n  dek?: DekOptions\n}\n\n/**\n * Information about a key.\n */\nexport interface KeyInfo {\n  /**\n   * The universally unique key id\n   */\n  id: string\n\n  /**\n   * The local key name.\n   */\n  name: string\n}\n\nconst keyPrefix = '/pkcs8/'\nconst infoPrefix = '/info/'\nconst privates = new WeakMap<object, { dek: string }>()\n\n// NIST SP 800-132\nconst NIST = {\n  minKeyLength: 112 / 8,\n  minSaltLength: 128 / 8,\n  minIterationCount: 1000\n}\n\nconst defaultOptions = {\n  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n  dek: {\n    keyLength: 512 / 8,\n    iterationCount: 10000,\n    salt: 'you should override this value with a crypto secure random number',\n    hash: 'sha2-512'\n  }\n}\n\nfunction validateKeyName (name: string) {\n  if (name == null) {\n    return false\n  }\n  if (typeof name !== 'string') {\n    return false\n  }\n  return name === sanitize(name.trim()) && name.length > 0\n}\n\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n */\nasync function randomDelay () {\n  const min = 200\n  const max = 1000\n  const delay = Math.random() * (max - min) + min\n\n  await new Promise(resolve => setTimeout(resolve, delay))\n}\n\n/**\n * Converts a key name into a datastore name\n */\nfunction DsName (name: string) {\n  return new Key(keyPrefix + name)\n}\n\n/**\n * Converts a key name into a datastore info name\n */\nfunction DsInfoName (name: string) {\n  return new Key(infoPrefix + name)\n}\n\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nexport class KeyChain implements Startable {\n  private readonly components: Components\n  private init: KeyChainInit\n  private started: boolean\n\n  /**\n   * Creates a new instance of a key chain\n   */\n  constructor (components: Components, init: KeyChainInit) {\n    this.components = components\n    this.init = mergeOptions(defaultOptions, init)\n\n    // Enforce NIST SP 800-132\n    if (this.init.pass != null && this.init.pass?.length < 20) {\n      throw new Error('pass must be least 20 characters')\n    }\n    if (this.init.dek?.keyLength != null && this.init.dek.keyLength < NIST.minKeyLength) {\n      throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`)\n    }\n    if (this.init.dek?.salt?.length != null && this.init.dek.salt.length < NIST.minSaltLength) {\n      throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`)\n    }\n    if (this.init.dek?.iterationCount != null && this.init.dek.iterationCount < NIST.minIterationCount) {\n      throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`)\n    }\n\n    const dek = this.init.pass != null && this.init.dek?.salt != null\n      ? pbkdf2(\n        this.init.pass,\n        this.init.dek?.salt,\n        this.init.dek?.iterationCount,\n        this.init.dek?.keyLength,\n        this.init.dek?.hash)\n      : ''\n\n    privates.set(this, { dek })\n    this.started = false\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  async start () {\n    const dsname = DsInfoName('self')\n\n    if (!(await this.components.getDatastore().has(dsname))) {\n      await this.importPeer('self', this.components.getPeerId())\n    }\n\n    this.started = true\n  }\n\n  stop () {\n    this.started = false\n  }\n\n  /**\n   * Gets an object that can encrypt/decrypt protected data\n   * using the Cryptographic Message Syntax (CMS).\n   *\n   * CMS describes an encapsulation syntax for data protection. It\n   * is used to digitally sign, digest, authenticate, or encrypt\n   * arbitrary message content\n   */\n  get cms () {\n    const cached = privates.get(this)\n\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    const dek = cached.dek\n\n    return new CMS(this, dek)\n  }\n\n  /**\n   * Generates the options for a keychain.  A random salt is produced.\n   *\n   * @returns {object}\n   */\n  static generateOptions (): KeyChainInit {\n    const options = Object.assign({}, defaultOptions)\n    const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3 // no base64 padding\n    options.dek.salt = uint8ArrayToString(randomBytes(saltLength), 'base64')\n    return options\n  }\n\n  /**\n   * Gets an object that can encrypt/decrypt protected data.\n   * The default options for a keychain.\n   *\n   * @returns {object}\n   */\n  static get options () {\n    return defaultOptions\n  }\n\n  /**\n   * Create a new key.\n   *\n   * @param {string} name - The local key name; cannot already exist.\n   * @param {string} type - One of the key types; 'rsa'.\n   * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only\n   */\n  async createKey (name: string, type: 'RSA' | 'Ed25519', size = 2048): Promise<KeyInfo> {\n    if (!validateKeyName(name) || name === 'self') {\n      await randomDelay()\n      throw errCode(new Error('Invalid key name'), codes.ERR_INVALID_KEY_NAME)\n    }\n\n    if (typeof type !== 'string') {\n      await randomDelay()\n      throw errCode(new Error('Invalid key type'), codes.ERR_INVALID_KEY_TYPE)\n    }\n\n    const dsname = DsName(name)\n    const exists = await this.components.getDatastore().has(dsname)\n    if (exists) {\n      await randomDelay()\n      throw errCode(new Error('Key name already exists'), codes.ERR_KEY_ALREADY_EXISTS)\n    }\n\n    switch (type.toLowerCase()) {\n      case 'rsa':\n        if (!Number.isSafeInteger(size) || size < 2048) {\n          await randomDelay()\n          throw errCode(new Error('Invalid RSA key size'), codes.ERR_INVALID_KEY_SIZE)\n        }\n        break\n      default:\n        break\n    }\n\n    let keyInfo\n    try {\n      const keypair = await generateKeyPair(type, size)\n      const kid = await keypair.id()\n      const cached = privates.get(this)\n\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n      }\n\n      const dek = cached.dek\n      const pem = await keypair.export(dek)\n      keyInfo = {\n        name: name,\n        id: kid\n      }\n      const batch = this.components.getDatastore().batch()\n      batch.put(dsname, uint8ArrayFromString(pem))\n      batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)))\n\n      await batch.commit()\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n\n    return keyInfo\n  }\n\n  /**\n   * List all the keys.\n   *\n   * @returns {Promise<KeyInfo[]>}\n   */\n  async listKeys () {\n    const query = {\n      prefix: infoPrefix\n    }\n\n    const info = []\n    for await (const value of this.components.getDatastore().query(query)) {\n      info.push(JSON.parse(uint8ArrayToString(value.value)))\n    }\n\n    return info\n  }\n\n  /**\n   * Find a key by it's id\n   */\n  async findKeyById (id: string): Promise<KeyInfo> {\n    try {\n      const keys = await this.listKeys()\n      return keys.find((k) => k.id === id)\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n  }\n\n  /**\n   * Find a key by it's name.\n   *\n   * @param {string} name - The local key name.\n   * @returns {Promise<KeyInfo>}\n   */\n  async findKeyByName (name: string): Promise<KeyInfo> {\n    if (!validateKeyName(name)) {\n      await randomDelay()\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME)\n    }\n\n    const dsname = DsInfoName(name)\n    try {\n      const res = await this.components.getDatastore().get(dsname)\n      return JSON.parse(uint8ArrayToString(res))\n    } catch (err: any) {\n      await randomDelay()\n      log.error(err)\n      throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND)\n    }\n  }\n\n  /**\n   * Remove an existing key.\n   *\n   * @param {string} name - The local key name; must already exist.\n   * @returns {Promise<KeyInfo>}\n   */\n  async removeKey (name: string) {\n    if (!validateKeyName(name) || name === 'self') {\n      await randomDelay()\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME)\n    }\n    const dsname = DsName(name)\n    const keyInfo = await this.findKeyByName(name)\n    const batch = this.components.getDatastore().batch()\n    batch.delete(dsname)\n    batch.delete(DsInfoName(name))\n    await batch.commit()\n    return keyInfo\n  }\n\n  /**\n   * Rename a key\n   *\n   * @param {string} oldName - The old local key name; must already exist.\n   * @param {string} newName - The new local key name; must not already exist.\n   * @returns {Promise<KeyInfo>}\n   */\n  async renameKey (oldName: string, newName: string): Promise<KeyInfo> {\n    if (!validateKeyName(oldName) || oldName === 'self') {\n      await randomDelay()\n      throw errCode(new Error(`Invalid old key name '${oldName}'`), codes.ERR_OLD_KEY_NAME_INVALID)\n    }\n    if (!validateKeyName(newName) || newName === 'self') {\n      await randomDelay()\n      throw errCode(new Error(`Invalid new key name '${newName}'`), codes.ERR_NEW_KEY_NAME_INVALID)\n    }\n    const oldDsname = DsName(oldName)\n    const newDsname = DsName(newName)\n    const oldInfoName = DsInfoName(oldName)\n    const newInfoName = DsInfoName(newName)\n\n    const exists = await this.components.getDatastore().has(newDsname)\n    if (exists) {\n      await randomDelay()\n      throw errCode(new Error(`Key '${newName}' already exists`), codes.ERR_KEY_ALREADY_EXISTS)\n    }\n\n    try {\n      const pem = await this.components.getDatastore().get(oldDsname)\n      const res = await this.components.getDatastore().get(oldInfoName)\n\n      const keyInfo = JSON.parse(uint8ArrayToString(res))\n      keyInfo.name = newName\n      const batch = this.components.getDatastore().batch()\n      batch.put(newDsname, pem)\n      batch.put(newInfoName, uint8ArrayFromString(JSON.stringify(keyInfo)))\n      batch.delete(oldDsname)\n      batch.delete(oldInfoName)\n      await batch.commit()\n      return keyInfo\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n  }\n\n  /**\n   * Export an existing key as a PEM encrypted PKCS #8 string\n   */\n  async exportKey (name: string, password: string) {\n    if (!validateKeyName(name)) {\n      await randomDelay()\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME)\n    }\n    if (password == null) {\n      await randomDelay()\n      throw errCode(new Error('Password is required'), codes.ERR_PASSWORD_REQUIRED)\n    }\n\n    const dsname = DsName(name)\n    try {\n      const res = await this.components.getDatastore().get(dsname)\n      const pem = uint8ArrayToString(res)\n      const cached = privates.get(this)\n\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n      }\n\n      const dek = cached.dek\n      const privateKey = await importKey(pem, dek)\n      return await privateKey.export(password)\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n  }\n\n  /**\n   * Import a new key from a PEM encoded PKCS #8 string\n   *\n   * @param {string} name - The local key name; must not already exist.\n   * @param {string} pem - The PEM encoded PKCS #8 string\n   * @param {string} password - The password.\n   * @returns {Promise<KeyInfo>}\n   */\n  async importKey (name: string, pem: string, password: string): Promise<KeyInfo> {\n    if (!validateKeyName(name) || name === 'self') {\n      await randomDelay()\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME)\n    }\n    if (pem == null) {\n      await randomDelay()\n      throw errCode(new Error('PEM encoded key is required'), codes.ERR_PEM_REQUIRED)\n    }\n    const dsname = DsName(name)\n    const exists = await this.components.getDatastore().has(dsname)\n    if (exists) {\n      await randomDelay()\n      throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS)\n    }\n\n    let privateKey\n    try {\n      privateKey = await importKey(pem, password)\n    } catch (err: any) {\n      await randomDelay()\n      throw errCode(new Error('Cannot read the key, most likely the password is wrong'), codes.ERR_CANNOT_READ_KEY)\n    }\n\n    let kid\n    try {\n      kid = await privateKey.id()\n      const cached = privates.get(this)\n\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n      }\n\n      const dek = cached.dek\n      pem = await privateKey.export(dek)\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n\n    const keyInfo = {\n      name: name,\n      id: kid\n    }\n    const batch = this.components.getDatastore().batch()\n    batch.put(dsname, uint8ArrayFromString(pem))\n    batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)))\n    await batch.commit()\n\n    return keyInfo\n  }\n\n  /**\n   * Import a peer key\n   */\n  async importPeer (name: string, peer: PeerId): Promise<KeyInfo> {\n    try {\n      if (!validateKeyName(name)) {\n        throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME)\n      }\n      if (peer == null) {\n        throw errCode(new Error('PeerId is required'), codes.ERR_MISSING_PRIVATE_KEY)\n      }\n      if (peer.privateKey == null) {\n        throw errCode(new Error('PeerId.privKey is required'), codes.ERR_MISSING_PRIVATE_KEY)\n      }\n\n      const privateKey = await unmarshalPrivateKey(peer.privateKey)\n\n      const dsname = DsName(name)\n      const exists = await this.components.getDatastore().has(dsname)\n      if (exists) {\n        await randomDelay()\n        throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS)\n      }\n\n      const cached = privates.get(this)\n\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n      }\n\n      const dek = cached.dek\n      const pem = await privateKey.export(dek)\n      const keyInfo: KeyInfo = {\n        name: name,\n        id: peer.toString()\n      }\n      const batch = this.components.getDatastore().batch()\n      batch.put(dsname, uint8ArrayFromString(pem))\n      batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)))\n      await batch.commit()\n      return keyInfo\n    } catch (err: any) {\n      await randomDelay()\n      throw err\n    }\n  }\n\n  /**\n   * Gets the private key as PEM encoded PKCS #8 string\n   */\n  async getPrivateKey (name: string): Promise<string> {\n    if (!validateKeyName(name)) {\n      await randomDelay()\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME)\n    }\n\n    try {\n      const dsname = DsName(name)\n      const res = await this.components.getDatastore().get(dsname)\n      return uint8ArrayToString(res)\n    } catch (err: any) {\n      await randomDelay()\n      log.error(err)\n      throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND)\n    }\n  }\n\n  /**\n   * Rotate keychain password and re-encrypt all associated keys\n   */\n  async rotateKeychainPass (oldPass: string, newPass: string) {\n    if (typeof oldPass !== 'string') {\n      await randomDelay()\n      throw errCode(new Error(`Invalid old pass type '${typeof oldPass}'`), codes.ERR_INVALID_OLD_PASS_TYPE)\n    }\n    if (typeof newPass !== 'string') {\n      await randomDelay()\n      throw errCode(new Error(`Invalid new pass type '${typeof newPass}'`), codes.ERR_INVALID_NEW_PASS_TYPE)\n    }\n    if (newPass.length < 20) {\n      await randomDelay()\n      throw errCode(new Error(`Invalid pass length ${newPass.length}`), codes.ERR_INVALID_PASS_LENGTH)\n    }\n    log('recreating keychain')\n    const cached = privates.get(this)\n\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    const oldDek = cached.dek\n    this.init.pass = newPass\n    const newDek = newPass != null && this.init.dek?.salt != null\n      ? pbkdf2(\n        newPass,\n        this.init.dek.salt,\n        this.init.dek?.iterationCount,\n        this.init.dek?.keyLength,\n        this.init.dek?.hash)\n      : ''\n    privates.set(this, { dek: newDek })\n    const keys = await this.listKeys()\n    for (const key of keys) {\n      const res = await this.components.getDatastore().get(DsName(key.name))\n      const pem = uint8ArrayToString(res)\n      const privateKey = await importKey(pem, oldDek)\n      const password = newDek.toString()\n      const keyAsPEM = await privateKey.export(password)\n\n      // Update stored key\n      const batch = this.components.getDatastore().batch()\n      const keyInfo = {\n        name: key.name,\n        id: key.id\n      }\n      batch.put(DsName(key.name), uint8ArrayFromString(keyAsPEM))\n      batch.put(DsInfoName(key.name), uint8ArrayFromString(JSON.stringify(keyInfo)))\n      await batch.commit()\n    }\n    log('keychain reconstructed')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
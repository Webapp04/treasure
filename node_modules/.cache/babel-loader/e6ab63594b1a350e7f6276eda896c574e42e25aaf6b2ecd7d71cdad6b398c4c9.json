{"ast":null,"code":"export var second = 1000;\nexport var minute = 60 * second;\n// Protocol identifiers\nexport var FloodsubID = '/floodsub/1.0.0';\n/**\n * The protocol ID for version 1.0.0 of the Gossipsub protocol\n * It is advertised along with GossipsubIDv11 for backwards compatability\n */\nexport var GossipsubIDv10 = '/meshsub/1.0.0';\n/**\n * The protocol ID for version 1.1.0 of the Gossipsub protocol\n * See the spec for details about how v1.1.0 compares to v1.0.0:\n * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\n */\nexport var GossipsubIDv11 = '/meshsub/1.1.0';\n// Overlay parameters\n/**\n * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,\n * each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.\n */\nexport var GossipsubD = 6;\n/**\n * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at\n * the next heartbeat.\n */\nexport var GossipsubDlo = 4;\n/**\n * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.\n */\nexport var GossipsubDhi = 12;\n/**\n * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.\n * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are\n * chosen randomly.\n */\nexport var GossipsubDscore = 4;\n/**\n * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.\n * When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming\n * our mesh with incoming connections.\n *\n * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.\n */\nexport var GossipsubDout = 2;\n// Gossip parameters\n/**\n * GossipsubHistoryLength controls the size of the message cache used for gossip.\n * The message cache will remember messages for GossipsubHistoryLength heartbeats.\n */\nexport var GossipsubHistoryLength = 5;\n/**\n * GossipsubHistoryGossip controls how many cached message ids we will advertise in\n * IHAVE gossip messages. When asked for our seen message IDs, we will return\n * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between\n * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages\n * that will be expired by the time they're requested.\n *\n * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to\n * avoid a runtime panic.\n */\nexport var GossipsubHistoryGossip = 3;\n/**\n * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual\n * number may be more, depending on GossipsubGossipFactor and how many peers we're\n * connected to.\n */\nexport var GossipsubDlazy = 6;\n/**\n * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or\n * GossipsubDlazy, whichever is greater.\n */\nexport var GossipsubGossipFactor = 0.25;\n/**\n * GossipsubGossipRetransmission controls how many times we will allow a peer to request\n * the same message id through IWANT gossip before we start ignoring them. This is designed\n * to prevent peers from spamming us with requests and wasting our resources.\n */\nexport var GossipsubGossipRetransmission = 3;\n// Heartbeat interval\n/**\n * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins\n * after the router is initialized.\n */\nexport var GossipsubHeartbeatInitialDelay = 100;\n/**\n * GossipsubHeartbeatInterval controls the time between heartbeats.\n */\nexport var GossipsubHeartbeatInterval = second;\n/**\n * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been\n * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,\n * we'll delete the fanout map for that topic.\n */\nexport var GossipsubFanoutTTL = minute;\n/**\n * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.\n * When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n * send them signed peer records for up to GossipsubPrunePeers other peers that we\n * know of.\n */\nexport var GossipsubPrunePeers = 16;\n/**\n * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long\n * a peer must wait before attempting to graft into our mesh again after being pruned.\n * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know\n * the minimum time to wait. Peers running older versions may not send a backoff time,\n * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff\n * before attempting to re-graft.\n */\nexport var GossipsubPruneBackoff = minute;\n/**\n * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired\n * backoff timers.\n */\nexport var GossipsubPruneBackoffTicks = 15;\n/**\n * GossipsubConnectors controls the number of active connection attempts for peers obtained through PX.\n */\nexport var GossipsubConnectors = 8;\n/**\n * GossipsubMaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\n */\nexport var GossipsubMaxPendingConnections = 128;\n/**\n * GossipsubConnectionTimeout controls the timeout for connection attempts.\n */\nexport var GossipsubConnectionTimeout = 30 * second;\n/**\n * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n * that are not currently connected.\n */\nexport var GossipsubDirectConnectTicks = 300;\n/**\n * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers\n */\nexport var GossipsubDirectConnectInitialDelay = second;\n/**\n * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some\n * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n * below a threshold\n */\nexport var GossipsubOpportunisticGraftTicks = 60;\n/**\n * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.\n */\nexport var GossipsubOpportunisticGraftPeers = 2;\n/**\n * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,\n * then there is an extra score penalty applied to the peer through P7.\n */\nexport var GossipsubGraftFloodThreshold = 10 * second;\n/**\n * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;\n * with the defaults this is 1666 messages/s.\n */\nexport var GossipsubMaxIHaveLength = 5000;\n/**\n * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\n */\nexport var GossipsubMaxIHaveMessages = 10;\n/**\n * Time to wait for a message requested through IWANT following an IHAVE advertisement.\n * If the message is not received within this window, a broken promise is declared and\n * the router may apply bahavioural penalties.\n */\nexport var GossipsubIWantFollowupTime = 3 * second;\n/**\n * Time in milliseconds to keep message ids in the seen cache\n */\nexport var GossipsubSeenTTL = 2 * minute;\nexport var TimeCacheDuration = 120 * 1000;\nexport var ERR_TOPIC_VALIDATOR_REJECT = 'ERR_TOPIC_VALIDATOR_REJECT';\nexport var ERR_TOPIC_VALIDATOR_IGNORE = 'ERR_TOPIC_VALIDATOR_IGNORE';\n/**\n * If peer score is better than this, we accept messages from this peer\n * within ACCEPT_FROM_WHITELIST_DURATION_MS from the last time computing score.\n **/\nexport var ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE = 0;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept up to this\n * number of messages from that peer.\n */\nexport var ACCEPT_FROM_WHITELIST_MAX_MESSAGES = 128;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept messages from\n * this peer up to this time duration.\n */\nexport var ACCEPT_FROM_WHITELIST_DURATION_MS = 1000;\n/**\n * The default MeshMessageDeliveriesWindow to be used in metrics.\n */\nexport var DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS = 1000;","map":{"version":3,"names":["second","minute","FloodsubID","GossipsubIDv10","GossipsubIDv11","GossipsubD","GossipsubDlo","GossipsubDhi","GossipsubDscore","GossipsubDout","GossipsubHistoryLength","GossipsubHistoryGossip","GossipsubDlazy","GossipsubGossipFactor","GossipsubGossipRetransmission","GossipsubHeartbeatInitialDelay","GossipsubHeartbeatInterval","GossipsubFanoutTTL","GossipsubPrunePeers","GossipsubPruneBackoff","GossipsubPruneBackoffTicks","GossipsubConnectors","GossipsubMaxPendingConnections","GossipsubConnectionTimeout","GossipsubDirectConnectTicks","GossipsubDirectConnectInitialDelay","GossipsubOpportunisticGraftTicks","GossipsubOpportunisticGraftPeers","GossipsubGraftFloodThreshold","GossipsubMaxIHaveLength","GossipsubMaxIHaveMessages","GossipsubIWantFollowupTime","GossipsubSeenTTL","TimeCacheDuration","ERR_TOPIC_VALIDATOR_REJECT","ERR_TOPIC_VALIDATOR_IGNORE","ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE","ACCEPT_FROM_WHITELIST_MAX_MESSAGES","ACCEPT_FROM_WHITELIST_DURATION_MS","DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS"],"sources":["../../src/constants.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAO,IAAMA,MAAM,GAAG,IAAI;AAC1B,OAAO,IAAMC,MAAM,GAAG,EAAE,GAAGD,MAAM;AAEjC;AAEA,OAAO,IAAME,UAAU,GAAG,iBAAiB;AAE3C;;;;AAIA,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAE9C;;;;;AAKA,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAE9C;AAEA;;;;;AAKA,OAAO,IAAMC,UAAU,GAAG,CAAC;AAE3B;;;;;AAKA,OAAO,IAAMC,YAAY,GAAG,CAAC;AAE7B;;;;AAIA,OAAO,IAAMC,YAAY,GAAG,EAAE;AAE9B;;;;;AAKA,OAAO,IAAMC,eAAe,GAAG,CAAC;AAEhC;;;;;;;;AAQA,OAAO,IAAMC,aAAa,GAAG,CAAC;AAE9B;AAEA;;;;AAIA,OAAO,IAAMC,sBAAsB,GAAG,CAAC;AAEvC;;;;;;;;;;AAUA,OAAO,IAAMC,sBAAsB,GAAG,CAAC;AAEvC;;;;;;AAMA,OAAO,IAAMC,cAAc,GAAG,CAAC;AAE/B;;;;;AAKA,OAAO,IAAMC,qBAAqB,GAAG,IAAI;AAEzC;;;;;AAKA,OAAO,IAAMC,6BAA6B,GAAG,CAAC;AAE9C;AAEA;;;;AAIA,OAAO,IAAMC,8BAA8B,GAAG,GAAG;AAEjD;;;AAGA,OAAO,IAAMC,0BAA0B,GAAGhB,MAAM;AAEhD;;;;;AAKA,OAAO,IAAMiB,kBAAkB,GAAGhB,MAAM;AAExC;;;;;;AAMA,OAAO,IAAMiB,mBAAmB,GAAG,EAAE;AAErC;;;;;;;;AAQA,OAAO,IAAMC,qBAAqB,GAAGlB,MAAM;AAE3C;;;;AAIA,OAAO,IAAMmB,0BAA0B,GAAG,EAAE;AAE5C;;;AAGA,OAAO,IAAMC,mBAAmB,GAAG,CAAC;AAEpC;;;AAGA,OAAO,IAAMC,8BAA8B,GAAG,GAAG;AAEjD;;;AAGA,OAAO,IAAMC,0BAA0B,GAAG,EAAE,GAAGvB,MAAM;AAErD;;;;AAIA,OAAO,IAAMwB,2BAA2B,GAAG,GAAG;AAE9C;;;AAGA,OAAO,IAAMC,kCAAkC,GAAGzB,MAAM;AAExD;;;;;;AAMA,OAAO,IAAM0B,gCAAgC,GAAG,EAAE;AAElD;;;AAGA,OAAO,IAAMC,gCAAgC,GAAG,CAAC;AAEjD;;;;AAIA,OAAO,IAAMC,4BAA4B,GAAG,EAAE,GAAG5B,MAAM;AAEvD;;;;;;;AAOA,OAAO,IAAM6B,uBAAuB,GAAG,IAAI;AAE3C;;;AAGA,OAAO,IAAMC,yBAAyB,GAAG,EAAE;AAE3C;;;;;AAKA,OAAO,IAAMC,0BAA0B,GAAG,CAAC,GAAG/B,MAAM;AAEpD;;;AAGA,OAAO,IAAMgC,gBAAgB,GAAG,CAAC,GAAG/B,MAAM;AAE1C,OAAO,IAAMgC,iBAAiB,GAAG,GAAG,GAAG,IAAI;AAE3C,OAAO,IAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,IAAMC,0BAA0B,GAAG,4BAA4B;AAEtE;;;;AAIA,OAAO,IAAMC,qCAAqC,GAAG,CAAC;AAEtD;;;;AAIA,OAAO,IAAMC,kCAAkC,GAAG,GAAG;AAErD;;;;AAIA,OAAO,IAAMC,iCAAiC,GAAG,IAAI;AAErD;;;AAGA,OAAO,IAAMC,8CAA8C,GAAG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}
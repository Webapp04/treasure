{"ast":null,"code":"var _slicedToArray = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nvar RateLimiterRes = require('./RateLimiterRes');\nvar incrTtlLuaScript = \"redis.call('set', KEYS[1], 0, 'EX', ARGV[2], 'NX') local consumed = redis.call('incrby', KEYS[1], ARGV[1]) local ttl = redis.call('pttl', KEYS[1]) if ttl == -1 then   redis.call('expire', KEYS[1], ARGV[2])   ttl = 1000 * ARGV[2] end return {consumed, ttl} \";\nvar RateLimiterRedis = /*#__PURE__*/function (_RateLimiterStoreAbst) {\n  \"use strict\";\n\n  _inherits(RateLimiterRedis, _RateLimiterStoreAbst);\n  var _super = _createSuper(RateLimiterRedis);\n  /**\n   *\n   * @param {Object} opts\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   redis: RedisClient\n   *   rejectIfRedisNotReady: boolean = false - reject / invoke insuranceLimiter immediately when redis connection is not \"ready\"\n   * }\n   */\n  function RateLimiterRedis(opts) {\n    var _this;\n    _classCallCheck(this, RateLimiterRedis);\n    _this = _super.call(this, opts);\n    if (opts.redis) {\n      _this.client = opts.redis;\n    } else {\n      _this.client = opts.storeClient;\n    }\n    _this._rejectIfRedisNotReady = !!opts.rejectIfRedisNotReady;\n    if (typeof _this.client.defineCommand === 'function') {\n      _this.client.defineCommand(\"rlflxIncr\", {\n        numberOfKeys: 1,\n        lua: incrTtlLuaScript\n      });\n    }\n    return _this;\n  }\n\n  /**\n   * Prevent actual redis call if redis connection is not ready\n   * Because of different connection state checks for ioredis and node-redis, only this clients would be actually checked.\n   * For any other clients all the requests would be passed directly to redis client\n   * @return {boolean}\n   * @private\n   */\n  _createClass(RateLimiterRedis, [{\n    key: \"_isRedisReady\",\n    value: function _isRedisReady() {\n      if (!this._rejectIfRedisNotReady) {\n        return true;\n      }\n      // ioredis client\n      if (this.client.status && this.client.status !== 'ready') {\n        return false;\n      }\n      // node-redis client\n      if (typeof this.client.isReady === 'function' && !this.client.isReady()) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"_getRateLimiterRes\",\n    value: function _getRateLimiterRes(rlKey, changedPoints, result) {\n      var _result = _slicedToArray(result, 2),\n        consumed = _result[0],\n        resTtlMs = _result[1];\n      // Support ioredis results format\n      if (Array.isArray(consumed)) {\n        var _consumed = consumed;\n        var _consumed2 = _slicedToArray(_consumed, 2);\n        consumed = _consumed2[1];\n        var _resTtlMs = resTtlMs;\n        var _resTtlMs2 = _slicedToArray(_resTtlMs, 2);\n        resTtlMs = _resTtlMs2[1];\n      }\n      var res = new RateLimiterRes();\n      res.consumedPoints = parseInt(consumed);\n      res.isFirstInDuration = res.consumedPoints === changedPoints;\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n      res.msBeforeNext = resTtlMs;\n      return res;\n    }\n  }, {\n    key: \"_upsert\",\n    value: function _upsert(rlKey, points, msDuration) {\n      var _this2 = this;\n      var forceExpire = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      return new Promise(function (resolve, reject) {\n        if (!_this2._isRedisReady()) {\n          return reject(new Error('Redis connection is not ready'));\n        }\n        var secDuration = Math.floor(msDuration / 1000);\n        var multi = _this2.client.multi();\n        if (forceExpire) {\n          if (secDuration > 0) {\n            multi.set(rlKey, points, 'EX', secDuration);\n          } else {\n            multi.set(rlKey, points);\n          }\n          multi.pttl(rlKey).exec(function (err, res) {\n            if (err) {\n              return reject(err);\n            }\n            return resolve(res);\n          });\n        } else {\n          if (secDuration > 0) {\n            var incrCallback = function incrCallback(err, result) {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(result);\n            };\n            if (typeof _this2.client.rlflxIncr === 'function') {\n              _this2.client.rlflxIncr(rlKey, points, secDuration, incrCallback);\n            } else {\n              _this2.client.eval(incrTtlLuaScript, 1, rlKey, points, secDuration, incrCallback);\n            }\n          } else {\n            multi.incrby(rlKey, points).pttl(rlKey).exec(function (err, res) {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(res);\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(rlKey) {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        if (!_this3._isRedisReady()) {\n          return reject(new Error('Redis connection is not ready'));\n        }\n        _this3.client.multi().get(rlKey).pttl(rlKey).exec(function (err, res) {\n          if (err) {\n            reject(err);\n          } else {\n            var _res = _slicedToArray(res, 1),\n              points = _res[0];\n            if (points === null) {\n              return resolve(null);\n            }\n            resolve(res);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(rlKey) {\n      var _this4 = this;\n      return new Promise(function (resolve, reject) {\n        _this4.client.del(rlKey, function (err, res) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(res > 0);\n          }\n        });\n      });\n    }\n  }]);\n  return RateLimiterRedis;\n}(RateLimiterStoreAbstract);\nmodule.exports = RateLimiterRedis;","map":{"version":3,"names":["RateLimiterStoreAbstract","require","RateLimiterRes","incrTtlLuaScript","RateLimiterRedis","_RateLimiterStoreAbst","_inherits","_super","_createSuper","opts","_this","_classCallCheck","call","redis","client","storeClient","_rejectIfRedisNotReady","rejectIfRedisNotReady","defineCommand","numberOfKeys","lua","_createClass","key","value","_isRedisReady","status","isReady","_getRateLimiterRes","rlKey","changedPoints","result","_result","_slicedToArray","consumed","resTtlMs","Array","isArray","_consumed","_consumed2","_resTtlMs","_resTtlMs2","res","consumedPoints","parseInt","isFirstInDuration","remainingPoints","Math","max","points","msBeforeNext","_upsert","msDuration","_this2","forceExpire","arguments","length","undefined","Promise","resolve","reject","Error","secDuration","floor","multi","set","pttl","exec","err","incrCallback","rlflxIncr","eval","incrby","_get","_this3","get","_res","_delete","_this4","del","module","exports"],"sources":["/Users/apple/Documents/treasure/node_modules/rate-limiter-flexible/lib/RateLimiterRedis.js"],"sourcesContent":["const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nconst incrTtlLuaScript = `redis.call('set', KEYS[1], 0, 'EX', ARGV[2], 'NX') \\\nlocal consumed = redis.call('incrby', KEYS[1], ARGV[1]) \\\nlocal ttl = redis.call('pttl', KEYS[1]) \\\nif ttl == -1 then \\\n  redis.call('expire', KEYS[1], ARGV[2]) \\\n  ttl = 1000 * ARGV[2] \\\nend \\\nreturn {consumed, ttl} \\\n`;\n\nclass RateLimiterRedis extends RateLimiterStoreAbstract {\n  /**\n   *\n   * @param {Object} opts\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   redis: RedisClient\n   *   rejectIfRedisNotReady: boolean = false - reject / invoke insuranceLimiter immediately when redis connection is not \"ready\"\n   * }\n   */\n  constructor(opts) {\n    super(opts);\n    if (opts.redis) {\n      this.client = opts.redis;\n    } else {\n      this.client = opts.storeClient;\n    }\n\n    this._rejectIfRedisNotReady = !!opts.rejectIfRedisNotReady;\n\n    if (typeof this.client.defineCommand === 'function') {\n      this.client.defineCommand(\"rlflxIncr\", {\n        numberOfKeys: 1,\n        lua: incrTtlLuaScript,\n      });\n    }\n  }\n\n  /**\n   * Prevent actual redis call if redis connection is not ready\n   * Because of different connection state checks for ioredis and node-redis, only this clients would be actually checked.\n   * For any other clients all the requests would be passed directly to redis client\n   * @return {boolean}\n   * @private\n   */\n  _isRedisReady() {\n    if (!this._rejectIfRedisNotReady) {\n      return true;\n    }\n    // ioredis client\n    if (this.client.status && this.client.status !== 'ready') {\n      return false;\n    }\n    // node-redis client\n    if (typeof this.client.isReady === 'function' && !this.client.isReady()) {\n      return false;\n    }\n    return true;\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    let [consumed, resTtlMs] = result;\n    // Support ioredis results format\n    if (Array.isArray(consumed)) {\n      [, consumed] = consumed;\n      [, resTtlMs] = resTtlMs;\n    }\n\n    const res = new RateLimiterRes();\n    res.consumedPoints = parseInt(consumed);\n    res.isFirstInDuration = res.consumedPoints === changedPoints;\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = resTtlMs;\n\n    return res;\n  }\n\n  _upsert(rlKey, points, msDuration, forceExpire = false) {\n    return new Promise((resolve, reject) => {\n      if (!this._isRedisReady()) {\n        return reject(new Error('Redis connection is not ready'));\n      }\n\n      const secDuration = Math.floor(msDuration / 1000);\n      const multi = this.client.multi();\n      if (forceExpire) {\n        if (secDuration > 0) {\n          multi.set(rlKey, points, 'EX', secDuration);\n        } else {\n          multi.set(rlKey, points);\n        }\n\n        multi.pttl(rlKey)\n          .exec((err, res) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve(res);\n          });\n      } else {\n        if (secDuration > 0) {\n          const incrCallback = function(err, result) {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve(result);\n          };\n\n          if (typeof this.client.rlflxIncr === 'function') {\n            this.client.rlflxIncr(rlKey, points, secDuration, incrCallback);\n          } else {\n            this.client.eval(incrTtlLuaScript, 1, rlKey, points, secDuration, incrCallback);\n          }\n        } else {\n          multi.incrby(rlKey, points)\n            .pttl(rlKey)\n            .exec((err, res) => {\n              if (err) {\n                return reject(err);\n              }\n\n              return resolve(res);\n            });\n        }\n      }\n    });\n  }\n\n  _get(rlKey) {\n    return new Promise((resolve, reject) => {\n      if (!this._isRedisReady()) {\n        return reject(new Error('Redis connection is not ready'));\n      }\n\n      this.client\n        .multi()\n        .get(rlKey)\n        .pttl(rlKey)\n        .exec((err, res) => {\n          if (err) {\n            reject(err);\n          } else {\n            const [points] = res;\n            if (points === null) {\n              return resolve(null)\n            }\n\n            resolve(res);\n          }\n        });\n    });\n  }\n\n  _delete(rlKey) {\n    return new Promise((resolve, reject) => {\n      this.client.del(rlKey, (err, res) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(res > 0);\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = RateLimiterRedis;\n"],"mappings":";;;;;AAAA,IAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AACtE,IAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAElD,IAAME,gBAAgB,qQAQrB;AAAC,IAEIC,gBAAgB,0BAAAC,qBAAA;EAAA;;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAAA,iBAAYK,IAAI,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,gBAAA;IAChBM,KAAA,GAAAH,MAAA,CAAAK,IAAA,OAAMH,IAAI;IACV,IAAIA,IAAI,CAACI,KAAK,EAAE;MACdH,KAAA,CAAKI,MAAM,GAAGL,IAAI,CAACI,KAAK;IAC1B,CAAC,MAAM;MACLH,KAAA,CAAKI,MAAM,GAAGL,IAAI,CAACM,WAAW;IAChC;IAEAL,KAAA,CAAKM,sBAAsB,GAAG,CAAC,CAACP,IAAI,CAACQ,qBAAqB;IAE1D,IAAI,OAAOP,KAAA,CAAKI,MAAM,CAACI,aAAa,KAAK,UAAU,EAAE;MACnDR,KAAA,CAAKI,MAAM,CAACI,aAAa,CAAC,WAAW,EAAE;QACrCC,YAAY,EAAE,CAAC;QACfC,GAAG,EAAEjB;MACP,CAAC,CAAC;IACJ;IAAC,OAAAO,KAAA;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANEW,YAAA,CAAAjB,gBAAA;IAAAkB,GAAA;IAAAC,KAAA,EAOA,SAAAC,cAAA,EAAgB;MACd,IAAI,CAAC,IAAI,CAACR,sBAAsB,EAAE;QAChC,OAAO,IAAI;MACb;MACA;MACA,IAAI,IAAI,CAACF,MAAM,CAACW,MAAM,IAAI,IAAI,CAACX,MAAM,CAACW,MAAM,KAAK,OAAO,EAAE;QACxD,OAAO,KAAK;MACd;MACA;MACA,IAAI,OAAO,IAAI,CAACX,MAAM,CAACY,OAAO,KAAK,UAAU,IAAI,CAAC,IAAI,CAACZ,MAAM,CAACY,OAAO,CAAC,CAAC,EAAE;QACvE,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAI,mBAAmBC,KAAK,EAAEC,aAAa,EAAEC,MAAM,EAAE;MAC/C,IAAAC,OAAA,GAAAC,cAAA,CAA2BF,MAAM;QAA5BG,QAAQ,GAAAF,OAAA;QAAEG,QAAQ,GAAAH,OAAA;MACvB;MACA,IAAII,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;QAAA,IAAAI,SAAA,GACZJ,QAAQ;QAAA,IAAAK,UAAA,GAAAN,cAAA,CAAAK,SAAA;QAApBJ,QAAQ,GAAAK,UAAA;QAAA,IAAAC,SAAA,GACIL,QAAQ;QAAA,IAAAM,UAAA,GAAAR,cAAA,CAAAO,SAAA;QAApBL,QAAQ,GAAAM,UAAA;MACb;MAEA,IAAMC,GAAG,GAAG,IAAIvC,cAAc,CAAC,CAAC;MAChCuC,GAAG,CAACC,cAAc,GAAGC,QAAQ,CAACV,QAAQ,CAAC;MACvCQ,GAAG,CAACG,iBAAiB,GAAGH,GAAG,CAACC,cAAc,KAAKb,aAAa;MAC5DY,GAAG,CAACI,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,MAAM,GAAGP,GAAG,CAACC,cAAc,EAAE,CAAC,CAAC;MACnED,GAAG,CAACQ,YAAY,GAAGf,QAAQ;MAE3B,OAAOO,GAAG;IACZ;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAED,SAAA2B,QAAQtB,KAAK,EAAEoB,MAAM,EAAEG,UAAU,EAAuB;MAAA,IAAAC,MAAA;MAAA,IAArBC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MACpD,OAAO,IAAIG,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtC,IAAI,CAACP,MAAI,CAAC5B,aAAa,CAAC,CAAC,EAAE;UACzB,OAAOmC,MAAM,CAAC,IAAIC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC3D;QAEA,IAAMC,WAAW,GAAGf,IAAI,CAACgB,KAAK,CAACX,UAAU,GAAG,IAAI,CAAC;QACjD,IAAMY,KAAK,GAAGX,MAAI,CAACtC,MAAM,CAACiD,KAAK,CAAC,CAAC;QACjC,IAAIV,WAAW,EAAE;UACf,IAAIQ,WAAW,GAAG,CAAC,EAAE;YACnBE,KAAK,CAACC,GAAG,CAACpC,KAAK,EAAEoB,MAAM,EAAE,IAAI,EAAEa,WAAW,CAAC;UAC7C,CAAC,MAAM;YACLE,KAAK,CAACC,GAAG,CAACpC,KAAK,EAAEoB,MAAM,CAAC;UAC1B;UAEAe,KAAK,CAACE,IAAI,CAACrC,KAAK,CAAC,CACdsC,IAAI,CAAC,UAACC,GAAG,EAAE1B,GAAG,EAAK;YAClB,IAAI0B,GAAG,EAAE;cACP,OAAOR,MAAM,CAACQ,GAAG,CAAC;YACpB;YAEA,OAAOT,OAAO,CAACjB,GAAG,CAAC;UACrB,CAAC,CAAC;QACN,CAAC,MAAM;UACL,IAAIoB,WAAW,GAAG,CAAC,EAAE;YACnB,IAAMO,YAAY,GAAG,SAAfA,YAAYA,CAAYD,GAAG,EAAErC,MAAM,EAAE;cACzC,IAAIqC,GAAG,EAAE;gBACP,OAAOR,MAAM,CAACQ,GAAG,CAAC;cACpB;cAEA,OAAOT,OAAO,CAAC5B,MAAM,CAAC;YACxB,CAAC;YAED,IAAI,OAAOsB,MAAI,CAACtC,MAAM,CAACuD,SAAS,KAAK,UAAU,EAAE;cAC/CjB,MAAI,CAACtC,MAAM,CAACuD,SAAS,CAACzC,KAAK,EAAEoB,MAAM,EAAEa,WAAW,EAAEO,YAAY,CAAC;YACjE,CAAC,MAAM;cACLhB,MAAI,CAACtC,MAAM,CAACwD,IAAI,CAACnE,gBAAgB,EAAE,CAAC,EAAEyB,KAAK,EAAEoB,MAAM,EAAEa,WAAW,EAAEO,YAAY,CAAC;YACjF;UACF,CAAC,MAAM;YACLL,KAAK,CAACQ,MAAM,CAAC3C,KAAK,EAAEoB,MAAM,CAAC,CACxBiB,IAAI,CAACrC,KAAK,CAAC,CACXsC,IAAI,CAAC,UAACC,GAAG,EAAE1B,GAAG,EAAK;cAClB,IAAI0B,GAAG,EAAE;gBACP,OAAOR,MAAM,CAACQ,GAAG,CAAC;cACpB;cAEA,OAAOT,OAAO,CAACjB,GAAG,CAAC;YACrB,CAAC,CAAC;UACN;QACF;MACF,CAAC,CAAC;IACJ;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAED,SAAAiD,KAAK5C,KAAK,EAAE;MAAA,IAAA6C,MAAA;MACV,OAAO,IAAIhB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtC,IAAI,CAACc,MAAI,CAACjD,aAAa,CAAC,CAAC,EAAE;UACzB,OAAOmC,MAAM,CAAC,IAAIC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC3D;QAEAa,MAAI,CAAC3D,MAAM,CACRiD,KAAK,CAAC,CAAC,CACPW,GAAG,CAAC9C,KAAK,CAAC,CACVqC,IAAI,CAACrC,KAAK,CAAC,CACXsC,IAAI,CAAC,UAACC,GAAG,EAAE1B,GAAG,EAAK;UAClB,IAAI0B,GAAG,EAAE;YACPR,MAAM,CAACQ,GAAG,CAAC;UACb,CAAC,MAAM;YACL,IAAAQ,IAAA,GAAA3C,cAAA,CAAiBS,GAAG;cAAbO,MAAM,GAAA2B,IAAA;YACb,IAAI3B,MAAM,KAAK,IAAI,EAAE;cACnB,OAAOU,OAAO,CAAC,IAAI,CAAC;YACtB;YAEAA,OAAO,CAACjB,GAAG,CAAC;UACd;QACF,CAAC,CAAC;MACN,CAAC,CAAC;IACJ;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAED,SAAAqD,QAAQhD,KAAK,EAAE;MAAA,IAAAiD,MAAA;MACb,OAAO,IAAIpB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCkB,MAAI,CAAC/D,MAAM,CAACgE,GAAG,CAAClD,KAAK,EAAE,UAACuC,GAAG,EAAE1B,GAAG,EAAK;UACnC,IAAI0B,GAAG,EAAE;YACPR,MAAM,CAACQ,GAAG,CAAC;UACb,CAAC,MAAM;YACLT,OAAO,CAACjB,GAAG,GAAG,CAAC,CAAC;UAClB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EAAC;EAAA,OAAArC,gBAAA;AAAA,EA5J4BJ,wBAAwB;AA+JvD+E,MAAM,CAACC,OAAO,GAAG5E,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import { LongBits } from 'longbits';\nimport { allocUnsafe } from 'uint8arrays/alloc';\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nexport var unsigned = {\n  encodingLength: function encodingLength(value) {\n    if (value < N1) {\n      return 1;\n    }\n    if (value < N2) {\n      return 2;\n    }\n    if (value < N3) {\n      return 3;\n    }\n    if (value < N4) {\n      return 4;\n    }\n    if (value < N5) {\n      return 5;\n    }\n    if (value < N6) {\n      return 6;\n    }\n    if (value < N7) {\n      return 7;\n    }\n    if (value < N8) {\n      return 8;\n    }\n    if (value < N9) {\n      return 9;\n    }\n    return 10;\n  },\n  encode: function encode(value, buf) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n      throw new RangeError('Could not encode varint');\n    }\n    if (buf == null) {\n      buf = allocUnsafe(unsigned.encodingLength(value));\n    }\n    LongBits.fromNumber(value).toBytes(buf, offset);\n    return buf;\n  },\n  decode: function decode(buf) {\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return LongBits.fromBytes(buf, offset).toNumber(true);\n  }\n};\nexport var signed = {\n  encodingLength: function encodingLength(value) {\n    if (value < 0) {\n      return 10; // 10 bytes per spec - https://developers.google.com/protocol-buffers/docs/encoding#signed-ints\n    }\n\n    return unsigned.encodingLength(value);\n  },\n  encode: function encode(value, buf, offset) {\n    if (buf == null) {\n      buf = allocUnsafe(signed.encodingLength(value));\n    }\n    if (value < 0) {\n      LongBits.fromNumber(value).toBytes(buf, offset);\n      return buf;\n    }\n    return unsigned.encode(value, buf, offset);\n  },\n  decode: function decode(buf) {\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return LongBits.fromBytes(buf, offset).toNumber(false);\n  }\n};\nexport var zigzag = {\n  encodingLength: function encodingLength(value) {\n    return unsigned.encodingLength(value >= 0 ? value * 2 : value * -2 - 1);\n  },\n  // @ts-expect-error\n  encode: function encode(value, buf, offset) {\n    value = value >= 0 ? value * 2 : value * -2 - 1;\n    return unsigned.encode(value, buf, offset);\n  },\n  decode: function decode(buf) {\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var value = unsigned.decode(buf, offset);\n    return (value & 1) !== 0 ? (value + 1) / -2 : value / 2;\n  }\n};","map":{"version":3,"names":["LongBits","allocUnsafe","N1","Math","pow","N2","N3","N4","N5","N6","N7","N8","N9","unsigned","encodingLength","value","encode","buf","offset","arguments","length","undefined","Number","MAX_SAFE_INTEGER","RangeError","fromNumber","toBytes","decode","fromBytes","toNumber","signed","zigzag"],"sources":["/Users/apple/Documents/treasure/node_modules/uint8-varint/src/index.ts"],"sourcesContent":["import type { Uint8ArrayList } from 'uint8arraylist'\nimport { LongBits } from 'longbits'\nimport { allocUnsafe } from 'uint8arrays/alloc'\n\nconst N1 = Math.pow(2, 7)\nconst N2 = Math.pow(2, 14)\nconst N3 = Math.pow(2, 21)\nconst N4 = Math.pow(2, 28)\nconst N5 = Math.pow(2, 35)\nconst N6 = Math.pow(2, 42)\nconst N7 = Math.pow(2, 49)\nconst N8 = Math.pow(2, 56)\nconst N9 = Math.pow(2, 63)\n\ninterface VarintCodec {\n  encodingLength: (value: number) => number\n  encode: ((value: number) => Uint8Array) & ((value: number, buf: Uint8Array, offset?: number) => Uint8Array) & ((value: number, buf: Uint8ArrayList, offset?: number) => Uint8ArrayList)\n  decode: (buf: Uint8ArrayList | Uint8Array, offset?: number) => number\n}\n\nexport const unsigned: VarintCodec = {\n  encodingLength  (value: number): number {\n    if (value < N1) {\n      return 1\n    }\n\n    if (value < N2) {\n      return 2\n    }\n\n    if (value < N3) {\n      return 3\n    }\n\n    if (value < N4) {\n      return 4\n    }\n\n    if (value < N5) {\n      return 5\n    }\n\n    if (value < N6) {\n      return 6\n    }\n\n    if (value < N7) {\n      return 7\n    }\n\n    if (value < N8) {\n      return 8\n    }\n\n    if (value < N9) {\n      return 9\n    }\n\n    return 10\n  },\n\n  encode (value: number, buf?: any, offset: number = 0) {\n    if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n      throw new RangeError('Could not encode varint')\n    }\n\n    if (buf == null) {\n      buf = allocUnsafe(unsigned.encodingLength(value))\n    }\n\n    LongBits.fromNumber(value).toBytes(buf, offset)\n\n    return buf\n  },\n\n  decode (buf: Uint8ArrayList | Uint8Array, offset: number = 0): number {\n    return LongBits.fromBytes(buf, offset).toNumber(true)\n  }\n}\n\nexport const signed: VarintCodec = {\n  encodingLength (value: number): number {\n    if (value < 0) {\n      return 10 // 10 bytes per spec - https://developers.google.com/protocol-buffers/docs/encoding#signed-ints\n    }\n\n    return unsigned.encodingLength(value)\n  },\n\n  encode (value: any, buf?: any, offset?: any) {\n    if (buf == null) {\n      buf = allocUnsafe(signed.encodingLength(value))\n    }\n\n    if (value < 0) {\n      LongBits.fromNumber(value).toBytes(buf, offset)\n\n      return buf\n    }\n\n    return unsigned.encode(value, buf, offset)\n  },\n\n  decode (buf: Uint8ArrayList | Uint8Array, offset = 0): number {\n    return LongBits.fromBytes(buf, offset).toNumber(false)\n  }\n}\n\nexport const zigzag: VarintCodec = {\n  encodingLength (value: number): number {\n    return unsigned.encodingLength(value >= 0 ? value * 2 : value * -2 - 1)\n  },\n\n  // @ts-expect-error\n  encode (value: any, buf?: any, offset?: any) {\n    value = value >= 0 ? value * 2 : (value * -2) - 1\n\n    return unsigned.encode(value, buf, offset)\n  },\n\n  decode (buf: Uint8ArrayList | Uint8Array, offset = 0): number {\n    const value = unsigned.decode(buf, offset)\n\n    return (value & 1) !== 0 ? (value + 1) / -2 : value / 2\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
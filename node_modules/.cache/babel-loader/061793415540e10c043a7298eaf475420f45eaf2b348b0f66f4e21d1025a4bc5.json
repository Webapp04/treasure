{"ast":null,"code":"import _toConsumableArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { ALPHA, K, DEFAULT_QUERY_TIMEOUT } from '../constants.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { queryPath } from './query-path.js';\nimport merge from 'it-merge';\nimport { setMaxListeners } from 'events';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { Components } from '@libp2p/components';\nimport { PeerSet } from '@libp2p/peer-collections';\nvar METRIC_RUNNING_QUERIES = 'running-queries';\n/**\n * Keeps track of all running queries\n */\nexport var QueryManager = /*#__PURE__*/function () {\n  function QueryManager(init) {\n    _classCallCheck(this, QueryManager);\n    this.components = new Components();\n    var _init$lan = init.lan,\n      lan = _init$lan === void 0 ? false : _init$lan,\n      _init$disjointPaths = init.disjointPaths,\n      disjointPaths = _init$disjointPaths === void 0 ? K : _init$disjointPaths,\n      _init$alpha = init.alpha,\n      alpha = _init$alpha === void 0 ? ALPHA : _init$alpha;\n    this.disjointPaths = disjointPaths !== null && disjointPaths !== void 0 ? disjointPaths : K;\n    this.controllers = new Set();\n    this.running = false;\n    this.alpha = alpha !== null && alpha !== void 0 ? alpha : ALPHA;\n    this.lan = lan;\n    this.queries = 0;\n  }\n  _createClass(QueryManager, [{\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.running;\n    }\n    /**\n     * Starts the query manager\n     */\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.running = true;\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n    /**\n     * Stops all queries\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _iterator2, _step2, controller;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.running = false;\n              _iterator2 = _createForOfIteratorHelper(this.controllers);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  controller = _step2.value;\n                  controller.abort();\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              this.controllers.clear();\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n  }, {\n    key: \"run\",\n    value: function run(key, peers, queryFunc) {\n      var _this = this;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var timeoutController, abortController, signals, signal, log, peersToQuery, startTime, cleanUp, _this$components$getM, peersSeen, paths, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, event, _this$components$getM2;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this.running) {\n                _context3.next = 2;\n                break;\n              }\n              throw new Error('QueryManager not started');\n            case 2:\n              if (options.signal == null) {\n                // don't let queries run forever\n                timeoutController = new TimeoutController(DEFAULT_QUERY_TIMEOUT);\n                options.signal = timeoutController.signal;\n                // this signal will get listened to for network requests, etc\n                // so make sure we don't make a lot of noise in the logs\n                try {\n                  if (setMaxListeners != null) {\n                    setMaxListeners(Infinity, timeoutController.signal);\n                  }\n                } catch (_unused) {} // fails on node < 15.4\n              }\n              // allow us to stop queries on shut down\n              abortController = new AbortController();\n              _this.controllers.add(abortController);\n              signals = [abortController.signal];\n              if (options.signal != null) {\n                signals.push(options.signal);\n              }\n              signal = anySignal(signals); // this signal will get listened to for every invocation of queryFunc\n              // so make sure we don't make a lot of noise in the logs\n              try {\n                if (setMaxListeners != null) {\n                  setMaxListeners(Infinity, signal);\n                }\n              } catch (_unused2) {} // fails on node < 15.4\n              log = logger(\"libp2p:kad-dht:\".concat(_this.lan ? 'lan' : 'wan', \":query:\") + uint8ArrayToString(key, 'base58btc')); // query a subset of peers up to `kBucketSize / 2` in length\n              peersToQuery = peers.slice(0, Math.min(_this.disjointPaths, peers.length));\n              startTime = Date.now();\n              cleanUp = new EventEmitter();\n              _context3.prev = 13;\n              log('query:start');\n              _this.queries++;\n              (_this$components$getM = _this.components.getMetrics()) === null || _this$components$getM === void 0 ? void 0 : _this$components$getM.updateComponentMetric({\n                system: 'libp2p',\n                component: \"kad-dht-\".concat(_this.lan ? 'lan' : 'wan'),\n                metric: METRIC_RUNNING_QUERIES,\n                value: _this.queries\n              });\n              if (!(peers.length === 0)) {\n                _context3.next = 20;\n                break;\n              }\n              log.error('Running query with no peers');\n              return _context3.abrupt(\"return\");\n            case 20:\n              // make sure we don't get trapped in a loop\n              peersSeen = new PeerSet(); // Create query paths from the starting peers\n              paths = peersToQuery.map(function (peer, index) {\n                return queryPath({\n                  key: key,\n                  startingPeer: peer,\n                  ourPeerId: _this.components.getPeerId(),\n                  signal: signal,\n                  query: queryFunc,\n                  pathIndex: index,\n                  numPaths: peersToQuery.length,\n                  alpha: _this.alpha,\n                  cleanUp: cleanUp,\n                  queryFuncTimeout: options.queryFuncTimeout,\n                  log: log,\n                  peersSeen: peersSeen\n                });\n              }); // Execute the query along each disjoint path and yield their results as they become available\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context3.prev = 24;\n              _iterator = _asyncIterator(merge.apply(void 0, _toConsumableArray(paths)));\n            case 26:\n              _context3.next = 28;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 28:\n              if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n                _context3.next = 36;\n                break;\n              }\n              event = _step.value;\n              _context3.next = 32;\n              return event;\n            case 32:\n              if (event.name === 'QUERY_ERROR') {\n                log('error', event.error);\n              }\n            case 33:\n              _iteratorAbruptCompletion = false;\n              _context3.next = 26;\n              break;\n            case 36:\n              _context3.next = 42;\n              break;\n            case 38:\n              _context3.prev = 38;\n              _context3.t0 = _context3[\"catch\"](24);\n              _didIteratorError = true;\n              _iteratorError = _context3.t0;\n            case 42:\n              _context3.prev = 42;\n              _context3.prev = 43;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context3.next = 47;\n                break;\n              }\n              _context3.next = 47;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 47:\n              _context3.prev = 47;\n              if (!_didIteratorError) {\n                _context3.next = 50;\n                break;\n              }\n              throw _iteratorError;\n            case 50:\n              return _context3.finish(47);\n            case 51:\n              return _context3.finish(42);\n            case 52:\n              _context3.next = 60;\n              break;\n            case 54:\n              _context3.prev = 54;\n              _context3.t1 = _context3[\"catch\"](13);\n              if (!(!_this.running && _context3.t1.code === 'ERR_QUERY_ABORTED')) {\n                _context3.next = 59;\n                break;\n              }\n              _context3.next = 60;\n              break;\n            case 59:\n              throw _context3.t1;\n            case 60:\n              _context3.prev = 60;\n              _this.controllers.delete(abortController);\n              if (timeoutController != null) {\n                timeoutController.clear();\n              }\n              _this.queries--;\n              (_this$components$getM2 = _this.components.getMetrics()) === null || _this$components$getM2 === void 0 ? void 0 : _this$components$getM2.updateComponentMetric({\n                system: 'libp2p',\n                component: \"kad-dht-\".concat(_this.lan ? 'lan' : 'wan'),\n                metric: METRIC_RUNNING_QUERIES,\n                value: _this.queries\n              });\n              cleanUp.dispatchEvent(new CustomEvent('cleanup'));\n              log('query:done in %dms', Date.now() - startTime);\n              return _context3.finish(60);\n            case 68:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[13, 54, 60, 68], [24, 38, 42, 52], [43,, 47, 51]]);\n      }))();\n    }\n  }]);\n  return QueryManager;\n}();","map":{"version":3,"names":["TimeoutController","anySignal","ALPHA","K","DEFAULT_QUERY_TIMEOUT","toString","uint8ArrayToString","queryPath","merge","setMaxListeners","EventEmitter","CustomEvent","logger","Components","PeerSet","METRIC_RUNNING_QUERIES","QueryManager","init","_classCallCheck","components","_init$lan","lan","_init$disjointPaths","disjointPaths","_init$alpha","alpha","controllers","Set","running","queries","_createClass","key","value","isStarted","_start","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","stop","start","apply","arguments","_stop","_callee2","_iterator2","_step2","controller","_callee2$","_context2","_createForOfIteratorHelper","s","n","done","abort","err","e","f","clear","run","peers","queryFunc","_this","options","length","undefined","_wrapAsyncGenerator","_callee3","timeoutController","abortController","signals","signal","log","peersToQuery","startTime","cleanUp","_this$components$getM","peersSeen","paths","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","event","_this$components$getM2","_callee3$","_context3","Error","Infinity","_unused","AbortController","add","push","_unused2","concat","slice","Math","min","Date","now","getMetrics","updateComponentMetric","system","component","metric","error","abrupt","map","peer","index","startingPeer","ourPeerId","getPeerId","query","pathIndex","numPaths","queryFuncTimeout","_asyncIterator","_toConsumableArray","_awaitAsyncGenerator","sent","name","t0","return","finish","t1","code","delete","dispatchEvent"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/query/manager.ts"],"sourcesContent":["import { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\nimport {\n  ALPHA, K, DEFAULT_QUERY_TIMEOUT\n} from '../constants.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { queryPath } from './query-path.js'\nimport merge from 'it-merge'\nimport { setMaxListeners } from 'events'\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events'\nimport { logger } from '@libp2p/logger'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { QueryFunc } from './types.js'\nimport type { QueryOptions } from '@libp2p/interface-dht'\nimport { Components, Initializable } from '@libp2p/components'\nimport { PeerSet } from '@libp2p/peer-collections'\n\nconst METRIC_RUNNING_QUERIES = 'running-queries'\n\nexport interface CleanUpEvents {\n  'cleanup': CustomEvent\n}\n\nexport interface QueryManagerInit {\n  lan?: boolean\n  disjointPaths?: number\n  alpha?: number\n}\n\n/**\n * Keeps track of all running queries\n */\nexport class QueryManager implements Startable, Initializable {\n  private components: Components = new Components()\n  private readonly lan: boolean\n  public disjointPaths: number\n  private readonly alpha: number\n  private readonly controllers: Set<AbortController>\n  private running: boolean\n  private queries: number\n\n  constructor (init: QueryManagerInit) {\n    const { lan = false, disjointPaths = K, alpha = ALPHA } = init\n    this.disjointPaths = disjointPaths ?? K\n    this.controllers = new Set()\n    this.running = false\n    this.alpha = alpha ?? ALPHA\n    this.lan = lan\n    this.queries = 0\n  }\n\n  init (components: Components): void {\n    this.components = components\n  }\n\n  isStarted () {\n    return this.running\n  }\n\n  /**\n   * Starts the query manager\n   */\n  async start () {\n    this.running = true\n  }\n\n  /**\n   * Stops all queries\n   */\n  async stop () {\n    this.running = false\n\n    for (const controller of this.controllers) {\n      controller.abort()\n    }\n\n    this.controllers.clear()\n  }\n\n  async * run (key: Uint8Array, peers: PeerId[], queryFunc: QueryFunc, options: QueryOptions = {}) {\n    if (!this.running) {\n      throw new Error('QueryManager not started')\n    }\n\n    let timeoutController\n\n    if (options.signal == null) {\n      // don't let queries run forever\n      timeoutController = new TimeoutController(DEFAULT_QUERY_TIMEOUT)\n      options.signal = timeoutController.signal\n\n      // this signal will get listened to for network requests, etc\n      // so make sure we don't make a lot of noise in the logs\n      try {\n        if (setMaxListeners != null) {\n          setMaxListeners(Infinity, timeoutController.signal)\n        }\n      } catch {} // fails on node < 15.4\n    }\n\n    // allow us to stop queries on shut down\n    const abortController = new AbortController()\n    this.controllers.add(abortController)\n    const signals = [abortController.signal]\n\n    if (options.signal != null) {\n      signals.push(options.signal)\n    }\n\n    const signal = anySignal(signals)\n\n    // this signal will get listened to for every invocation of queryFunc\n    // so make sure we don't make a lot of noise in the logs\n    try {\n      if (setMaxListeners != null) {\n        setMaxListeners(Infinity, signal)\n      }\n    } catch {} // fails on node < 15.4\n\n    const log = logger(`libp2p:kad-dht:${this.lan ? 'lan' : 'wan'}:query:` + uint8ArrayToString(key, 'base58btc'))\n\n    // query a subset of peers up to `kBucketSize / 2` in length\n    const peersToQuery = peers.slice(0, Math.min(this.disjointPaths, peers.length))\n    const startTime = Date.now()\n    const cleanUp = new EventEmitter<CleanUpEvents>()\n\n    try {\n      log('query:start')\n      this.queries++\n      this.components.getMetrics()?.updateComponentMetric({\n        system: 'libp2p',\n        component: `kad-dht-${this.lan ? 'lan' : 'wan'}`,\n        metric: METRIC_RUNNING_QUERIES,\n        value: this.queries\n      })\n\n      if (peers.length === 0) {\n        log.error('Running query with no peers')\n        return\n      }\n\n      // make sure we don't get trapped in a loop\n      const peersSeen = new PeerSet()\n\n      // Create query paths from the starting peers\n      const paths = peersToQuery.map((peer, index) => {\n        return queryPath({\n          key,\n          startingPeer: peer,\n          ourPeerId: this.components.getPeerId(),\n          signal,\n          query: queryFunc,\n          pathIndex: index,\n          numPaths: peersToQuery.length,\n          alpha: this.alpha,\n          cleanUp,\n          queryFuncTimeout: options.queryFuncTimeout,\n          log,\n          peersSeen\n        })\n      })\n\n      // Execute the query along each disjoint path and yield their results as they become available\n      for await (const event of merge(...paths)) {\n        yield event\n\n        if (event.name === 'QUERY_ERROR') {\n          log('error', event.error)\n        }\n      }\n    } catch (err: any) {\n      if (!this.running && err.code === 'ERR_QUERY_ABORTED') {\n        // ignore query aborted errors that were thrown during query manager shutdown\n      } else {\n        throw err\n      }\n    } finally {\n      this.controllers.delete(abortController)\n\n      if (timeoutController != null) {\n        timeoutController.clear()\n      }\n\n      this.queries--\n      this.components.getMetrics()?.updateComponentMetric({\n        system: 'libp2p',\n        component: `kad-dht-${this.lan ? 'lan' : 'wan'}`,\n        metric: METRIC_RUNNING_QUERIES,\n        value: this.queries\n      })\n\n      cleanUp.dispatchEvent(new CustomEvent('cleanup'))\n      log('query:done in %dms', Date.now() - startTime)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays';\nimport { logger } from '../logger.js';\nimport { Nonce } from '../nonce.js';\nexport var AbstractHandshake = /*#__PURE__*/function () {\n  function AbstractHandshake(crypto) {\n    _classCallCheck(this, AbstractHandshake);\n    this.crypto = crypto;\n  }\n  _createClass(AbstractHandshake, [{\n    key: \"encryptWithAd\",\n    value: function encryptWithAd(cs, ad, plaintext) {\n      var e = this.encrypt(cs.k, cs.n, ad, plaintext);\n      cs.n.increment();\n      return e;\n    }\n  }, {\n    key: \"decryptWithAd\",\n    value: function decryptWithAd(cs, ad, ciphertext) {\n      var _this$decrypt = this.decrypt(cs.k, cs.n, ad, ciphertext),\n        plaintext = _this$decrypt.plaintext,\n        valid = _this$decrypt.valid;\n      if (valid) cs.n.increment();\n      return {\n        plaintext: plaintext,\n        valid: valid\n      };\n    }\n    // Cipher state related\n  }, {\n    key: \"hasKey\",\n    value: function hasKey(cs) {\n      return !this.isEmptyKey(cs.k);\n    }\n  }, {\n    key: \"createEmptyKey\",\n    value: function createEmptyKey() {\n      return new Uint8Array(32);\n    }\n  }, {\n    key: \"isEmptyKey\",\n    value: function isEmptyKey(k) {\n      var emptyKey = this.createEmptyKey();\n      return uint8ArrayEquals(emptyKey, k);\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(k, n, ad, plaintext) {\n      n.assertValue();\n      return this.crypto.chaCha20Poly1305Encrypt(plaintext, n.getBytes(), ad, k);\n    }\n  }, {\n    key: \"encryptAndHash\",\n    value: function encryptAndHash(ss, plaintext) {\n      var ciphertext;\n      if (this.hasKey(ss.cs)) {\n        ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n      } else {\n        ciphertext = plaintext;\n      }\n      this.mixHash(ss, ciphertext);\n      return ciphertext;\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(k, n, ad, ciphertext) {\n      n.assertValue();\n      var encryptedMessage = this.crypto.chaCha20Poly1305Decrypt(ciphertext, n.getBytes(), ad, k);\n      if (encryptedMessage) {\n        return {\n          plaintext: encryptedMessage,\n          valid: true\n        };\n      } else {\n        return {\n          plaintext: new Uint8Array(0),\n          valid: false\n        };\n      }\n    }\n  }, {\n    key: \"decryptAndHash\",\n    value: function decryptAndHash(ss, ciphertext) {\n      var plaintext;\n      var valid = true;\n      if (this.hasKey(ss.cs)) {\n        var _this$decryptWithAd = this.decryptWithAd(ss.cs, ss.h, ciphertext);\n        plaintext = _this$decryptWithAd.plaintext;\n        valid = _this$decryptWithAd.valid;\n      } else {\n        plaintext = ciphertext;\n      }\n      this.mixHash(ss, ciphertext);\n      return {\n        plaintext: plaintext,\n        valid: valid\n      };\n    }\n  }, {\n    key: \"dh\",\n    value: function dh(privateKey, publicKey) {\n      try {\n        var derivedU8 = this.crypto.generateX25519SharedKey(privateKey, publicKey);\n        if (derivedU8.length === 32) {\n          return derivedU8;\n        }\n        return derivedU8.subarray(0, 32);\n      } catch (e) {\n        var err = e;\n        logger(err.message);\n        return new Uint8Array(32);\n      }\n    }\n  }, {\n    key: \"mixHash\",\n    value: function mixHash(ss, data) {\n      ss.h = this.getHash(ss.h, data);\n    }\n  }, {\n    key: \"getHash\",\n    value: function getHash(a, b) {\n      var u = this.crypto.hashSHA256(uint8ArrayConcat([a, b], a.length + b.length));\n      return u;\n    }\n  }, {\n    key: \"mixKey\",\n    value: function mixKey(ss, ikm) {\n      var _this$crypto$getHKDF = this.crypto.getHKDF(ss.ck, ikm),\n        _this$crypto$getHKDF2 = _slicedToArray(_this$crypto$getHKDF, 2),\n        ck = _this$crypto$getHKDF2[0],\n        tempK = _this$crypto$getHKDF2[1];\n      ss.cs = this.initializeKey(tempK);\n      ss.ck = ck;\n    }\n  }, {\n    key: \"initializeKey\",\n    value: function initializeKey(k) {\n      return {\n        k: k,\n        n: new Nonce()\n      };\n    }\n    // Symmetric state related\n  }, {\n    key: \"initializeSymmetric\",\n    value: function initializeSymmetric(protocolName) {\n      var protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8');\n      var h = this.hashProtocolName(protocolNameBytes);\n      var ck = h;\n      var key = this.createEmptyKey();\n      var cs = this.initializeKey(key);\n      return {\n        cs: cs,\n        ck: ck,\n        h: h\n      };\n    }\n  }, {\n    key: \"hashProtocolName\",\n    value: function hashProtocolName(protocolName) {\n      if (protocolName.length <= 32) {\n        var h = new Uint8Array(32);\n        h.set(protocolName);\n        return h;\n      } else {\n        return this.getHash(protocolName, new Uint8Array(0));\n      }\n    }\n  }, {\n    key: \"split\",\n    value: function split(ss) {\n      var _this$crypto$getHKDF3 = this.crypto.getHKDF(ss.ck, new Uint8Array(0)),\n        _this$crypto$getHKDF4 = _slicedToArray(_this$crypto$getHKDF3, 2),\n        tempk1 = _this$crypto$getHKDF4[0],\n        tempk2 = _this$crypto$getHKDF4[1];\n      var cs1 = this.initializeKey(tempk1);\n      var cs2 = this.initializeKey(tempk2);\n      return {\n        cs1: cs1,\n        cs2: cs2\n      };\n    }\n  }, {\n    key: \"writeMessageRegular\",\n    value: function writeMessageRegular(cs, payload) {\n      var ciphertext = this.encryptWithAd(cs, new Uint8Array(0), payload);\n      var ne = this.createEmptyKey();\n      var ns = new Uint8Array(0);\n      return {\n        ne: ne,\n        ns: ns,\n        ciphertext: ciphertext\n      };\n    }\n  }, {\n    key: \"readMessageRegular\",\n    value: function readMessageRegular(cs, message) {\n      return this.decryptWithAd(cs, new Uint8Array(0), message.ciphertext);\n    }\n  }]);\n  return AbstractHandshake;\n}();","map":{"version":3,"names":["equals","uint8ArrayEquals","concat","uint8ArrayConcat","fromString","uint8ArrayFromString","logger","Nonce","AbstractHandshake","crypto","_classCallCheck","_createClass","key","value","encryptWithAd","cs","ad","plaintext","e","encrypt","k","n","increment","decryptWithAd","ciphertext","_this$decrypt","decrypt","valid","hasKey","isEmptyKey","createEmptyKey","Uint8Array","emptyKey","assertValue","chaCha20Poly1305Encrypt","getBytes","encryptAndHash","ss","h","mixHash","encryptedMessage","chaCha20Poly1305Decrypt","decryptAndHash","_this$decryptWithAd","dh","privateKey","publicKey","derivedU8","generateX25519SharedKey","length","subarray","err","message","data","getHash","a","b","u","hashSHA256","mixKey","ikm","_this$crypto$getHKDF","getHKDF","ck","_this$crypto$getHKDF2","_slicedToArray","tempK","initializeKey","initializeSymmetric","protocolName","protocolNameBytes","hashProtocolName","set","split","_this$crypto$getHKDF3","_this$crypto$getHKDF4","tempk1","tempk2","cs1","cs2","writeMessageRegular","payload","ne","ns","readMessageRegular"],"sources":["/Users/apple/Documents/treasure/node_modules/@chainsafe/libp2p-noise/src/handshakes/abstract-handshake.ts"],"sourcesContent":["import { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays'\nimport type { bytes, bytes32 } from '../@types/basic.js'\nimport type { CipherState, MessageBuffer, SymmetricState } from '../@types/handshake.js'\nimport type { ICryptoInterface } from '../crypto.js'\nimport { logger } from '../logger.js'\nimport { Nonce } from '../nonce.js'\n\nexport abstract class AbstractHandshake {\n  public crypto: ICryptoInterface\n\n  constructor (crypto: ICryptoInterface) {\n    this.crypto = crypto\n  }\n\n  public encryptWithAd (cs: CipherState, ad: Uint8Array, plaintext: Uint8Array): bytes {\n    const e = this.encrypt(cs.k, cs.n, ad, plaintext)\n    cs.n.increment()\n\n    return e\n  }\n\n  public decryptWithAd (cs: CipherState, ad: Uint8Array, ciphertext: Uint8Array): {plaintext: bytes, valid: boolean} {\n    const { plaintext, valid } = this.decrypt(cs.k, cs.n, ad, ciphertext)\n    if (valid) cs.n.increment()\n\n    return { plaintext, valid }\n  }\n\n  // Cipher state related\n  protected hasKey (cs: CipherState): boolean {\n    return !this.isEmptyKey(cs.k)\n  }\n\n  protected createEmptyKey (): bytes32 {\n    return new Uint8Array(32)\n  }\n\n  protected isEmptyKey (k: bytes32): boolean {\n    const emptyKey = this.createEmptyKey()\n    return uint8ArrayEquals(emptyKey, k)\n  }\n\n  protected encrypt (k: bytes32, n: Nonce, ad: Uint8Array, plaintext: Uint8Array): bytes {\n    n.assertValue()\n\n    return this.crypto.chaCha20Poly1305Encrypt(plaintext, n.getBytes(), ad, k)\n  }\n\n  protected encryptAndHash (ss: SymmetricState, plaintext: bytes): bytes {\n    let ciphertext\n    if (this.hasKey(ss.cs)) {\n      ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext)\n    } else {\n      ciphertext = plaintext\n    }\n\n    this.mixHash(ss, ciphertext)\n    return ciphertext\n  }\n\n  protected decrypt (k: bytes32, n: Nonce, ad: bytes, ciphertext: bytes): {plaintext: bytes, valid: boolean} {\n    n.assertValue()\n\n    const encryptedMessage = this.crypto.chaCha20Poly1305Decrypt(ciphertext, n.getBytes(), ad, k)\n\n    if (encryptedMessage) {\n      return {\n        plaintext: encryptedMessage,\n        valid: true\n      }\n    } else {\n      return {\n        plaintext: new Uint8Array(0),\n        valid: false\n      }\n    }\n  }\n\n  protected decryptAndHash (ss: SymmetricState, ciphertext: bytes): {plaintext: bytes, valid: boolean} {\n    let plaintext: bytes; let valid = true\n    if (this.hasKey(ss.cs)) {\n      ({ plaintext, valid } = this.decryptWithAd(ss.cs, ss.h, ciphertext))\n    } else {\n      plaintext = ciphertext\n    }\n\n    this.mixHash(ss, ciphertext)\n    return { plaintext, valid }\n  }\n\n  protected dh (privateKey: bytes32, publicKey: bytes32): bytes32 {\n    try {\n      const derivedU8 = this.crypto.generateX25519SharedKey(privateKey, publicKey)\n\n      if (derivedU8.length === 32) {\n        return derivedU8\n      }\n\n      return derivedU8.subarray(0, 32)\n    } catch (e) {\n      const err = e as Error\n      logger(err.message)\n      return new Uint8Array(32)\n    }\n  }\n\n  protected mixHash (ss: SymmetricState, data: bytes): void {\n    ss.h = this.getHash(ss.h, data)\n  }\n\n  protected getHash (a: Uint8Array, b: Uint8Array): bytes32 {\n    const u = this.crypto.hashSHA256(uint8ArrayConcat([a, b], a.length + b.length))\n    return u\n  }\n\n  protected mixKey (ss: SymmetricState, ikm: bytes32): void {\n    const [ck, tempK] = this.crypto.getHKDF(ss.ck, ikm)\n    ss.cs = this.initializeKey(tempK)\n    ss.ck = ck\n  }\n\n  protected initializeKey (k: bytes32): CipherState {\n    return { k, n: new Nonce() }\n  }\n\n  // Symmetric state related\n\n  protected initializeSymmetric (protocolName: string): SymmetricState {\n    const protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8')\n    const h = this.hashProtocolName(protocolNameBytes)\n\n    const ck = h\n    const key = this.createEmptyKey()\n    const cs: CipherState = this.initializeKey(key)\n\n    return { cs, ck, h }\n  }\n\n  protected hashProtocolName (protocolName: Uint8Array): bytes32 {\n    if (protocolName.length <= 32) {\n      const h = new Uint8Array(32)\n      h.set(protocolName)\n      return h\n    } else {\n      return this.getHash(protocolName, new Uint8Array(0))\n    }\n  }\n\n  protected split (ss: SymmetricState): {cs1: CipherState, cs2: CipherState} {\n    const [tempk1, tempk2] = this.crypto.getHKDF(ss.ck, new Uint8Array(0))\n    const cs1 = this.initializeKey(tempk1)\n    const cs2 = this.initializeKey(tempk2)\n\n    return { cs1, cs2 }\n  }\n\n  protected writeMessageRegular (cs: CipherState, payload: bytes): MessageBuffer {\n    const ciphertext = this.encryptWithAd(cs, new Uint8Array(0), payload)\n    const ne = this.createEmptyKey()\n    const ns = new Uint8Array(0)\n\n    return { ne, ns, ciphertext }\n  }\n\n  protected readMessageRegular (cs: CipherState, message: MessageBuffer): {plaintext: bytes, valid: boolean} {\n    return this.decryptWithAd(cs, new Uint8Array(0), message.ciphertext)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut(_ref) {\n  var repo = _ref.repo,\n    preload = _ref.preload;\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(obj) {\n      var options,\n        release,\n        buf,\n        hash,\n        cid,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return repo.gcLock.readLock();\n          case 3:\n            release = _context.sent;\n            _context.prev = 4;\n            buf = dagPB.encode(obj);\n            _context.next = 8;\n            return sha256.digest(buf);\n          case 8:\n            hash = _context.sent;\n            cid = CID.createV1(dagPB.code, hash);\n            _context.next = 12;\n            return repo.blocks.put(cid, buf, {\n              signal: options.signal\n            });\n          case 12:\n            if (options.preload !== false) {\n              preload(cid);\n            }\n            if (!options.pin) {\n              _context.next = 16;\n              break;\n            }\n            _context.next = 16;\n            return repo.pins.pinRecursively(cid, {\n              signal: options.signal\n            });\n          case 16:\n            return _context.abrupt(\"return\", cid);\n          case 17:\n            _context.prev = 17;\n            release();\n            return _context.finish(17);\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[4,, 17, 20]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n  return withTimeoutOption(put);\n}","map":{"version":3,"names":["dagPB","CID","sha256","withTimeoutOption","createPut","_ref","repo","preload","put","_x","_put","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","obj","options","release","buf","hash","cid","_args","wrap","_callee$","_context","prev","next","length","undefined","gcLock","readLock","sent","encode","digest","createV1","code","blocks","signal","pin","pins","pinRecursively","abrupt","finish","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/object/put.js"],"sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPB.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV1(dagPB.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,cAAc;AACrC,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAAC,IAAA,EAAqB;EAAA,IAAjBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EACxC;AACF;AACA;EAFE,SAGeC,GAAGA,CAAAC,EAAA;IAAA,OAAAC,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,KAAA;IAAAA,IAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAlB,SAAAC,QAAoBC,GAAG;MAAA,IAAAC,OAAA;QAAAC,OAAA;QAAAC,GAAA;QAAAC,IAAA;QAAAC,GAAA;QAAAC,KAAA,GAAAX,SAAA;MAAA,OAAAE,mBAAA,GAAAU,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAEV,OAAO,GAAAK,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OACbtB,IAAI,CAACyB,MAAM,CAACC,QAAQ,CAAC,CAAC;UAAA;YAAtCb,OAAO,GAAAO,QAAA,CAAAO,IAAA;YAAAP,QAAA,CAAAC,IAAA;YAGLP,GAAG,GAAGpB,KAAK,CAACkC,MAAM,CAACjB,GAAG,CAAC;YAAAS,QAAA,CAAAE,IAAA;YAAA,OACV1B,MAAM,CAACiC,MAAM,CAACf,GAAG,CAAC;UAAA;YAA/BC,IAAI,GAAAK,QAAA,CAAAO,IAAA;YACJX,GAAG,GAAGrB,GAAG,CAACmC,QAAQ,CAACpC,KAAK,CAACqC,IAAI,EAAEhB,IAAI,CAAC;YAAAK,QAAA,CAAAE,IAAA;YAAA,OAEpCtB,IAAI,CAACgC,MAAM,CAAC9B,GAAG,CAACc,GAAG,EAAEF,GAAG,EAAE;cAC9BmB,MAAM,EAAErB,OAAO,CAACqB;YAClB,CAAC,CAAC;UAAA;YAEF,IAAIrB,OAAO,CAACX,OAAO,KAAK,KAAK,EAAE;cAC7BA,OAAO,CAACe,GAAG,CAAC;YACd;YAAC,KAEGJ,OAAO,CAACsB,GAAG;cAAAd,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACPtB,IAAI,CAACmC,IAAI,CAACC,cAAc,CAACpB,GAAG,EAAE;cAClCiB,MAAM,EAAErB,OAAO,CAACqB;YAClB,CAAC,CAAC;UAAA;YAAA,OAAAb,QAAA,CAAAiB,MAAA,WAGGrB,GAAG;UAAA;YAAAI,QAAA,CAAAC,IAAA;YAEVR,OAAO,CAAC,CAAC;YAAA,OAAAO,QAAA,CAAAkB,MAAA;UAAA;UAAA;YAAA,OAAAlB,QAAA,CAAAmB,IAAA;QAAA;MAAA,GAAA7B,OAAA;IAAA,CAEZ;IAAA,OAAAN,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOT,iBAAiB,CAACK,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
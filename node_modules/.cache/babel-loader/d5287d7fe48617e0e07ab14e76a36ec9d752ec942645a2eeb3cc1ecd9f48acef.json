{"ast":null,"code":"import _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport mergeOpts from 'merge-options';\nimport { isTest } from 'ipfs-utils/src/env.js';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagJOSE from 'dag-jose';\nimport { identity } from 'multiformats/hashes/identity';\nimport { bases, hashes, codecs } from 'multiformats/basics';\nimport { initAssets } from 'ipfs-core-config/init-assets';\nimport { AlreadyInitializedError } from '../errors.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { createStart } from './start.js';\nimport { createStop } from './stop.js';\nimport { createDns } from './dns.js';\nimport { createIsOnline } from './is-online.js';\nimport { createResolve } from './resolve.js';\nimport { PinAPI } from './pin/index.js';\nimport { IPNSAPI } from './ipns.js';\nimport { NameAPI } from './name/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createLocal } from './refs/local.js';\nimport { BitswapAPI } from './bitswap/index.js';\nimport { BootstrapAPI } from './bootstrap/index.js';\nimport { BlockAPI } from './block/index.js';\nimport { RootAPI } from './root.js';\nimport { createVersion } from './version.js';\nimport { createId } from './id.js';\nimport { createConfig } from './config/index.js';\nimport { DagAPI } from './dag/index.js';\nimport { createPreloader } from '../preload.js';\nimport { createMfsPreloader } from '../mfs-preload.js';\nimport { createFiles } from './files/index.js';\nimport { KeyAPI } from './key/index.js';\nimport { ObjectAPI } from './object/index.js';\nimport { RepoAPI } from './repo/index.js';\nimport { StatsAPI } from './stats/index.js';\nimport { Storage } from './storage.js';\nimport { Network } from './network.js';\nimport { Service } from '../utils/service.js';\nimport { SwarmAPI } from './swarm/index.js';\nimport { createPing } from './ping.js';\nimport { createDht } from './dht.js';\nimport { createPubsub } from './pubsub.js';\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs';\nimport { Multihashes } from 'ipfs-core-utils/multihashes';\nimport { Multibases } from 'ipfs-core-utils/multibases';\nvar mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nvar log = logger('ipfs');\nvar IPNS_INIT_KEYSPACE_TIMEOUT = 30000;\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\nvar IPFS = /*#__PURE__*/function () {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  function IPFS(_ref2) {\n    var print = _ref2.print,\n      storage = _ref2.storage,\n      codecs = _ref2.codecs,\n      options = _ref2.options;\n    _classCallCheck(this, IPFS);\n    var peerId = storage.peerId,\n      repo = storage.repo,\n      keychain = storage.keychain;\n    var network = Service.create(Network);\n    var preload = createPreloader(options.preload);\n    var dns = createDns();\n    var isOnline = createIsOnline({\n      network: network\n    });\n    // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    var ipns = new IPNSAPI(options);\n\n    /** @type {MultihashHasher[]} */\n    var multihashHashers = Object.values(hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(function (hasher) {\n      return multihashHashers.push(hasher);\n    });\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n\n    /** @type {MultibaseCodec[]} */\n    var multibaseCodecs = Object.values(bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(function (base) {\n      return multibaseCodecs.push(base);\n    });\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    var pin = new PinAPI({\n      repo: repo,\n      codecs: codecs\n    });\n    var block = new BlockAPI({\n      codecs: codecs,\n      hashers: this.hashers,\n      preload: preload,\n      repo: repo\n    });\n    var name = new NameAPI({\n      dns: dns,\n      ipns: ipns,\n      repo: repo,\n      codecs: codecs,\n      peerId: peerId,\n      isOnline: isOnline,\n      keychain: keychain,\n      options: options\n    });\n    var resolve = createResolve({\n      repo: repo,\n      codecs: codecs,\n      bases: this.bases,\n      name: name\n    });\n    var dag = new DagAPI({\n      repo: repo,\n      codecs: codecs,\n      hashers: this.hashers,\n      preload: preload\n    });\n    var refs = Object.assign(createRefs({\n      repo: repo,\n      codecs: codecs,\n      resolve: resolve,\n      preload: preload\n    }), {\n      local: createLocal({\n        repo: storage.repo\n      })\n    });\n    var _RootAPI = new RootAPI({\n        preload: preload,\n        repo: repo,\n        options: options.EXPERIMENTAL,\n        hashers: this.hashers\n      }),\n      add = _RootAPI.add,\n      addAll = _RootAPI.addAll,\n      cat = _RootAPI.cat,\n      get = _RootAPI.get,\n      ls = _RootAPI.ls;\n    var files = createFiles({\n      repo: repo,\n      preload: preload,\n      hashers: this.hashers,\n      options: options\n    });\n    var mfsPreload = createMfsPreloader({\n      files: files,\n      preload: preload,\n      options: options.preload\n    });\n    this.preload = preload;\n    this.name = name;\n    this.ipns = ipns;\n    this.pin = pin;\n    this.resolve = resolve;\n    this.block = block;\n    this.refs = refs;\n    this.start = createStart({\n      network: network,\n      peerId: peerId,\n      repo: repo,\n      preload: preload,\n      ipns: ipns,\n      mfsPreload: mfsPreload,\n      print: print,\n      keychain: keychain,\n      hashers: this.hashers,\n      options: options\n    });\n    this.stop = createStop({\n      network: network,\n      preload: preload,\n      mfsPreload: mfsPreload,\n      ipns: ipns,\n      repo: repo\n    });\n    this.dht = createDht({\n      network: network,\n      repo: repo,\n      peerId: peerId\n    });\n    this.pubsub = createPubsub({\n      network: network,\n      config: options.config\n    });\n    this.dns = dns;\n    this.isOnline = isOnline;\n    this.id = createId({\n      network: network,\n      peerId: peerId\n    });\n    this.version = createVersion({\n      repo: repo\n    });\n    this.bitswap = new BitswapAPI({\n      network: network\n    });\n    this.bootstrap = new BootstrapAPI({\n      repo: repo\n    });\n    this.config = createConfig({\n      repo: repo\n    });\n    this.ping = createPing({\n      network: network\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new KeyAPI({\n      keychain: keychain\n    });\n    this.object = new ObjectAPI({\n      preload: preload,\n      codecs: codecs,\n      repo: repo\n    });\n    this.repo = new RepoAPI({\n      repo: repo,\n      hashers: this.hashers\n    });\n    this.stats = new StatsAPI({\n      repo: repo,\n      network: network\n    });\n    this.swarm = new SwarmAPI({\n      network: network\n    });\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get: function get() {\n        var net = network.try();\n        return net ? net.libp2p : undefined;\n      }\n    });\n\n    // unimplemented methods\n    var notImplemented = function notImplemented() {\n      return Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n    };\n    var notImplementedIter = /*#__PURE__*/function () {\n      var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function notImplementedIter() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // eslint-disable-line require-yield\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  _createClass(IPFS, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new AlreadyInitializedError();\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n  }]);\n  return IPFS;\n}();\n/**\n * @param {IPFS} ipfs\n */\nvar addEmptyDir = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ipfs) {\n    var buf, cid;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          buf = dagPB.encode({\n            Data: new UnixFS({\n              type: 'directory'\n            }).marshal(),\n            Links: []\n          });\n          _context3.next = 3;\n          return ipfs.block.put(buf, {\n            mhtype: 'sha2-256',\n            format: 'dag-pb'\n          });\n        case 3:\n          cid = _context3.sent;\n          _context3.next = 6;\n          return ipfs.pin.add(cid);\n        case 6:\n          return _context3.abrupt(\"return\", cid);\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function addEmptyDir(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * @returns {Options}\n */\nvar getDefaultOptions = function getDefaultOptions() {\n  return {\n    start: true,\n    EXPERIMENTAL: {},\n    preload: {\n      enabled: !isTest,\n      // preload by default, unless in test env\n      addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n    }\n  };\n};\n\n/**\n * @param {Options} options\n */\nexport function create() {\n  return _create.apply(this, arguments);\n}\nfunction _create() {\n  _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var options,\n      initOptions,\n      id,\n      blockCodecs,\n      multicodecs,\n      print,\n      storage,\n      config,\n      ipfs,\n      cid,\n      timeoutController,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n          options = mergeOptions(getDefaultOptions(), options);\n          initOptions = options.init || {};\n          /**\n           * @type {BlockCodec}\n           */\n          id = {\n            name: identity.name,\n            code: identity.code,\n            encode: function encode(id) {\n              return id;\n            },\n            decode: function decode(id) {\n              return id;\n            }\n          };\n          /** @type {BlockCodec[]} */\n          blockCodecs = Object.values(codecs);\n          [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat(options.ipld && options.ipld.codecs || []).forEach(function (codec) {\n            return blockCodecs.push(codec);\n          });\n          multicodecs = new Multicodecs({\n            codecs: blockCodecs,\n            loadCodec: options.ipld && options.ipld.loadCodec\n          }); // eslint-disable-next-line no-console\n          print = options.silent ? log : console.log;\n          log('creating repo');\n          _context4.next = 11;\n          return Storage.start(print, multicodecs, options);\n        case 11:\n          storage = _context4.sent;\n          log('getting repo config');\n          _context4.next = 15;\n          return storage.repo.config.getAll();\n        case 15:\n          config = _context4.sent;\n          ipfs = new IPFS({\n            storage: storage,\n            print: print,\n            codecs: multicodecs,\n            options: _objectSpread(_objectSpread({}, options), {}, {\n              config: config\n            })\n          });\n          log('starting preload');\n          _context4.next = 20;\n          return ipfs.preload.start();\n        case 20:\n          log('starting storage');\n          ipfs.ipns.startOffline(storage);\n          if (!(storage.isNew && !initOptions.emptyRepo)) {\n            _context4.next = 39;\n            break;\n          }\n          _context4.next = 25;\n          return addEmptyDir(ipfs);\n        case 25:\n          cid = _context4.sent;\n          log('adding default assets');\n          _context4.next = 29;\n          return initAssets({\n            addAll: ipfs.addAll,\n            print: print\n          });\n        case 29:\n          log('initializing IPNS keyspace');\n          if (!(storage.peerId.publicKey == null)) {\n            _context4.next = 32;\n            break;\n          }\n          throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY');\n        case 32:\n          timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT);\n          _context4.prev = 33;\n          _context4.next = 36;\n          return ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(\"/ipfs/\".concat(cid)), {\n            signal: timeoutController.signal\n          });\n        case 36:\n          _context4.prev = 36;\n          timeoutController.clear();\n          return _context4.finish(36);\n        case 39:\n          if (!(options.start !== false)) {\n            _context4.next = 43;\n            break;\n          }\n          log('starting node');\n          _context4.next = 43;\n          return ipfs.start();\n        case 43:\n          return _context4.abrupt(\"return\", ipfs);\n        case 44:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[33,, 36, 39]]);\n  }));\n  return _create.apply(this, arguments);\n}","map":{"version":3,"names":["mergeOpts","isTest","logger","errCode","UnixFS","dagPB","dagCBOR","dagJSON","dagJOSE","identity","bases","hashes","codecs","initAssets","AlreadyInitializedError","fromString","uint8ArrayFromString","TimeoutController","createStart","createStop","createDns","createIsOnline","createResolve","PinAPI","IPNSAPI","NameAPI","createRefs","createLocal","BitswapAPI","BootstrapAPI","BlockAPI","RootAPI","createVersion","createId","createConfig","DagAPI","createPreloader","createMfsPreloader","createFiles","KeyAPI","ObjectAPI","RepoAPI","StatsAPI","Storage","Network","Service","SwarmAPI","createPing","createDht","createPubsub","Multicodecs","Multihashes","Multibases","mergeOptions","bind","ignoreUndefined","log","IPNS_INIT_KEYSPACE_TIMEOUT","IPFS","_ref2","print","storage","options","_classCallCheck","peerId","repo","keychain","network","create","preload","dns","isOnline","ipns","multihashHashers","Object","values","ipld","hashers","forEach","hasher","push","loadHasher","multibaseCodecs","base","loadBase","pin","block","name","resolve","dag","refs","assign","local","_RootAPI","EXPERIMENTAL","add","addAll","cat","get","ls","files","mfsPreload","start","stop","dht","pubsub","config","id","version","bitswap","bootstrap","ping","key","object","stats","swarm","defineProperty","net","try","libp2p","undefined","notImplemented","Promise","reject","Error","notImplementedIter","_ref","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","apply","arguments","commands","diag","cmds","sys","level","tail","mount","_createClass","value","_init","_asyncToGenerator","_callee2","_callee2$","_context2","init","addEmptyDir","_ref3","_callee3","ipfs","buf","cid","_callee3$","_context3","encode","Data","type","marshal","Links","put","mhtype","format","sent","abrupt","_x","getDefaultOptions","enabled","addresses","_create","_callee4","initOptions","blockCodecs","multicodecs","timeoutController","_args4","_callee4$","_context4","length","code","decode","concat","codec","loadCodec","silent","console","getAll","_objectSpread","startOffline","isNew","emptyRepo","publicKey","initializeKeyspace","signal","clear","finish"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/index.js"],"sourcesContent":["import mergeOpts from 'merge-options'\nimport { isTest } from 'ipfs-utils/src/env.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { initAssets } from 'ipfs-core-config/init-assets'\nimport { AlreadyInitializedError } from '../errors.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { createStart } from './start.js'\n\nimport { createStop } from './stop.js'\nimport { createDns } from './dns.js'\nimport { createIsOnline } from './is-online.js'\nimport { createResolve } from './resolve.js'\nimport { PinAPI } from './pin/index.js'\nimport { IPNSAPI } from './ipns.js'\nimport { NameAPI } from './name/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createLocal } from './refs/local.js'\nimport { BitswapAPI } from './bitswap/index.js'\nimport { BootstrapAPI } from './bootstrap/index.js'\nimport { BlockAPI } from './block/index.js'\nimport { RootAPI } from './root.js'\nimport { createVersion } from './version.js'\nimport { createId } from './id.js'\nimport { createConfig } from './config/index.js'\nimport { DagAPI } from './dag/index.js'\nimport { createPreloader } from '../preload.js'\nimport { createMfsPreloader } from '../mfs-preload.js'\nimport { createFiles } from './files/index.js'\nimport { KeyAPI } from './key/index.js'\nimport { ObjectAPI } from './object/index.js'\nimport { RepoAPI } from './repo/index.js'\nimport { StatsAPI } from './stats/index.js'\nimport { Storage } from './storage.js'\nimport { Network } from './network.js'\nimport { Service } from '../utils/service.js'\nimport { SwarmAPI } from './swarm/index.js'\nimport { createPing } from './ping.js'\nimport { createDht } from './dht.js'\nimport { createPubsub } from './pubsub.js'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport { Multibases } from 'ipfs-core-utils/multibases'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs')\n\nconst IPNS_INIT_KEYSPACE_TIMEOUT = 30000\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloader(options.preload)\n\n    const dns = createDns()\n    const isOnline = createIsOnline({ network })\n    // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolve({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefs({ repo, codecs, resolve, preload }), {\n      local: createLocal({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    })\n\n    const files = createFiles({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloader({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStart({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    })\n\n    this.stop = createStop({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDht({ network, repo, peerId })\n    this.pubsub = createPubsub({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createId({ network, peerId })\n    this.version = createVersion({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfig({ repo })\n    this.ping = createPing({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n}\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPB.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n\n/**\n * @param {Options} options\n */\nexport async function create (options = {}) {\n  options = mergeOptions(getDefaultOptions(), options)\n  const initOptions = options.init || {}\n\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log\n\n  log('creating repo')\n  const storage = await Storage.start(print, multicodecs, options)\n\n  log('getting repo config')\n  const config = await storage.repo.config.getAll()\n\n  const ipfs = new IPFS({\n    storage,\n    print,\n    codecs: multicodecs,\n    options: { ...options, config }\n  })\n\n  log('starting preload')\n  await ipfs.preload.start()\n\n  log('starting storage')\n  ipfs.ipns.startOffline(storage)\n\n  if (storage.isNew && !initOptions.emptyRepo) {\n    // add empty unixfs dir object (go-ipfs assumes this exists)\n    const cid = await addEmptyDir(ipfs)\n\n    log('adding default assets')\n    await initAssets({ addAll: ipfs.addAll, print })\n\n    log('initializing IPNS keyspace')\n\n    if (storage.peerId.publicKey == null) {\n      throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT)\n    try {\n      await ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(`/ipfs/${cid}`), {\n        signal: timeoutController.signal\n      })\n    } finally {\n      timeoutController.clear()\n    }\n  }\n\n  if (options.start !== false) {\n    log('starting node')\n    await ipfs.start()\n  }\n\n  return ipfs\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
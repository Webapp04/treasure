{"ast":null,"code":"import { TieredDatastore } from 'datastore-core/tiered';\nimport get from 'dlv';\nimport { IpnsPubsubDatastore } from './pubsub-datastore.js';\nimport { OfflineDatastore } from './offline-datastore.js';\nimport { DHTDatastore } from './dht-datastore.js';\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {object} arg\n * @param {import('libp2p').Libp2p} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('@libp2p/interface-peer-id').PeerId} arg.peerId\n * @param {object} arg.options\n */\nexport function createRouting(_ref) {\n  var libp2p = _ref.libp2p,\n    repo = _ref.repo,\n    peerId = _ref.peerId,\n    options = _ref.options;\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  /** @type {any[]} */\n  var ipnsStores = [];\n\n  // Add IPNS pubsub if enabled\n  var pubsubDs;\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    pubsubDs = new IpnsPubsubDatastore(libp2p.pubsub, repo.datastore, peerId);\n    ipnsStores.push(pubsubDs);\n  }\n\n  // Add DHT datastore if enabled\n  if (get(options, 'offline', false) !== true && ['dht', 'dhtclient', 'dhtserver'].includes(get(options, 'config.Routing.Type', 'none'))) {\n    ipnsStores.push(new DHTDatastore(libp2p.dht));\n  }\n\n  // Add an offline datastore if we are offline or no other datastores are configured\n  if (get(options, 'offline', false) || ipnsStores.length === 0) {\n    var offlineDatastore = new OfflineDatastore(repo.datastore);\n    ipnsStores.push(offlineDatastore);\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores);\n}","map":{"version":3,"names":["TieredDatastore","get","IpnsPubsubDatastore","OfflineDatastore","DHTDatastore","createRouting","_ref","libp2p","repo","peerId","options","ipnsStores","pubsubDs","pubsub","datastore","push","includes","dht","length","offlineDatastore"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/ipns/routing/config.js"],"sourcesContent":["import { TieredDatastore } from 'datastore-core/tiered'\nimport get from 'dlv'\nimport { IpnsPubsubDatastore } from './pubsub-datastore.js'\nimport { OfflineDatastore } from './offline-datastore.js'\nimport { DHTDatastore } from './dht-datastore.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {object} arg\n * @param {import('libp2p').Libp2p} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('@libp2p/interface-peer-id').PeerId} arg.peerId\n * @param {object} arg.options\n */\nexport function createRouting ({ libp2p, repo, peerId, options }) {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  /** @type {any[]} */\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    pubsubDs = new IpnsPubsubDatastore(libp2p.pubsub, repo.datastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // Add DHT datastore if enabled\n  if (get(options, 'offline', false) !== true && ['dht', 'dhtclient', 'dhtserver'].includes(get(options, 'config.Routing.Type', 'none'))) {\n    ipnsStores.push(new DHTDatastore(libp2p.dht))\n  }\n\n  // Add an offline datastore if we are offline or no other datastores are configured\n  if (get(options, 'offline', false) || ipnsStores.length === 0) {\n    const offlineDatastore = new OfflineDatastore(repo.datastore)\n    ipnsStores.push(offlineDatastore)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,uBAAuB;AACvD,OAAOC,GAAG,MAAM,KAAK;AACrB,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAAC,IAAA,EAAqC;EAAA,IAAjCC,MAAM,GAAAD,IAAA,CAANC,MAAM;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;IAAEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;EAC5D;EACA;EACA,IAAMC,UAAU,GAAG,EAAE;;EAErB;EACA,IAAIC,QAAQ;EACZ,IAAIX,GAAG,CAACS,OAAO,EAAE,yBAAyB,EAAE,KAAK,CAAC,EAAE;IAClDE,QAAQ,GAAG,IAAIV,mBAAmB,CAACK,MAAM,CAACM,MAAM,EAAEL,IAAI,CAACM,SAAS,EAAEL,MAAM,CAAC;IACzEE,UAAU,CAACI,IAAI,CAACH,QAAQ,CAAC;EAC3B;;EAEA;EACA,IAAIX,GAAG,CAACS,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,WAAW,CAAC,CAACM,QAAQ,CAACf,GAAG,CAACS,OAAO,EAAE,qBAAqB,EAAE,MAAM,CAAC,CAAC,EAAE;IACtIC,UAAU,CAACI,IAAI,CAAC,IAAIX,YAAY,CAACG,MAAM,CAACU,GAAG,CAAC,CAAC;EAC/C;;EAEA;EACA,IAAIhB,GAAG,CAACS,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,IAAIC,UAAU,CAACO,MAAM,KAAK,CAAC,EAAE;IAC7D,IAAMC,gBAAgB,GAAG,IAAIhB,gBAAgB,CAACK,IAAI,CAACM,SAAS,CAAC;IAC7DH,UAAU,CAACI,IAAI,CAACI,gBAAgB,CAAC;EACnC;;EAEA;EACA,OAAO,IAAInB,eAAe,CAACW,UAAU,CAAC;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
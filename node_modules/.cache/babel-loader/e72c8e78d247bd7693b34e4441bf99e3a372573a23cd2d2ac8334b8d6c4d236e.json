{"ast":null,"code":"import _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _get from 'just-safe-get';\nimport debug from 'debug';\nimport errCode from 'err-code';\nimport * as migrator from 'ipfs-repo-migrations';\nimport bytes from 'bytes';\nimport merge from 'merge-options';\nimport * as CONSTANTS from './constants.js';\nimport { version } from './version.js';\nimport { config } from './config.js';\nimport { spec } from './spec.js';\nimport { apiAddr } from './api-addr.js';\nimport { createIdStore } from './idstore.js';\nimport defaultOptions from './default-options.js';\nimport defaultDatastore from './default-datastore.js';\nimport * as ERRORS from './errors.js';\nimport { PinManager } from './pin-manager.js';\nimport { createPinnedBlockstore } from './pinned-blockstore.js';\n// @ts-ignore - no types\nimport mortice from 'mortice';\nimport { gc } from './gc.js';\nvar log = debug('ipfs:repo');\nvar noLimit = Number.MAX_SAFE_INTEGER;\nvar AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate';\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').RepoLock} RepoLock\n * @typedef {import('./types').LockCloser} LockCloser\n * @typedef {import('./types').GCLock} GCLock\n * @typedef {import('./types').Stat} Stat\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').Backends} Backends\n * @typedef {import('./types').IPFSRepo} IPFSRepo\n */\n\n/**\n * IPFSRepo implements all required functionality to read and write to an ipfs repo.\n */\nvar Repo = /*#__PURE__*/function () {\n  /**\n   * @param {string} path - Where this repo is stored\n   * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n   * @param {Backends} backends - backends used by this repo\n   * @param {Partial<Options>} [options] - Configuration\n   */\n  function Repo(path, loadCodec, backends, options) {\n    _classCallCheck(this, Repo);\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path');\n    }\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader');\n    }\n\n    /** @type {Options} */\n    this.options = merge(defaultOptions, options);\n    this.closed = true;\n    this.path = path;\n    this.root = backends.root;\n    this.datastore = backends.datastore;\n    this.keys = backends.keys;\n    var blockstore = backends.blocks;\n    var pinstore = backends.pins;\n    this.pins = new PinManager({\n      pinstore: pinstore,\n      blockstore: blockstore,\n      loadCodec: loadCodec\n    });\n\n    // this blockstore will not delete blocks that have been pinned\n    var pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore);\n\n    // this blockstore will extract blocks from multihashes with the identity codec\n    this.blocks = createIdStore(pinnedBlockstore);\n    this.version = version(this.root);\n    this.config = config(this.root);\n    this.spec = spec(this.root);\n    this.apiAddr = apiAddr(this.root);\n\n    /** @type {GCLock} */\n    this.gcLock = mortice({\n      name: path,\n      singleProcess: this.options.repoOwner !== false\n    });\n    this.gc = gc({\n      gcLock: this.gcLock,\n      pins: this.pins,\n      blockstore: this.blocks,\n      root: this.root,\n      loadCodec: loadCodec\n    });\n  }\n\n  /**\n   * Initialize a new repo.\n   *\n   * @param {import('./types').Config} config - config to write into `config`.\n   * @returns {Promise<void>}\n   */\n  _createClass(Repo, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              log('initializing at: %s', this.path);\n              _context.next = 3;\n              return this._openRoot();\n            case 3:\n              _context.next = 5;\n              return this.config.replace(buildConfig(config));\n            case 5:\n              _context.next = 7;\n              return this.spec.set(buildDatastoreSpec(config));\n            case 7:\n              _context.next = 9;\n              return this.version.set(CONSTANTS.repoVersion);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\n     * Check if the repo is already initialized.\n     *\n     * @returns {Promise<boolean>}\n     */\n  }, {\n    key: \"isInitialized\",\n    value: function () {\n      var _isInitialized = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this.closed) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", true);\n            case 2:\n              _context2.prev = 2;\n              _context2.next = 5;\n              return this._openRoot();\n            case 5:\n              _context2.next = 7;\n              return this._checkInitialized();\n            case 7:\n              _context2.next = 9;\n              return this.root.close();\n            case 9:\n              return _context2.abrupt(\"return\", true);\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](2);\n              return _context2.abrupt(\"return\", false);\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 12]]);\n      }));\n      function isInitialized() {\n        return _isInitialized.apply(this, arguments);\n      }\n      return isInitialized;\n    }()\n    /**\n     * Open the repo. If the repo is already open an error will be thrown.\n     * If the repo is not initialized it will throw an error.\n     *\n     * @returns {Promise<void>}\n     */\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var isCompatible;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.closed) {\n                _context3.next = 2;\n                break;\n              }\n              throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN);\n            case 2:\n              log('opening at: %s', this.path);\n\n              // check if the repo is already initialized\n              _context3.prev = 3;\n              _context3.next = 6;\n              return this._openRoot();\n            case 6:\n              _context3.next = 8;\n              return this._checkInitialized();\n            case 8:\n              _context3.next = 10;\n              return this._openLock();\n            case 10:\n              this._lockfile = _context3.sent;\n              log('acquired repo.lock');\n              _context3.next = 14;\n              return this.version.check(CONSTANTS.repoVersion);\n            case 14:\n              isCompatible = _context3.sent;\n              if (isCompatible) {\n                _context3.next = 24;\n                break;\n              }\n              _context3.next = 18;\n              return this._isAutoMigrationEnabled();\n            case 18:\n              if (!_context3.sent) {\n                _context3.next = 23;\n                break;\n              }\n              _context3.next = 21;\n              return this._migrate(CONSTANTS.repoVersion, {\n                root: this.root,\n                datastore: this.datastore,\n                pins: this.pins.pinstore,\n                blocks: this.pins.blockstore,\n                keys: this.keys\n              });\n            case 21:\n              _context3.next = 24;\n              break;\n            case 23:\n              throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.');\n            case 24:\n              log('creating datastore');\n              _context3.next = 27;\n              return this.datastore.open();\n            case 27:\n              log('creating blocks');\n              _context3.next = 30;\n              return this.blocks.open();\n            case 30:\n              log('creating keystore');\n              _context3.next = 33;\n              return this.keys.open();\n            case 33:\n              log('creating pins');\n              _context3.next = 36;\n              return this.pins.pinstore.open();\n            case 36:\n              this.closed = false;\n              log('all opened');\n              _context3.next = 53;\n              break;\n            case 40:\n              _context3.prev = 40;\n              _context3.t0 = _context3[\"catch\"](3);\n              if (!this._lockfile) {\n                _context3.next = 52;\n                break;\n              }\n              _context3.prev = 43;\n              _context3.next = 46;\n              return this._closeLock();\n            case 46:\n              this._lockfile = null;\n              _context3.next = 52;\n              break;\n            case 49:\n              _context3.prev = 49;\n              _context3.t1 = _context3[\"catch\"](43);\n              log('error removing lock', _context3.t1);\n            case 52:\n              throw _context3.t0;\n            case 53:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[3, 40], [43, 49]]);\n      }));\n      function open() {\n        return _open.apply(this, arguments);\n      }\n      return open;\n    }()\n    /**\n     * Opens the root backend, catching and ignoring an 'Already open' error\n     *\n     * @private\n     */\n  }, {\n    key: \"_openRoot\",\n    value: function () {\n      var _openRoot2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this.root.open();\n            case 3:\n              _context4.next = 9;\n              break;\n            case 5:\n              _context4.prev = 5;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (!(_context4.t0.message !== 'Already open')) {\n                _context4.next = 9;\n                break;\n              }\n              throw _context4.t0;\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 5]]);\n      }));\n      function _openRoot() {\n        return _openRoot2.apply(this, arguments);\n      }\n      return _openRoot;\n    }()\n    /**\n     * Creates a lock on the repo if a locker is specified. The lockfile object will\n     * be returned in the callback if one has been created.\n     *\n     * @private\n     * @returns {Promise<LockCloser>}\n     */\n  }, {\n    key: \"_openLock\",\n    value: function () {\n      var _openLock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var lockfile;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.options.repoLock.lock(this.path);\n            case 2:\n              lockfile = _context5.sent;\n              if (!(typeof lockfile.close !== 'function')) {\n                _context5.next = 5;\n                break;\n              }\n              throw errCode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION');\n            case 5:\n              return _context5.abrupt(\"return\", lockfile);\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _openLock() {\n        return _openLock2.apply(this, arguments);\n      }\n      return _openLock;\n    }()\n    /**\n     * Closes the lock on the repo\n     *\n     * @private\n     */\n  }, {\n    key: \"_closeLock\",\n    value: function _closeLock() {\n      return this._lockfile && this._lockfile.close();\n    }\n\n    /**\n     * Check if the repo is already initialized.\n     *\n     * @private\n     */\n  }, {\n    key: \"_checkInitialized\",\n    value: function () {\n      var _checkInitialized2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var config, _yield$Promise$all, _yield$Promise$all2;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              log('init check');\n              _context6.prev = 1;\n              _context6.next = 4;\n              return Promise.all([this.config.exists(), this.spec.exists(), this.version.exists()]);\n            case 4:\n              _yield$Promise$all = _context6.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);\n              config = _yield$Promise$all2[0];\n              _context6.next = 14;\n              break;\n            case 9:\n              _context6.prev = 9;\n              _context6.t0 = _context6[\"catch\"](1);\n              if (!(_context6.t0.code === 'ERR_NOT_FOUND')) {\n                _context6.next = 13;\n                break;\n              }\n              throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n                path: this.path\n              });\n            case 13:\n              throw _context6.t0;\n            case 14:\n              if (config) {\n                _context6.next = 16;\n                break;\n              }\n              throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n                path: this.path\n              });\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[1, 9]]);\n      }));\n      function _checkInitialized() {\n        return _checkInitialized2.apply(this, arguments);\n      }\n      return _checkInitialized;\n    }()\n    /**\n     * Close the repo and cleanup.\n     *\n     * @returns {Promise<void>}\n     */\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!this.closed) {\n                _context7.next = 2;\n                break;\n              }\n              throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED);\n            case 2:\n              log('closing at: %s', this.path);\n              _context7.prev = 3;\n              _context7.next = 6;\n              return this.apiAddr.delete();\n            case 6:\n              _context7.next = 12;\n              break;\n            case 8:\n              _context7.prev = 8;\n              _context7.t0 = _context7[\"catch\"](3);\n              if (!(_context7.t0.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !_context7.t0.message.startsWith('ENOENT'))) {\n                _context7.next = 12;\n                break;\n              }\n              throw _context7.t0;\n            case 12:\n              _context7.next = 14;\n              return Promise.all([this.root, this.blocks, this.keys, this.datastore, this.pins.pinstore].map(function (store) {\n                return store && store.close();\n              }));\n            case 14:\n              log('unlocking');\n              this.closed = true;\n              _context7.next = 18;\n              return this._closeLock();\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[3, 8]]);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n    /**\n     * Check if a repo exists.\n     *\n     * @returns {Promise<boolean>}\n     */\n  }, {\n    key: \"exists\",\n    value: function exists() {\n      return this.version.exists();\n    }\n\n    /**\n     * Get repo status.\n     *\n     * @returns {Promise<Stat>}\n     */\n  }, {\n    key: \"stat\",\n    value: function () {\n      var _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _yield$Promise$all3, _yield$Promise$all4, storageMax, blocks, _version, datastore, keys, size;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(this.datastore && this.keys)) {\n                _context8.next = 12;\n                break;\n              }\n              _context8.next = 3;\n              return Promise.all([this._storageMaxStat(), this._blockStat(), this.version.get(), getSize(this.datastore), getSize(this.keys)]);\n            case 3:\n              _yield$Promise$all3 = _context8.sent;\n              _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 5);\n              storageMax = _yield$Promise$all4[0];\n              blocks = _yield$Promise$all4[1];\n              _version = _yield$Promise$all4[2];\n              datastore = _yield$Promise$all4[3];\n              keys = _yield$Promise$all4[4];\n              size = blocks.size + datastore + keys;\n              return _context8.abrupt(\"return\", {\n                repoPath: this.path,\n                storageMax: storageMax,\n                version: _version,\n                numObjects: blocks.count,\n                repoSize: size\n              });\n            case 12:\n              throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n                path: this.path\n              });\n            case 13:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function stat() {\n        return _stat.apply(this, arguments);\n      }\n      return stat;\n    }()\n    /**\n     * @private\n     */\n  }, {\n    key: \"_isAutoMigrationEnabled\",\n    value: function () {\n      var _isAutoMigrationEnabled2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var autoMigrateConfig;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this.options.autoMigrate !== undefined)) {\n                _context9.next = 2;\n                break;\n              }\n              return _context9.abrupt(\"return\", this.options.autoMigrate);\n            case 2:\n              _context9.prev = 2;\n              _context9.next = 5;\n              return this.config.get(AUTO_MIGRATE_CONFIG_KEY);\n            case 5:\n              autoMigrateConfig = _context9.sent;\n              _context9.next = 15;\n              break;\n            case 8:\n              _context9.prev = 8;\n              _context9.t0 = _context9[\"catch\"](2);\n              if (!(_context9.t0.code === ERRORS.NotFoundError.code)) {\n                _context9.next = 14;\n                break;\n              }\n              autoMigrateConfig = true; // Config's default value is True\n              _context9.next = 15;\n              break;\n            case 14:\n              throw _context9.t0;\n            case 15:\n              return _context9.abrupt(\"return\", autoMigrateConfig);\n            case 16:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[2, 8]]);\n      }));\n      function _isAutoMigrationEnabled() {\n        return _isAutoMigrationEnabled2.apply(this, arguments);\n      }\n      return _isAutoMigrationEnabled;\n    }()\n    /**\n     * Internal migration\n     *\n     * @private\n     * @param {number} toVersion\n     * @param {Backends} backends\n     */\n  }, {\n    key: \"_migrate\",\n    value: function () {\n      var _migrate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(toVersion, backends) {\n        var currentRepoVersion;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.version.get();\n            case 2:\n              currentRepoVersion = _context10.sent;\n              if (!(currentRepoVersion > toVersion)) {\n                _context10.next = 8;\n                break;\n              }\n              log(\"reverting to version \".concat(toVersion));\n              return _context10.abrupt(\"return\", migrator.revert(this.path, backends, this.options, toVersion, {\n                ignoreLock: true,\n                onProgress: this.options.onMigrationProgress\n              }));\n            case 8:\n              log(\"migrating to version \".concat(toVersion));\n              return _context10.abrupt(\"return\", migrator.migrate(this.path, backends, this.options, toVersion, {\n                ignoreLock: true,\n                onProgress: this.options.onMigrationProgress\n              }));\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function _migrate(_x2, _x3) {\n        return _migrate2.apply(this, arguments);\n      }\n      return _migrate;\n    }()\n    /**\n     * @private\n     */\n  }, {\n    key: \"_storageMaxStat\",\n    value: function () {\n      var _storageMaxStat2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var max;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return this.config.get('Datastore.StorageMax');\n            case 3:\n              max = _context11.sent;\n              return _context11.abrupt(\"return\", BigInt(bytes(max)));\n            case 7:\n              _context11.prev = 7;\n              _context11.t0 = _context11[\"catch\"](0);\n              return _context11.abrupt(\"return\", BigInt(noLimit));\n            case 10:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[0, 7]]);\n      }));\n      function _storageMaxStat() {\n        return _storageMaxStat2.apply(this, arguments);\n      }\n      return _storageMaxStat;\n    }()\n    /**\n     * @private\n     */\n  }, {\n    key: \"_blockStat\",\n    value: function () {\n      var _blockStat2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var count, size, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              count = BigInt(0);\n              size = BigInt(0);\n              if (!this.blocks) {\n                _context12.next = 33;\n                break;\n              }\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context12.prev = 5;\n              _iterator = _asyncIterator(this.blocks.query({}));\n            case 7:\n              _context12.next = 9;\n              return _iterator.next();\n            case 9:\n              if (!(_iteratorAbruptCompletion = !(_step = _context12.sent).done)) {\n                _context12.next = 17;\n                break;\n              }\n              _step$value = _step.value, key = _step$value.key, value = _step$value.value;\n              count += BigInt(1);\n              size += BigInt(value.byteLength);\n              size += BigInt(key.bytes.byteLength);\n            case 14:\n              _iteratorAbruptCompletion = false;\n              _context12.next = 7;\n              break;\n            case 17:\n              _context12.next = 23;\n              break;\n            case 19:\n              _context12.prev = 19;\n              _context12.t0 = _context12[\"catch\"](5);\n              _didIteratorError = true;\n              _iteratorError = _context12.t0;\n            case 23:\n              _context12.prev = 23;\n              _context12.prev = 24;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context12.next = 28;\n                break;\n              }\n              _context12.next = 28;\n              return _iterator.return();\n            case 28:\n              _context12.prev = 28;\n              if (!_didIteratorError) {\n                _context12.next = 31;\n                break;\n              }\n              throw _iteratorError;\n            case 31:\n              return _context12.finish(28);\n            case 32:\n              return _context12.finish(23);\n            case 33:\n              return _context12.abrupt(\"return\", {\n                count: count,\n                size: size\n              });\n            case 34:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[5, 19, 23, 33], [24,, 28, 32]]);\n      }));\n      function _blockStat() {\n        return _blockStat2.apply(this, arguments);\n      }\n      return _blockStat;\n    }()\n  }]);\n  return Repo;\n}();\n/**\n * @param {Datastore} datastore\n */\nfunction getSize(_x4) {\n  return _getSize.apply(this, arguments);\n}\n/**\n * @param {string} path - Where this repo is stored\n * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n * @param {import('./types').Backends} backends - backends used by this repo\n * @param {Partial<Options>} [options] - Configuration\n * @returns {import('./types').IPFSRepo}\n */\nfunction _getSize() {\n  _getSize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(datastore) {\n    var sum, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, block;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          sum = BigInt(0);\n          _iteratorAbruptCompletion2 = false;\n          _didIteratorError2 = false;\n          _context13.prev = 3;\n          _iterator2 = _asyncIterator(datastore.query({}));\n        case 5:\n          _context13.next = 7;\n          return _iterator2.next();\n        case 7:\n          if (!(_iteratorAbruptCompletion2 = !(_step2 = _context13.sent).done)) {\n            _context13.next = 14;\n            break;\n          }\n          block = _step2.value;\n          sum += BigInt(block.value.byteLength);\n          sum += BigInt(block.key.uint8Array().byteLength);\n        case 11:\n          _iteratorAbruptCompletion2 = false;\n          _context13.next = 5;\n          break;\n        case 14:\n          _context13.next = 20;\n          break;\n        case 16:\n          _context13.prev = 16;\n          _context13.t0 = _context13[\"catch\"](3);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context13.t0;\n        case 20:\n          _context13.prev = 20;\n          _context13.prev = 21;\n          if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n            _context13.next = 25;\n            break;\n          }\n          _context13.next = 25;\n          return _iterator2.return();\n        case 25:\n          _context13.prev = 25;\n          if (!_didIteratorError2) {\n            _context13.next = 28;\n            break;\n          }\n          throw _iteratorError2;\n        case 28:\n          return _context13.finish(25);\n        case 29:\n          return _context13.finish(20);\n        case 30:\n          return _context13.abrupt(\"return\", sum);\n        case 31:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13, null, [[3, 16, 20, 30], [21,, 25, 29]]);\n  }));\n  return _getSize.apply(this, arguments);\n}\nexport function createRepo(path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options);\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildConfig(_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'));\n  return _config;\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildDatastoreSpec(_config) {\n  /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */\n  var spec = _objectSpread(_objectSpread({}, defaultDatastore.Spec), _get(_config, 'Datastore.Spec'));\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map(function (mounting) {\n      return {\n        mountpoint: mounting.mountpoint,\n        type: mounting.child.type,\n        path: mounting.child.path,\n        shardFunc: mounting.child.shardFunc\n      };\n    })\n  };\n}","map":{"version":3,"names":["_get","debug","errCode","migrator","bytes","merge","CONSTANTS","version","config","spec","apiAddr","createIdStore","defaultOptions","defaultDatastore","ERRORS","PinManager","createPinnedBlockstore","mortice","gc","log","noLimit","Number","MAX_SAFE_INTEGER","AUTO_MIGRATE_CONFIG_KEY","Repo","path","loadCodec","backends","options","_classCallCheck","Error","closed","root","datastore","keys","blockstore","blocks","pinstore","pins","pinnedBlockstore","gcLock","name","singleProcess","repoOwner","_createClass","key","value","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","_openRoot","replace","buildConfig","set","buildDatastoreSpec","repoVersion","stop","init","_x","apply","arguments","_isInitialized","_callee2","_callee2$","_context2","abrupt","_checkInitialized","close","t0","isInitialized","_open","_callee3","isCompatible","_callee3$","_context3","ERR_REPO_ALREADY_OPEN","_openLock","_lockfile","sent","check","_isAutoMigrationEnabled","_migrate","InvalidRepoVersionError","open","_closeLock","t1","_openRoot2","_callee4","_callee4$","_context4","message","_openLock2","_callee5","lockfile","_callee5$","_context5","repoLock","lock","_checkInitialized2","_callee6","_yield$Promise$all","_yield$Promise$all2","_callee6$","_context6","Promise","all","exists","_slicedToArray","code","ERR_REPO_NOT_INITIALIZED","_close","_callee7","_callee7$","_context7","ERR_REPO_ALREADY_CLOSED","delete","startsWith","map","store","_stat","_callee8","_yield$Promise$all3","_yield$Promise$all4","storageMax","_version","size","_callee8$","_context8","_storageMaxStat","_blockStat","get","getSize","repoPath","numObjects","count","repoSize","stat","_isAutoMigrationEnabled2","_callee9","autoMigrateConfig","_callee9$","_context9","autoMigrate","undefined","NotFoundError","_migrate2","_callee10","toVersion","currentRepoVersion","_callee10$","_context10","concat","revert","ignoreLock","onProgress","onMigrationProgress","migrate","_x2","_x3","_storageMaxStat2","_callee11","max","_callee11$","_context11","BigInt","_blockStat2","_callee12","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_step$value","_callee12$","_context12","_asyncIterator","query","done","byteLength","return","finish","_x4","_getSize","_callee13","sum","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","block","_callee13$","_context13","uint8Array","createRepo","_config","Datastore","Object","assign","_objectSpread","Spec","type","mounts","mounting","mountpoint","child","shardFunc"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-repo/src/index.js"],"sourcesContent":["import _get from 'just-safe-get'\nimport debug from 'debug'\nimport errCode from 'err-code'\nimport * as migrator from 'ipfs-repo-migrations'\nimport bytes from 'bytes'\nimport merge from 'merge-options'\nimport * as CONSTANTS from './constants.js'\nimport { version } from './version.js'\nimport { config } from './config.js'\nimport { spec } from './spec.js'\nimport { apiAddr } from './api-addr.js'\nimport { createIdStore } from './idstore.js'\nimport defaultOptions from './default-options.js'\nimport defaultDatastore from './default-datastore.js'\nimport * as ERRORS from './errors.js'\nimport { PinManager } from './pin-manager.js'\nimport { createPinnedBlockstore } from './pinned-blockstore.js'\n// @ts-ignore - no types\nimport mortice from 'mortice'\nimport { gc } from './gc.js'\n\nconst log = debug('ipfs:repo')\n\nconst noLimit = Number.MAX_SAFE_INTEGER\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate'\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').RepoLock} RepoLock\n * @typedef {import('./types').LockCloser} LockCloser\n * @typedef {import('./types').GCLock} GCLock\n * @typedef {import('./types').Stat} Stat\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').Backends} Backends\n * @typedef {import('./types').IPFSRepo} IPFSRepo\n */\n\n/**\n * IPFSRepo implements all required functionality to read and write to an ipfs repo.\n */\nclass Repo {\n  /**\n   * @param {string} path - Where this repo is stored\n   * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n   * @param {Backends} backends - backends used by this repo\n   * @param {Partial<Options>} [options] - Configuration\n   */\n  constructor (path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path')\n    }\n\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader')\n    }\n\n    /** @type {Options} */\n    this.options = merge(defaultOptions, options)\n    this.closed = true\n    this.path = path\n    this.root = backends.root\n    this.datastore = backends.datastore\n    this.keys = backends.keys\n\n    const blockstore = backends.blocks\n    const pinstore = backends.pins\n\n    this.pins = new PinManager({ pinstore, blockstore, loadCodec })\n\n    // this blockstore will not delete blocks that have been pinned\n    const pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore)\n\n    // this blockstore will extract blocks from multihashes with the identity codec\n    this.blocks = createIdStore(pinnedBlockstore)\n\n    this.version = version(this.root)\n    this.config = config(this.root)\n    this.spec = spec(this.root)\n    this.apiAddr = apiAddr(this.root)\n\n    /** @type {GCLock} */\n    this.gcLock = mortice({\n      name: path,\n      singleProcess: this.options.repoOwner !== false\n    })\n\n    this.gc = gc({ gcLock: this.gcLock, pins: this.pins, blockstore: this.blocks, root: this.root, loadCodec })\n  }\n\n  /**\n   * Initialize a new repo.\n   *\n   * @param {import('./types').Config} config - config to write into `config`.\n   * @returns {Promise<void>}\n   */\n  async init (config) {\n    log('initializing at: %s', this.path)\n    await this._openRoot()\n    await this.config.replace(buildConfig(config))\n    await this.spec.set(buildDatastoreSpec(config))\n    await this.version.set(CONSTANTS.repoVersion)\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @returns {Promise<boolean>}\n   */\n  async isInitialized () {\n    if (!this.closed) {\n      // repo is open, must be initialized\n      return true\n    }\n\n    try {\n      // have to open the root datastore in the browser before\n      // we can check whether it's been initialized\n      await this._openRoot()\n      await this._checkInitialized()\n      await this.root.close()\n\n      return true\n    } catch (/** @type {any} */ err) {\n      // FIXME: do not use exceptions for flow control\n      return false\n    }\n  }\n\n  /**\n   * Open the repo. If the repo is already open an error will be thrown.\n   * If the repo is not initialized it will throw an error.\n   *\n   * @returns {Promise<void>}\n   */\n  async open () {\n    if (!this.closed) {\n      throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN)\n    }\n    log('opening at: %s', this.path)\n\n    // check if the repo is already initialized\n    try {\n      await this._openRoot()\n      await this._checkInitialized()\n\n      this._lockfile = await this._openLock()\n      log('acquired repo.lock')\n\n      const isCompatible = await this.version.check(CONSTANTS.repoVersion)\n\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(CONSTANTS.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          })\n        } else {\n          throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.')\n        }\n      }\n\n      log('creating datastore')\n      await this.datastore.open()\n\n      log('creating blocks')\n      await this.blocks.open()\n\n      log('creating keystore')\n      await this.keys.open()\n\n      log('creating pins')\n      await this.pins.pinstore.open()\n\n      this.closed = false\n      log('all opened')\n    } catch (/** @type {any} */ err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock()\n          this._lockfile = null\n        } catch (/** @type {any} */ err2) {\n          log('error removing lock', err2)\n        }\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * Opens the root backend, catching and ignoring an 'Already open' error\n   *\n   * @private\n   */\n  async _openRoot () {\n    try {\n      await this.root.open()\n    } catch (/** @type {any} */ err) {\n      if (err.message !== 'Already open') {\n        throw err\n      }\n    }\n  }\n\n  /**\n   * Creates a lock on the repo if a locker is specified. The lockfile object will\n   * be returned in the callback if one has been created.\n   *\n   * @private\n   * @returns {Promise<LockCloser>}\n   */\n  async _openLock () {\n    const lockfile = await this.options.repoLock.lock(this.path)\n\n    if (typeof lockfile.close !== 'function') {\n      throw errCode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION')\n    }\n\n    return lockfile\n  }\n\n  /**\n   * Closes the lock on the repo\n   *\n   * @private\n   */\n  _closeLock () {\n    return this._lockfile && this._lockfile.close()\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @private\n   */\n  async _checkInitialized () {\n    log('init check')\n    let config\n    try {\n      [config] = await Promise.all([\n        this.config.exists(),\n        this.spec.exists(),\n        this.version.exists()\n      ])\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n          path: this.path\n        })\n      }\n\n      throw err\n    }\n\n    if (!config) {\n      throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n        path: this.path\n      })\n    }\n  }\n\n  /**\n   * Close the repo and cleanup.\n   *\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this.closed) {\n      throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED)\n    }\n    log('closing at: %s', this.path)\n\n    try {\n      // Delete api, ignoring irrelevant errors\n      await this.apiAddr.delete()\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err\n      }\n    }\n\n    await Promise.all([\n      this.root,\n      this.blocks,\n      this.keys,\n      this.datastore,\n      this.pins.pinstore\n    ].map((store) => store && store.close()))\n\n    log('unlocking')\n    this.closed = true\n    await this._closeLock()\n  }\n\n  /**\n   * Check if a repo exists.\n   *\n   * @returns {Promise<boolean>}\n   */\n  exists () {\n    return this.version.exists()\n  }\n\n  /**\n   * Get repo status.\n   *\n   * @returns {Promise<Stat>}\n   */\n  async stat () {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([\n        this._storageMaxStat(),\n        this._blockStat(),\n        this.version.get(),\n        getSize(this.datastore),\n        getSize(this.keys)\n      ])\n      const size = blocks.size + datastore + keys\n\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      }\n    }\n    throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n      path: this.path\n    })\n  }\n\n  /**\n   * @private\n   */\n  async _isAutoMigrationEnabled () {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate\n    }\n\n    // TODO we need to figure out the priority here, between repo options and config.\n    let autoMigrateConfig\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY)\n    } catch (/** @type {any} */ e) {\n      if (e.code === ERRORS.NotFoundError.code) {\n        autoMigrateConfig = true // Config's default value is True\n      } else {\n        throw e\n      }\n    }\n\n    return autoMigrateConfig\n  }\n\n  /**\n   * Internal migration\n   *\n   * @private\n   * @param {number} toVersion\n   * @param {Backends} backends\n   */\n  async _migrate (toVersion, backends) {\n    const currentRepoVersion = await this.version.get()\n\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${toVersion}`)\n      return migrator.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    } else {\n      log(`migrating to version ${toVersion}`)\n      return migrator.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _storageMaxStat () {\n    try {\n      const max = /** @type {number} */(await this.config.get('Datastore.StorageMax'))\n      return BigInt(bytes(max))\n    } catch (/** @type {any} */ err) {\n      return BigInt(noLimit)\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _blockStat () {\n    let count = BigInt(0)\n    let size = BigInt(0)\n\n    if (this.blocks) {\n      for await (const { key, value } of this.blocks.query({})) {\n        count += BigInt(1)\n        size += BigInt(value.byteLength)\n        size += BigInt(key.bytes.byteLength)\n      }\n    }\n\n    return { count, size }\n  }\n}\n\n/**\n * @param {Datastore} datastore\n */\nasync function getSize (datastore) {\n  let sum = BigInt(0)\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength)\n    sum += BigInt(block.key.uint8Array().byteLength)\n  }\n  return sum\n}\n\n/**\n * @param {string} path - Where this repo is stored\n * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n * @param {import('./types').Backends} backends - backends used by this repo\n * @param {Partial<Options>} [options] - Configuration\n * @returns {import('./types').IPFSRepo}\n */\nexport function createRepo (path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options)\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildConfig (_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'))\n\n  return _config\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildDatastoreSpec (_config) {\n  /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */\n  const spec = {\n    ...defaultDatastore.Spec,\n    ..._get(_config, 'Datastore.Spec')\n  }\n\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map((mounting) => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
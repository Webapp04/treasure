{"ast":null,"code":"var events = {};\nvar observable = function observable(worker) {\n  worker.addEventListener('message', function (event) {\n    observable.dispatchEvent('message', worker, event);\n  });\n  if (worker.port != null) {\n    worker.port.addEventListener('message', function (event) {\n      observable.dispatchEvent('message', worker, event);\n    });\n  }\n};\nobservable.addEventListener = function (type, fn) {\n  if (events[type] == null) {\n    events[type] = [];\n  }\n  events[type].push(fn);\n};\nobservable.removeEventListener = function (type, fn) {\n  if (events[type] == null) {\n    return;\n  }\n  events[type] = events[type].filter(function (listener) {\n    return listener === fn;\n  });\n};\nobservable.dispatchEvent = function (type, worker, event) {\n  if (events[type] == null) {\n    return;\n  }\n  events[type].forEach(function (fn) {\n    return fn(worker, event);\n  });\n};\nexport default observable;","map":{"version":3,"names":["events","observable","worker","addEventListener","event","dispatchEvent","port","type","fn","push","removeEventListener","filter","listener","forEach"],"sources":["/Users/apple/Documents/treasure/node_modules/observable-webworkers/src/index.ts"],"sourcesContent":["export interface WebworkerEventListener <T = any> {\n  (worker: Worker, event: MessageEvent<T>): void\n}\n\nconst events: Record<string, WebworkerEventListener[]> = {}\n\nconst observable = (worker: Worker & { port?: any }) => {\n  worker.addEventListener('message', (event) => {\n    observable.dispatchEvent('message', worker, event)\n  })\n\n  if (worker.port != null) {\n    worker.port.addEventListener('message', (event: any) => {\n      observable.dispatchEvent('message', worker, event)\n    })\n  }\n}\n\nobservable.addEventListener = (type: string, fn: WebworkerEventListener) => {\n  if (events[type] == null) {\n    events[type] = []\n  }\n\n  events[type].push(fn)\n}\n\nobservable.removeEventListener = (type: string, fn: WebworkerEventListener) => {\n  if (events[type] == null) {\n    return\n  }\n\n  events[type] = events[type]\n    .filter(listener => listener === fn)\n}\n\nobservable.dispatchEvent = function (type: string, worker: Worker, event: MessageEvent<any>) {\n  if (events[type] == null) {\n    return\n  }\n\n  events[type].forEach(fn => fn(worker, event))\n}\n\nexport default observable\n"],"mappings":"AAIA,IAAMA,MAAM,GAA6C,EAAE;AAE3D,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,MAA+B,EAAI;EACrDA,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,UAACC,KAAK,EAAI;IAC3CH,UAAU,CAACI,aAAa,CAAC,SAAS,EAAEH,MAAM,EAAEE,KAAK,CAAC;EACpD,CAAC,CAAC;EAEF,IAAIF,MAAM,CAACI,IAAI,IAAI,IAAI,EAAE;IACvBJ,MAAM,CAACI,IAAI,CAACH,gBAAgB,CAAC,SAAS,EAAE,UAACC,KAAU,EAAI;MACrDH,UAAU,CAACI,aAAa,CAAC,SAAS,EAAEH,MAAM,EAAEE,KAAK,CAAC;IACpD,CAAC,CAAC;;AAEN,CAAC;AAEDH,UAAU,CAACE,gBAAgB,GAAG,UAACI,IAAY,EAAEC,EAA0B,EAAI;EACzE,IAAIR,MAAM,CAACO,IAAI,CAAC,IAAI,IAAI,EAAE;IACxBP,MAAM,CAACO,IAAI,CAAC,GAAG,EAAE;;EAGnBP,MAAM,CAACO,IAAI,CAAC,CAACE,IAAI,CAACD,EAAE,CAAC;AACvB,CAAC;AAEDP,UAAU,CAACS,mBAAmB,GAAG,UAACH,IAAY,EAAEC,EAA0B,EAAI;EAC5E,IAAIR,MAAM,CAACO,IAAI,CAAC,IAAI,IAAI,EAAE;IACxB;;EAGFP,MAAM,CAACO,IAAI,CAAC,GAAGP,MAAM,CAACO,IAAI,CAAC,CACxBI,MAAM,CAAC,UAAAC,QAAQ;IAAA,OAAIA,QAAQ,KAAKJ,EAAE;EAAA,EAAC;AACxC,CAAC;AAEDP,UAAU,CAACI,aAAa,GAAG,UAAUE,IAAY,EAAEL,MAAc,EAAEE,KAAwB;EACzF,IAAIJ,MAAM,CAACO,IAAI,CAAC,IAAI,IAAI,EAAE;IACxB;;EAGFP,MAAM,CAACO,IAAI,CAAC,CAACM,OAAO,CAAC,UAAAL,EAAE;IAAA,OAAIA,EAAE,CAACN,MAAM,EAAEE,KAAK,CAAC;EAAA,EAAC;AAC/C,CAAC;AAED,eAAeH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}
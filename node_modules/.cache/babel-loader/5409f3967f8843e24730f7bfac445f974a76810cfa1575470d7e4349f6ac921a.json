{"ast":null,"code":"import { multiaddr, isName } from '@multiformats/multiaddr';\nexport function cleanUrlSIO(ma) {\n  var maStrSplit = ma.toString().split('/');\n  var tcpProto = ma.protos()[1].name;\n  var wsProto = ma.protos()[2].name;\n  var tcpPort = ma.stringTuples()[1][1];\n  if (tcpProto !== 'tcp' || wsProto !== 'ws' && wsProto !== 'wss') {\n    throw new Error(\"invalid multiaddr: \".concat(ma.toString()));\n  }\n  if (!isName(ma)) {\n    return \"http://\".concat(maStrSplit[2], \":\").concat(maStrSplit[4]);\n  }\n  if (wsProto === 'ws') {\n    return \"http://\".concat(maStrSplit[2]).concat(tcpPort == null || tcpPort === '80' ? '' : \":\".concat(tcpPort));\n  }\n  if (wsProto === 'wss') {\n    return \"https://\".concat(maStrSplit[2]).concat(tcpPort == null || tcpPort === '443' ? '' : \":\".concat(tcpPort));\n  }\n  throw new Error('invalid multiaddr: ' + ma.toString());\n}\nexport function cleanMultiaddr(maStr) {\n  var legacy = '/libp2p-webrtc-star';\n  if (maStr.startsWith(legacy)) {\n    maStr = maStr.substring(legacy.length, maStr.length);\n    var ma = multiaddr(maStr);\n    var tuppleIPFS = ma.stringTuples().filter(function (tupple) {\n      return tupple[0] === 421; // ipfs code\n    })[0];\n    if (tuppleIPFS[1] == null) {\n      throw new Error('invalid multiaddr: ' + maStr);\n    }\n    ma = ma.decapsulate('p2p');\n    ma = ma.encapsulate('/p2p-webrtc-star');\n    ma = ma.encapsulate(\"/p2p/\".concat(tuppleIPFS[1]));\n    maStr = ma.toString();\n  }\n  return maStr;\n}","map":{"version":3,"names":["multiaddr","isName","cleanUrlSIO","ma","maStrSplit","toString","split","tcpProto","protos","name","wsProto","tcpPort","stringTuples","Error","concat","cleanMultiaddr","maStr","legacy","startsWith","substring","length","tuppleIPFS","filter","tupple","decapsulate","encapsulate"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/webrtc-star/src/utils.ts"],"sourcesContent":["import { multiaddr, isName } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport function cleanUrlSIO (ma: Multiaddr) {\n  const maStrSplit = ma.toString().split('/')\n  const tcpProto = ma.protos()[1].name\n  const wsProto = ma.protos()[2].name\n  const tcpPort = ma.stringTuples()[1][1]\n\n  if (tcpProto !== 'tcp' || (wsProto !== 'ws' && wsProto !== 'wss')) {\n    throw new Error(`invalid multiaddr: ${ma.toString()}`)\n  }\n\n  if (!isName(ma)) {\n    return `http://${maStrSplit[2]}:${maStrSplit[4]}`\n  }\n\n  if (wsProto === 'ws') {\n    return `http://${maStrSplit[2]}${tcpPort == null || tcpPort === '80' ? '' : `:${tcpPort}`}`\n  }\n\n  if (wsProto === 'wss') {\n    return `https://${maStrSplit[2]}${tcpPort == null || tcpPort === '443' ? '' : `:${tcpPort}`}`\n  }\n\n  throw new Error('invalid multiaddr: ' + ma.toString())\n}\n\nexport function cleanMultiaddr (maStr: string) {\n  const legacy = '/libp2p-webrtc-star'\n\n  if (maStr.startsWith(legacy)) {\n    maStr = maStr.substring(legacy.length, maStr.length)\n    let ma = multiaddr(maStr)\n    const tuppleIPFS = ma.stringTuples().filter((tupple) => {\n      return tupple[0] === 421 // ipfs code\n    })[0]\n\n    if (tuppleIPFS[1] == null) {\n      throw new Error('invalid multiaddr: ' + maStr)\n    }\n\n    ma = ma.decapsulate('p2p')\n    ma = ma.encapsulate('/p2p-webrtc-star')\n    ma = ma.encapsulate(`/p2p/${tuppleIPFS[1]}`)\n    maStr = ma.toString()\n  }\n\n  return maStr\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,yBAAyB;AAG3D,OAAM,SAAUC,WAAWA,CAAEC,EAAa;EACxC,IAAMC,UAAU,GAAGD,EAAE,CAACE,QAAQ,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC;EAC3C,IAAMC,QAAQ,GAAGJ,EAAE,CAACK,MAAM,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI;EACpC,IAAMC,OAAO,GAAGP,EAAE,CAACK,MAAM,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI;EACnC,IAAME,OAAO,GAAGR,EAAE,CAACS,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAEvC,IAAIL,QAAQ,KAAK,KAAK,IAAKG,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAM,EAAE;IACjE,MAAM,IAAIG,KAAK,uBAAAC,MAAA,CAAuBX,EAAE,CAACE,QAAQ,EAAE,CAAE,CAAC;;EAGxD,IAAI,CAACJ,MAAM,CAACE,EAAE,CAAC,EAAE;IACf,iBAAAW,MAAA,CAAiBV,UAAU,CAAC,CAAC,CAAC,OAAAU,MAAA,CAAIV,UAAU,CAAC,CAAC,CAAC;;EAGjD,IAAIM,OAAO,KAAK,IAAI,EAAE;IACpB,iBAAAI,MAAA,CAAiBV,UAAU,CAAC,CAAC,CAAC,EAAAU,MAAA,CAAGH,OAAO,IAAI,IAAI,IAAIA,OAAO,KAAK,IAAI,GAAG,EAAE,OAAAG,MAAA,CAAOH,OAAO,CAAE;;EAG3F,IAAID,OAAO,KAAK,KAAK,EAAE;IACrB,kBAAAI,MAAA,CAAkBV,UAAU,CAAC,CAAC,CAAC,EAAAU,MAAA,CAAGH,OAAO,IAAI,IAAI,IAAIA,OAAO,KAAK,KAAK,GAAG,EAAE,OAAAG,MAAA,CAAOH,OAAO,CAAE;;EAG7F,MAAM,IAAIE,KAAK,CAAC,qBAAqB,GAAGV,EAAE,CAACE,QAAQ,EAAE,CAAC;AACxD;AAEA,OAAM,SAAUU,cAAcA,CAAEC,KAAa;EAC3C,IAAMC,MAAM,GAAG,qBAAqB;EAEpC,IAAID,KAAK,CAACE,UAAU,CAACD,MAAM,CAAC,EAAE;IAC5BD,KAAK,GAAGA,KAAK,CAACG,SAAS,CAACF,MAAM,CAACG,MAAM,EAAEJ,KAAK,CAACI,MAAM,CAAC;IACpD,IAAIjB,EAAE,GAAGH,SAAS,CAACgB,KAAK,CAAC;IACzB,IAAMK,UAAU,GAAGlB,EAAE,CAACS,YAAY,EAAE,CAACU,MAAM,CAAC,UAACC,MAAM,EAAI;MACrD,OAAOA,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAC;IAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;IAEL,IAAIF,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MACzB,MAAM,IAAIR,KAAK,CAAC,qBAAqB,GAAGG,KAAK,CAAC;;IAGhDb,EAAE,GAAGA,EAAE,CAACqB,WAAW,CAAC,KAAK,CAAC;IAC1BrB,EAAE,GAAGA,EAAE,CAACsB,WAAW,CAAC,kBAAkB,CAAC;IACvCtB,EAAE,GAAGA,EAAE,CAACsB,WAAW,SAAAX,MAAA,CAASO,UAAU,CAAC,CAAC,CAAC,CAAE,CAAC;IAC5CL,KAAK,GAAGb,EAAE,CAACE,QAAQ,EAAE;;EAGvB,OAAOW,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}
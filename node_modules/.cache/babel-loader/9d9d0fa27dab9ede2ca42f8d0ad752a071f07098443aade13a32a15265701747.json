{"ast":null,"code":"import { HKDF } from '@stablelib/hkdf';\nimport * as x25519 from '@stablelib/x25519';\nimport { SHA256, hash } from '@stablelib/sha256';\nimport { ChaCha20Poly1305 } from '@stablelib/chacha20poly1305';\nexport var stablelib = {\n  hashSHA256: function hashSHA256(data) {\n    return hash(data);\n  },\n  getHKDF: function getHKDF(ck, ikm) {\n    var hkdf = new HKDF(SHA256, ikm, ck);\n    var okmU8Array = hkdf.expand(96);\n    var okm = okmU8Array;\n    var k1 = okm.subarray(0, 32);\n    var k2 = okm.subarray(32, 64);\n    var k3 = okm.subarray(64, 96);\n    return [k1, k2, k3];\n  },\n  generateX25519KeyPair: function generateX25519KeyPair() {\n    var keypair = x25519.generateKeyPair();\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    };\n  },\n  generateX25519KeyPairFromSeed: function generateX25519KeyPairFromSeed(seed) {\n    var keypair = x25519.generateKeyPairFromSeed(seed);\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    };\n  },\n  generateX25519SharedKey: function generateX25519SharedKey(privateKey, publicKey) {\n    return x25519.sharedKey(privateKey, publicKey);\n  },\n  chaCha20Poly1305Encrypt: function chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {\n    var ctx = new ChaCha20Poly1305(k);\n    return ctx.seal(nonce, plaintext, ad);\n  },\n  chaCha20Poly1305Decrypt: function chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k) {\n    var ctx = new ChaCha20Poly1305(k);\n    return ctx.open(nonce, ciphertext, ad);\n  }\n};","map":{"version":3,"names":["HKDF","x25519","SHA256","hash","ChaCha20Poly1305","stablelib","hashSHA256","data","getHKDF","ck","ikm","hkdf","okmU8Array","expand","okm","k1","subarray","k2","k3","generateX25519KeyPair","keypair","generateKeyPair","publicKey","privateKey","secretKey","generateX25519KeyPairFromSeed","seed","generateKeyPairFromSeed","generateX25519SharedKey","sharedKey","chaCha20Poly1305Encrypt","plaintext","nonce","ad","k","ctx","seal","chaCha20Poly1305Decrypt","ciphertext","open"],"sources":["/Users/apple/Documents/treasure/node_modules/@chainsafe/libp2p-noise/src/crypto/stablelib.ts"],"sourcesContent":["import { HKDF } from '@stablelib/hkdf'\nimport * as x25519 from '@stablelib/x25519'\nimport { SHA256, hash } from '@stablelib/sha256'\nimport { ChaCha20Poly1305 } from '@stablelib/chacha20poly1305'\nimport type { bytes32, bytes } from '../@types/basic.js'\nimport type { Hkdf } from '../@types/handshake.js'\nimport type { KeyPair } from '../@types/libp2p.js'\nimport type { ICryptoInterface } from '../crypto.js'\n\nexport const stablelib: ICryptoInterface = {\n  hashSHA256 (data: Uint8Array): Uint8Array {\n    return hash(data)\n  },\n\n  getHKDF (ck: bytes32, ikm: Uint8Array): Hkdf {\n    const hkdf = new HKDF(SHA256, ikm, ck)\n    const okmU8Array = hkdf.expand(96)\n    const okm = okmU8Array\n\n    const k1 = okm.subarray(0, 32)\n    const k2 = okm.subarray(32, 64)\n    const k3 = okm.subarray(64, 96)\n\n    return [k1, k2, k3]\n  },\n\n  generateX25519KeyPair (): KeyPair {\n    const keypair = x25519.generateKeyPair()\n\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    }\n  },\n\n  generateX25519KeyPairFromSeed (seed: Uint8Array): KeyPair {\n    const keypair = x25519.generateKeyPairFromSeed(seed)\n\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    }\n  },\n\n  generateX25519SharedKey (privateKey: Uint8Array, publicKey: Uint8Array): Uint8Array {\n    return x25519.sharedKey(privateKey, publicKey)\n  },\n\n  chaCha20Poly1305Encrypt (plaintext: Uint8Array, nonce: Uint8Array, ad: Uint8Array, k: bytes32): bytes {\n    const ctx = new ChaCha20Poly1305(k)\n\n    return ctx.seal(nonce, plaintext, ad)\n  },\n\n  chaCha20Poly1305Decrypt (ciphertext: Uint8Array, nonce: Uint8Array, ad: Uint8Array, k: bytes32): bytes | null {\n    const ctx = new ChaCha20Poly1305(k)\n\n    return ctx.open(nonce, ciphertext, ad)\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,OAAO,KAAKC,MAAM,MAAM,mBAAmB;AAC3C,SAASC,MAAM,EAAEC,IAAI,QAAQ,mBAAmB;AAChD,SAASC,gBAAgB,QAAQ,6BAA6B;AAM9D,OAAO,IAAMC,SAAS,GAAqB;EACzCC,UAAU,WAAAA,WAAEC,IAAgB;IAC1B,OAAOJ,IAAI,CAACI,IAAI,CAAC;EACnB,CAAC;EAEDC,OAAO,WAAAA,QAAEC,EAAW,EAAEC,GAAe;IACnC,IAAMC,IAAI,GAAG,IAAIX,IAAI,CAACE,MAAM,EAAEQ,GAAG,EAAED,EAAE,CAAC;IACtC,IAAMG,UAAU,GAAGD,IAAI,CAACE,MAAM,CAAC,EAAE,CAAC;IAClC,IAAMC,GAAG,GAAGF,UAAU;IAEtB,IAAMG,EAAE,GAAGD,GAAG,CAACE,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;IAC9B,IAAMC,EAAE,GAAGH,GAAG,CAACE,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC;IAC/B,IAAME,EAAE,GAAGJ,GAAG,CAACE,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC;IAE/B,OAAO,CAACD,EAAE,EAAEE,EAAE,EAAEC,EAAE,CAAC;EACrB,CAAC;EAEDC,qBAAqB,WAAAA,sBAAA;IACnB,IAAMC,OAAO,GAAGnB,MAAM,CAACoB,eAAe,EAAE;IAExC,OAAO;MACLC,SAAS,EAAEF,OAAO,CAACE,SAAS;MAC5BC,UAAU,EAAEH,OAAO,CAACI;KACrB;EACH,CAAC;EAEDC,6BAA6B,WAAAA,8BAAEC,IAAgB;IAC7C,IAAMN,OAAO,GAAGnB,MAAM,CAAC0B,uBAAuB,CAACD,IAAI,CAAC;IAEpD,OAAO;MACLJ,SAAS,EAAEF,OAAO,CAACE,SAAS;MAC5BC,UAAU,EAAEH,OAAO,CAACI;KACrB;EACH,CAAC;EAEDI,uBAAuB,WAAAA,wBAAEL,UAAsB,EAAED,SAAqB;IACpE,OAAOrB,MAAM,CAAC4B,SAAS,CAACN,UAAU,EAAED,SAAS,CAAC;EAChD,CAAC;EAEDQ,uBAAuB,WAAAA,wBAAEC,SAAqB,EAAEC,KAAiB,EAAEC,EAAc,EAAEC,CAAU;IAC3F,IAAMC,GAAG,GAAG,IAAI/B,gBAAgB,CAAC8B,CAAC,CAAC;IAEnC,OAAOC,GAAG,CAACC,IAAI,CAACJ,KAAK,EAAED,SAAS,EAAEE,EAAE,CAAC;EACvC,CAAC;EAEDI,uBAAuB,WAAAA,wBAAEC,UAAsB,EAAEN,KAAiB,EAAEC,EAAc,EAAEC,CAAU;IAC5F,IAAMC,GAAG,GAAG,IAAI/B,gBAAgB,CAAC8B,CAAC,CAAC;IAEnC,OAAOC,GAAG,CAACI,IAAI,CAACP,KAAK,EAAEM,UAAU,EAAEL,EAAE,CAAC;EACxC;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
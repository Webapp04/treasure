{"ast":null,"code":"/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339(time) {\n  var year = time.getUTCFullYear();\n  var month = String(time.getUTCMonth() + 1).padStart(2, '0');\n  var day = String(time.getUTCDate()).padStart(2, '0');\n  var hour = String(time.getUTCHours()).padStart(2, '0');\n  var minute = String(time.getUTCMinutes()).padStart(2, '0');\n  var seconds = String(time.getUTCSeconds()).padStart(2, '0');\n  var milliseconds = time.getUTCMilliseconds();\n  var nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0');\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(seconds, \".\").concat(nanoseconds, \"Z\");\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339(time) {\n  var rfc3339Matcher = new RegExp(\n  // 2006-01-02T\n  '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n  // 15:04:05\n  '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n  // .999999999Z\n  '\\\\.(\\\\d+)Z');\n  var m = String(time).trim().match(rfc3339Matcher);\n  if (m == null) {\n    throw new Error('Invalid format');\n  }\n  var year = parseInt(m[1], 10);\n  var month = parseInt(m[2], 10) - 1;\n  var date = parseInt(m[3], 10);\n  var hour = parseInt(m[4], 10);\n  var minute = parseInt(m[5], 10);\n  var second = parseInt(m[6], 10);\n  var millisecond = parseInt(m[7].slice(0, -6), 10);\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}","map":{"version":3,"names":["toRFC3339","time","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","nanoseconds","concat","parseRFC3339","rfc3339Matcher","RegExp","m","trim","match","Error","parseInt","date","second","millisecond","slice","Date","UTC"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/record/src/utils.ts"],"sourcesContent":["/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339 (time: Date) {\n  const year = time.getUTCFullYear()\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0')\n  const day = String(time.getUTCDate()).padStart(2, '0')\n  const hour = String(time.getUTCHours()).padStart(2, '0')\n  const minute = String(time.getUTCMinutes()).padStart(2, '0')\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0')\n  const milliseconds = time.getUTCMilliseconds()\n  const nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0')\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`\n}\n\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339 (time: string) {\n  const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n    // 15:04:05\n    '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n    // .999999999Z\n    '\\\\.(\\\\d+)Z'\n  )\n  const m = String(time).trim().match(rfc3339Matcher)\n\n  if (m == null) {\n    throw new Error('Invalid format')\n  }\n\n  const year = parseInt(m[1], 10)\n  const month = parseInt(m[2], 10) - 1\n  const date = parseInt(m[3], 10)\n  const hour = parseInt(m[4], 10)\n  const minute = parseInt(m[5], 10)\n  const second = parseInt(m[6], 10)\n  const millisecond = parseInt(m[7].slice(0, -6), 10)\n\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond))\n}\n"],"mappings":"AAAA;;;;AAIA,OAAM,SAAUA,SAASA,CAAEC,IAAU;EACnC,IAAMC,IAAI,GAAGD,IAAI,CAACE,cAAc,EAAE;EAClC,IAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,WAAW,EAAE,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7D,IAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,UAAU,EAAE,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACtD,IAAMG,IAAI,GAAGL,MAAM,CAACJ,IAAI,CAACU,WAAW,EAAE,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACxD,IAAMK,MAAM,GAAGP,MAAM,CAACJ,IAAI,CAACY,aAAa,EAAE,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC5D,IAAMO,OAAO,GAAGT,MAAM,CAACJ,IAAI,CAACc,aAAa,EAAE,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7D,IAAMS,YAAY,GAAGf,IAAI,CAACgB,kBAAkB,EAAE;EAC9C,IAAMC,WAAW,GAAGb,MAAM,CAACW,YAAY,GAAG,IAAI,GAAG,IAAI,CAAC,CAACT,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEvE,UAAAY,MAAA,CAAUjB,IAAI,OAAAiB,MAAA,CAAIf,KAAK,OAAAe,MAAA,CAAIX,GAAG,OAAAW,MAAA,CAAIT,IAAI,OAAAS,MAAA,CAAIP,MAAM,OAAAO,MAAA,CAAIL,OAAO,OAAAK,MAAA,CAAID,WAAW;AAC5E;AAEA;;;;AAIA,OAAM,SAAUE,YAAYA,CAAEnB,IAAY;EACxC,IAAMoB,cAAc,GAAG,IAAIC,MAAM;EAC/B;EACA,6BAA6B;EAC7B;EACA,4BAA4B;EAC5B;EACA,YAAY,CACb;EACD,IAAMC,CAAC,GAAGlB,MAAM,CAACJ,IAAI,CAAC,CAACuB,IAAI,EAAE,CAACC,KAAK,CAACJ,cAAc,CAAC;EAEnD,IAAIE,CAAC,IAAI,IAAI,EAAE;IACb,MAAM,IAAIG,KAAK,CAAC,gBAAgB,CAAC;;EAGnC,IAAMxB,IAAI,GAAGyB,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,IAAMnB,KAAK,GAAGuB,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;EACpC,IAAMK,IAAI,GAAGD,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,IAAMb,IAAI,GAAGiB,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,IAAMX,MAAM,GAAGe,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACjC,IAAMM,MAAM,GAAGF,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACjC,IAAMO,WAAW,GAAGH,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAEnD,OAAO,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC/B,IAAI,EAAEE,KAAK,EAAEwB,IAAI,EAAElB,IAAI,EAAEE,MAAM,EAAEiB,MAAM,EAAEC,WAAW,CAAC,CAAC;AACjF"},"metadata":{},"sourceType":"module","externalDependencies":[]}
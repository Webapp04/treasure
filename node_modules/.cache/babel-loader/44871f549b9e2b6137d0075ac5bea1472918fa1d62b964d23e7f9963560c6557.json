{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CID } from 'multiformats/cid';\nimport { createEncoder, createHeader } from './encoder.js';\nimport { create as iteratorChannel } from './iterator-channel.js';\nimport { bytesReader, readHeader } from './decoder.js';\nexport var CarWriter = /*#__PURE__*/function () {\n  function CarWriter(roots, encoder) {\n    _classCallCheck(this, CarWriter);\n    this._encoder = encoder;\n    this._mutex = encoder.setRoots(roots);\n    this._ended = false;\n  }\n  _createClass(CarWriter, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(block) {\n        var _this = this;\n        var cid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!(block.bytes instanceof Uint8Array) || !block.cid)) {\n                _context.next = 2;\n                break;\n              }\n              throw new TypeError('Can only write {cid, bytes} objects');\n            case 2:\n              if (!this._ended) {\n                _context.next = 4;\n                break;\n              }\n              throw new Error('Already closed');\n            case 4:\n              cid = CID.asCID(block.cid);\n              if (cid) {\n                _context.next = 7;\n                break;\n              }\n              throw new TypeError('Can only write {cid, bytes} objects');\n            case 7:\n              this._mutex = this._mutex.then(function () {\n                return _this._encoder.writeBlock({\n                  cid: cid,\n                  bytes: block.bytes\n                });\n              });\n              return _context.abrupt(\"return\", this._mutex);\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function put(_x) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this._ended) {\n                _context2.next = 2;\n                break;\n              }\n              throw new Error('Already closed');\n            case 2:\n              _context2.next = 4;\n              return this._mutex;\n            case 4:\n              this._ended = true;\n              return _context2.abrupt(\"return\", this._encoder.close());\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n  }], [{\n    key: \"create\",\n    value: function create(roots) {\n      roots = toRoots(roots);\n      var _encodeWriter = encodeWriter(),\n        encoder = _encodeWriter.encoder,\n        iterator = _encodeWriter.iterator;\n      var writer = new CarWriter(roots, encoder);\n      var out = new CarWriterOut(iterator);\n      return {\n        writer: writer,\n        out: out\n      };\n    }\n  }, {\n    key: \"createAppender\",\n    value: function createAppender() {\n      var _encodeWriter2 = encodeWriter(),\n        encoder = _encodeWriter2.encoder,\n        iterator = _encodeWriter2.iterator;\n      encoder.setRoots = function () {\n        return Promise.resolve();\n      };\n      var writer = new CarWriter([], encoder);\n      var out = new CarWriterOut(iterator);\n      return {\n        writer: writer,\n        out: out\n      };\n    }\n  }, {\n    key: \"updateRootsInBytes\",\n    value: function () {\n      var _updateRootsInBytes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(bytes, roots) {\n        var reader, newHeader;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              reader = bytesReader(bytes);\n              _context3.next = 3;\n              return readHeader(reader);\n            case 3:\n              newHeader = createHeader(roots);\n              if (!(Number(reader.pos) !== newHeader.length)) {\n                _context3.next = 6;\n                break;\n              }\n              throw new Error(\"updateRoots() can only overwrite a header of the same length (old header is \".concat(reader.pos, \" bytes, new header is \").concat(newHeader.length, \" bytes)\"));\n            case 6:\n              bytes.set(newHeader, 0);\n              return _context3.abrupt(\"return\", bytes);\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function updateRootsInBytes(_x2, _x3) {\n        return _updateRootsInBytes.apply(this, arguments);\n      }\n      return updateRootsInBytes;\n    }()\n  }]);\n  return CarWriter;\n}();\nexport var CarWriterOut = /*#__PURE__*/function (_Symbol$asyncIterator) {\n  function CarWriterOut(iterator) {\n    _classCallCheck(this, CarWriterOut);\n    this._iterator = iterator;\n  }\n  _createClass(CarWriterOut, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      if (this._iterating) {\n        throw new Error('Multiple iterator not supported');\n      }\n      this._iterating = true;\n      return this._iterator;\n    }\n  }]);\n  return CarWriterOut;\n}(Symbol.asyncIterator);\nfunction encodeWriter() {\n  var iw = iteratorChannel();\n  var writer = iw.writer,\n    iterator = iw.iterator;\n  var encoder = createEncoder(writer);\n  return {\n    encoder: encoder,\n    iterator: iterator\n  };\n}\nfunction toRoots(roots) {\n  if (roots === undefined) {\n    return [];\n  }\n  if (!Array.isArray(roots)) {\n    var cid = CID.asCID(roots);\n    if (!cid) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    return [cid];\n  }\n  var _roots = [];\n  var _iterator = _createForOfIteratorHelper(roots),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var root = _step.value;\n      var _root = CID.asCID(root);\n      if (!_root) {\n        throw new TypeError('roots must be a single CID or an array of CIDs');\n      }\n      _roots.push(_root);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return _roots;\n}\nexport var __browser = true;","map":{"version":3,"names":["CID","createEncoder","createHeader","create","iteratorChannel","bytesReader","readHeader","CarWriter","roots","encoder","_classCallCheck","_encoder","_mutex","setRoots","_ended","_createClass","key","value","_put","_asyncToGenerator","_regeneratorRuntime","mark","_callee","block","_this","cid","wrap","_callee$","_context","prev","next","bytes","Uint8Array","TypeError","Error","asCID","then","writeBlock","abrupt","stop","put","_x","apply","arguments","_close","_callee2","_callee2$","_context2","close","toRoots","_encodeWriter","encodeWriter","iterator","writer","out","CarWriterOut","createAppender","_encodeWriter2","Promise","resolve","_updateRootsInBytes","_callee3","reader","newHeader","_callee3$","_context3","Number","pos","length","concat","set","updateRootsInBytes","_x2","_x3","_Symbol$asyncIterator","_iterator","_iterating","Symbol","asyncIterator","iw","undefined","Array","isArray","_roots","_createForOfIteratorHelper","_step","s","n","done","root","_root","push","err","e","f","__browser"],"sources":["/Users/apple/Documents/treasure/node_modules/@ipld/car/esm/lib/writer-browser.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport {\n  createEncoder,\n  createHeader\n} from './encoder.js';\nimport { create as iteratorChannel } from './iterator-channel.js';\nimport {\n  bytesReader,\n  readHeader\n} from './decoder.js';\nexport class CarWriter {\n  constructor(roots, encoder) {\n    this._encoder = encoder;\n    this._mutex = encoder.setRoots(roots);\n    this._ended = false;\n  }\n  async put(block) {\n    if (!(block.bytes instanceof Uint8Array) || !block.cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    const cid = CID.asCID(block.cid);\n    if (!cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    this._mutex = this._mutex.then(() => this._encoder.writeBlock({\n      cid,\n      bytes: block.bytes\n    }));\n    return this._mutex;\n  }\n  async close() {\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    await this._mutex;\n    this._ended = true;\n    return this._encoder.close();\n  }\n  static create(roots) {\n    roots = toRoots(roots);\n    const {encoder, iterator} = encodeWriter();\n    const writer = new CarWriter(roots, encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static createAppender() {\n    const {encoder, iterator} = encodeWriter();\n    encoder.setRoots = () => Promise.resolve();\n    const writer = new CarWriter([], encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static async updateRootsInBytes(bytes, roots) {\n    const reader = bytesReader(bytes);\n    await readHeader(reader);\n    const newHeader = createHeader(roots);\n    if (Number(reader.pos) !== newHeader.length) {\n      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${ reader.pos } bytes, new header is ${ newHeader.length } bytes)`);\n    }\n    bytes.set(newHeader, 0);\n    return bytes;\n  }\n}\nexport class CarWriterOut {\n  constructor(iterator) {\n    this._iterator = iterator;\n  }\n  [Symbol.asyncIterator]() {\n    if (this._iterating) {\n      throw new Error('Multiple iterator not supported');\n    }\n    this._iterating = true;\n    return this._iterator;\n  }\n}\nfunction encodeWriter() {\n  const iw = iteratorChannel();\n  const {writer, iterator} = iw;\n  const encoder = createEncoder(writer);\n  return {\n    encoder,\n    iterator\n  };\n}\nfunction toRoots(roots) {\n  if (roots === undefined) {\n    return [];\n  }\n  if (!Array.isArray(roots)) {\n    const cid = CID.asCID(roots);\n    if (!cid) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    return [cid];\n  }\n  const _roots = [];\n  for (const root of roots) {\n    const _root = CID.asCID(root);\n    if (!_root) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    _roots.push(_root);\n  }\n  return _roots;\n}\nexport const __browser = true;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
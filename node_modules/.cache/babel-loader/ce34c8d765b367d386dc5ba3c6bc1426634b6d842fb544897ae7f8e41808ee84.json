{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { RejectReason } from './types.js';\nexport var MessageSource;\n(function (MessageSource) {\n  MessageSource[\"forward\"] = \"forward\";\n  MessageSource[\"publish\"] = \"publish\";\n})(MessageSource || (MessageSource = {}));\nexport var InclusionReason;\n(function (InclusionReason) {\n  /** Peer was a fanaout peer. */\n  InclusionReason[\"Fanout\"] = \"fanout\";\n  /** Included from random selection. */\n  InclusionReason[\"Random\"] = \"random\";\n  /** Peer subscribed. */\n  InclusionReason[\"Subscribed\"] = \"subscribed\";\n  /** On heartbeat, peer was included to fill the outbound quota. */\n  InclusionReason[\"Outbound\"] = \"outbound\";\n  /** On heartbeat, not enough peers in mesh */\n  InclusionReason[\"NotEnough\"] = \"not_enough\";\n  /** On heartbeat opportunistic grafting due to low mesh score */\n  InclusionReason[\"Opportunistic\"] = \"opportunistic\";\n})(InclusionReason || (InclusionReason = {}));\n/// Reasons why a peer was removed from the mesh.\nexport var ChurnReason;\n(function (ChurnReason) {\n  /// Peer disconnected.\n  ChurnReason[\"Dc\"] = \"disconnected\";\n  /// Peer had a bad score.\n  ChurnReason[\"BadScore\"] = \"bad_score\";\n  /// Peer sent a PRUNE.\n  ChurnReason[\"Prune\"] = \"prune\";\n  /// Peer unsubscribed.\n  ChurnReason[\"Unsub\"] = \"unsubscribed\";\n  /// Too many peers.\n  ChurnReason[\"Excess\"] = \"excess\";\n})(ChurnReason || (ChurnReason = {}));\n/// Kinds of reasons a peer's score has been penalized\nexport var ScorePenalty;\n(function (ScorePenalty) {\n  /// A peer grafted before waiting the back-off time.\n  ScorePenalty[\"GraftBackoff\"] = \"graft_backoff\";\n  /// A Peer did not respond to an IWANT request in time.\n  ScorePenalty[\"BrokenPromise\"] = \"broken_promise\";\n  /// A Peer did not send enough messages as expected.\n  ScorePenalty[\"MessageDeficit\"] = \"message_deficit\";\n  /// Too many peers under one IP address.\n  ScorePenalty[\"IPColocation\"] = \"IP_colocation\";\n})(ScorePenalty || (ScorePenalty = {}));\nexport var IHaveIgnoreReason;\n(function (IHaveIgnoreReason) {\n  IHaveIgnoreReason[\"LowScore\"] = \"low_score\";\n  IHaveIgnoreReason[\"MaxIhave\"] = \"max_ihave\";\n  IHaveIgnoreReason[\"MaxIasked\"] = \"max_iasked\";\n})(IHaveIgnoreReason || (IHaveIgnoreReason = {}));\nexport var ScoreThreshold;\n(function (ScoreThreshold) {\n  ScoreThreshold[\"graylist\"] = \"graylist\";\n  ScoreThreshold[\"publish\"] = \"publish\";\n  ScoreThreshold[\"gossip\"] = \"gossip\";\n  ScoreThreshold[\"mesh\"] = \"mesh\";\n})(ScoreThreshold || (ScoreThreshold = {}));\n/**\n * A collection of metrics used throughout the Gossipsub behaviour.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getMetrics(register, topicStrToLabel, opts) {\n  // Using function style instead of class to prevent having to re-declare all MetricsPrometheus types.\n  return {\n    /* Metrics for static config */\n    protocolsEnabled: register.gauge({\n      name: 'gossipsub_protocol',\n      help: 'Status of enabled protocols',\n      labelNames: ['protocol']\n    }),\n    /* Metrics per known topic */\n    /** Status of our subscription to this topic. This metric allows analyzing other topic metrics\n     *  filtered by our current subscription status.\n     *  = rust-libp2p `topic_subscription_status` */\n    topicSubscriptionStatus: register.gauge({\n      name: 'gossipsub_topic_subscription_status',\n      help: 'Status of our subscription to this topic',\n      labelNames: ['topicStr']\n    }),\n    /** Number of peers subscribed to each topic. This allows us to analyze a topic's behaviour\n     * regardless of our subscription status. */\n    topicPeersCount: register.gauge({\n      name: 'gossipsub_topic_peer_count',\n      help: 'Number of peers subscribed to each topic',\n      labelNames: ['topicStr']\n    }),\n    /* Metrics regarding mesh state */\n    /** Number of peers in our mesh. This metric should be updated with the count of peers for a\n     *  topic in the mesh regardless of inclusion and churn events.\n     *  = rust-libp2p `mesh_peer_counts` */\n    meshPeerCounts: register.gauge({\n      name: 'gossipsub_mesh_peer_count',\n      help: 'Number of peers in our mesh',\n      labelNames: ['topicStr']\n    }),\n    /** Number of times we include peers in a topic mesh for different reasons.\n     *  = rust-libp2p `mesh_peer_inclusion_events` */\n    meshPeerInclusionEvents: register.gauge({\n      name: 'gossipsub_mesh_peer_inclusion_events_total',\n      help: 'Number of times we include peers in a topic mesh for different reasons',\n      labelNames: ['topic', 'reason']\n    }),\n    /** Number of times we remove peers in a topic mesh for different reasons.\n     *  = rust-libp2p `mesh_peer_churn_events` */\n    meshPeerChurnEvents: register.gauge({\n      name: 'gossipsub_peer_churn_events_total',\n      help: 'Number of times we remove peers in a topic mesh for different reasons',\n      labelNames: ['topic', 'reason']\n    }),\n    /* General Metrics */\n    /** Gossipsub supports floodsub, gossipsub v1.0 and gossipsub v1.1. Peers are classified based\n     *  on which protocol they support. This metric keeps track of the number of peers that are\n     *  connected of each type. */\n    peersPerProtocol: register.gauge({\n      name: 'gossipsub_peers_per_protocol_count',\n      help: 'Peers connected for each topic',\n      labelNames: ['protocol']\n    }),\n    /** The time it takes to complete one iteration of the heartbeat. */\n    heartbeatDuration: register.histogram({\n      name: 'gossipsub_heartbeat_duration_seconds',\n      help: 'The time it takes to complete one iteration of the heartbeat',\n      // Should take <10ms, over 1s it's a huge issue that needs debugging, since a heartbeat will be cancelled\n      buckets: [0.01, 0.1, 1]\n    }),\n    /** Heartbeat run took longer than heartbeat interval so next is skipped */\n    heartbeatSkipped: register.gauge({\n      name: 'gossipsub_heartbeat_skipped',\n      help: 'Heartbeat run took longer than heartbeat interval so next is skipped'\n    }),\n    /** Message validation results for each topic.\n     *  Invalid == Reject?\n     *  = rust-libp2p `invalid_messages`, `accepted_messages`, `ignored_messages`, `rejected_messages` */\n    asyncValidationResult: register.gauge({\n      name: 'gossipsub_async_validation_result_total',\n      help: 'Message validation result for each topic',\n      labelNames: ['topic', 'acceptance']\n    }),\n    /** When the user validates a message, it tries to re propagate it to its mesh peers. If the\n     *  message expires from the memcache before it can be validated, we count this a cache miss\n     *  and it is an indicator that the memcache size should be increased.\n     *  = rust-libp2p `mcache_misses` */\n    asyncValidationMcacheHit: register.gauge({\n      name: 'gossipsub_async_validation_mcache_hit_total',\n      help: 'Async validation result reported by the user layer',\n      labelNames: ['hit']\n    }),\n    // RPC outgoing. Track byte length + data structure sizes\n    rpcRecvBytes: register.gauge({\n      name: 'gossipsub_rpc_recv_bytes_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvCount: register.gauge({\n      name: 'gossipsub_rpc_recv_count_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvSubscription: register.gauge({\n      name: 'gossipsub_rpc_recv_subscription_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvMessage: register.gauge({\n      name: 'gossipsub_rpc_recv_message_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvControl: register.gauge({\n      name: 'gossipsub_rpc_recv_control_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvIHave: register.gauge({\n      name: 'gossipsub_rpc_recv_ihave_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvIWant: register.gauge({\n      name: 'gossipsub_rpc_recv_iwant_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvGraft: register.gauge({\n      name: 'gossipsub_rpc_recv_graft_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvPrune: register.gauge({\n      name: 'gossipsub_rpc_recv_prune_total',\n      help: 'RPC recv'\n    }),\n    /** Total count of RPC dropped because acceptFrom() == false */\n    rpcRecvNotAccepted: register.gauge({\n      name: 'gossipsub_rpc_rcv_not_accepted_total',\n      help: 'Total count of RPC dropped because acceptFrom() == false'\n    }),\n    // RPC incoming. Track byte length + data structure sizes\n    rpcSentBytes: register.gauge({\n      name: 'gossipsub_rpc_sent_bytes_total',\n      help: 'RPC sent'\n    }),\n    rpcSentCount: register.gauge({\n      name: 'gossipsub_rpc_sent_count_total',\n      help: 'RPC sent'\n    }),\n    rpcSentSubscription: register.gauge({\n      name: 'gossipsub_rpc_sent_subscription_total',\n      help: 'RPC sent'\n    }),\n    rpcSentMessage: register.gauge({\n      name: 'gossipsub_rpc_sent_message_total',\n      help: 'RPC sent'\n    }),\n    rpcSentControl: register.gauge({\n      name: 'gossipsub_rpc_sent_control_total',\n      help: 'RPC sent'\n    }),\n    rpcSentIHave: register.gauge({\n      name: 'gossipsub_rpc_sent_ihave_total',\n      help: 'RPC sent'\n    }),\n    rpcSentIWant: register.gauge({\n      name: 'gossipsub_rpc_sent_iwant_total',\n      help: 'RPC sent'\n    }),\n    rpcSentGraft: register.gauge({\n      name: 'gossipsub_rpc_sent_graft_total',\n      help: 'RPC sent'\n    }),\n    rpcSentPrune: register.gauge({\n      name: 'gossipsub_rpc_sent_prune_total',\n      help: 'RPC sent'\n    }),\n    // publish message. Track peers sent to and bytes\n    /** Total count of msg published by topic */\n    msgPublishCount: register.gauge({\n      name: 'gossipsub_msg_publish_count_total',\n      help: 'Total count of msg published by topic',\n      labelNames: ['topic']\n    }),\n    /** Total count of peers that we publish a msg to */\n    msgPublishPeers: register.gauge({\n      name: 'gossipsub_msg_publish_peers_total',\n      help: 'Total count of peers that we publish a msg to',\n      labelNames: ['topic']\n    }),\n    /** Total count of peers (by group) that we publish a msg to */\n    // NOTE: Do not use 'group' label since it's a generic already used by Prometheus to group instances\n    msgPublishPeersByGroup: register.gauge({\n      name: 'gossipsub_msg_publish_peers_by_group',\n      help: 'Total count of peers (by group) that we publish a msg to',\n      labelNames: ['topic', 'peerGroup']\n    }),\n    /** Total count of msg publish data.length bytes */\n    msgPublishBytes: register.gauge({\n      name: 'gossipsub_msg_publish_bytes_total',\n      help: 'Total count of msg publish data.length bytes',\n      labelNames: ['topic']\n    }),\n    /** Total count of msg forwarded by topic */\n    msgForwardCount: register.gauge({\n      name: 'gossipsub_msg_forward_count_total',\n      help: 'Total count of msg forwarded by topic',\n      labelNames: ['topic']\n    }),\n    /** Total count of peers that we forward a msg to */\n    msgForwardPeers: register.gauge({\n      name: 'gossipsub_msg_forward_peers_total',\n      help: 'Total count of peers that we forward a msg to',\n      labelNames: ['topic']\n    }),\n    /** Total count of recv msgs before any validation */\n    msgReceivedPreValidation: register.gauge({\n      name: 'gossipsub_msg_received_prevalidation_total',\n      help: 'Total count of recv msgs before any validation',\n      labelNames: ['topic']\n    }),\n    /** Tracks distribution of recv msgs by duplicate, invalid, valid */\n    msgReceivedStatus: register.gauge({\n      name: 'gossipsub_msg_received_status_total',\n      help: 'Tracks distribution of recv msgs by duplicate, invalid, valid',\n      labelNames: ['topic', 'status']\n    }),\n    /** Tracks specific reason of invalid */\n    msgReceivedInvalid: register.gauge({\n      name: 'gossipsub_msg_received_invalid_total',\n      help: 'Tracks specific reason of invalid',\n      labelNames: ['topic', 'error']\n    }),\n    /** Track duplicate message delivery time */\n    duplicateMsgDeliveryDelay: register.histogram({\n      name: 'gossisub_duplicate_msg_delivery_delay_seconds',\n      help: 'Time since the 1st duplicated message validated',\n      labelNames: ['topic'],\n      buckets: [0.25 * opts.maxMeshMessageDeliveriesWindowSec, 0.5 * opts.maxMeshMessageDeliveriesWindowSec, 1 * opts.maxMeshMessageDeliveriesWindowSec, 2 * opts.maxMeshMessageDeliveriesWindowSec, 4 * opts.maxMeshMessageDeliveriesWindowSec]\n    }),\n    /** Total count of late msg delivery total by topic */\n    duplicateMsgLateDelivery: register.gauge({\n      name: 'gossisub_duplicate_msg_late_delivery_total',\n      help: 'Total count of late duplicate message delivery by topic, which triggers P3 penalty',\n      labelNames: ['topic']\n    }),\n    /* Metrics related to scoring */\n    /** Total times score() is called */\n    scoreFnCalls: register.gauge({\n      name: 'gossipsub_score_fn_calls_total',\n      help: 'Total times score() is called'\n    }),\n    /** Total times score() call actually computed computeScore(), no cache */\n    scoreFnRuns: register.gauge({\n      name: 'gossipsub_score_fn_runs_total',\n      help: 'Total times score() call actually computed computeScore(), no cache'\n    }),\n    scoreCachedDelta: register.histogram({\n      name: 'gossipsub_score_cache_delta',\n      help: 'Delta of score between cached values that expired',\n      buckets: [10, 100, 1000]\n    }),\n    /** Current count of peers by score threshold */\n    peersByScoreThreshold: register.gauge({\n      name: 'gossipsub_peers_by_score_threshold_count',\n      help: 'Current count of peers by score threshold',\n      labelNames: ['threshold']\n    }),\n    score: register.avgMinMax({\n      name: 'gossipsub_score',\n      help: 'Avg min max of gossip scores',\n      labelNames: ['topic', 'p']\n    }),\n    /** Separate score weights */\n    scoreWeights: register.avgMinMax({\n      name: 'gossipsub_score_weights',\n      help: 'Separate score weights',\n      labelNames: ['topic', 'p']\n    }),\n    /** Histogram of the scores for each mesh topic. */\n    // TODO: Not implemented\n    scorePerMesh: register.avgMinMax({\n      name: 'gossipsub_score_per_mesh',\n      help: 'Histogram of the scores for each mesh topic',\n      labelNames: ['topic']\n    }),\n    /** A counter of the kind of penalties being applied to peers. */\n    // TODO: Not fully implemented\n    scoringPenalties: register.gauge({\n      name: 'gossipsub_scoring_penalties_total',\n      help: 'A counter of the kind of penalties being applied to peers',\n      labelNames: ['penalty']\n    }),\n    behaviourPenalty: register.histogram({\n      name: 'gossipsub_peer_stat_behaviour_penalty',\n      help: 'Current peer stat behaviour_penalty at each scrape',\n      buckets: [0.25 * opts.behaviourPenaltyThreshold, 0.5 * opts.behaviourPenaltyThreshold, 1 * opts.behaviourPenaltyThreshold, 2 * opts.behaviourPenaltyThreshold, 4 * opts.behaviourPenaltyThreshold]\n    }),\n    // TODO:\n    // - iasked per peer (on heartbeat)\n    // - when promise is resolved, track messages from promises\n    /** Total received IHAVE messages that we ignore for some reason */\n    ihaveRcvIgnored: register.gauge({\n      name: 'gossipsub_ihave_rcv_ignored_total',\n      help: 'Total received IHAVE messages that we ignore for some reason',\n      labelNames: ['reason']\n    }),\n    /** Total received IHAVE messages by topic */\n    ihaveRcvMsgids: register.gauge({\n      name: 'gossipsub_ihave_rcv_msgids_total',\n      help: 'Total received IHAVE messages by topic',\n      labelNames: ['topic']\n    }),\n    /** Total messages per topic we don't have. Not actual requests.\n     *  The number of times we have decided that an IWANT control message is required for this\n     *  topic. A very high metric might indicate an underperforming network.\n     *  = rust-libp2p `topic_iwant_msgs` */\n    ihaveRcvNotSeenMsgids: register.gauge({\n      name: 'gossipsub_ihave_rcv_not_seen_msgids_total',\n      help: 'Total messages per topic we do not have, not actual requests',\n      labelNames: ['topic']\n    }),\n    /** Total received IWANT messages by topic */\n    iwantRcvMsgids: register.gauge({\n      name: 'gossipsub_iwant_rcv_msgids_total',\n      help: 'Total received IWANT messages by topic',\n      labelNames: ['topic']\n    }),\n    /** Total requested messageIDs that we don't have */\n    iwantRcvDonthaveMsgids: register.gauge({\n      name: 'gossipsub_iwant_rcv_dont_have_msgids_total',\n      help: 'Total requested messageIDs that we do not have'\n    }),\n    iwantPromiseStarted: register.gauge({\n      name: 'gossipsub_iwant_promise_sent_total',\n      help: 'Total count of started IWANT promises'\n    }),\n    /** Total count of resolved IWANT promises */\n    iwantPromiseResolved: register.gauge({\n      name: 'gossipsub_iwant_promise_resolved_total',\n      help: 'Total count of resolved IWANT promises'\n    }),\n    /** Total count of peers we have asked IWANT promises that are resolved */\n    iwantPromiseResolvedPeers: register.gauge({\n      name: 'gossipsub_iwant_promise_resolved_peers',\n      help: 'Total count of peers we have asked IWANT promises that are resolved'\n    }),\n    iwantPromiseBroken: register.gauge({\n      name: 'gossipsub_iwant_promise_broken',\n      help: 'Total count of broken IWANT promises'\n    }),\n    /** Histogram of delivery time of resolved IWANT promises */\n    iwantPromiseDeliveryTime: register.histogram({\n      name: 'gossipsub_iwant_promise_delivery_seconds',\n      help: 'Histogram of delivery time of resolved IWANT promises',\n      buckets: [0.5 * opts.gossipPromiseExpireSec, 1 * opts.gossipPromiseExpireSec, 2 * opts.gossipPromiseExpireSec, 4 * opts.gossipPromiseExpireSec]\n    }),\n    /* Data structure sizes */\n    /** Unbounded cache sizes */\n    cacheSize: register.gauge({\n      name: 'gossipsub_cache_size',\n      help: 'Unbounded cache sizes',\n      labelNames: ['cache']\n    }),\n    /** Current mcache msg count */\n    mcacheSize: register.gauge({\n      name: 'gossipsub_mcache_size',\n      help: 'Current mcache msg count'\n    }),\n    topicStrToLabel: topicStrToLabel,\n    toTopic: function toTopic(topicStr) {\n      var _this$topicStrToLabel;\n      return (_this$topicStrToLabel = this.topicStrToLabel.get(topicStr)) !== null && _this$topicStrToLabel !== void 0 ? _this$topicStrToLabel : topicStr;\n    },\n    /** We joined a topic */onJoin: function onJoin(topicStr) {\n      this.topicSubscriptionStatus.set({\n        topicStr: topicStr\n      }, 1);\n      this.meshPeerCounts.set({\n        topicStr: topicStr\n      }, 0); // Reset count\n    },\n    /** We left a topic */onLeave: function onLeave(topicStr) {\n      this.topicSubscriptionStatus.set({\n        topicStr: topicStr\n      }, 0);\n      this.meshPeerCounts.set({\n        topicStr: topicStr\n      }, 0); // Reset count\n    },\n    /** Register the inclusion of peers in our mesh due to some reason. */onAddToMesh: function onAddToMesh(topicStr, reason, count) {\n      var topic = this.toTopic(topicStr);\n      this.meshPeerInclusionEvents.inc({\n        topic: topic,\n        reason: reason\n      }, count);\n    },\n    /** Register the removal of peers in our mesh due to some reason */\n    // - remove_peer_from_mesh()\n    // - heartbeat() Churn::BadScore\n    // - heartbeat() Churn::Excess\n    // - on_disconnect() Churn::Ds\n    onRemoveFromMesh: function onRemoveFromMesh(topicStr, reason, count) {\n      var topic = this.toTopic(topicStr);\n      this.meshPeerChurnEvents.inc({\n        topic: topic,\n        reason: reason\n      }, count);\n    },\n    onReportValidationMcacheHit: function onReportValidationMcacheHit(hit) {\n      this.asyncValidationMcacheHit.inc({\n        hit: hit ? 'hit' : 'miss'\n      });\n    },\n    onReportValidation: function onReportValidation(topicStr, acceptance) {\n      var topic = this.toTopic(topicStr);\n      this.asyncValidationResult.inc({\n        topic: topic,\n        acceptance: acceptance\n      });\n    },\n    /**\n     * - in handle_graft() Penalty::GraftBackoff\n     * - in apply_iwant_penalties() Penalty::BrokenPromise\n     * - in metric_score() P3 Penalty::MessageDeficit\n     * - in metric_score() P6 Penalty::IPColocation\n     */\n    onScorePenalty: function onScorePenalty(penalty) {\n      // Can this be labeled by topic too?\n      this.scoringPenalties.inc({\n        penalty: penalty\n      }, 1);\n    },\n    onIhaveRcv: function onIhaveRcv(topicStr, ihave, idonthave) {\n      var topic = this.toTopic(topicStr);\n      this.ihaveRcvMsgids.inc({\n        topic: topic\n      }, ihave);\n      this.ihaveRcvNotSeenMsgids.inc({\n        topic: topic\n      }, idonthave);\n    },\n    onIwantRcv: function onIwantRcv(iwantByTopic, iwantDonthave) {\n      var _iterator = _createForOfIteratorHelper(iwantByTopic),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            topicStr = _step$value[0],\n            iwant = _step$value[1];\n          var topic = this.toTopic(topicStr);\n          this.iwantRcvMsgids.inc({\n            topic: topic\n          }, iwant);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.iwantRcvDonthaveMsgids.inc(iwantDonthave);\n    },\n    onForwardMsg: function onForwardMsg(topicStr, tosendCount) {\n      var topic = this.toTopic(topicStr);\n      this.msgForwardCount.inc({\n        topic: topic\n      }, 1);\n      this.msgForwardPeers.inc({\n        topic: topic\n      }, tosendCount);\n    },\n    onPublishMsg: function onPublishMsg(topicStr, tosendGroupCount, tosendCount, dataLen) {\n      var topic = this.toTopic(topicStr);\n      this.msgPublishCount.inc({\n        topic: topic\n      }, 1);\n      this.msgPublishBytes.inc({\n        topic: topic\n      }, tosendCount * dataLen);\n      this.msgPublishPeers.inc({\n        topic: topic\n      }, tosendCount);\n      this.msgPublishPeersByGroup.inc({\n        topic: topic,\n        peerGroup: 'direct'\n      }, tosendGroupCount.direct);\n      this.msgPublishPeersByGroup.inc({\n        topic: topic,\n        peerGroup: 'floodsub'\n      }, tosendGroupCount.floodsub);\n      this.msgPublishPeersByGroup.inc({\n        topic: topic,\n        peerGroup: 'mesh'\n      }, tosendGroupCount.mesh);\n      this.msgPublishPeersByGroup.inc({\n        topic: topic,\n        peerGroup: 'fanout'\n      }, tosendGroupCount.fanout);\n    },\n    onMsgRecvPreValidation: function onMsgRecvPreValidation(topicStr) {\n      var topic = this.toTopic(topicStr);\n      this.msgReceivedPreValidation.inc({\n        topic: topic\n      }, 1);\n    },\n    onMsgRecvResult: function onMsgRecvResult(topicStr, status) {\n      var topic = this.toTopic(topicStr);\n      this.msgReceivedStatus.inc({\n        topic: topic,\n        status: status\n      });\n    },\n    onMsgRecvInvalid: function onMsgRecvInvalid(topicStr, reason) {\n      var topic = this.toTopic(topicStr);\n      var error = reason.reason === RejectReason.Error ? reason.error : reason.reason;\n      this.msgReceivedInvalid.inc({\n        topic: topic,\n        error: error\n      }, 1);\n    },\n    onDuplicateMsgDelivery: function onDuplicateMsgDelivery(topicStr, deliveryDelayMs, isLateDelivery) {\n      this.duplicateMsgDeliveryDelay.observe(deliveryDelayMs / 1000);\n      if (isLateDelivery) {\n        var topic = this.toTopic(topicStr);\n        this.duplicateMsgLateDelivery.inc({\n          topic: topic\n        }, 1);\n      }\n    },\n    onRpcRecv: function onRpcRecv(rpc, rpcBytes) {\n      this.rpcRecvBytes.inc(rpcBytes);\n      this.rpcRecvCount.inc(1);\n      if (rpc.subscriptions) this.rpcRecvSubscription.inc(rpc.subscriptions.length);\n      if (rpc.messages) this.rpcRecvMessage.inc(rpc.messages.length);\n      if (rpc.control) {\n        this.rpcRecvControl.inc(1);\n        if (rpc.control.ihave) this.rpcRecvIHave.inc(rpc.control.ihave.length);\n        if (rpc.control.iwant) this.rpcRecvIWant.inc(rpc.control.iwant.length);\n        if (rpc.control.graft) this.rpcRecvGraft.inc(rpc.control.graft.length);\n        if (rpc.control.prune) this.rpcRecvPrune.inc(rpc.control.prune.length);\n      }\n    },\n    onRpcSent: function onRpcSent(rpc, rpcBytes) {\n      this.rpcSentBytes.inc(rpcBytes);\n      this.rpcSentCount.inc(1);\n      if (rpc.subscriptions) this.rpcSentSubscription.inc(rpc.subscriptions.length);\n      if (rpc.messages) this.rpcSentMessage.inc(rpc.messages.length);\n      if (rpc.control) {\n        var _rpc$control$ihave$le, _rpc$control$ihave, _rpc$control$iwant$le, _rpc$control$iwant, _rpc$control$graft$le, _rpc$control$graft, _rpc$control$prune$le, _rpc$control$prune;\n        var ihave = (_rpc$control$ihave$le = (_rpc$control$ihave = rpc.control.ihave) === null || _rpc$control$ihave === void 0 ? void 0 : _rpc$control$ihave.length) !== null && _rpc$control$ihave$le !== void 0 ? _rpc$control$ihave$le : 0;\n        var iwant = (_rpc$control$iwant$le = (_rpc$control$iwant = rpc.control.iwant) === null || _rpc$control$iwant === void 0 ? void 0 : _rpc$control$iwant.length) !== null && _rpc$control$iwant$le !== void 0 ? _rpc$control$iwant$le : 0;\n        var graft = (_rpc$control$graft$le = (_rpc$control$graft = rpc.control.graft) === null || _rpc$control$graft === void 0 ? void 0 : _rpc$control$graft.length) !== null && _rpc$control$graft$le !== void 0 ? _rpc$control$graft$le : 0;\n        var prune = (_rpc$control$prune$le = (_rpc$control$prune = rpc.control.prune) === null || _rpc$control$prune === void 0 ? void 0 : _rpc$control$prune.length) !== null && _rpc$control$prune$le !== void 0 ? _rpc$control$prune$le : 0;\n        if (ihave > 0) this.rpcSentIHave.inc(ihave);\n        if (iwant > 0) this.rpcSentIWant.inc(iwant);\n        if (graft > 0) this.rpcSentGraft.inc(graft);\n        if (prune > 0) this.rpcSentPrune.inc(prune);\n        if (ihave > 0 || iwant > 0 || graft > 0 || prune > 0) this.rpcSentControl.inc(1);\n      }\n    },\n    registerScores: function registerScores(scores, scoreThresholds) {\n      var graylist = 0;\n      var publish = 0;\n      var gossip = 0;\n      var mesh = 0;\n      var _iterator2 = _createForOfIteratorHelper(scores),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var score = _step2.value;\n          if (score >= scoreThresholds.graylistThreshold) graylist++;\n          if (score >= scoreThresholds.publishThreshold) publish++;\n          if (score >= scoreThresholds.gossipThreshold) gossip++;\n          if (score >= 0) mesh++;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.graylist\n      }, graylist);\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.publish\n      }, publish);\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.gossip\n      }, gossip);\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.mesh\n      }, mesh);\n      // Register full score too\n      this.score.set(scores);\n    },\n    registerScoreWeights: function registerScoreWeights(sw) {\n      var _iterator3 = _createForOfIteratorHelper(sw.byTopic),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n            topic = _step3$value[0],\n            wsTopic = _step3$value[1];\n          this.scoreWeights.set({\n            topic: topic,\n            p: 'p1'\n          }, wsTopic.p1w);\n          this.scoreWeights.set({\n            topic: topic,\n            p: 'p2'\n          }, wsTopic.p2w);\n          this.scoreWeights.set({\n            topic: topic,\n            p: 'p3'\n          }, wsTopic.p3w);\n          this.scoreWeights.set({\n            topic: topic,\n            p: 'p3b'\n          }, wsTopic.p3bw);\n          this.scoreWeights.set({\n            topic: topic,\n            p: 'p4'\n          }, wsTopic.p4w);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this.scoreWeights.set({\n        p: 'p5'\n      }, sw.p5w);\n      this.scoreWeights.set({\n        p: 'p6'\n      }, sw.p6w);\n      this.scoreWeights.set({\n        p: 'p7'\n      }, sw.p7w);\n    },\n    registerScorePerMesh: function registerScorePerMesh(mesh, scoreByPeer) {\n      var _this = this;\n      var peersPerTopicLabel = new Map();\n      mesh.forEach(function (peers, topicStr) {\n        var _this$topicStrToLabel2;\n        // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n        var topicLabel = (_this$topicStrToLabel2 = _this.topicStrToLabel.get(topicStr)) !== null && _this$topicStrToLabel2 !== void 0 ? _this$topicStrToLabel2 : 'unknown';\n        var peersInMesh = peersPerTopicLabel.get(topicLabel);\n        if (!peersInMesh) {\n          peersInMesh = new Set();\n          peersPerTopicLabel.set(topicLabel, peersInMesh);\n        }\n        peers.forEach(function (p) {\n          var _peersInMesh;\n          return (_peersInMesh = peersInMesh) === null || _peersInMesh === void 0 ? void 0 : _peersInMesh.add(p);\n        });\n      });\n      var _iterator4 = _createForOfIteratorHelper(peersPerTopicLabel),\n        _step4;\n      try {\n        var _loop = function _loop() {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n            topic = _step4$value[0],\n            peers = _step4$value[1];\n          var meshScores = [];\n          peers.forEach(function (peer) {\n            var _scoreByPeer$get;\n            meshScores.push((_scoreByPeer$get = scoreByPeer.get(peer)) !== null && _scoreByPeer$get !== void 0 ? _scoreByPeer$get : 0);\n          });\n          _this.scorePerMesh.set({\n            topic: topic\n          }, meshScores);\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  };\n}","map":{"version":3,"names":["RejectReason","MessageSource","InclusionReason","ChurnReason","ScorePenalty","IHaveIgnoreReason","ScoreThreshold","getMetrics","register","topicStrToLabel","opts","protocolsEnabled","gauge","name","help","labelNames","topicSubscriptionStatus","topicPeersCount","meshPeerCounts","meshPeerInclusionEvents","meshPeerChurnEvents","peersPerProtocol","heartbeatDuration","histogram","buckets","heartbeatSkipped","asyncValidationResult","asyncValidationMcacheHit","rpcRecvBytes","rpcRecvCount","rpcRecvSubscription","rpcRecvMessage","rpcRecvControl","rpcRecvIHave","rpcRecvIWant","rpcRecvGraft","rpcRecvPrune","rpcRecvNotAccepted","rpcSentBytes","rpcSentCount","rpcSentSubscription","rpcSentMessage","rpcSentControl","rpcSentIHave","rpcSentIWant","rpcSentGraft","rpcSentPrune","msgPublishCount","msgPublishPeers","msgPublishPeersByGroup","msgPublishBytes","msgForwardCount","msgForwardPeers","msgReceivedPreValidation","msgReceivedStatus","msgReceivedInvalid","duplicateMsgDeliveryDelay","maxMeshMessageDeliveriesWindowSec","duplicateMsgLateDelivery","scoreFnCalls","scoreFnRuns","scoreCachedDelta","peersByScoreThreshold","score","avgMinMax","scoreWeights","scorePerMesh","scoringPenalties","behaviourPenalty","behaviourPenaltyThreshold","ihaveRcvIgnored","ihaveRcvMsgids","ihaveRcvNotSeenMsgids","iwantRcvMsgids","iwantRcvDonthaveMsgids","iwantPromiseStarted","iwantPromiseResolved","iwantPromiseResolvedPeers","iwantPromiseBroken","iwantPromiseDeliveryTime","gossipPromiseExpireSec","cacheSize","mcacheSize","toTopic","topicStr","_this$topicStrToLabel","get","onJoin","set","onLeave","onAddToMesh","reason","count","topic","inc","onRemoveFromMesh","onReportValidationMcacheHit","hit","onReportValidation","acceptance","onScorePenalty","penalty","onIhaveRcv","ihave","idonthave","onIwantRcv","iwantByTopic","iwantDonthave","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","value","iwant","err","e","f","onForwardMsg","tosendCount","onPublishMsg","tosendGroupCount","dataLen","peerGroup","direct","floodsub","mesh","fanout","onMsgRecvPreValidation","onMsgRecvResult","status","onMsgRecvInvalid","error","Error","onDuplicateMsgDelivery","deliveryDelayMs","isLateDelivery","observe","onRpcRecv","rpc","rpcBytes","subscriptions","length","messages","control","graft","prune","onRpcSent","_rpc$control$ihave$le","_rpc$control$ihave","_rpc$control$iwant$le","_rpc$control$iwant","_rpc$control$graft$le","_rpc$control$graft","_rpc$control$prune$le","_rpc$control$prune","registerScores","scores","scoreThresholds","graylist","publish","gossip","_iterator2","_step2","graylistThreshold","publishThreshold","gossipThreshold","threshold","registerScoreWeights","sw","_iterator3","byTopic","_step3","_step3$value","wsTopic","p","p1w","p2w","p3w","p3bw","p4w","p5w","p6w","p7w","registerScorePerMesh","scoreByPeer","_this","peersPerTopicLabel","Map","forEach","peers","_this$topicStrToLabel2","topicLabel","peersInMesh","Set","_peersInMesh","add","_iterator4","_step4","_loop","_step4$value","meshScores","peer","_scoreByPeer$get","push"],"sources":["../../src/metrics.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
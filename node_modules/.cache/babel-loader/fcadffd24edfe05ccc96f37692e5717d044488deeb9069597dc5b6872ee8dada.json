{"ast":null,"code":"import { Uint8ArrayList, isUint8ArrayList } from 'uint8arraylist';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare';\nvar ZERO_OFFSET = '0'.charCodeAt(0);\nvar USTAR_MAGIC = uint8ArrayFromString('ustar\\x00', 'binary');\nvar GNU_MAGIC = uint8ArrayFromString('ustar\\x20', 'binary');\nvar GNU_VER = uint8ArrayFromString('\\x20\\x00', 'binary');\nvar MAGIC_OFFSET = 257;\nvar VERSION_OFFSET = 263;\nvar clamp = function clamp(index, len, defaultValue) {\n  if (typeof index !== 'number') return defaultValue;\n  index = ~~index; // Coerce to integer.\n  if (index >= len) return len;\n  if (index >= 0) return index;\n  index += len;\n  if (index >= 0) return index;\n  return 0;\n};\nvar toType = function toType(flag) {\n  switch (flag) {\n    case 0:\n      return 'file';\n    case 1:\n      return 'link';\n    case 2:\n      return 'symlink';\n    case 3:\n      return 'character-device';\n    case 4:\n      return 'block-device';\n    case 5:\n      return 'directory';\n    case 6:\n      return 'fifo';\n    case 7:\n      return 'contiguous-file';\n    case 72:\n      return 'pax-header';\n    case 55:\n      return 'pax-global-header';\n    case 27:\n      return 'gnu-long-link-path';\n    case 28:\n    case 30:\n      return 'gnu-long-path';\n    default:\n      return undefined;\n  }\n};\nvar indexOf = function indexOf(block, num, offset, end) {\n  for (; offset < end; offset++) {\n    if (block.get(offset) === num) return offset;\n  }\n  return end;\n};\nvar cksum = function cksum(block) {\n  var sum = 8 * 32;\n  for (var i = 0; i < 148; i++) sum += block.get(i);\n  for (var j = 156; j < 512; j++) sum += block.get(j);\n  return sum;\n};\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */\nfunction parse256(buf) {\n  // first byte MUST be either 80 or FF\n  // 80 for positive, FF for 2's comp\n  var positive;\n  if (buf.get(0) === 0x80) {\n    positive = true;\n  } else if (buf.get(0) === 0xFF) {\n    positive = false;\n  } else {\n    return 0;\n  }\n  // build up a base-256 tuple from the least sig to the highest\n  var zero = false;\n  var tuple = [];\n  for (var i = buf.length - 1; i > 0; i--) {\n    var byte = buf.get(i);\n    if (positive) tuple.push(byte);else if (zero && byte === 0) tuple.push(0);else if (zero) {\n      zero = false;\n      tuple.push(0x100 - byte);\n    } else tuple.push(0xFF - byte);\n  }\n  var sum = 0;\n  var l = tuple.length;\n  for (var _i = 0; _i < l; _i++) {\n    sum += tuple[_i] * Math.pow(256, _i);\n  }\n  return positive ? sum : -1 * sum;\n}\nvar decodeOct = function decodeOct(val, offset, length) {\n  val = val.sublist(offset, offset + length);\n  offset = 0;\n  // If prefixed with 0x80 then parse as a base-256 integer\n  if ((val.get(offset) & 0x80) !== 0) {\n    return parse256(val);\n  } else {\n    // Older versions of tar can prefix with spaces\n    while (offset < val.length && val.get(offset) === 32) {\n      offset++;\n    }\n    var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);\n    while (offset < end && val.get(offset) === 0) {\n      offset++;\n    }\n    if (end === offset) {\n      return 0;\n    }\n    return parseInt(uint8ArrayToString(val.subarray(offset, end)), 8);\n  }\n};\nvar decodeStr = function decodeStr(val, offset, length, encoding) {\n  return uint8ArrayToString(val.subarray(offset, indexOf(val, 0, offset, offset + length)), encoding);\n};\nexport function decodeLongPath(buf, encoding) {\n  var list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n  return decodeStr(list, 0, buf.length, encoding);\n}\nexport function decodePax(buf, encoding) {\n  var list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n  var result = {};\n  while (list.length > 0) {\n    var i = 0;\n    while (i < buf.length && list.get(i) !== 32) {\n      i++;\n    }\n    var len = parseInt(uint8ArrayToString(list.subarray(0, i)), 10);\n    if (len === 0) {\n      return result;\n    }\n    var b = uint8ArrayToString(list.subarray(i + 1, len - 1), encoding);\n    var keyIndex = b.indexOf('=');\n    if (keyIndex === -1) {\n      return result;\n    }\n    result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);\n    list = list.sublist(len);\n  }\n  return result;\n}\nexport function decode(buf, filenameEncoding) {\n  var list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n  var typeflag = list.get(156) === 0 ? 0 : list.get(156) - ZERO_OFFSET;\n  var name = decodeStr(list, 0, 100, filenameEncoding);\n  var mode = decodeOct(list, 100, 8);\n  var uid = decodeOct(list, 108, 8);\n  var gid = decodeOct(list, 116, 8);\n  var size = decodeOct(list, 124, 12);\n  var mtime = decodeOct(list, 136, 12);\n  var type = toType(typeflag);\n  var linkname = list.get(157) === 0 ? undefined : decodeStr(list, 157, 100, filenameEncoding);\n  var uname = decodeStr(list, 265, 32);\n  var gname = decodeStr(list, 297, 32);\n  var devmajor = decodeOct(list, 329, 8);\n  var devminor = decodeOct(list, 337, 8);\n  var c = cksum(list);\n  // checksum is still initial value if header was null.\n  if (c === 8 * 32) {\n    return null;\n  }\n  // valid checksum\n  if (c !== decodeOct(list, 148, 8)) {\n    throw new Error('Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?');\n  }\n  if (uint8ArrayCompare(USTAR_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0) {\n    // ustar (posix) format.\n    // prepend prefix, if present.\n    if (list.get(345) !== 0) {\n      name = decodeStr(list, 345, 155, filenameEncoding) + '/' + name;\n    }\n  } else if (uint8ArrayCompare(GNU_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0 && uint8ArrayCompare(GNU_VER, list.subarray(VERSION_OFFSET, VERSION_OFFSET + 2)) === 0) {\n    // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n    // multi-volume tarballs.\n  } else {\n    throw new Error('Invalid tar header: unknown format.');\n  }\n  // to support old tar versions that use trailing / to indicate dirs\n  if (typeflag === 0 && name != null && name[name.length - 1] === '/') {\n    typeflag = 5;\n  }\n  return {\n    name: name,\n    mode: mode,\n    uid: uid,\n    gid: gid,\n    size: size,\n    mtime: new Date(1000 * (mtime !== null && mtime !== void 0 ? mtime : 0)),\n    type: type,\n    linkname: linkname,\n    uname: uname,\n    gname: gname,\n    devmajor: devmajor,\n    devminor: devminor\n  };\n}","map":{"version":3,"names":["Uint8ArrayList","isUint8ArrayList","toString","uint8ArrayToString","fromString","uint8ArrayFromString","compare","uint8ArrayCompare","ZERO_OFFSET","charCodeAt","USTAR_MAGIC","GNU_MAGIC","GNU_VER","MAGIC_OFFSET","VERSION_OFFSET","clamp","index","len","defaultValue","toType","flag","undefined","indexOf","block","num","offset","end","get","cksum","sum","i","j","parse256","buf","positive","zero","tuple","length","byte","push","l","Math","pow","decodeOct","val","sublist","parseInt","subarray","decodeStr","encoding","decodeLongPath","list","decodePax","result","b","keyIndex","slice","decode","filenameEncoding","typeflag","name","mode","uid","gid","size","mtime","type","linkname","uname","gname","devmajor","devminor","c","Error","Date"],"sources":["/Users/apple/Documents/treasure/node_modules/it-tar/src/extract-headers.ts"],"sourcesContent":["import { Uint8ArrayList, isUint8ArrayList } from 'uint8arraylist'\nimport { SupportedEncodings, toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare'\nimport type { TarEntryHeader } from '.'\n\nconst ZERO_OFFSET = '0'.charCodeAt(0)\nconst USTAR_MAGIC = uint8ArrayFromString('ustar\\x00', 'binary')\nconst GNU_MAGIC = uint8ArrayFromString('ustar\\x20', 'binary')\nconst GNU_VER = uint8ArrayFromString('\\x20\\x00', 'binary')\nconst MAGIC_OFFSET = 257\nconst VERSION_OFFSET = 263\n\nconst clamp = function (index: number, len: number, defaultValue: number) {\n  if (typeof index !== 'number') return defaultValue\n  index = ~~index // Coerce to integer.\n  if (index >= len) return len\n  if (index >= 0) return index\n  index += len\n  if (index >= 0) return index\n  return 0\n}\n\nconst toType = function (flag: number) {\n  switch (flag) {\n    case 0:\n      return 'file'\n    case 1:\n      return 'link'\n    case 2:\n      return 'symlink'\n    case 3:\n      return 'character-device'\n    case 4:\n      return 'block-device'\n    case 5:\n      return 'directory'\n    case 6:\n      return 'fifo'\n    case 7:\n      return 'contiguous-file'\n    case 72:\n      return 'pax-header'\n    case 55:\n      return 'pax-global-header'\n    case 27:\n      return 'gnu-long-link-path'\n    case 28:\n    case 30:\n      return 'gnu-long-path'\n    default:\n      return undefined\n  }\n}\n\nconst indexOf = function (block: Uint8ArrayList, num: number, offset: number, end: number) {\n  for (; offset < end; offset++) {\n    if (block.get(offset) === num) return offset\n  }\n  return end\n}\n\nconst cksum = function (block: Uint8ArrayList) {\n  let sum = 8 * 32\n  for (let i = 0; i < 148; i++) sum += block.get(i)\n  for (let j = 156; j < 512; j++) sum += block.get(j)\n  return sum\n}\n\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */\nfunction parse256 (buf: Uint8ArrayList): number {\n  // first byte MUST be either 80 or FF\n  // 80 for positive, FF for 2's comp\n  let positive\n  if (buf.get(0) === 0x80) {\n    positive = true\n  } else if (buf.get(0) === 0xFF) {\n    positive = false\n  } else {\n    return 0\n  }\n\n  // build up a base-256 tuple from the least sig to the highest\n  let zero = false\n  const tuple = []\n  for (let i = buf.length - 1; i > 0; i--) {\n    const byte = buf.get(i)\n    if (positive) tuple.push(byte)\n    else if (zero && byte === 0) tuple.push(0)\n    else if (zero) {\n      zero = false\n      tuple.push(0x100 - byte)\n    } else tuple.push(0xFF - byte)\n  }\n\n  let sum = 0\n  const l = tuple.length\n  for (let i = 0; i < l; i++) {\n    sum += tuple[i] * Math.pow(256, i)\n  }\n\n  return positive ? sum : -1 * sum\n}\n\nconst decodeOct = function (val: Uint8ArrayList, offset: number, length: number): number {\n  val = val.sublist(offset, offset + length)\n  offset = 0\n\n  // If prefixed with 0x80 then parse as a base-256 integer\n  if ((val.get(offset) & 0x80) !== 0) {\n    return parse256(val)\n  } else {\n    // Older versions of tar can prefix with spaces\n    while (offset < val.length && val.get(offset) === 32) {\n      offset++\n    }\n\n    const end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length)\n\n    while (offset < end && val.get(offset) === 0) {\n      offset++\n    }\n\n    if (end === offset) {\n      return 0\n    }\n\n    return parseInt(uint8ArrayToString(val.subarray(offset, end)), 8)\n  }\n}\n\nconst decodeStr = function (val: Uint8ArrayList, offset: number, length: number, encoding?: SupportedEncodings) {\n  return uint8ArrayToString(val.subarray(offset, indexOf(val, 0, offset, offset + length)), encoding)\n}\n\nexport function decodeLongPath (buf: Uint8ArrayList | Uint8Array, encoding?: SupportedEncodings) {\n  const list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf)\n  return decodeStr(list, 0, buf.length, encoding)\n}\n\nexport function decodePax (buf: Uint8ArrayList | Uint8Array, encoding?: SupportedEncodings) {\n  let list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf)\n  const result: Record<string, string> = {}\n\n  while (list.length > 0) {\n    let i = 0\n    while (i < buf.length && list.get(i) !== 32) {\n      i++\n    }\n\n    const len = parseInt(uint8ArrayToString(list.subarray(0, i)), 10)\n\n    if (len === 0) {\n      return result\n    }\n\n    const b = uint8ArrayToString(list.subarray(i + 1, len - 1), encoding)\n    const keyIndex = b.indexOf('=')\n\n    if (keyIndex === -1) {\n      return result\n    }\n\n    result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1)\n    list = list.sublist(len)\n  }\n\n  return result\n}\n\nexport function decode (buf: Uint8ArrayList | Uint8Array, filenameEncoding?: SupportedEncodings): TarEntryHeader | null {\n  const list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf)\n  let typeflag = list.get(156) === 0 ? 0 : list.get(156) - ZERO_OFFSET\n\n  let name = decodeStr(list, 0, 100, filenameEncoding)\n  const mode = decodeOct(list, 100, 8)\n  const uid = decodeOct(list, 108, 8)\n  const gid = decodeOct(list, 116, 8)\n  const size = decodeOct(list, 124, 12)\n  const mtime = decodeOct(list, 136, 12)\n  const type = toType(typeflag)\n  const linkname = list.get(157) === 0 ? undefined : decodeStr(list, 157, 100, filenameEncoding)\n  const uname = decodeStr(list, 265, 32)\n  const gname = decodeStr(list, 297, 32)\n  const devmajor = decodeOct(list, 329, 8)\n  const devminor = decodeOct(list, 337, 8)\n\n  const c = cksum(list)\n\n  // checksum is still initial value if header was null.\n  if (c === 8 * 32) {\n    return null\n  }\n\n  // valid checksum\n  if (c !== decodeOct(list, 148, 8)) {\n    throw new Error('Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?')\n  }\n\n  if (uint8ArrayCompare(USTAR_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0) {\n    // ustar (posix) format.\n    // prepend prefix, if present.\n    if (list.get(345) !== 0) {\n      name = decodeStr(list, 345, 155, filenameEncoding) + '/' + name\n    }\n  } else if (uint8ArrayCompare(GNU_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0 &&\n             uint8ArrayCompare(GNU_VER, list.subarray(VERSION_OFFSET, VERSION_OFFSET + 2)) === 0) {\n    // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n    // multi-volume tarballs.\n  } else {\n    throw new Error('Invalid tar header: unknown format.')\n  }\n\n  // to support old tar versions that use trailing / to indicate dirs\n  if (typeflag === 0 && name != null && name[name.length - 1] === '/') {\n    typeflag = 5\n  }\n\n  return {\n    name: name,\n    mode: mode,\n    uid: uid,\n    gid: gid,\n    size: size,\n    mtime: new Date(1000 * (mtime ?? 0)),\n    type: type,\n    linkname: linkname,\n    uname: uname,\n    gname: gname,\n    devmajor: devmajor,\n    devminor: devminor\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
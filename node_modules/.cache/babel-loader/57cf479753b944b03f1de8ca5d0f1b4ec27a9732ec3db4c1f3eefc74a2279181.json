{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { upnpNat } from '@achingbrain/nat-port-mapper';\nimport { logger } from '@libp2p/logger';\nimport { fromNodeAddress } from '@multiformats/multiaddr';\nimport { isBrowser } from 'wherearewe';\nimport isPrivateIp from 'private-ip';\nimport * as pkg from './version.js';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isLoopback } from '@libp2p/utils/multiaddr/is-loopback';\nvar log = logger('libp2p:nat');\nvar DEFAULT_TTL = 7200;\nfunction highPort() {\n  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 65535;\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nexport var NatManager = /*#__PURE__*/function () {\n  function NatManager(components, init) {\n    var _init$description, _init$ttl, _init$keepAlive;\n    _classCallCheck(this, NatManager);\n    this.components = components;\n    this.started = false;\n    this.enabled = init.enabled;\n    this.externalAddress = init.externalAddress;\n    this.localAddress = init.localAddress;\n    this.description = (_init$description = init.description) !== null && _init$description !== void 0 ? _init$description : \"\".concat(pkg.name, \"@\").concat(pkg.version, \" \").concat(this.components.getPeerId().toString());\n    this.ttl = (_init$ttl = init.ttl) !== null && _init$ttl !== void 0 ? _init$ttl : DEFAULT_TTL;\n    this.keepAlive = (_init$keepAlive = init.keepAlive) !== null && _init$keepAlive !== void 0 ? _init$keepAlive : true;\n    this.gateway = init.gateway;\n    if (this.ttl < DEFAULT_TTL) {\n      throw errCode(new Error(\"NatManager ttl should be at least \".concat(DEFAULT_TTL, \" seconds\")), codes.ERR_INVALID_PARAMETERS);\n    }\n  }\n  _createClass(NatManager, [{\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {}\n    /**\n     * Attempt to use uPnP to configure port mapping using the current gateway.\n     *\n     * Run after start to ensure the transport manager has all addresses configured.\n     */\n  }, {\n    key: \"afterStart\",\n    value: function afterStart() {\n      if (isBrowser || !this.enabled || this.started) {\n        return;\n      }\n      this.started = true;\n      // done async to not slow down startup\n      void this._start().catch(function (err) {\n        // hole punching errors are non-fatal\n        log.error(err);\n      });\n    }\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var addrs, _iterator, _step, _this$externalAddress, addr, _addr$toOptions, family, host, port, transport, client, publicIp, publicPort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              addrs = this.components.getTransportManager().getAddrs();\n              _iterator = _createForOfIteratorHelper(addrs);\n              _context.prev = 2;\n              _iterator.s();\n            case 4:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 33;\n                break;\n              }\n              addr = _step.value;\n              // try to open uPnP ports for each thin waist address\n              _addr$toOptions = addr.toOptions(), family = _addr$toOptions.family, host = _addr$toOptions.host, port = _addr$toOptions.port, transport = _addr$toOptions.transport;\n              if (!(!addr.isThinWaistAddress() || transport !== 'tcp')) {\n                _context.next = 9;\n                break;\n              }\n              return _context.abrupt(\"continue\", 31);\n            case 9:\n              if (!isLoopback(addr)) {\n                _context.next = 11;\n                break;\n              }\n              return _context.abrupt(\"continue\", 31);\n            case 11:\n              if (!(family !== 4)) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"continue\", 31);\n            case 13:\n              _context.next = 15;\n              return this._getClient();\n            case 15:\n              client = _context.sent;\n              if (!((_this$externalAddress = this.externalAddress) !== null && _this$externalAddress !== void 0)) {\n                _context.next = 20;\n                break;\n              }\n              _context.t0 = _this$externalAddress;\n              _context.next = 23;\n              break;\n            case 20:\n              _context.next = 22;\n              return client.externalIp();\n            case 22:\n              _context.t0 = _context.sent;\n            case 23:\n              publicIp = _context.t0;\n              if (!isPrivateIp(publicIp)) {\n                _context.next = 26;\n                break;\n              }\n              throw new Error(\"\".concat(publicIp, \" is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT\"));\n            case 26:\n              publicPort = highPort();\n              log(\"opening uPnP connection from \".concat(publicIp, \":\").concat(publicPort, \" to \").concat(host, \":\").concat(port));\n              _context.next = 30;\n              return client.map({\n                publicPort: publicPort,\n                localPort: port,\n                localAddress: this.localAddress,\n                protocol: transport.toUpperCase() === 'TCP' ? 'TCP' : 'UDP'\n              });\n            case 30:\n              this.components.getAddressManager().addObservedAddr(fromNodeAddress({\n                family: 4,\n                address: publicIp,\n                port: publicPort\n              }, transport));\n            case 31:\n              _context.next = 4;\n              break;\n            case 33:\n              _context.next = 38;\n              break;\n            case 35:\n              _context.prev = 35;\n              _context.t1 = _context[\"catch\"](2);\n              _iterator.e(_context.t1);\n            case 38:\n              _context.prev = 38;\n              _iterator.f();\n              return _context.finish(38);\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 35, 38, 41]]);\n      }));\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n      return _start;\n    }()\n  }, {\n    key: \"_getClient\",\n    value: function () {\n      var _getClient2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.client != null)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", this.client);\n            case 2:\n              _context2.next = 4;\n              return upnpNat({\n                description: this.description,\n                ttl: this.ttl,\n                keepAlive: this.keepAlive,\n                gateway: this.gateway\n              });\n            case 4:\n              this.client = _context2.sent;\n              return _context2.abrupt(\"return\", this.client);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _getClient() {\n        return _getClient2.apply(this, arguments);\n      }\n      return _getClient;\n    }()\n    /**\n     * Stops the NAT manager\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(isBrowser || this.client == null)) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              _context3.prev = 2;\n              _context3.next = 5;\n              return this.client.close();\n            case 5:\n              this.client = undefined;\n              _context3.next = 11;\n              break;\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](2);\n              log.error(_context3.t0);\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[2, 8]]);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n  }]);\n  return NatManager;\n}();","map":{"version":3,"names":["upnpNat","logger","fromNodeAddress","isBrowser","isPrivateIp","pkg","errCode","codes","isLoopback","log","DEFAULT_TTL","highPort","min","arguments","length","undefined","max","Math","floor","random","NatManager","components","init","_init$description","_init$ttl","_init$keepAlive","_classCallCheck","started","enabled","externalAddress","localAddress","description","concat","name","version","getPeerId","toString","ttl","keepAlive","gateway","Error","ERR_INVALID_PARAMETERS","_createClass","key","value","isStarted","start","afterStart","_start","catch","err","error","_start2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","addrs","_iterator","_step","_this$externalAddress","addr","_addr$toOptions","family","host","port","transport","client","publicIp","publicPort","wrap","_callee$","_context","prev","next","getTransportManager","getAddrs","_createForOfIteratorHelper","s","n","done","toOptions","isThinWaistAddress","abrupt","_getClient","sent","t0","externalIp","map","localPort","protocol","toUpperCase","getAddressManager","addObservedAddr","address","t1","e","f","finish","stop","apply","_getClient2","_callee2","_callee2$","_context2","_stop","_callee3","_callee3$","_context3","close"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/nat-manager.ts"],"sourcesContent":["import { upnpNat, NatAPI } from '@achingbrain/nat-port-mapper'\nimport { logger } from '@libp2p/logger'\nimport { fromNodeAddress } from '@multiformats/multiaddr'\nimport { isBrowser } from 'wherearewe'\nimport isPrivateIp from 'private-ip'\nimport * as pkg from './version.js'\nimport errCode from 'err-code'\nimport { codes } from './errors.js'\nimport { isLoopback } from '@libp2p/utils/multiaddr/is-loopback'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { Components } from '@libp2p/components'\n\nconst log = logger('libp2p:nat')\nconst DEFAULT_TTL = 7200\n\nfunction highPort (min = 1024, max = 65535) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport interface PMPOptions {\n  /**\n   * Whether to enable PMP as well as UPnP\n   */\n  enabled?: boolean\n}\n\nexport interface NatManagerInit {\n  /**\n   * Whether to enable the NAT manager\n   */\n  enabled: boolean\n\n  /**\n   * Pass a value to use instead of auto-detection\n   */\n  externalAddress?: string\n\n  /**\n   * Pass a value to use instead of auto-detection\n   */\n  localAddress?: string\n\n  /**\n   * A string value to use for the port mapping description on the gateway\n   */\n  description?: string\n\n  /**\n   * How long UPnP port mappings should last for in seconds (minimum 1200)\n   */\n  ttl?: number\n\n  /**\n   * Whether to automatically refresh UPnP port mappings when their TTL is reached\n   */\n  keepAlive: boolean\n\n  /**\n   * Pass a value to use instead of auto-detection\n   */\n  gateway?: string\n}\n\nexport class NatManager implements Startable {\n  private readonly components: Components\n  private readonly enabled: boolean\n  private readonly externalAddress?: string\n  private readonly localAddress?: string\n  private readonly description: string\n  private readonly ttl: number\n  private readonly keepAlive: boolean\n  private readonly gateway?: string\n  private started: boolean\n  private client?: NatAPI\n\n  constructor (components: Components, init: NatManagerInit) {\n    this.components = components\n\n    this.started = false\n    this.enabled = init.enabled\n    this.externalAddress = init.externalAddress\n    this.localAddress = init.localAddress\n    this.description = init.description ?? `${pkg.name}@${pkg.version} ${this.components.getPeerId().toString()}`\n    this.ttl = init.ttl ?? DEFAULT_TTL\n    this.keepAlive = init.keepAlive ?? true\n    this.gateway = init.gateway\n\n    if (this.ttl < DEFAULT_TTL) {\n      throw errCode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), codes.ERR_INVALID_PARAMETERS)\n    }\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  start () {}\n\n  /**\n   * Attempt to use uPnP to configure port mapping using the current gateway.\n   *\n   * Run after start to ensure the transport manager has all addresses configured.\n   */\n  afterStart () {\n    if (isBrowser || !this.enabled || this.started) {\n      return\n    }\n\n    this.started = true\n\n    // done async to not slow down startup\n    void this._start().catch((err) => {\n      // hole punching errors are non-fatal\n      log.error(err)\n    })\n  }\n\n  async _start () {\n    const addrs = this.components.getTransportManager().getAddrs()\n\n    for (const addr of addrs) {\n      // try to open uPnP ports for each thin waist address\n      const { family, host, port, transport } = addr.toOptions()\n\n      if (!addr.isThinWaistAddress() || transport !== 'tcp') {\n        // only bare tcp addresses\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      if (isLoopback(addr)) {\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      if (family !== 4) {\n        // ignore ipv6\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      const client = await this._getClient()\n      const publicIp = this.externalAddress ?? await client.externalIp()\n\n      if (isPrivateIp(publicIp)) {\n        throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`)\n      }\n\n      const publicPort = highPort()\n\n      log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`)\n\n      await client.map({\n        publicPort,\n        localPort: port,\n        localAddress: this.localAddress,\n        protocol: transport.toUpperCase() === 'TCP' ? 'TCP' : 'UDP'\n      })\n\n      this.components.getAddressManager().addObservedAddr(fromNodeAddress({\n        family: 4,\n        address: publicIp,\n        port: publicPort\n      }, transport))\n    }\n  }\n\n  async _getClient () {\n    if (this.client != null) {\n      return this.client\n    }\n\n    this.client = await upnpNat({\n      description: this.description,\n      ttl: this.ttl,\n      keepAlive: this.keepAlive,\n      gateway: this.gateway\n    })\n\n    return this.client\n  }\n\n  /**\n   * Stops the NAT manager\n   */\n  async stop () {\n    if (isBrowser || this.client == null) {\n      return\n    }\n\n    try {\n      await this.client.close()\n      this.client = undefined\n    } catch (err: any) {\n      log.error(err)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
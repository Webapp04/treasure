{"ast":null,"code":"import _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport drain from 'it-drain';\nimport { pushable } from 'it-pushable';\nimport { Key } from 'interface-datastore/key';\nimport { CID } from 'multiformats/cid';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { base32, base32pad } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errcode from 'err-code';\nimport { BaseBlockstore } from 'blockstore-core/base';\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\nfunction cidToKey(cid) {\n  var c = CID.asCID(cid);\n  if (!c) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n  return new Key('/' + base32.encode(c.multihash.bytes).slice(1).toUpperCase(), false);\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n * @returns {CID}\n */\nfunction keyToCid(key) {\n  // Block key is of the form <base32 encoded string>\n  return CID.createV1(raw.code, Digest.decode(base32.decode('b' + key.toString().slice(1).toLowerCase())));\n}\n\n/**\n * Tries to decode a prefix as the first part of a CID and then\n * strip off the version and codec bytes to just leave part of\n * the multihash.\n *\n * Only really works if the prefix length aligns with the byte\n * boundaries of the encoding.\n *\n * @param {string} prefix\n * @returns {string}\n */\nfunction convertPrefix(prefix) {\n  var firstChar = prefix.substring(0, 1);\n  if (firstChar === '/') {\n    return convertPrefix(prefix.substring(1));\n  }\n\n  /** @type {(input: string) => Uint8Array } */\n  var decoder;\n  if (firstChar.toLowerCase() === 'b') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = function decoder(input) {\n      return base32.decode(input.toLowerCase()).subarray(2);\n    };\n  } else if (firstChar.toLowerCase() === 'c') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = function decoder(input) {\n      return base32pad.decode(input.toLowerCase()).subarray(2);\n    };\n  } else if (firstChar === 'z') {\n    // v1 cid\n    decoder = function decoder(input) {\n      return base58btc.decode(input).subarray(2);\n    };\n  } else if (firstChar === 'Q') {\n    // v0 cid prefix\n    decoder = function decoder(input) {\n      return base58btc.decode('z' + input);\n    };\n  } else {\n    decoder = function decoder(input) {\n      return base32.decode('b' + input.toLowerCase()).subarray(2);\n    };\n  }\n  var bytes;\n\n  // find the longest prefix that we can safely decode\n  for (var i = 1; i < prefix.length; i++) {\n    try {\n      bytes = decoder(prefix.substring(0, i));\n    } catch ( /** @type {any} */err) {\n      if (err.message !== 'Unexpected end of data') {\n        throw err;\n      }\n    }\n  }\n  var str = '/C';\n  if (bytes) {\n    // slice one character from the end of the string to ensure we don't end up\n    // with a padded value which could have a non-matching string at the end\n    str = \"/\".concat(base32.encode(bytes).slice(1, -1).toUpperCase() || 'C');\n  }\n  return str;\n}\n\n/**\n * @param {import('interface-blockstore').Query} query\n * @returns {import('interface-datastore').Query}\n */\nfunction convertQuery(query) {\n  return _objectSpread(_objectSpread({}, query), {}, {\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters ? query.filters.map(function (filter) {\n      return function (pair) {\n        return filter({\n          key: keyToCid(pair.key),\n          value: pair.value\n        });\n      };\n    }) : undefined,\n    orders: query.orders ? query.orders.map(function (order) {\n      return function (a, b) {\n        return order({\n          key: keyToCid(a.key),\n          value: a.value\n        }, {\n          key: keyToCid(b.key),\n          value: b.value\n        });\n      };\n    }) : undefined\n  });\n}\n\n/**\n * @param {import('interface-blockstore').KeyQuery} query\n * @returns {import('interface-datastore').KeyQuery}\n */\nfunction convertKeyQuery(query) {\n  return _objectSpread(_objectSpread({}, query), {}, {\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters ? query.filters.map(function (filter) {\n      return function (key) {\n        return filter(keyToCid(key));\n      };\n    }) : undefined,\n    orders: query.orders ? query.orders.map(function (order) {\n      return function (a, b) {\n        return order(keyToCid(a), keyToCid(b));\n      };\n    }) : undefined\n  });\n}\n\n/**\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @implements {Blockstore}\n */\nexport var BlockstoreDatastoreAdapter = /*#__PURE__*/function (_BaseBlockstore) {\n  _inherits(BlockstoreDatastoreAdapter, _BaseBlockstore);\n  var _super = _createSuper(BlockstoreDatastoreAdapter);\n  /**\n   * @param {Datastore} datastore\n   */\n  function BlockstoreDatastoreAdapter(datastore) {\n    var _this5;\n    _classCallCheck(this, BlockstoreDatastoreAdapter);\n    _this5 = _super.call(this);\n    _this5.child = datastore;\n    return _this5;\n  }\n  _createClass(BlockstoreDatastoreAdapter, [{\n    key: \"open\",\n    value: function open() {\n      return this.child.open();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.child.close();\n    }\n\n    /**\n     * @param {Query} query\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"query\",\n    value: function query(_query, options) {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 2;\n              _iterator = _asyncIterator(_this.child.query(convertQuery(_query), options));\n            case 4:\n              _context.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 13;\n                break;\n              }\n              _step$value = _step.value, key = _step$value.key, value = _step$value.value;\n              _context.next = 10;\n              return {\n                key: keyToCid(key),\n                value: value\n              };\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _context.next = 4;\n              break;\n            case 13:\n              _context.next = 19;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 19:\n              _context.prev = 19;\n              _context.prev = 20;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 24;\n                break;\n              }\n              _context.next = 24;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 24:\n              _context.prev = 24;\n              if (!_didIteratorError) {\n                _context.next = 27;\n                break;\n              }\n              throw _iteratorError;\n            case 27:\n              return _context.finish(24);\n            case 28:\n              return _context.finish(19);\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n\n    /**\n     * @param {KeyQuery} query\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"queryKeys\",\n    value: function queryKeys(query, options) {\n      var _this2 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, key;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context2.prev = 2;\n              _iterator2 = _asyncIterator(_this2.child.queryKeys(convertKeyQuery(query), options));\n            case 4:\n              _context2.next = 6;\n              return _awaitAsyncGenerator(_iterator2.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n                _context2.next = 13;\n                break;\n              }\n              key = _step2.value;\n              _context2.next = 10;\n              return keyToCid(key);\n            case 10:\n              _iteratorAbruptCompletion2 = false;\n              _context2.next = 4;\n              break;\n            case 13:\n              _context2.next = 19;\n              break;\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](2);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t0;\n            case 19:\n              _context2.prev = 19;\n              _context2.prev = 20;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context2.next = 24;\n                break;\n              }\n              _context2.next = 24;\n              return _awaitAsyncGenerator(_iterator2.return());\n            case 24:\n              _context2.prev = 24;\n              if (!_didIteratorError2) {\n                _context2.next = 27;\n                break;\n              }\n              throw _iteratorError2;\n            case 27:\n              return _context2.finish(24);\n            case 28:\n              return _context2.finish(19);\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n\n    /**\n     * @param {CID} cid\n     * @param {Options} [options]\n     * @returns\n     */\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(cid, options) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.child.get(cidToKey(cid), options));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n    /**\n     * @param {AsyncIterable<CID> | Iterable<CID>} cids\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"getMany\",\n    value: function getMany(cids, options) {\n      var _this3 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, cid;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _iteratorAbruptCompletion3 = false;\n              _didIteratorError3 = false;\n              _context4.prev = 2;\n              _iterator3 = _asyncIterator(cids);\n            case 4:\n              _context4.next = 6;\n              return _awaitAsyncGenerator(_iterator3.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion3 = !(_step3 = _context4.sent).done)) {\n                _context4.next = 13;\n                break;\n              }\n              cid = _step3.value;\n              _context4.next = 10;\n              return _this3.get(cid, options);\n            case 10:\n              _iteratorAbruptCompletion3 = false;\n              _context4.next = 4;\n              break;\n            case 13:\n              _context4.next = 19;\n              break;\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](2);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context4.t0;\n            case 19:\n              _context4.prev = 19;\n              _context4.prev = 20;\n              if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n                _context4.next = 24;\n                break;\n              }\n              _context4.next = 24;\n              return _awaitAsyncGenerator(_iterator3.return());\n            case 24:\n              _context4.prev = 24;\n              if (!_didIteratorError3) {\n                _context4.next = 27;\n                break;\n              }\n              throw _iteratorError3;\n            case 27:\n              return _context4.finish(24);\n            case 28:\n              return _context4.finish(19);\n            case 29:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n\n    /**\n     * @param {CID} cid\n     * @param {Uint8Array} value\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(cid, value, options) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.child.put(cidToKey(cid), value, options);\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function put(_x3, _x4, _x5) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\n     * @param {AsyncIterable<Pair> | Iterable<Pair>} blocks\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"putMany\",\n    value: function putMany(blocks, options) {\n      var _this4 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var output, runner;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              // eslint-disable-line require-await\n              // we cannot simply chain to `store.putMany` because we convert a CID into\n              // a key based on the multihash only, so we lose the version & codec and\n              // cannot give the user back the CID they used to create the block, so yield\n              // to `store.putMany` but return the actual block the user passed in.\n              //\n              // nb. we want to use `store.putMany` here so bitswap can control batching\n              // up block HAVEs to send to the network - if we use multiple `store.put`s\n              // it will not be able to guess we are about to `store.put` more blocks\n              output = pushable({\n                objectMode: true\n              }); // process.nextTick runs on the microtask queue, setImmediate runs on the next\n              // event loop iteration so is slower. Use process.nextTick if it is available.\n              runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : globalThis.setImmediate || globalThis.setTimeout;\n              runner( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n                var store;\n                return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                  while (1) switch (_context7.prev = _context7.next) {\n                    case 0:\n                      _context7.prev = 0;\n                      store = _this4.child;\n                      _context7.next = 4;\n                      return drain(_this4.child.putMany(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n                        var _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, block, key, exists;\n                        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                          while (1) switch (_context6.prev = _context6.next) {\n                            case 0:\n                              _iteratorAbruptCompletion4 = false;\n                              _didIteratorError4 = false;\n                              _context6.prev = 2;\n                              _iterator4 = _asyncIterator(blocks);\n                            case 4:\n                              _context6.next = 6;\n                              return _awaitAsyncGenerator(_iterator4.next());\n                            case 6:\n                              if (!(_iteratorAbruptCompletion4 = !(_step4 = _context6.sent).done)) {\n                                _context6.next = 19;\n                                break;\n                              }\n                              block = _step4.value;\n                              key = cidToKey(block.key);\n                              _context6.next = 11;\n                              return _awaitAsyncGenerator(store.has(key, options));\n                            case 11:\n                              exists = _context6.sent;\n                              if (exists) {\n                                _context6.next = 15;\n                                break;\n                              }\n                              _context6.next = 15;\n                              return {\n                                key: key,\n                                value: block.value\n                              };\n                            case 15:\n                              // there is an assumption here that after the yield has completed\n                              // the underlying datastore has finished writing the block\n                              output.push(block);\n                            case 16:\n                              _iteratorAbruptCompletion4 = false;\n                              _context6.next = 4;\n                              break;\n                            case 19:\n                              _context6.next = 25;\n                              break;\n                            case 21:\n                              _context6.prev = 21;\n                              _context6.t0 = _context6[\"catch\"](2);\n                              _didIteratorError4 = true;\n                              _iteratorError4 = _context6.t0;\n                            case 25:\n                              _context6.prev = 25;\n                              _context6.prev = 26;\n                              if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n                                _context6.next = 30;\n                                break;\n                              }\n                              _context6.next = 30;\n                              return _awaitAsyncGenerator(_iterator4.return());\n                            case 30:\n                              _context6.prev = 30;\n                              if (!_didIteratorError4) {\n                                _context6.next = 33;\n                                break;\n                              }\n                              throw _iteratorError4;\n                            case 33:\n                              return _context6.finish(30);\n                            case 34:\n                              return _context6.finish(25);\n                            case 35:\n                            case \"end\":\n                              return _context6.stop();\n                          }\n                        }, _callee6, null, [[2, 21, 25, 35], [26,, 30, 34]]);\n                      }))()));\n                    case 4:\n                      output.end();\n                      _context7.next = 10;\n                      break;\n                    case 7:\n                      _context7.prev = 7;\n                      _context7.t0 = _context7[\"catch\"](0);\n                      output.end(_context7.t0);\n                    case 10:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }, _callee7, null, [[0, 7]]);\n              })));\n              return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(output), _awaitAsyncGenerator), \"t0\", 4);\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }))();\n    }\n\n    /**\n     * @param {CID} cid\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"has\",\n    value: function has(cid, options) {\n      return this.child.has(cidToKey(cid), options);\n    }\n\n    /**\n     * @param {CID} cid\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(cid, options) {\n      return this.child.delete(cidToKey(cid), options);\n    }\n\n    /**\n     * @param {AsyncIterable<CID> | Iterable<CID>} cids\n     * @param {Options} [options]\n     */\n  }, {\n    key: \"deleteMany\",\n    value: function deleteMany(cids, options) {\n      var out = pushable({\n        objectMode: true\n      });\n      drain(this.child.deleteMany(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _iteratorAbruptCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, cid;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _iteratorAbruptCompletion5 = false;\n              _didIteratorError5 = false;\n              _context9.prev = 2;\n              _iterator5 = _asyncIterator(cids);\n            case 4:\n              _context9.next = 6;\n              return _awaitAsyncGenerator(_iterator5.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion5 = !(_step5 = _context9.sent).done)) {\n                _context9.next = 14;\n                break;\n              }\n              cid = _step5.value;\n              _context9.next = 10;\n              return cidToKey(cid);\n            case 10:\n              out.push(cid);\n            case 11:\n              _iteratorAbruptCompletion5 = false;\n              _context9.next = 4;\n              break;\n            case 14:\n              _context9.next = 20;\n              break;\n            case 16:\n              _context9.prev = 16;\n              _context9.t0 = _context9[\"catch\"](2);\n              _didIteratorError5 = true;\n              _iteratorError5 = _context9.t0;\n            case 20:\n              _context9.prev = 20;\n              _context9.prev = 21;\n              if (!(_iteratorAbruptCompletion5 && _iterator5.return != null)) {\n                _context9.next = 25;\n                break;\n              }\n              _context9.next = 25;\n              return _awaitAsyncGenerator(_iterator5.return());\n            case 25:\n              _context9.prev = 25;\n              if (!_didIteratorError5) {\n                _context9.next = 28;\n                break;\n              }\n              throw _iteratorError5;\n            case 28:\n              return _context9.finish(25);\n            case 29:\n              return _context9.finish(20);\n            case 30:\n              out.end();\n            case 31:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[2, 16, 20, 30], [21,, 25, 29]]);\n      }))(), options)).catch(function (err) {\n        out.end(err);\n      });\n      return out;\n    }\n  }]);\n  return BlockstoreDatastoreAdapter;\n}(BaseBlockstore);","map":{"version":3,"names":["drain","pushable","Key","CID","raw","Digest","base32","base32pad","base58btc","errcode","BaseBlockstore","cidToKey","cid","c","asCID","Error","encode","multihash","bytes","slice","toUpperCase","keyToCid","key","createV1","code","decode","toString","toLowerCase","convertPrefix","prefix","firstChar","substring","decoder","input","subarray","i","length","err","message","str","concat","convertQuery","query","_objectSpread","undefined","filters","map","filter","pair","value","orders","order","a","b","convertKeyQuery","BlockstoreDatastoreAdapter","_BaseBlockstore","_inherits","_super","_createSuper","datastore","_this5","_classCallCheck","call","child","_createClass","open","close","options","_this","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_step$value","wrap","_callee$","_context","prev","next","_asyncIterator","_awaitAsyncGenerator","sent","done","t0","return","finish","stop","queryKeys","_this2","_callee2","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee2$","_context2","_get","_asyncToGenerator","_callee3","_callee3$","_context3","abrupt","get","_x","_x2","apply","arguments","getMany","cids","_this3","_callee4","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_callee4$","_context4","_put","_callee5","_callee5$","_context5","put","_x3","_x4","_x5","putMany","blocks","_this4","_callee8","output","runner","_callee8$","_context8","objectMode","globalThis","process","nextTick","setImmediate","setTimeout","_callee7","store","_callee7$","_context7","_callee6","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","block","exists","_callee6$","_context6","has","push","end","delegateYield","_asyncGeneratorDelegate","_delete","delete","deleteMany","out","_callee9","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_callee9$","_context9","catch"],"sources":["/Users/apple/Documents/treasure/node_modules/blockstore-datastore-adapter/src/index.js"],"sourcesContent":["import drain from 'it-drain'\nimport { pushable } from 'it-pushable'\nimport { Key } from 'interface-datastore/key'\nimport { CID } from 'multiformats/cid'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { base32, base32pad } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errcode from 'err-code'\nimport { BaseBlockstore } from 'blockstore-core/base'\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\nfunction cidToKey (cid) {\n  const c = CID.asCID(cid)\n\n  if (!c) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  return new Key('/' + base32.encode(c.multihash.bytes).slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n * @returns {CID}\n */\nfunction keyToCid (key) {\n  // Block key is of the form <base32 encoded string>\n  return CID.createV1(raw.code, Digest.decode(base32.decode('b' + key.toString().slice(1).toLowerCase())))\n}\n\n/**\n * Tries to decode a prefix as the first part of a CID and then\n * strip off the version and codec bytes to just leave part of\n * the multihash.\n *\n * Only really works if the prefix length aligns with the byte\n * boundaries of the encoding.\n *\n * @param {string} prefix\n * @returns {string}\n */\nfunction convertPrefix (prefix) {\n  const firstChar = prefix.substring(0, 1)\n\n  if (firstChar === '/') {\n    return convertPrefix(prefix.substring(1))\n  }\n\n  /** @type {(input: string) => Uint8Array } */\n  let decoder\n\n  if (firstChar.toLowerCase() === 'b') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = (input) => base32.decode(input.toLowerCase()).subarray(2)\n  } else if (firstChar.toLowerCase() === 'c') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = (input) => base32pad.decode(input.toLowerCase()).subarray(2)\n  } else if (firstChar === 'z') {\n    // v1 cid\n    decoder = (input) => base58btc.decode(input).subarray(2)\n  } else if (firstChar === 'Q') {\n    // v0 cid prefix\n    decoder = (input) => base58btc.decode('z' + input)\n  } else {\n    decoder = (input) => base32.decode('b' + input.toLowerCase()).subarray(2)\n  }\n\n  let bytes\n\n  // find the longest prefix that we can safely decode\n  for (let i = 1; i < prefix.length; i++) {\n    try {\n      bytes = decoder(prefix.substring(0, i))\n    } catch (/** @type {any} */ err) {\n      if (err.message !== 'Unexpected end of data') {\n        throw err\n      }\n    }\n  }\n\n  let str = '/C'\n\n  if (bytes) {\n    // slice one character from the end of the string to ensure we don't end up\n    // with a padded value which could have a non-matching string at the end\n    str = `/${base32.encode(bytes).slice(1, -1).toUpperCase() || 'C'}`\n  }\n\n  return str\n}\n\n/**\n * @param {import('interface-blockstore').Query} query\n * @returns {import('interface-datastore').Query}\n */\nfunction convertQuery (query) {\n  return {\n    ...query,\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters\n      ? query.filters.map(\n        filter => (pair) => {\n          return filter({ key: keyToCid(pair.key), value: pair.value })\n        }\n      )\n      : undefined,\n    orders: query.orders\n      ? query.orders.map(\n        order => (a, b) => {\n          return order({ key: keyToCid(a.key), value: a.value }, { key: keyToCid(b.key), value: b.value })\n        }\n      )\n      : undefined\n  }\n}\n\n/**\n * @param {import('interface-blockstore').KeyQuery} query\n * @returns {import('interface-datastore').KeyQuery}\n */\nfunction convertKeyQuery (query) {\n  return {\n    ...query,\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters\n      ? query.filters.map(\n        filter => (key) => {\n          return filter(keyToCid(key))\n        }\n      )\n      : undefined,\n    orders: query.orders\n      ? query.orders.map(\n        order => (a, b) => {\n          return order(keyToCid(a), keyToCid(b))\n        }\n      )\n      : undefined\n  }\n}\n\n/**\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @implements {Blockstore}\n */\nexport class BlockstoreDatastoreAdapter extends BaseBlockstore {\n  /**\n   * @param {Datastore} datastore\n   */\n  constructor (datastore) {\n    super()\n\n    this.child = datastore\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  /**\n   * @param {Query} query\n   * @param {Options} [options]\n   */\n  async * query (query, options) {\n    for await (const { key, value } of this.child.query(convertQuery(query), options)) {\n      yield { key: keyToCid(key), value }\n    }\n  }\n\n  /**\n   * @param {KeyQuery} query\n   * @param {Options} [options]\n   */\n  async * queryKeys (query, options) {\n    for await (const key of this.child.queryKeys(convertKeyQuery(query), options)) {\n      yield keyToCid(key)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   * @returns\n   */\n  async get (cid, options) {\n    return this.child.get(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n  async * getMany (cids, options) {\n    for await (const cid of cids) {\n      yield this.get(cid, options)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n  async put (cid, value, options) {\n    await this.child.put(cidToKey(cid), value, options)\n  }\n\n  /**\n   * @param {AsyncIterable<Pair> | Iterable<Pair>} blocks\n   * @param {Options} [options]\n   */\n  async * putMany (blocks, options) { // eslint-disable-line require-await\n    // we cannot simply chain to `store.putMany` because we convert a CID into\n    // a key based on the multihash only, so we lose the version & codec and\n    // cannot give the user back the CID they used to create the block, so yield\n    // to `store.putMany` but return the actual block the user passed in.\n    //\n    // nb. we want to use `store.putMany` here so bitswap can control batching\n    // up block HAVEs to send to the network - if we use multiple `store.put`s\n    // it will not be able to guess we are about to `store.put` more blocks\n    const output = pushable({\n      objectMode: true\n    })\n\n    // process.nextTick runs on the microtask queue, setImmediate runs on the next\n    // event loop iteration so is slower. Use process.nextTick if it is available.\n    const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : (globalThis.setImmediate || globalThis.setTimeout)\n\n    runner(async () => {\n      try {\n        const store = this.child\n\n        await drain(this.child.putMany(async function * () {\n          for await (const block of blocks) {\n            const key = cidToKey(block.key)\n            const exists = await store.has(key, options)\n\n            if (!exists) {\n              yield { key, value: block.value }\n            }\n\n            // there is an assumption here that after the yield has completed\n            // the underlying datastore has finished writing the block\n            output.push(block)\n          }\n        }()))\n\n        output.end()\n      } catch (/** @type {any} */ err) {\n        output.end(err)\n      }\n    })\n\n    yield * output\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n  has (cid, options) {\n    return this.child.has(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n  delete (cid, options) {\n    return this.child.delete(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n  deleteMany (cids, options) {\n    const out = pushable({\n      objectMode: true\n    })\n\n    drain(this.child.deleteMany((async function * () {\n      for await (const cid of cids) {\n        yield cidToKey(cid)\n\n        out.push(cid)\n      }\n\n      out.end()\n    }()), options)).catch(err => {\n      out.end(err)\n    })\n\n    return out\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
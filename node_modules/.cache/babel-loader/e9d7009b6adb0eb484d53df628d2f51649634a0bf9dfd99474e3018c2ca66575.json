{"ast":null,"code":"var _slicedToArray = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nvar RateLimiterRes = require('./RateLimiterRes');\nvar RateLimiterMySQL = /*#__PURE__*/function (_RateLimiterStoreAbst) {\n  \"use strict\";\n\n  _inherits(RateLimiterMySQL, _RateLimiterStoreAbst);\n  var _super = _createSuper(RateLimiterMySQL);\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: anySqlClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   dbName: 'string',\n   *   tableName: 'string',\n   * }\n   */\n  function RateLimiterMySQL(opts) {\n    var _this;\n    var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, RateLimiterMySQL);\n    _this = _super.call(this, opts);\n    _this.client = opts.storeClient;\n    _this.clientType = opts.storeType;\n    _this.dbName = opts.dbName;\n    _this.tableName = opts.tableName;\n    _this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n    _this.tableCreated = opts.tableCreated;\n    if (!_this.tableCreated) {\n      _this._createDbAndTable().then(function () {\n        _this.tableCreated = true;\n        if (_this.clearExpiredByTimeout) {\n          _this._clearExpiredHourAgo();\n        }\n        if (typeof cb === 'function') {\n          cb();\n        }\n      }).catch(function (err) {\n        if (typeof cb === 'function') {\n          cb(err);\n        } else {\n          throw err;\n        }\n      });\n    } else {\n      if (_this.clearExpiredByTimeout) {\n        _this._clearExpiredHourAgo();\n      }\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n    return _this;\n  }\n  _createClass(RateLimiterMySQL, [{\n    key: \"clearExpired\",\n    value: function clearExpired(expire) {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        _this2._getConnection().then(function (conn) {\n          conn.query(\"DELETE FROM ??.?? WHERE expire < ?\", [_this2.dbName, _this2.tableName, expire], function () {\n            _this2._releaseConnection(conn);\n            resolve();\n          });\n        }).catch(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"_clearExpiredHourAgo\",\n    value: function _clearExpiredHourAgo() {\n      var _this3 = this;\n      if (this._clearExpiredTimeoutId) {\n        clearTimeout(this._clearExpiredTimeoutId);\n      }\n      this._clearExpiredTimeoutId = setTimeout(function () {\n        _this3.clearExpired(Date.now() - 3600000) // Never rejected\n        .then(function () {\n          _this3._clearExpiredHourAgo();\n        });\n      }, 300000);\n      this._clearExpiredTimeoutId.unref();\n    }\n\n    /**\n     *\n     * @return Promise<any>\n     * @private\n     */\n  }, {\n    key: \"_getConnection\",\n    value: function _getConnection() {\n      var _this4 = this;\n      switch (this.clientType) {\n        case 'pool':\n          return new Promise(function (resolve, reject) {\n            _this4.client.getConnection(function (errConn, conn) {\n              if (errConn) {\n                return reject(errConn);\n              }\n              resolve(conn);\n            });\n          });\n        case 'sequelize':\n          return this.client.connectionManager.getConnection();\n        case 'knex':\n          return this.client.client.acquireConnection();\n        default:\n          return Promise.resolve(this.client);\n      }\n    }\n  }, {\n    key: \"_releaseConnection\",\n    value: function _releaseConnection(conn) {\n      switch (this.clientType) {\n        case 'pool':\n          return conn.release();\n        case 'sequelize':\n          return this.client.connectionManager.releaseConnection(conn);\n        case 'knex':\n          return this.client.client.releaseConnection(conn);\n        default:\n          return true;\n      }\n    }\n\n    /**\n     *\n     * @returns {Promise<any>}\n     * @private\n     */\n  }, {\n    key: \"_createDbAndTable\",\n    value: function _createDbAndTable() {\n      var _this5 = this;\n      return new Promise(function (resolve, reject) {\n        _this5._getConnection().then(function (conn) {\n          conn.query(\"CREATE DATABASE IF NOT EXISTS `\".concat(_this5.dbName, \"`;\"), function (errDb) {\n            if (errDb) {\n              _this5._releaseConnection(conn);\n              return reject(errDb);\n            }\n            conn.query(_this5._getCreateTableStmt(), function (err) {\n              if (err) {\n                _this5._releaseConnection(conn);\n                return reject(err);\n              }\n              _this5._releaseConnection(conn);\n              resolve();\n            });\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_getCreateTableStmt\",\n    value: function _getCreateTableStmt() {\n      return \"CREATE TABLE IF NOT EXISTS `\".concat(this.dbName, \"`.`\").concat(this.tableName, \"` (\") + '`key` VARCHAR(255) CHARACTER SET utf8 NOT NULL,' + '`points` INT(9) NOT NULL default 0,' + '`expire` BIGINT UNSIGNED,' + 'PRIMARY KEY (`key`)' + ') ENGINE = INNODB;';\n    }\n  }, {\n    key: \"clientType\",\n    get: function get() {\n      return this._clientType;\n    },\n    set: function set(value) {\n      if (typeof value === 'undefined') {\n        if (this.client.constructor.name === 'Connection') {\n          value = 'connection';\n        } else if (this.client.constructor.name === 'Pool') {\n          value = 'pool';\n        } else if (this.client.constructor.name === 'Sequelize') {\n          value = 'sequelize';\n        } else {\n          throw new Error('storeType is not defined');\n        }\n      }\n      this._clientType = value.toLowerCase();\n    }\n  }, {\n    key: \"dbName\",\n    get: function get() {\n      return this._dbName;\n    },\n    set: function set(value) {\n      this._dbName = typeof value === 'undefined' ? 'rtlmtrflx' : value;\n    }\n  }, {\n    key: \"tableName\",\n    get: function get() {\n      return this._tableName;\n    },\n    set: function set(value) {\n      this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n    }\n  }, {\n    key: \"tableCreated\",\n    get: function get() {\n      return this._tableCreated;\n    },\n    set: function set(value) {\n      this._tableCreated = typeof value === 'undefined' ? false : !!value;\n    }\n  }, {\n    key: \"clearExpiredByTimeout\",\n    get: function get() {\n      return this._clearExpiredByTimeout;\n    },\n    set: function set(value) {\n      this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n    }\n  }, {\n    key: \"_getRateLimiterRes\",\n    value: function _getRateLimiterRes(rlKey, changedPoints, result) {\n      var res = new RateLimiterRes();\n      var _result = _slicedToArray(result, 1),\n        row = _result[0];\n      res.isFirstInDuration = changedPoints === row.points;\n      res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n      res.msBeforeNext = row.expire ? Math.max(row.expire - Date.now(), 0) : -1;\n      return res;\n    }\n  }, {\n    key: \"_upsertTransaction\",\n    value: function _upsertTransaction(conn, key, points, msDuration, forceExpire) {\n      var _this6 = this;\n      return new Promise(function (resolve, reject) {\n        conn.query('BEGIN', function (errBegin) {\n          if (errBegin) {\n            conn.rollback();\n            return reject(errBegin);\n          }\n          var dateNow = Date.now();\n          var newExpire = msDuration > 0 ? dateNow + msDuration : null;\n          var q;\n          var values;\n          if (forceExpire) {\n            q = \"INSERT INTO ??.?? VALUES (?, ?, ?)\\n          ON DUPLICATE KEY UPDATE \\n            points = ?, \\n            expire = ?;\";\n            values = [_this6.dbName, _this6.tableName, key, points, newExpire, points, newExpire];\n          } else {\n            q = \"INSERT INTO ??.?? VALUES (?, ?, ?)\\n          ON DUPLICATE KEY UPDATE \\n            points = IF(expire <= ?, ?, points + (?)), \\n            expire = IF(expire <= ?, ?, expire);\";\n            values = [_this6.dbName, _this6.tableName, key, points, newExpire, dateNow, points, points, dateNow, newExpire];\n          }\n          conn.query(q, values, function (errUpsert) {\n            if (errUpsert) {\n              conn.rollback();\n              return reject(errUpsert);\n            }\n            conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ?;', [_this6.dbName, _this6.tableName, key], function (errSelect, res) {\n              if (errSelect) {\n                conn.rollback();\n                return reject(errSelect);\n              }\n              conn.query('COMMIT', function (err) {\n                if (err) {\n                  conn.rollback();\n                  return reject(err);\n                }\n                resolve(res);\n              });\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_upsert\",\n    value: function _upsert(key, points, msDuration) {\n      var _this7 = this;\n      var forceExpire = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (!this.tableCreated) {\n        return Promise.reject(Error('Table is not created yet'));\n      }\n      return new Promise(function (resolve, reject) {\n        _this7._getConnection().then(function (conn) {\n          _this7._upsertTransaction(conn, key, points, msDuration, forceExpire).then(function (res) {\n            resolve(res);\n            _this7._releaseConnection(conn);\n          }).catch(function (err) {\n            reject(err);\n            _this7._releaseConnection(conn);\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(rlKey) {\n      var _this8 = this;\n      if (!this.tableCreated) {\n        return Promise.reject(Error('Table is not created yet'));\n      }\n      return new Promise(function (resolve, reject) {\n        _this8._getConnection().then(function (conn) {\n          conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ? AND (`expire` > ? OR `expire` IS NULL)', [_this8.dbName, _this8.tableName, rlKey, Date.now()], function (err, res) {\n            if (err) {\n              reject(err);\n            } else if (res.length === 0) {\n              resolve(null);\n            } else {\n              resolve(res);\n            }\n            _this8._releaseConnection(conn);\n          } // eslint-disable-line\n          );\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(rlKey) {\n      var _this9 = this;\n      if (!this.tableCreated) {\n        return Promise.reject(Error('Table is not created yet'));\n      }\n      return new Promise(function (resolve, reject) {\n        _this9._getConnection().then(function (conn) {\n          conn.query('DELETE FROM ??.?? WHERE `key` = ?', [_this9.dbName, _this9.tableName, rlKey], function (err, res) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(res.affectedRows > 0);\n            }\n            _this9._releaseConnection(conn);\n          } // eslint-disable-line\n          );\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }]);\n  return RateLimiterMySQL;\n}(RateLimiterStoreAbstract);\nmodule.exports = RateLimiterMySQL;","map":{"version":3,"names":["RateLimiterStoreAbstract","require","RateLimiterRes","RateLimiterMySQL","_RateLimiterStoreAbst","_inherits","_super","_createSuper","opts","_this","cb","arguments","length","undefined","_classCallCheck","call","client","storeClient","clientType","storeType","dbName","tableName","clearExpiredByTimeout","tableCreated","_createDbAndTable","then","_clearExpiredHourAgo","catch","err","_createClass","key","value","clearExpired","expire","_this2","Promise","resolve","_getConnection","conn","query","_releaseConnection","_this3","_clearExpiredTimeoutId","clearTimeout","setTimeout","Date","now","unref","_this4","reject","getConnection","errConn","connectionManager","acquireConnection","release","releaseConnection","_this5","concat","errDb","_getCreateTableStmt","get","_clientType","set","constructor","name","Error","toLowerCase","_dbName","_tableName","keyPrefix","_tableCreated","_clearExpiredByTimeout","Boolean","_getRateLimiterRes","rlKey","changedPoints","result","res","_result","_slicedToArray","row","isFirstInDuration","points","consumedPoints","remainingPoints","Math","max","msBeforeNext","_upsertTransaction","msDuration","forceExpire","_this6","errBegin","rollback","dateNow","newExpire","q","values","errUpsert","errSelect","_upsert","_this7","_get","_this8","_delete","_this9","affectedRows","module","exports"],"sources":["/Users/apple/Documents/treasure/node_modules/rate-limiter-flexible/lib/RateLimiterMySQL.js"],"sourcesContent":["const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nclass RateLimiterMySQL extends RateLimiterStoreAbstract {\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: anySqlClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   dbName: 'string',\n   *   tableName: 'string',\n   * }\n   */\n  constructor(opts, cb = null) {\n    super(opts);\n\n    this.client = opts.storeClient;\n    this.clientType = opts.storeType;\n\n    this.dbName = opts.dbName;\n    this.tableName = opts.tableName;\n\n    this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n\n    this.tableCreated = opts.tableCreated;\n    if (!this.tableCreated) {\n      this._createDbAndTable()\n        .then(() => {\n          this.tableCreated = true;\n          if (this.clearExpiredByTimeout) {\n            this._clearExpiredHourAgo();\n          }\n          if (typeof cb === 'function') {\n            cb();\n          }\n        })\n        .catch((err) => {\n          if (typeof cb === 'function') {\n            cb(err);\n          } else {\n            throw err;\n          }\n        });\n    } else {\n      if (this.clearExpiredByTimeout) {\n        this._clearExpiredHourAgo();\n      }\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n  }\n\n  clearExpired(expire) {\n    return new Promise((resolve) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(`DELETE FROM ??.?? WHERE expire < ?`, [this.dbName, this.tableName, expire], () => {\n            this._releaseConnection(conn);\n            resolve();\n          });\n        })\n        .catch(() => {\n          resolve();\n        });\n    });\n  }\n\n  _clearExpiredHourAgo() {\n    if (this._clearExpiredTimeoutId) {\n      clearTimeout(this._clearExpiredTimeoutId);\n    }\n    this._clearExpiredTimeoutId = setTimeout(() => {\n      this.clearExpired(Date.now() - 3600000) // Never rejected\n        .then(() => {\n          this._clearExpiredHourAgo();\n        });\n    }, 300000);\n    this._clearExpiredTimeoutId.unref();\n  }\n\n  /**\n   *\n   * @return Promise<any>\n   * @private\n   */\n  _getConnection() {\n    switch (this.clientType) {\n      case 'pool':\n        return new Promise((resolve, reject) => {\n          this.client.getConnection((errConn, conn) => {\n            if (errConn) {\n              return reject(errConn);\n            }\n\n            resolve(conn);\n          });\n        });\n      case 'sequelize':\n        return this.client.connectionManager.getConnection();\n      case 'knex':\n        return this.client.client.acquireConnection();\n      default:\n        return Promise.resolve(this.client);\n    }\n  }\n\n  _releaseConnection(conn) {\n    switch (this.clientType) {\n      case 'pool':\n        return conn.release();\n      case 'sequelize':\n        return this.client.connectionManager.releaseConnection(conn);\n      case 'knex':\n        return this.client.client.releaseConnection(conn);\n      default:\n        return true;\n    }\n  }\n\n  /**\n   *\n   * @returns {Promise<any>}\n   * @private\n   */\n  _createDbAndTable() {\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(`CREATE DATABASE IF NOT EXISTS \\`${this.dbName}\\`;`, (errDb) => {\n            if (errDb) {\n              this._releaseConnection(conn);\n              return reject(errDb);\n            }\n            conn.query(this._getCreateTableStmt(), (err) => {\n              if (err) {\n                this._releaseConnection(conn);\n                return reject(err);\n              }\n              this._releaseConnection(conn);\n              resolve();\n            });\n          });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _getCreateTableStmt() {\n    return `CREATE TABLE IF NOT EXISTS \\`${this.dbName}\\`.\\`${this.tableName}\\` (` +\n      '`key` VARCHAR(255) CHARACTER SET utf8 NOT NULL,' +\n      '`points` INT(9) NOT NULL default 0,' +\n      '`expire` BIGINT UNSIGNED,' +\n      'PRIMARY KEY (`key`)' +\n      ') ENGINE = INNODB;';\n  }\n\n  get clientType() {\n    return this._clientType;\n  }\n\n  set clientType(value) {\n    if (typeof value === 'undefined') {\n      if (this.client.constructor.name === 'Connection') {\n        value = 'connection';\n      } else if (this.client.constructor.name === 'Pool') {\n        value = 'pool';\n      } else if (this.client.constructor.name === 'Sequelize') {\n        value = 'sequelize';\n      } else {\n        throw new Error('storeType is not defined');\n      }\n    }\n    this._clientType = value.toLowerCase();\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  set dbName(value) {\n    this._dbName = typeof value === 'undefined' ? 'rtlmtrflx' : value;\n  }\n\n  get tableName() {\n    return this._tableName;\n  }\n\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n\n  get tableCreated() {\n    return this._tableCreated\n  }\n\n  set tableCreated(value) {\n    this._tableCreated = typeof value === 'undefined' ? false : !!value;\n  }\n\n  get clearExpiredByTimeout() {\n    return this._clearExpiredByTimeout;\n  }\n\n  set clearExpiredByTimeout(value) {\n    this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n    const [row] = result;\n\n    res.isFirstInDuration = changedPoints === row.points;\n    res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = row.expire\n      ? Math.max(row.expire - Date.now(), 0)\n      : -1;\n\n    return res;\n  }\n\n  _upsertTransaction(conn, key, points, msDuration, forceExpire) {\n    return new Promise((resolve, reject) => {\n      conn.query('BEGIN', (errBegin) => {\n        if (errBegin) {\n          conn.rollback();\n\n          return reject(errBegin);\n        }\n\n        const dateNow = Date.now();\n        const newExpire = msDuration > 0 ? dateNow + msDuration : null;\n\n        let q;\n        let values;\n        if (forceExpire) {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = ?, \n            expire = ?;`;\n          values = [\n            this.dbName, this.tableName, key, points, newExpire,\n            points,\n            newExpire,\n          ];\n        } else {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = IF(expire <= ?, ?, points + (?)), \n            expire = IF(expire <= ?, ?, expire);`;\n          values = [\n            this.dbName, this.tableName, key, points, newExpire,\n            dateNow, points, points,\n            dateNow, newExpire,\n          ];\n        }\n\n        conn.query(q, values, (errUpsert) => {\n          if (errUpsert) {\n            conn.rollback();\n\n            return reject(errUpsert);\n          }\n          conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ?;', [this.dbName, this.tableName, key], (errSelect, res) => {\n            if (errSelect) {\n              conn.rollback();\n\n              return reject(errSelect);\n            }\n\n            conn.query('COMMIT', (err) => {\n              if (err) {\n                conn.rollback();\n\n                return reject(err);\n              }\n\n              resolve(res);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  _upsert(key, points, msDuration, forceExpire = false) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          this._upsertTransaction(conn, key, points, msDuration, forceExpire)\n            .then((res) => {\n              resolve(res);\n              this._releaseConnection(conn);\n            })\n            .catch((err) => {\n              reject(err);\n              this._releaseConnection(conn);\n            });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _get(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(\n            'SELECT points, expire FROM ??.?? WHERE `key` = ? AND (`expire` > ? OR `expire` IS NULL)',\n            [this.dbName, this.tableName, rlKey, Date.now()],\n            (err, res) => {\n              if (err) {\n                reject(err);\n              } else if (res.length === 0) {\n                resolve(null);\n              } else {\n                resolve(res);\n              }\n\n              this._releaseConnection(conn);\n            } // eslint-disable-line\n          );\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _delete(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(\n            'DELETE FROM ??.?? WHERE `key` = ?',\n            [this.dbName, this.tableName, rlKey],\n            (err, res) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve(res.affectedRows > 0);\n              }\n\n              this._releaseConnection(conn);\n            } // eslint-disable-line\n          );\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\nmodule.exports = RateLimiterMySQL;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
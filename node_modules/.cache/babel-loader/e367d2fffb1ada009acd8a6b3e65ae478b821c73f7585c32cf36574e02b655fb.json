{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { logger } from '@libp2p/logger';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport errCode from 'err-code';\nimport randombytes from 'iso-random-stream/src/random.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { pushable } from 'it-pushable';\nimport defer from 'p-defer';\nimport { WebRTCDataChannel } from './channel.js';\nimport delay from 'delay';\n// const ICECOMPLETE_TIMEOUT = 5 * 1000\nvar DEFAULT_PEER_CONNECTION_CONFIG = {\n  iceServers: [{\n    urls: ['stun:stun.l.google.com:19302', 'stun:global.stun.twilio.com:3478']\n  }]\n};\nfunction getBrowserRTC() {\n  var _ref, _globalThis$RTCPeerCo, _ref2, _globalThis$RTCSessio, _ref3, _globalThis$RTCIceCan;\n  if (typeof globalThis === 'undefined') {\n    throw errCode(new Error('No WebRTC support detected'), 'ERR_WEBRTC_SUPPORT');\n  }\n  var wrtc = {\n    // @ts-expect-error browser-specific properties\n    RTCPeerConnection: (_ref = (_globalThis$RTCPeerCo = globalThis.RTCPeerConnection) !== null && _globalThis$RTCPeerCo !== void 0 ? _globalThis$RTCPeerCo : globalThis.mozRTCPeerConnection) !== null && _ref !== void 0 ? _ref : globalThis.webkitRTCPeerConnection,\n    // @ts-expect-error browser-specific properties\n    RTCSessionDescription: (_ref2 = (_globalThis$RTCSessio = globalThis.RTCSessionDescription) !== null && _globalThis$RTCSessio !== void 0 ? _globalThis$RTCSessio : globalThis.mozRTCSessionDescription) !== null && _ref2 !== void 0 ? _ref2 : globalThis.webkitRTCSessionDescription,\n    // @ts-expect-error browser-specific properties\n    RTCIceCandidate: (_ref3 = (_globalThis$RTCIceCan = globalThis.RTCIceCandidate) !== null && _globalThis$RTCIceCan !== void 0 ? _globalThis$RTCIceCan : globalThis.mozRTCIceCandidate) !== null && _ref3 !== void 0 ? _ref3 : globalThis.webkitRTCIceCandidate\n  };\n  if (wrtc.RTCPeerConnection == null) {\n    throw errCode(new Error('No WebRTC support detected'), 'ERR_WEBRTC_SUPPORT');\n  }\n  return wrtc;\n}\nexport var WebRTCPeer = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(WebRTCPeer, _EventEmitter);\n  var _super = _createSuper(WebRTCPeer);\n  function WebRTCPeer(opts) {\n    var _opts$id, _opts$wrtc;\n    var _this;\n    _classCallCheck(this, WebRTCPeer);\n    _this = _super.call(this);\n    _this.id = (_opts$id = opts.id) !== null && _opts$id !== void 0 ? _opts$id : uint8ArrayToString(randombytes(4), 'hex').slice(0, 7);\n    _this.log = logger(\"libp2p:webrtc-peer:\".concat(opts.logPrefix, \":\").concat(_this.id));\n    _this.wrtc = (_opts$wrtc = opts.wrtc) !== null && _opts$wrtc !== void 0 ? _opts$wrtc : getBrowserRTC();\n    _this.peerConnection = new _this.wrtc.RTCPeerConnection(Object.assign({}, DEFAULT_PEER_CONNECTION_CONFIG, opts.peerConnectionConfig));\n    _this.closed = false;\n    _this.connected = defer();\n    // duplex properties\n    _this.source = pushable();\n    _this.sink = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, buf;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.connected.promise;\n            case 2:\n              if (!(_this.channel == null)) {\n                _context.next = 4;\n                break;\n              }\n              throw errCode(new Error('Connected but no channel?!'), 'ERR_DATA_CHANNEL');\n            case 4:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(source);\n            case 8:\n              _context.next = 10;\n              return _iterator.next();\n            case 10:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 17;\n                break;\n              }\n              buf = _step.value;\n              _context.next = 14;\n              return _this.channel.send(buf);\n            case 14:\n              _iteratorAbruptCompletion = false;\n              _context.next = 8;\n              break;\n            case 17:\n              _context.next = 23;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 23:\n              _context.prev = 23;\n              _context.prev = 24;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 28;\n                break;\n              }\n              _context.next = 28;\n              return _iterator.return();\n            case 28:\n              _context.prev = 28;\n              if (!_didIteratorError) {\n                _context.next = 31;\n                break;\n              }\n              throw _iteratorError;\n            case 31:\n              return _context.finish(28);\n            case 32:\n              return _context.finish(23);\n            case 33:\n              _context.next = 35;\n              return _this.close();\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[6, 19, 23, 33], [24,, 28, 32]]);\n      }));\n      return function (_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    return _this;\n  }\n  _createClass(WebRTCPeer, [{\n    key: \"handleDataChannelEvent\",\n    value: function handleDataChannelEvent(event) {\n      var _this2 = this;\n      var dataChannel = event.channel;\n      if (dataChannel == null) {\n        // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n        // which is invalid behavior. Handle it gracefully.\n        // See: https://github.com/feross/simple-peer/issues/163\n        this.close(errCode(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL')).catch(function (err) {\n          _this2.log('Error closing after event channel was found to be null', err);\n        });\n        return;\n      }\n      this.channel = new WebRTCDataChannel(dataChannel, {\n        log: this.log,\n        onMessage: function onMessage(event) {\n          _this2.source.push(new Uint8Array(event.data));\n        },\n        onOpen: function onOpen() {\n          _this2.connected.resolve();\n          _this2.dispatchEvent(new CustomEvent('ready'));\n        },\n        onClose: function onClose() {\n          _this2.close().catch(function (err) {\n            _this2.log('error closing connection after channel close', err);\n          });\n        },\n        onError: function onError(err) {\n          _this2.close(err).catch(function (err) {\n            _this2.log('error closing connection after channel error', err);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(err) {\n        var _this$channel;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.closed = true;\n              if (!(err == null && this.channel != null)) {\n                _context2.next = 7;\n                break;\n              }\n            case 2:\n              if (!(this.channel.bufferedAmount > 0)) {\n                _context2.next = 7;\n                break;\n              }\n              _context2.next = 5;\n              return delay(100);\n            case 5:\n              _context2.next = 2;\n              break;\n            case 7:\n              (_this$channel = this.channel) === null || _this$channel === void 0 ? void 0 : _this$channel.close();\n              this.peerConnection.close();\n              this.source.end(err);\n              this.dispatchEvent(new CustomEvent('close'));\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function close(_x2) {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n  }]);\n  return WebRTCPeer;\n}(EventEmitter);","map":{"version":3,"names":["logger","EventEmitter","CustomEvent","errCode","randombytes","toString","uint8ArrayToString","pushable","defer","WebRTCDataChannel","delay","DEFAULT_PEER_CONNECTION_CONFIG","iceServers","urls","getBrowserRTC","_ref","_globalThis$RTCPeerCo","_ref2","_globalThis$RTCSessio","_ref3","_globalThis$RTCIceCan","globalThis","Error","wrtc","RTCPeerConnection","mozRTCPeerConnection","webkitRTCPeerConnection","RTCSessionDescription","mozRTCSessionDescription","webkitRTCSessionDescription","RTCIceCandidate","mozRTCIceCandidate","webkitRTCIceCandidate","WebRTCPeer","_EventEmitter","_inherits","_super","_createSuper","opts","_opts$id","_opts$wrtc","_this","_classCallCheck","call","id","slice","log","concat","logPrefix","peerConnection","Object","assign","peerConnectionConfig","closed","connected","source","sink","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","buf","wrap","_callee$","_context","prev","next","promise","channel","_asyncIterator","sent","done","value","send","t0","return","finish","close","stop","_x","apply","arguments","_createClass","key","handleDataChannelEvent","event","_this2","dataChannel","catch","err","onMessage","push","Uint8Array","data","onOpen","resolve","dispatchEvent","onClose","onError","_close","_callee2","_this$channel","_callee2$","_context2","bufferedAmount","end","_x2"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/webrtc-peer/src/peer.ts"],"sourcesContent":["import { Logger, logger } from '@libp2p/logger'\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events'\nimport errCode from 'err-code'\nimport randombytes from 'iso-random-stream/src/random.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { Pushable, pushable } from 'it-pushable'\nimport defer, { DeferredPromise } from 'p-defer'\nimport { WebRTCDataChannel } from './channel.js'\nimport delay from 'delay'\nimport type { WebRTCPeerInit, WebRTCPeerEvents, WRTC } from './index.js'\nimport type { Duplex, Sink } from 'it-stream-types'\n\n// const ICECOMPLETE_TIMEOUT = 5 * 1000\n\nconst DEFAULT_PEER_CONNECTION_CONFIG: RTCConfiguration = {\n  iceServers: [{\n    urls: [\n      'stun:stun.l.google.com:19302',\n      'stun:global.stun.twilio.com:3478'\n    ]\n  }]\n}\n\nfunction getBrowserRTC (): WRTC {\n  if (typeof globalThis === 'undefined') {\n    throw errCode(new Error('No WebRTC support detected'), 'ERR_WEBRTC_SUPPORT')\n  }\n\n  const wrtc: WRTC = {\n    // @ts-expect-error browser-specific properties\n    RTCPeerConnection: globalThis.RTCPeerConnection ?? globalThis.mozRTCPeerConnection ?? globalThis.webkitRTCPeerConnection,\n    // @ts-expect-error browser-specific properties\n    RTCSessionDescription: globalThis.RTCSessionDescription ?? globalThis.mozRTCSessionDescription ?? globalThis.webkitRTCSessionDescription,\n    // @ts-expect-error browser-specific properties\n    RTCIceCandidate: globalThis.RTCIceCandidate ?? globalThis.mozRTCIceCandidate ?? globalThis.webkitRTCIceCandidate\n  }\n\n  if (wrtc.RTCPeerConnection == null) {\n    throw errCode(new Error('No WebRTC support detected'), 'ERR_WEBRTC_SUPPORT')\n  }\n\n  return wrtc\n}\n\nexport class WebRTCPeer extends EventEmitter<WebRTCPeerEvents> implements Duplex<Uint8Array> {\n  public id: string\n  public source: Pushable<Uint8Array>\n  public sink: Sink<Uint8Array>\n  public closed: boolean\n  protected wrtc: WRTC\n  protected peerConnection: RTCPeerConnection\n  protected channel?: WebRTCDataChannel\n  protected log: Logger\n  private readonly connected: DeferredPromise<void>\n\n  constructor (opts: WebRTCPeerInit & { logPrefix: string }) {\n    super()\n\n    this.id = opts.id ?? uint8ArrayToString(randombytes(4), 'hex').slice(0, 7)\n    this.log = logger(`libp2p:webrtc-peer:${opts.logPrefix}:${this.id}`)\n    this.wrtc = opts.wrtc ?? getBrowserRTC()\n    this.peerConnection = new this.wrtc.RTCPeerConnection(\n      Object.assign({}, DEFAULT_PEER_CONNECTION_CONFIG, opts.peerConnectionConfig)\n    )\n    this.closed = false\n    this.connected = defer()\n\n    // duplex properties\n    this.source = pushable()\n    this.sink = async (source) => {\n      await this.connected.promise\n\n      if (this.channel == null) {\n        throw errCode(new Error('Connected but no channel?!'), 'ERR_DATA_CHANNEL')\n      }\n\n      for await (const buf of source) {\n        await this.channel.send(buf)\n      }\n\n      await this.close()\n    }\n  }\n\n  protected handleDataChannelEvent (event: { channel?: RTCDataChannel}) {\n    const dataChannel = event.channel\n\n    if (dataChannel == null) {\n      // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n      // which is invalid behavior. Handle it gracefully.\n      // See: https://github.com/feross/simple-peer/issues/163\n      this.close(errCode(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL'))\n        .catch(err => {\n          this.log('Error closing after event channel was found to be null', err)\n        })\n\n      return\n    }\n\n    this.channel = new WebRTCDataChannel(dataChannel, {\n      log: this.log,\n      onMessage: (event) => {\n        this.source.push(new Uint8Array(event.data))\n      },\n      onOpen: () => {\n        this.connected.resolve()\n        this.dispatchEvent(new CustomEvent('ready'))\n      },\n      onClose: () => {\n        this.close().catch(err => {\n          this.log('error closing connection after channel close', err)\n        })\n      },\n      onError: (err) => {\n        this.close(err).catch(err => {\n          this.log('error closing connection after channel error', err)\n        })\n      }\n    })\n  }\n\n  async close (err?: Error) {\n    this.closed = true\n\n    if (err == null && this.channel != null) {\n      // wait for the channel to flush all data before closing the channel\n      while (this.channel.bufferedAmount > 0) {\n        await delay(100)\n      }\n    }\n\n    this.channel?.close()\n    this.peerConnection.close()\n    this.source.end(err)\n    this.dispatchEvent(new CustomEvent('close'))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
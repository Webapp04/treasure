{"ast":null,"code":"import _toConsumableArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { logger } from '@libp2p/logger';\nimport pSettle from 'p-settle';\nimport { codes } from './errors.js';\nimport errCode from 'err-code';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { trackedMap } from '@libp2p/tracked-map';\nvar log = logger('libp2p:transports');\nexport var DefaultTransportManager = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(DefaultTransportManager, _EventEmitter);\n  var _super = _createSuper(DefaultTransportManager);\n  function DefaultTransportManager(components) {\n    var _init$faultTolerance;\n    var _this;\n    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, DefaultTransportManager);\n    _this = _super.call(this);\n    _this.components = components;\n    _this.started = false;\n    _this.transports = new Map();\n    _this.listeners = trackedMap({\n      component: 'transport-manager',\n      metric: 'listeners',\n      metrics: _this.components.getMetrics()\n    });\n    _this.faultTolerance = (_init$faultTolerance = init.faultTolerance) !== null && _init$faultTolerance !== void 0 ? _init$faultTolerance : FaultTolerance.FATAL_ALL;\n    return _this;\n  }\n  /**\n   * Adds a `Transport` to the manager\n   */\n  _createClass(DefaultTransportManager, [{\n    key: \"add\",\n    value: function add(transport) {\n      var tag = transport[Symbol.toStringTag];\n      if (tag == null) {\n        throw errCode(new Error('Transport must have a valid tag'), codes.ERR_INVALID_KEY);\n      }\n      if (this.transports.has(tag)) {\n        throw errCode(new Error('There is already a transport with this tag'), codes.ERR_DUPLICATE_TRANSPORT);\n      }\n      log('adding transport %s', tag);\n      this.transports.set(tag, transport);\n      if (!this.listeners.has(tag)) {\n        this.listeners.set(tag, []);\n      }\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var addrs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Listen on the provided transports for the provided addresses\n              addrs = this.components.getAddressManager().getListenAddrs();\n              _context.next = 3;\n              return this.listen(addrs);\n            case 3:\n              this.started = true;\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n    /**\n     * Stops all listeners\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var tasks, _iterator, _step, _step$value, key, listeners, listener, _iterator2, _step2, _key;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              tasks = [];\n              _iterator = _createForOfIteratorHelper(this.listeners);\n              _context2.prev = 2;\n              _iterator.s();\n            case 4:\n              if ((_step = _iterator.n()).done) {\n                _context2.next = 16;\n                break;\n              }\n              _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], listeners = _step$value[1];\n              log('closing listeners for %s', key);\n            case 7:\n              if (!(listeners.length > 0)) {\n                _context2.next = 14;\n                break;\n              }\n              listener = listeners.pop();\n              if (!(listener == null)) {\n                _context2.next = 11;\n                break;\n              }\n              return _context2.abrupt(\"continue\", 7);\n            case 11:\n              tasks.push(listener.close());\n              _context2.next = 7;\n              break;\n            case 14:\n              _context2.next = 4;\n              break;\n            case 16:\n              _context2.next = 21;\n              break;\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](2);\n              _iterator.e(_context2.t0);\n            case 21:\n              _context2.prev = 21;\n              _iterator.f();\n              return _context2.finish(21);\n            case 24:\n              _context2.next = 26;\n              return Promise.all(tasks);\n            case 26:\n              log('all listeners closed');\n              _iterator2 = _createForOfIteratorHelper(this.listeners.keys());\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  _key = _step2.value;\n                  this.listeners.set(_key, []);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              this.started = false;\n            case 30:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 18, 21, 24]]);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     */\n  }, {\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ma, options) {\n        var transport;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              transport = this.transportForMultiaddr(ma);\n              if (!(transport == null)) {\n                _context3.next = 3;\n                break;\n              }\n              throw errCode(new Error(\"No transport available for address \".concat(String(ma))), codes.ERR_TRANSPORT_UNAVAILABLE);\n            case 3:\n              _context3.prev = 3;\n              _context3.next = 6;\n              return transport.dial(ma, _objectSpread(_objectSpread({}, options), {}, {\n                upgrader: this.components.getUpgrader()\n              }));\n            case 6:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](3);\n              if (_context3.t0.code == null) {\n                _context3.t0.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n              }\n              throw _context3.t0;\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[3, 9]]);\n      }));\n      function dial(_x, _x2) {\n        return _dial.apply(this, arguments);\n      }\n      return dial;\n    }()\n    /**\n     * Returns all Multiaddr's the listeners are using\n     */\n  }, {\n    key: \"getAddrs\",\n    value: function getAddrs() {\n      var addrs = [];\n      var _iterator3 = _createForOfIteratorHelper(this.listeners.values()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var listeners = _step3.value;\n          var _iterator4 = _createForOfIteratorHelper(listeners),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var listener = _step4.value;\n              addrs = [].concat(_toConsumableArray(addrs), _toConsumableArray(listener.getAddrs()));\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return addrs;\n    }\n    /**\n     * Returns all the transports instances\n     */\n  }, {\n    key: \"getTransports\",\n    value: function getTransports() {\n      return Array.of.apply(Array, _toConsumableArray(this.transports.values()));\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     */\n  }, {\n    key: \"transportForMultiaddr\",\n    value: function transportForMultiaddr(ma) {\n      var _iterator5 = _createForOfIteratorHelper(this.transports.values()),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var transport = _step5.value;\n          var addrs = transport.filter([ma]);\n          if (addrs.length > 0) {\n            return transport;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n    /**\n     * Starts listeners for each listen Multiaddr\n     */\n  }, {\n    key: \"listen\",\n    value: function () {\n      var _listen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(addrs) {\n        var _this2 = this;\n        var couldNotListen, _iterator6, _step6, _step6$value, key, transport, supportedAddrs, tasks, _iterator7, _step7, _loop, results, isListening, message;\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(addrs == null || addrs.length === 0)) {\n                _context5.next = 3;\n                break;\n              }\n              log('no addresses were provided for listening, this node is dial only');\n              return _context5.abrupt(\"return\");\n            case 3:\n              couldNotListen = [];\n              _iterator6 = _createForOfIteratorHelper(this.transports.entries());\n              _context5.prev = 5;\n              _iterator6.s();\n            case 7:\n              if ((_step6 = _iterator6.n()).done) {\n                _context5.next = 38;\n                break;\n              }\n              _step6$value = _slicedToArray(_step6.value, 2), key = _step6$value[0], transport = _step6$value[1];\n              supportedAddrs = transport.filter(addrs);\n              tasks = []; // For each supported multiaddr, create a listener\n              _iterator7 = _createForOfIteratorHelper(supportedAddrs);\n              _context5.prev = 12;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var addr, listener, listeners;\n                return _regeneratorRuntime().wrap(function _loop$(_context4) {\n                  while (1) switch (_context4.prev = _context4.next) {\n                    case 0:\n                      addr = _step7.value;\n                      log('creating listener for %s on %s', key, addr);\n                      listener = transport.createListener({\n                        upgrader: _this2.components.getUpgrader()\n                      });\n                      listeners = _this2.listeners.get(key);\n                      if (listeners == null) {\n                        listeners = [];\n                        _this2.listeners.set(key, listeners);\n                      }\n                      listeners.push(listener);\n                      // Track listen/close events\n                      listener.addEventListener('listening', function () {\n                        _this2.dispatchEvent(new CustomEvent('listener:listening', {\n                          detail: listener\n                        }));\n                      });\n                      listener.addEventListener('close', function () {\n                        _this2.dispatchEvent(new CustomEvent('listener:close', {\n                          detail: listener\n                        }));\n                      });\n                      // We need to attempt to listen on everything\n                      tasks.push(listener.listen(addr));\n                    case 9:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }, _loop);\n              });\n              _iterator7.s();\n            case 15:\n              if ((_step7 = _iterator7.n()).done) {\n                _context5.next = 19;\n                break;\n              }\n              return _context5.delegateYield(_loop(), \"t0\", 17);\n            case 17:\n              _context5.next = 15;\n              break;\n            case 19:\n              _context5.next = 24;\n              break;\n            case 21:\n              _context5.prev = 21;\n              _context5.t1 = _context5[\"catch\"](12);\n              _iterator7.e(_context5.t1);\n            case 24:\n              _context5.prev = 24;\n              _iterator7.f();\n              return _context5.finish(24);\n            case 27:\n              if (!(tasks.length === 0)) {\n                _context5.next = 30;\n                break;\n              }\n              couldNotListen.push(key);\n              return _context5.abrupt(\"continue\", 36);\n            case 30:\n              _context5.next = 32;\n              return pSettle(tasks);\n            case 32:\n              results = _context5.sent;\n              // If we are listening on at least 1 address, succeed.\n              // TODO: we should look at adding a retry (`p-retry`) here to better support\n              // listening on remote addresses as they may be offline. We could then potentially\n              // just wait for any (`p-any`) listener to succeed on each transport before returning\n              isListening = results.find(function (r) {\n                return r.isFulfilled;\n              });\n              if (!(isListening == null && this.faultTolerance !== FaultTolerance.NO_FATAL)) {\n                _context5.next = 36;\n                break;\n              }\n              throw errCode(new Error(\"Transport (\".concat(key, \") could not listen on any available address\")), codes.ERR_NO_VALID_ADDRESSES);\n            case 36:\n              _context5.next = 7;\n              break;\n            case 38:\n              _context5.next = 43;\n              break;\n            case 40:\n              _context5.prev = 40;\n              _context5.t2 = _context5[\"catch\"](5);\n              _iterator6.e(_context5.t2);\n            case 43:\n              _context5.prev = 43;\n              _iterator6.f();\n              return _context5.finish(43);\n            case 46:\n              if (!(couldNotListen.length === this.transports.size)) {\n                _context5.next = 51;\n                break;\n              }\n              message = \"no valid addresses were provided for transports [\".concat(couldNotListen.join(', '), \"]\");\n              if (!(this.faultTolerance === FaultTolerance.FATAL_ALL)) {\n                _context5.next = 50;\n                break;\n              }\n              throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n            case 50:\n              log(\"libp2p in dial mode only: \".concat(message));\n            case 51:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee4, this, [[5, 40, 43, 46], [12, 21, 24, 27]]);\n      }));\n      function listen(_x3) {\n        return _listen.apply(this, arguments);\n      }\n      return listen;\n    }()\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     */\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(key) {\n        var _this$listeners$get;\n        var _iterator8, _step8, listener;\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              log('removing %s', key);\n              // Close any running listeners\n              _iterator8 = _createForOfIteratorHelper((_this$listeners$get = this.listeners.get(key)) !== null && _this$listeners$get !== void 0 ? _this$listeners$get : []);\n              _context6.prev = 2;\n              _iterator8.s();\n            case 4:\n              if ((_step8 = _iterator8.n()).done) {\n                _context6.next = 10;\n                break;\n              }\n              listener = _step8.value;\n              _context6.next = 8;\n              return listener.close();\n            case 8:\n              _context6.next = 4;\n              break;\n            case 10:\n              _context6.next = 15;\n              break;\n            case 12:\n              _context6.prev = 12;\n              _context6.t0 = _context6[\"catch\"](2);\n              _iterator8.e(_context6.t0);\n            case 15:\n              _context6.prev = 15;\n              _iterator8.f();\n              return _context6.finish(15);\n            case 18:\n              this.transports.delete(key);\n              this.listeners.delete(key);\n            case 20:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee5, this, [[2, 12, 15, 18]]);\n      }));\n      function remove(_x4) {\n        return _remove.apply(this, arguments);\n      }\n      return remove;\n    }()\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     *\n     * @async\n     */\n  }, {\n    key: \"removeAll\",\n    value: function () {\n      var _removeAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var tasks, _iterator9, _step9, key;\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              tasks = [];\n              _iterator9 = _createForOfIteratorHelper(this.transports.keys());\n              try {\n                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                  key = _step9.value;\n                  tasks.push(this.remove(key));\n                }\n              } catch (err) {\n                _iterator9.e(err);\n              } finally {\n                _iterator9.f();\n              }\n              _context7.next = 5;\n              return Promise.all(tasks);\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee6, this);\n      }));\n      function removeAll() {\n        return _removeAll.apply(this, arguments);\n      }\n      return removeAll;\n    }()\n  }]);\n  return DefaultTransportManager;\n}(EventEmitter);\n/**\n * Enum Transport Manager Fault Tolerance values\n */\nexport var FaultTolerance;\n(function (FaultTolerance) {\n  /**\n   * should be used for failing in any listen circumstance\n   */\n  FaultTolerance[FaultTolerance[\"FATAL_ALL\"] = 0] = \"FATAL_ALL\";\n  /**\n   * should be used for not failing when not listening\n   */\n  FaultTolerance[FaultTolerance[\"NO_FATAL\"] = 1] = \"NO_FATAL\";\n})(FaultTolerance || (FaultTolerance = {}));","map":{"version":3,"names":["logger","pSettle","codes","errCode","CustomEvent","EventEmitter","trackedMap","log","DefaultTransportManager","_EventEmitter","_inherits","_super","_createSuper","components","_init$faultTolerance","_this","init","arguments","length","undefined","_classCallCheck","call","started","transports","Map","listeners","component","metric","metrics","getMetrics","faultTolerance","FaultTolerance","FATAL_ALL","_createClass","key","value","add","transport","tag","Symbol","toStringTag","Error","ERR_INVALID_KEY","has","ERR_DUPLICATE_TRANSPORT","set","isStarted","_start","_asyncToGenerator","_regeneratorRuntime","mark","_callee","addrs","wrap","_callee$","_context","prev","next","getAddressManager","getListenAddrs","listen","stop","start","apply","_stop","_callee2","tasks","_iterator","_step","_step$value","listener","_iterator2","_step2","_key","_callee2$","_context2","_createForOfIteratorHelper","s","n","done","_slicedToArray","pop","abrupt","push","close","t0","e","f","finish","Promise","all","keys","err","_dial","_callee3","ma","options","_callee3$","_context3","transportForMultiaddr","concat","String","ERR_TRANSPORT_UNAVAILABLE","dial","_objectSpread","upgrader","getUpgrader","sent","code","ERR_TRANSPORT_DIAL_FAILED","_x","_x2","getAddrs","_iterator3","values","_step3","_iterator4","_step4","_toConsumableArray","getTransports","Array","of","_iterator5","_step5","filter","_listen","_callee4","_this2","couldNotListen","_iterator6","_step6","_step6$value","supportedAddrs","_iterator7","_step7","_loop","results","isListening","message","_callee4$","_context5","entries","addr","_loop$","_context4","createListener","get","addEventListener","dispatchEvent","detail","delegateYield","t1","find","r","isFulfilled","NO_FATAL","ERR_NO_VALID_ADDRESSES","t2","size","join","_x3","_remove","_callee5","_this$listeners$get","_iterator8","_step8","_callee5$","_context6","delete","remove","_x4","_removeAll","_callee6","_iterator9","_step9","_callee6$","_context7","removeAll"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/transport-manager.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport pSettle from 'p-settle'\nimport { codes } from './errors.js'\nimport errCode from 'err-code'\nimport type { Listener, Transport, TransportManager, TransportManagerEvents } from '@libp2p/interface-transport'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Connection } from '@libp2p/interface-connection'\nimport type { AbortOptions } from '@libp2p/interfaces'\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { Components } from '@libp2p/components'\nimport { trackedMap } from '@libp2p/tracked-map'\n\nconst log = logger('libp2p:transports')\n\nexport interface TransportManagerInit {\n  faultTolerance?: FaultTolerance\n}\n\nexport class DefaultTransportManager extends EventEmitter<TransportManagerEvents> implements TransportManager, Startable {\n  private readonly components: Components\n  private readonly transports: Map<string, Transport>\n  private readonly listeners: Map<string, Listener[]>\n  private readonly faultTolerance: FaultTolerance\n  private started: boolean\n\n  constructor (components: Components, init: TransportManagerInit = {}) {\n    super()\n\n    this.components = components\n    this.started = false\n    this.transports = new Map<string, Transport>()\n    this.listeners = trackedMap({\n      component: 'transport-manager',\n      metric: 'listeners',\n      metrics: this.components.getMetrics()\n    })\n    this.faultTolerance = init.faultTolerance ?? FaultTolerance.FATAL_ALL\n  }\n\n  /**\n   * Adds a `Transport` to the manager\n   */\n  add (transport: Transport) {\n    const tag = transport[Symbol.toStringTag]\n\n    if (tag == null) {\n      throw errCode(new Error('Transport must have a valid tag'), codes.ERR_INVALID_KEY)\n    }\n\n    if (this.transports.has(tag)) {\n      throw errCode(new Error('There is already a transport with this tag'), codes.ERR_DUPLICATE_TRANSPORT)\n    }\n\n    log('adding transport %s', tag)\n\n    this.transports.set(tag, transport)\n\n    if (!this.listeners.has(tag)) {\n      this.listeners.set(tag, [])\n    }\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  async start () {\n    // Listen on the provided transports for the provided addresses\n    const addrs = this.components.getAddressManager().getListenAddrs()\n\n    await this.listen(addrs)\n\n    this.started = true\n  }\n\n  /**\n   * Stops all listeners\n   */\n  async stop () {\n    const tasks = []\n    for (const [key, listeners] of this.listeners) {\n      log('closing listeners for %s', key)\n      while (listeners.length > 0) {\n        const listener = listeners.pop()\n\n        if (listener == null) {\n          continue\n        }\n\n        tasks.push(listener.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    log('all listeners closed')\n    for (const key of this.listeners.keys()) {\n      this.listeners.set(key, [])\n    }\n\n    this.started = false\n  }\n\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   */\n  async dial (ma: Multiaddr, options?: AbortOptions): Promise<Connection> {\n    const transport = this.transportForMultiaddr(ma)\n\n    if (transport == null) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE)\n    }\n\n    try {\n      return await transport.dial(ma, {\n        ...options,\n        upgrader: this.components.getUpgrader()\n      })\n    } catch (err: any) {\n      if (err.code == null) {\n        err.code = codes.ERR_TRANSPORT_DIAL_FAILED\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * Returns all Multiaddr's the listeners are using\n   */\n  getAddrs (): Multiaddr[] {\n    let addrs: Multiaddr[] = []\n    for (const listeners of this.listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()]\n      }\n    }\n    return addrs\n  }\n\n  /**\n   * Returns all the transports instances\n   */\n  getTransports () {\n    return Array.of(...this.transports.values())\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   */\n  transportForMultiaddr (ma: Multiaddr) {\n    for (const transport of this.transports.values()) {\n      const addrs = transport.filter([ma])\n\n      if (addrs.length > 0) {\n        return transport\n      }\n    }\n  }\n\n  /**\n   * Starts listeners for each listen Multiaddr\n   */\n  async listen (addrs: Multiaddr[]) {\n    if (addrs == null || addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only')\n      return\n    }\n\n    const couldNotListen = []\n\n    for (const [key, transport] of this.transports.entries()) {\n      const supportedAddrs = transport.filter(addrs)\n      const tasks = []\n\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr)\n        const listener = transport.createListener({\n          upgrader: this.components.getUpgrader()\n        })\n\n        let listeners = this.listeners.get(key)\n\n        if (listeners == null) {\n          listeners = []\n          this.listeners.set(key, listeners)\n        }\n\n        listeners.push(listener)\n\n        // Track listen/close events\n        listener.addEventListener('listening', () => {\n          this.dispatchEvent(new CustomEvent<Listener>('listener:listening', {\n            detail: listener\n          }))\n        })\n        listener.addEventListener('close', () => {\n          this.dispatchEvent(new CustomEvent<Listener>('listener:close', {\n            detail: listener\n          }))\n        })\n\n        // We need to attempt to listen on everything\n        tasks.push(listener.listen(addr))\n      }\n\n      // Keep track of transports we had no addresses for\n      if (tasks.length === 0) {\n        couldNotListen.push(key)\n        continue\n      }\n\n      const results = await pSettle(tasks)\n      // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n      const isListening = results.find(r => r.isFulfilled)\n      if ((isListening == null) && this.faultTolerance !== FaultTolerance.NO_FATAL) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES)\n      }\n    }\n\n    // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n    if (couldNotListen.length === this.transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen.join(', ')}]`\n      if (this.faultTolerance === FaultTolerance.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES)\n      }\n      log(`libp2p in dial mode only: ${message}`)\n    }\n  }\n\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   */\n  async remove (key: string) {\n    log('removing %s', key)\n\n    // Close any running listeners\n    for (const listener of this.listeners.get(key) ?? []) {\n      await listener.close()\n    }\n\n    this.transports.delete(key)\n    this.listeners.delete(key)\n  }\n\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   *\n   * @async\n   */\n  async removeAll () {\n    const tasks = []\n    for (const key of this.transports.keys()) {\n      tasks.push(this.remove(key))\n    }\n\n    await Promise.all(tasks)\n  }\n}\n\n/**\n * Enum Transport Manager Fault Tolerance values\n */\nexport enum FaultTolerance {\n  /**\n   * should be used for failing in any listen circumstance\n   */\n  FATAL_ALL = 0,\n\n  /**\n   * should be used for not failing when not listening\n   */\n  NO_FATAL\n}\n"],"mappings":";;;;;;;;;;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,KAAK,QAAQ,aAAa;AACnC,OAAOC,OAAO,MAAM,UAAU;AAK9B,SAASC,WAAW,EAAEC,YAAY,QAAQ,2BAA2B;AAGrE,SAASC,UAAU,QAAQ,qBAAqB;AAEhD,IAAMC,GAAG,GAAGP,MAAM,CAAC,mBAAmB,CAAC;AAMvC,WAAaQ,uBAAwB,0BAAAC,aAAA;EAAAC,SAAA,CAAAF,uBAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,uBAAA;EAOnC,SAAAA,wBAAaK,UAAsB,EAAiC;IAAA,IAAAC,oBAAA;IAAA,IAAAC,KAAA;IAAA,IAA/BC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,EAAE;IAAAG,eAAA,OAAAZ,uBAAA;IAClEO,KAAA,GAAAJ,MAAA,CAAAU,IAAA;IAEAN,KAAA,CAAKF,UAAU,GAAGA,UAAU;IAC5BE,KAAA,CAAKO,OAAO,GAAG,KAAK;IACpBP,KAAA,CAAKQ,UAAU,GAAG,IAAIC,GAAG,EAAqB;IAC9CT,KAAA,CAAKU,SAAS,GAAGnB,UAAU,CAAC;MAC1BoB,SAAS,EAAE,mBAAmB;MAC9BC,MAAM,EAAE,WAAW;MACnBC,OAAO,EAAEb,KAAA,CAAKF,UAAU,CAACgB,UAAU;KACpC,CAAC;IACFd,KAAA,CAAKe,cAAc,IAAAhB,oBAAA,GAAGE,IAAI,CAACc,cAAc,cAAAhB,oBAAA,cAAAA,oBAAA,GAAIiB,cAAc,CAACC,SAAS;IAAA,OAAAjB,KAAA;EACvE;EAEA;;;EAAAkB,YAAA,CAAAzB,uBAAA;IAAA0B,GAAA;IAAAC,KAAA,EAGA,SAAAC,IAAKC,SAAoB;MACvB,IAAMC,GAAG,GAAGD,SAAS,CAACE,MAAM,CAACC,WAAW,CAAC;MAEzC,IAAIF,GAAG,IAAI,IAAI,EAAE;QACf,MAAMnC,OAAO,CAAC,IAAIsC,KAAK,CAAC,iCAAiC,CAAC,EAAEvC,KAAK,CAACwC,eAAe,CAAC;;MAGpF,IAAI,IAAI,CAACnB,UAAU,CAACoB,GAAG,CAACL,GAAG,CAAC,EAAE;QAC5B,MAAMnC,OAAO,CAAC,IAAIsC,KAAK,CAAC,4CAA4C,CAAC,EAAEvC,KAAK,CAAC0C,uBAAuB,CAAC;;MAGvGrC,GAAG,CAAC,qBAAqB,EAAE+B,GAAG,CAAC;MAE/B,IAAI,CAACf,UAAU,CAACsB,GAAG,CAACP,GAAG,EAAED,SAAS,CAAC;MAEnC,IAAI,CAAC,IAAI,CAACZ,SAAS,CAACkB,GAAG,CAACL,GAAG,CAAC,EAAE;QAC5B,IAAI,CAACb,SAAS,CAACoB,GAAG,CAACP,GAAG,EAAE,EAAE,CAAC;;IAE/B;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAW,UAAA,EAAS;MACP,OAAO,IAAI,CAACxB,OAAO;IACrB;EAAC;IAAAY,GAAA;IAAAC,KAAA;MAAA,IAAAY,MAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAA;QAAA,IAAAC,KAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACE;cACML,KAAK,GAAG,IAAI,CAACvC,UAAU,CAAC6C,iBAAiB,EAAE,CAACC,cAAc,EAAE;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OAE5D,IAAI,CAACG,MAAM,CAACR,KAAK,CAAC;YAAA;cAExB,IAAI,CAAC9B,OAAO,GAAG,IAAI;YAAA;YAAA;cAAA,OAAAiC,QAAA,CAAAM,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA,CACpB;MAAA,SAAAW,MAAA;QAAA,OAAAf,MAAA,CAAAgB,KAAA,OAAA9C,SAAA;MAAA;MAAA,OAAA6C,KAAA;IAAA;IAED;;;EAAA;IAAA5B,GAAA;IAAAC,KAAA;MAAA,IAAA6B,KAAA,GAAAhB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAAe,SAAA;QAAA,IAAAC,KAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,WAAA,EAAAnC,GAAA,EAAAT,SAAA,EAAA6C,QAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,IAAA;QAAA,OAAAxB,mBAAA,GAAAI,IAAA,UAAAqB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAnB,IAAA,GAAAmB,SAAA,CAAAlB,IAAA;YAAA;cACQS,KAAK,GAAG,EAAE;cAAAC,SAAA,GAAAS,0BAAA,CACe,IAAI,CAACnD,SAAS;cAAAkD,SAAA,CAAAnB,IAAA;cAAAW,SAAA,CAAAU,CAAA;YAAA;cAAA,KAAAT,KAAA,GAAAD,SAAA,CAAAW,CAAA,IAAAC,IAAA;gBAAAJ,SAAA,CAAAlB,IAAA;gBAAA;cAAA;cAAAY,WAAA,GAAAW,cAAA,CAAAZ,KAAA,CAAAjC,KAAA,MAAjCD,GAAG,GAAAmC,WAAA,KAAE5C,SAAS,GAAA4C,WAAA;cACxB9D,GAAG,CAAC,0BAA0B,EAAE2B,GAAG,CAAC;YAAA;cAAA,MAC7BT,SAAS,CAACP,MAAM,GAAG,CAAC;gBAAAyD,SAAA,CAAAlB,IAAA;gBAAA;cAAA;cACnBa,QAAQ,GAAG7C,SAAS,CAACwD,GAAG,EAAE;cAAA,MAE5BX,QAAQ,IAAI,IAAI;gBAAAK,SAAA,CAAAlB,IAAA;gBAAA;cAAA;cAAA,OAAAkB,SAAA,CAAAO,MAAA;YAAA;cAIpBhB,KAAK,CAACiB,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE,CAAC;cAAAT,SAAA,CAAAlB,IAAA;cAAA;YAAA;cAAAkB,SAAA,CAAAlB,IAAA;cAAA;YAAA;cAAAkB,SAAA,CAAAlB,IAAA;cAAA;YAAA;cAAAkB,SAAA,CAAAnB,IAAA;cAAAmB,SAAA,CAAAU,EAAA,GAAAV,SAAA;cAAAR,SAAA,CAAAmB,CAAA,CAAAX,SAAA,CAAAU,EAAA;YAAA;cAAAV,SAAA,CAAAnB,IAAA;cAAAW,SAAA,CAAAoB,CAAA;cAAA,OAAAZ,SAAA,CAAAa,MAAA;YAAA;cAAAb,SAAA,CAAAlB,IAAA;cAAA,OAI1BgC,OAAO,CAACC,GAAG,CAACxB,KAAK,CAAC;YAAA;cACxB3D,GAAG,CAAC,sBAAsB,CAAC;cAAAgE,UAAA,GAAAK,0BAAA,CACT,IAAI,CAACnD,SAAS,CAACkE,IAAI,EAAE;cAAA;gBAAvC,KAAApB,UAAA,CAAAM,CAAA,MAAAL,MAAA,GAAAD,UAAA,CAAAO,CAAA,IAAAC,IAAA,GAAyC;kBAA9B7C,IAAG,GAAAsC,MAAA,CAAArC,KAAA;kBACZ,IAAI,CAACV,SAAS,CAACoB,GAAG,CAACX,IAAG,EAAE,EAAE,CAAC;;cAC5B,SAAA0D,GAAA;gBAAArB,UAAA,CAAAe,CAAA,CAAAM,GAAA;cAAA;gBAAArB,UAAA,CAAAgB,CAAA;cAAA;cAED,IAAI,CAACjE,OAAO,GAAG,KAAK;YAAA;YAAA;cAAA,OAAAqD,SAAA,CAAAd,IAAA;UAAA;QAAA,GAAAI,QAAA;MAAA,CACrB;MAAA,SAAAJ,KAAA;QAAA,OAAAG,KAAA,CAAAD,KAAA,OAAA9C,SAAA;MAAA;MAAA,OAAA4C,IAAA;IAAA;IAED;;;EAAA;IAAA3B,GAAA;IAAAC,KAAA;MAAA,IAAA0D,KAAA,GAAA7C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAA4C,SAAYC,EAAa,EAAEC,OAAsB;QAAA,IAAA3D,SAAA;QAAA,OAAAY,mBAAA,GAAAI,IAAA,UAAA4C,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA1C,IAAA,GAAA0C,SAAA,CAAAzC,IAAA;YAAA;cACzCpB,SAAS,GAAG,IAAI,CAAC8D,qBAAqB,CAACJ,EAAE,CAAC;cAAA,MAE5C1D,SAAS,IAAI,IAAI;gBAAA6D,SAAA,CAAAzC,IAAA;gBAAA;cAAA;cAAA,MACbtD,OAAO,CAAC,IAAIsC,KAAK,uCAAA2D,MAAA,CAAuCC,MAAM,CAACN,EAAE,CAAC,CAAE,CAAC,EAAE7F,KAAK,CAACoG,yBAAyB,CAAC;YAAA;cAAAJ,SAAA,CAAA1C,IAAA;cAAA0C,SAAA,CAAAzC,IAAA;cAAA,OAIhGpB,SAAS,CAACkE,IAAI,CAACR,EAAE,EAAAS,aAAA,CAAAA,aAAA,KACzBR,OAAO;gBACVS,QAAQ,EAAE,IAAI,CAAC5F,UAAU,CAAC6F,WAAW;cAAE,EACxC,CAAC;YAAA;cAAA,OAAAR,SAAA,CAAAhB,MAAA,WAAAgB,SAAA,CAAAS,IAAA;YAAA;cAAAT,SAAA,CAAA1C,IAAA;cAAA0C,SAAA,CAAAb,EAAA,GAAAa,SAAA;cAEF,IAAIA,SAAA,CAAAb,EAAA,CAAIuB,IAAI,IAAI,IAAI,EAAE;gBACpBV,SAAA,CAAAb,EAAA,CAAIuB,IAAI,GAAG1G,KAAK,CAAC2G,yBAAyB;;cAC3C,MAAAX,SAAA,CAAAb,EAAA;YAAA;YAAA;cAAA,OAAAa,SAAA,CAAArC,IAAA;UAAA;QAAA,GAAAiC,QAAA;MAAA,CAIJ;MAAA,SAAAS,KAAAO,EAAA,EAAAC,GAAA;QAAA,OAAAlB,KAAA,CAAA9B,KAAA,OAAA9C,SAAA;MAAA;MAAA,OAAAsF,IAAA;IAAA;IAED;;;EAAA;IAAArE,GAAA;IAAAC,KAAA,EAGA,SAAA6E,SAAA,EAAQ;MACN,IAAI5D,KAAK,GAAgB,EAAE;MAAA,IAAA6D,UAAA,GAAArC,0BAAA,CACH,IAAI,CAACnD,SAAS,CAACyF,MAAM,EAAE;QAAAC,MAAA;MAAA;QAA/C,KAAAF,UAAA,CAAApC,CAAA,MAAAsC,MAAA,GAAAF,UAAA,CAAAnC,CAAA,IAAAC,IAAA,GAAiD;UAAA,IAAtCtD,SAAS,GAAA0F,MAAA,CAAAhF,KAAA;UAAA,IAAAiF,UAAA,GAAAxC,0BAAA,CACKnD,SAAS;YAAA4F,MAAA;UAAA;YAAhC,KAAAD,UAAA,CAAAvC,CAAA,MAAAwC,MAAA,GAAAD,UAAA,CAAAtC,CAAA,IAAAC,IAAA,GAAkC;cAAA,IAAvBT,QAAQ,GAAA+C,MAAA,CAAAlF,KAAA;cACjBiB,KAAK,MAAAgD,MAAA,CAAAkB,kBAAA,CAAOlE,KAAK,GAAAkE,kBAAA,CAAKhD,QAAQ,CAAC0C,QAAQ,EAAE,EAAC;;UAC3C,SAAApB,GAAA;YAAAwB,UAAA,CAAA9B,CAAA,CAAAM,GAAA;UAAA;YAAAwB,UAAA,CAAA7B,CAAA;UAAA;;MACF,SAAAK,GAAA;QAAAqB,UAAA,CAAA3B,CAAA,CAAAM,GAAA;MAAA;QAAAqB,UAAA,CAAA1B,CAAA;MAAA;MACD,OAAOnC,KAAK;IACd;IAEA;;;EAAA;IAAAlB,GAAA;IAAAC,KAAA,EAGA,SAAAoF,cAAA,EAAa;MACX,OAAOC,KAAK,CAACC,EAAE,CAAA1D,KAAA,CAARyD,KAAK,EAAAF,kBAAA,CAAO,IAAI,CAAC/F,UAAU,CAAC2F,MAAM,EAAE,EAAC;IAC9C;IAEA;;;EAAA;IAAAhF,GAAA;IAAAC,KAAA,EAGA,SAAAgE,sBAAuBJ,EAAa;MAAA,IAAA2B,UAAA,GAAA9C,0BAAA,CACV,IAAI,CAACrD,UAAU,CAAC2F,MAAM,EAAE;QAAAS,MAAA;MAAA;QAAhD,KAAAD,UAAA,CAAA7C,CAAA,MAAA8C,MAAA,GAAAD,UAAA,CAAA5C,CAAA,IAAAC,IAAA,GAAkD;UAAA,IAAvC1C,SAAS,GAAAsF,MAAA,CAAAxF,KAAA;UAClB,IAAMiB,KAAK,GAAGf,SAAS,CAACuF,MAAM,CAAC,CAAC7B,EAAE,CAAC,CAAC;UAEpC,IAAI3C,KAAK,CAAClC,MAAM,GAAG,CAAC,EAAE;YACpB,OAAOmB,SAAS;;;MAEnB,SAAAuD,GAAA;QAAA8B,UAAA,CAAApC,CAAA,CAAAM,GAAA;MAAA;QAAA8B,UAAA,CAAAnC,CAAA;MAAA;IACH;IAEA;;;EAAA;IAAArD,GAAA;IAAAC,KAAA;MAAA,IAAA0F,OAAA,GAAA7E,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAA4E,SAAc1E,KAAkB;QAAA,IAAA2E,MAAA;QAAA,IAAAC,cAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,YAAA,EAAAjG,GAAA,EAAAG,SAAA,EAAA+F,cAAA,EAAAlE,KAAA,EAAAmE,UAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,EAAAC,WAAA,EAAAC,OAAA;QAAA,OAAAzF,mBAAA,GAAAI,IAAA,UAAAsF,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApF,IAAA,GAAAoF,SAAA,CAAAnF,IAAA;YAAA;cAAA,MAC1BL,KAAK,IAAI,IAAI,IAAIA,KAAK,CAAClC,MAAM,KAAK,CAAC;gBAAA0H,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cACrClD,GAAG,CAAC,kEAAkE,CAAC;cAAA,OAAAqI,SAAA,CAAA1D,MAAA;YAAA;cAInE8C,cAAc,GAAG,EAAE;cAAAC,UAAA,GAAArD,0BAAA,CAEM,IAAI,CAACrD,UAAU,CAACsH,OAAO,EAAE;cAAAD,SAAA,CAAApF,IAAA;cAAAyE,UAAA,CAAApD,CAAA;YAAA;cAAA,KAAAqD,MAAA,GAAAD,UAAA,CAAAnD,CAAA,IAAAC,IAAA;gBAAA6D,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAAA0E,YAAA,GAAAnD,cAAA,CAAAkD,MAAA,CAAA/F,KAAA,MAA5CD,GAAG,GAAAiG,YAAA,KAAE9F,SAAS,GAAA8F,YAAA;cAClBC,cAAc,GAAG/F,SAAS,CAACuF,MAAM,CAACxE,KAAK,CAAC;cACxCc,KAAK,GAAG,EAAE,EAEhB;cAAAmE,UAAA,GAAAzD,0BAAA,CACmBwD,cAAc;cAAAQ,SAAA,CAAApF,IAAA;cAAA+E,KAAA,gBAAAtF,mBAAA,GAAAC,IAAA,UAAAqF,MAAA;gBAAA,IAAAO,IAAA,EAAAxE,QAAA,EAAA7C,SAAA;gBAAA,OAAAwB,mBAAA,GAAAI,IAAA,UAAA0F,OAAAC,SAAA;kBAAA,kBAAAA,SAAA,CAAAxF,IAAA,GAAAwF,SAAA,CAAAvF,IAAA;oBAAA;sBAAtBqF,IAAI,GAAAR,MAAA,CAAAnG,KAAA;sBACb5B,GAAG,CAAC,gCAAgC,EAAE2B,GAAG,EAAE4G,IAAI,CAAC;sBAC1CxE,QAAQ,GAAGjC,SAAS,CAAC4G,cAAc,CAAC;wBACxCxC,QAAQ,EAAEsB,MAAI,CAAClH,UAAU,CAAC6F,WAAW;uBACtC,CAAC;sBAEEjF,SAAS,GAAGsG,MAAI,CAACtG,SAAS,CAACyH,GAAG,CAAChH,GAAG,CAAC;sBAEvC,IAAIT,SAAS,IAAI,IAAI,EAAE;wBACrBA,SAAS,GAAG,EAAE;wBACdsG,MAAI,CAACtG,SAAS,CAACoB,GAAG,CAACX,GAAG,EAAET,SAAS,CAAC;;sBAGpCA,SAAS,CAAC0D,IAAI,CAACb,QAAQ,CAAC;sBAExB;sBACAA,QAAQ,CAAC6E,gBAAgB,CAAC,WAAW,EAAE,YAAK;wBAC1CpB,MAAI,CAACqB,aAAa,CAAC,IAAIhJ,WAAW,CAAW,oBAAoB,EAAE;0BACjEiJ,MAAM,EAAE/E;yBACT,CAAC,CAAC;sBACL,CAAC,CAAC;sBACFA,QAAQ,CAAC6E,gBAAgB,CAAC,OAAO,EAAE,YAAK;wBACtCpB,MAAI,CAACqB,aAAa,CAAC,IAAIhJ,WAAW,CAAW,gBAAgB,EAAE;0BAC7DiJ,MAAM,EAAE/E;yBACT,CAAC,CAAC;sBACL,CAAC,CAAC;sBAEF;sBACAJ,KAAK,CAACiB,IAAI,CAACb,QAAQ,CAACV,MAAM,CAACkF,IAAI,CAAC,CAAC;oBAAA;oBAAA;sBAAA,OAAAE,SAAA,CAAAnF,IAAA;kBAAA;gBAAA,GAAA0E,KAAA;cAAA;cAAAF,UAAA,CAAAxD,CAAA;YAAA;cAAA,KAAAyD,MAAA,GAAAD,UAAA,CAAAvD,CAAA,IAAAC,IAAA;gBAAA6D,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAAA,OAAAmF,SAAA,CAAAU,aAAA,CAAAf,KAAA;YAAA;cAAAK,SAAA,CAAAnF,IAAA;cAAA;YAAA;cAAAmF,SAAA,CAAAnF,IAAA;cAAA;YAAA;cAAAmF,SAAA,CAAApF,IAAA;cAAAoF,SAAA,CAAAW,EAAA,GAAAX,SAAA;cAAAP,UAAA,CAAA/C,CAAA,CAAAsD,SAAA,CAAAW,EAAA;YAAA;cAAAX,SAAA,CAAApF,IAAA;cAAA6E,UAAA,CAAA9C,CAAA;cAAA,OAAAqD,SAAA,CAAApD,MAAA;YAAA;cAAA,MAI/BtB,KAAK,CAAChD,MAAM,KAAK,CAAC;gBAAA0H,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cACpBuE,cAAc,CAAC7C,IAAI,CAACjD,GAAG,CAAC;cAAA,OAAA0G,SAAA,CAAA1D,MAAA;YAAA;cAAA0D,SAAA,CAAAnF,IAAA;cAAA,OAIJxD,OAAO,CAACiE,KAAK,CAAC;YAAA;cAA9BsE,OAAO,GAAAI,SAAA,CAAAjC,IAAA;cACb;cACA;cACA;cACA;cACM8B,WAAW,GAAGD,OAAO,CAACgB,IAAI,CAAC,UAAAC,CAAC;gBAAA,OAAIA,CAAC,CAACC,WAAW;cAAA,EAAC;cAAA,MAC/CjB,WAAW,IAAI,IAAI,IAAK,IAAI,CAAC3G,cAAc,KAAKC,cAAc,CAAC4H,QAAQ;gBAAAf,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAAA,MACpEtD,OAAO,CAAC,IAAIsC,KAAK,eAAA2D,MAAA,CAAelE,GAAG,gDAA6C,CAAC,EAAEhC,KAAK,CAAC0J,sBAAsB,CAAC;YAAA;cAAAhB,SAAA,CAAAnF,IAAA;cAAA;YAAA;cAAAmF,SAAA,CAAAnF,IAAA;cAAA;YAAA;cAAAmF,SAAA,CAAApF,IAAA;cAAAoF,SAAA,CAAAiB,EAAA,GAAAjB,SAAA;cAAAX,UAAA,CAAA3C,CAAA,CAAAsD,SAAA,CAAAiB,EAAA;YAAA;cAAAjB,SAAA,CAAApF,IAAA;cAAAyE,UAAA,CAAA1C,CAAA;cAAA,OAAAqD,SAAA,CAAApD,MAAA;YAAA;cAAA,MAMtHwC,cAAc,CAAC9G,MAAM,KAAK,IAAI,CAACK,UAAU,CAACuI,IAAI;gBAAAlB,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAC1CiF,OAAO,uDAAAtC,MAAA,CAAuD4B,cAAc,CAAC+B,IAAI,CAAC,IAAI,CAAC;cAAA,MACzF,IAAI,CAACjI,cAAc,KAAKC,cAAc,CAACC,SAAS;gBAAA4G,SAAA,CAAAnF,IAAA;gBAAA;cAAA;cAAA,MAC5CtD,OAAO,CAAC,IAAIsC,KAAK,CAACiG,OAAO,CAAC,EAAExI,KAAK,CAAC0J,sBAAsB,CAAC;YAAA;cAEjErJ,GAAG,8BAAA6F,MAAA,CAA8BsC,OAAO,CAAE,CAAC;YAAA;YAAA;cAAA,OAAAE,SAAA,CAAA/E,IAAA;UAAA;QAAA,GAAAiE,QAAA;MAAA,CAE9C;MAAA,SAAAlE,OAAAoG,GAAA;QAAA,OAAAnC,OAAA,CAAA9D,KAAA,OAAA9C,SAAA;MAAA;MAAA,OAAA2C,MAAA;IAAA;IAED;;;;EAAA;IAAA1B,GAAA;IAAAC,KAAA;MAAA,IAAA8H,OAAA,GAAAjH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAIA,SAAAgH,SAAchI,GAAW;QAAA,IAAAiI,mBAAA;QAAA,IAAAC,UAAA,EAAAC,MAAA,EAAA/F,QAAA;QAAA,OAAArB,mBAAA,GAAAI,IAAA,UAAAiH,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA/G,IAAA,GAAA+G,SAAA,CAAA9G,IAAA;YAAA;cACvBlD,GAAG,CAAC,aAAa,EAAE2B,GAAG,CAAC;cAEvB;cAAAkI,UAAA,GAAAxF,0BAAA,EAAAuF,mBAAA,GACuB,IAAI,CAAC1I,SAAS,CAACyH,GAAG,CAAChH,GAAG,CAAC,cAAAiI,mBAAA,cAAAA,mBAAA,GAAI,EAAE;cAAAI,SAAA,CAAA/G,IAAA;cAAA4G,UAAA,CAAAvF,CAAA;YAAA;cAAA,KAAAwF,MAAA,GAAAD,UAAA,CAAAtF,CAAA,IAAAC,IAAA;gBAAAwF,SAAA,CAAA9G,IAAA;gBAAA;cAAA;cAAzCa,QAAQ,GAAA+F,MAAA,CAAAlI,KAAA;cAAAoI,SAAA,CAAA9G,IAAA;cAAA,OACXa,QAAQ,CAACc,KAAK,EAAE;YAAA;cAAAmF,SAAA,CAAA9G,IAAA;cAAA;YAAA;cAAA8G,SAAA,CAAA9G,IAAA;cAAA;YAAA;cAAA8G,SAAA,CAAA/G,IAAA;cAAA+G,SAAA,CAAAlF,EAAA,GAAAkF,SAAA;cAAAH,UAAA,CAAA9E,CAAA,CAAAiF,SAAA,CAAAlF,EAAA;YAAA;cAAAkF,SAAA,CAAA/G,IAAA;cAAA4G,UAAA,CAAA7E,CAAA;cAAA,OAAAgF,SAAA,CAAA/E,MAAA;YAAA;cAGxB,IAAI,CAACjE,UAAU,CAACiJ,MAAM,CAACtI,GAAG,CAAC;cAC3B,IAAI,CAACT,SAAS,CAAC+I,MAAM,CAACtI,GAAG,CAAC;YAAA;YAAA;cAAA,OAAAqI,SAAA,CAAA1G,IAAA;UAAA;QAAA,GAAAqG,QAAA;MAAA,CAC3B;MAAA,SAAAO,OAAAC,GAAA;QAAA,OAAAT,OAAA,CAAAlG,KAAA,OAAA9C,SAAA;MAAA;MAAA,OAAAwJ,MAAA;IAAA;IAED;;;;;;EAAA;IAAAvI,GAAA;IAAAC,KAAA;MAAA,IAAAwI,UAAA,GAAA3H,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAMA,SAAA0H,SAAA;QAAA,IAAA1G,KAAA,EAAA2G,UAAA,EAAAC,MAAA,EAAA5I,GAAA;QAAA,OAAAe,mBAAA,GAAAI,IAAA,UAAA0H,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAxH,IAAA,GAAAwH,SAAA,CAAAvH,IAAA;YAAA;cACQS,KAAK,GAAG,EAAE;cAAA2G,UAAA,GAAAjG,0BAAA,CACE,IAAI,CAACrD,UAAU,CAACoE,IAAI,EAAE;cAAA;gBAAxC,KAAAkF,UAAA,CAAAhG,CAAA,MAAAiG,MAAA,GAAAD,UAAA,CAAA/F,CAAA,IAAAC,IAAA,GAA0C;kBAA/B7C,GAAG,GAAA4I,MAAA,CAAA3I,KAAA;kBACZ+B,KAAK,CAACiB,IAAI,CAAC,IAAI,CAACsF,MAAM,CAACvI,GAAG,CAAC,CAAC;;cAC7B,SAAA0D,GAAA;gBAAAiF,UAAA,CAAAvF,CAAA,CAAAM,GAAA;cAAA;gBAAAiF,UAAA,CAAAtF,CAAA;cAAA;cAAAyF,SAAA,CAAAvH,IAAA;cAAA,OAEKgC,OAAO,CAACC,GAAG,CAACxB,KAAK,CAAC;YAAA;YAAA;cAAA,OAAA8G,SAAA,CAAAnH,IAAA;UAAA;QAAA,GAAA+G,QAAA;MAAA,CACzB;MAAA,SAAAK,UAAA;QAAA,OAAAN,UAAA,CAAA5G,KAAA,OAAA9C,SAAA;MAAA;MAAA,OAAAgK,SAAA;IAAA;EAAA;EAAA,OAAAzK,uBAAA;AAAA,EArP0CH,YAAoC;AAwPjF;;;AAGA,WAAY0B,cAUX;AAVD,WAAYA,cAAc;EACxB;;;EAGAA,cAAA,CAAAA,cAAA,gCAAa;EAEb;;;EAGAA,cAAA,CAAAA,cAAA,8BAAQ;AACV,CAAC,EAVWA,cAAc,KAAdA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}
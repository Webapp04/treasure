{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { MessageTypes } from './message-types.js';\nexport var MAX_MSG_SIZE = 1 << 20; // 1MB\n/**\n * Creates an iterable transform that restricts message sizes to\n * the given maximum size.\n */\nexport function restrictSize(max) {\n  var maxSize = max !== null && max !== void 0 ? max : MAX_MSG_SIZE;\n  var checkSize = function checkSize(msg) {\n    if (msg.type !== MessageTypes.NEW_STREAM && msg.type !== MessageTypes.MESSAGE_INITIATOR && msg.type !== MessageTypes.MESSAGE_RECEIVER) {\n      return;\n    }\n    if (msg.data.byteLength > maxSize) {\n      throw Object.assign(new Error('message size too large!'), {\n        code: 'ERR_MSG_TOO_BIG'\n      });\n    }\n  };\n  return function (source) {\n    return function () {\n      var _restrictSize = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, msg;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 2;\n              _iterator = _asyncIterator(source);\n            case 4:\n              _context.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 19;\n                break;\n              }\n              msg = _step.value;\n              if (!Array.isArray(msg)) {\n                _context.next = 13;\n                break;\n              }\n              msg.forEach(checkSize);\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(msg), _awaitAsyncGenerator), \"t0\", 11);\n            case 11:\n              _context.next = 16;\n              break;\n            case 13:\n              checkSize(msg);\n              _context.next = 16;\n              return msg;\n            case 16:\n              _iteratorAbruptCompletion = false;\n              _context.next = 4;\n              break;\n            case 19:\n              _context.next = 25;\n              break;\n            case 21:\n              _context.prev = 21;\n              _context.t1 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n            case 25:\n              _context.prev = 25;\n              _context.prev = 26;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 30;\n                break;\n              }\n              _context.next = 30;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 30:\n              _context.prev = 30;\n              if (!_didIteratorError) {\n                _context.next = 33;\n                break;\n              }\n              throw _iteratorError;\n            case 33:\n              return _context.finish(30);\n            case 34:\n              return _context.finish(25);\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[2, 21, 25, 35], [26,, 30, 34]]);\n      }));\n      function restrictSize() {\n        return _restrictSize.apply(this, arguments);\n      }\n      return restrictSize;\n    }()();\n  };\n}","map":{"version":3,"names":["MessageTypes","MAX_MSG_SIZE","restrictSize","max","maxSize","checkSize","msg","type","NEW_STREAM","MESSAGE_INITIATOR","MESSAGE_RECEIVER","data","byteLength","Object","assign","Error","code","source","_restrictSize","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","wrap","_callee$","_context","prev","next","_asyncIterator","_awaitAsyncGenerator","sent","done","value","Array","isArray","forEach","delegateYield","_asyncGeneratorDelegate","t1","return","finish","stop","apply","arguments"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/mplex/src/restrict-size.ts"],"sourcesContent":["import { Message, MessageTypes } from './message-types.js'\nimport type { Source, Transform } from 'it-stream-types'\n\nexport const MAX_MSG_SIZE = 1 << 20 // 1MB\n\n/**\n * Creates an iterable transform that restricts message sizes to\n * the given maximum size.\n */\nexport function restrictSize (max?: number): Transform<Message | Message[], Message> {\n  const maxSize = max ?? MAX_MSG_SIZE\n\n  const checkSize = (msg: Message) => {\n    if (msg.type !== MessageTypes.NEW_STREAM && msg.type !== MessageTypes.MESSAGE_INITIATOR && msg.type !== MessageTypes.MESSAGE_RECEIVER) {\n      return\n    }\n\n    if (msg.data.byteLength > maxSize) {\n      throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' })\n    }\n  }\n\n  return (source: Source<Message | Message[]>) => {\n    return (async function * restrictSize () {\n      for await (const msg of source) {\n        if (Array.isArray(msg)) {\n          msg.forEach(checkSize)\n          yield * msg\n        } else {\n          checkSize(msg)\n          yield msg\n        }\n      }\n    })()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport debug from 'debug';\nimport Receptacle from 'receptacle';\nimport * as utils from './utils.js';\nvar log = Object.assign(debug('dns-over-http-resolver'), {\n  error: debug('dns-over-http-resolver:error')\n});\n/**\n * DNS over HTTP resolver.\n * Uses a list of servers to resolve DNS records with HTTP requests.\n */\nvar Resolver = /*#__PURE__*/function () {\n  /**\n   * @class\n   * @param {object} [options]\n   * @param {number} [options.maxCache = 100] - maximum number of cached dns records\n   * @param {Request} [options.request] - function to return DNSJSON\n   */\n  function Resolver() {\n    var _options$maxCache, _options$maxCache2, _options$request;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Resolver);\n    this._cache = new Receptacle({\n      max: (_options$maxCache = options === null || options === void 0 ? void 0 : options.maxCache) !== null && _options$maxCache !== void 0 ? _options$maxCache : 100\n    });\n    this._TXTcache = new Receptacle({\n      max: (_options$maxCache2 = options === null || options === void 0 ? void 0 : options.maxCache) !== null && _options$maxCache2 !== void 0 ? _options$maxCache2 : 100\n    });\n    this._servers = ['https://cloudflare-dns.com/dns-query', 'https://dns.google/resolve'];\n    this._request = (_options$request = options.request) !== null && _options$request !== void 0 ? _options$request : utils.request;\n    this._abortControllers = [];\n  }\n  /**\n   * Cancel all outstanding DNS queries made by this resolver. Any outstanding\n   * requests will be aborted and promises rejected.\n   */\n  _createClass(Resolver, [{\n    key: \"cancel\",\n    value: function cancel() {\n      this._abortControllers.forEach(function (controller) {\n        return controller.abort();\n      });\n    }\n    /**\n     * Get an array of the IP addresses currently configured for DNS resolution.\n     * These addresses are formatted according to RFC 5952. It can include a custom port.\n     */\n  }, {\n    key: \"getServers\",\n    value: function getServers() {\n      return this._servers;\n    }\n    /**\n     * Get a shuffled array of the IP addresses currently configured for DNS resolution.\n     * These addresses are formatted according to RFC 5952. It can include a custom port.\n     */\n  }, {\n    key: \"_getShuffledServers\",\n    value: function _getShuffledServers() {\n      var newServers = _toConsumableArray(this._servers);\n      for (var i = newServers.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * i);\n        var temp = newServers[i];\n        newServers[i] = newServers[j];\n        newServers[j] = temp;\n      }\n      return newServers;\n    }\n    /**\n     * Sets the IP address and port of servers to be used when performing DNS resolution.\n     *\n     * @param {string[]} servers - array of RFC 5952 formatted addresses.\n     */\n  }, {\n    key: \"setServers\",\n    value: function setServers(servers) {\n      this._servers = servers;\n    }\n    /**\n     * Uses the DNS protocol to resolve the given host name into the appropriate DNS record\n     *\n     * @param {string} hostname - host name to resolve\n     * @param {string} [rrType = 'A'] - resource record type\n     */\n  }, {\n    key: \"resolve\",\n    value: function () {\n      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hostname) {\n        var rrType,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              rrType = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'A';\n              _context.t0 = rrType;\n              _context.next = _context.t0 === 'A' ? 4 : _context.t0 === 'AAAA' ? 7 : _context.t0 === 'TXT' ? 10 : 13;\n              break;\n            case 4:\n              _context.next = 6;\n              return this.resolve4(hostname);\n            case 6:\n              return _context.abrupt(\"return\", _context.sent);\n            case 7:\n              _context.next = 9;\n              return this.resolve6(hostname);\n            case 9:\n              return _context.abrupt(\"return\", _context.sent);\n            case 10:\n              _context.next = 12;\n              return this.resolveTxt(hostname);\n            case 12:\n              return _context.abrupt(\"return\", _context.sent);\n            case 13:\n              throw new Error(\"\".concat(rrType, \" is not supported\"));\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolve(_x) {\n        return _resolve.apply(this, arguments);\n      }\n      return resolve;\n    }()\n    /**\n     * Uses the DNS protocol to resolve the given host name into IPv4 addresses\n     *\n     * @param {string} hostname - host name to resolve\n     */\n  }, {\n    key: \"resolve4\",\n    value: function () {\n      var _resolve2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hostname) {\n        var _this = this;\n        var recordType, cached, aborted, _iterator, _step, _loop, _ret;\n        return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              recordType = 'A';\n              cached = this._cache.get(utils.getCacheKey(hostname, recordType));\n              if (!(cached != null)) {\n                _context3.next = 4;\n                break;\n              }\n              return _context3.abrupt(\"return\", cached);\n            case 4:\n              aborted = false;\n              _iterator = _createForOfIteratorHelper(this._getShuffledServers());\n              _context3.prev = 6;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var server, controller, response, data, ttl;\n                return _regeneratorRuntime().wrap(function _loop$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      server = _step.value;\n                      controller = new AbortController();\n                      _this._abortControllers.push(controller);\n                      _context2.prev = 3;\n                      _context2.next = 6;\n                      return _this._request(utils.buildResource(server, hostname, recordType), controller.signal);\n                    case 6:\n                      response = _context2.sent;\n                      data = response.Answer.map(function (a) {\n                        return a.data;\n                      });\n                      ttl = Math.min.apply(Math, _toConsumableArray(response.Answer.map(function (a) {\n                        return a.TTL;\n                      })));\n                      _this._cache.set(utils.getCacheKey(hostname, recordType), data, {\n                        ttl: ttl\n                      });\n                      return _context2.abrupt(\"return\", {\n                        v: data\n                      });\n                    case 13:\n                      _context2.prev = 13;\n                      _context2.t0 = _context2[\"catch\"](3);\n                      if (controller.signal.aborted) {\n                        aborted = true;\n                      }\n                      log.error(\"\".concat(server, \" could not resolve \").concat(hostname, \" record \").concat(recordType));\n                    case 17:\n                      _context2.prev = 17;\n                      _this._abortControllers = _this._abortControllers.filter(function (c) {\n                        return c !== controller;\n                      });\n                      return _context2.finish(17);\n                    case 20:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _loop, null, [[3, 13, 17, 20]]);\n              });\n              _iterator.s();\n            case 9:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 16;\n                break;\n              }\n              return _context3.delegateYield(_loop(), \"t0\", 11);\n            case 11:\n              _ret = _context3.t0;\n              if (!_ret) {\n                _context3.next = 14;\n                break;\n              }\n              return _context3.abrupt(\"return\", _ret.v);\n            case 14:\n              _context3.next = 9;\n              break;\n            case 16:\n              _context3.next = 21;\n              break;\n            case 18:\n              _context3.prev = 18;\n              _context3.t1 = _context3[\"catch\"](6);\n              _iterator.e(_context3.t1);\n            case 21:\n              _context3.prev = 21;\n              _iterator.f();\n              return _context3.finish(21);\n            case 24:\n              if (!aborted) {\n                _context3.next = 26;\n                break;\n              }\n              throw Object.assign(new Error('queryA ECANCELLED'), {\n                code: 'ECANCELLED'\n              });\n            case 26:\n              throw new Error(\"Could not resolve \".concat(hostname, \" record \").concat(recordType));\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee2, this, [[6, 18, 21, 24]]);\n      }));\n      function resolve4(_x2) {\n        return _resolve2.apply(this, arguments);\n      }\n      return resolve4;\n    }()\n    /**\n     * Uses the DNS protocol to resolve the given host name into IPv6 addresses\n     *\n     * @param {string} hostname - host name to resolve\n     */\n  }, {\n    key: \"resolve6\",\n    value: function () {\n      var _resolve3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(hostname) {\n        var _this2 = this;\n        var recordType, cached, aborted, _iterator2, _step2, _loop2, _ret2;\n        return _regeneratorRuntime().wrap(function _callee3$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              recordType = 'AAAA';\n              cached = this._cache.get(utils.getCacheKey(hostname, recordType));\n              if (!(cached != null)) {\n                _context5.next = 4;\n                break;\n              }\n              return _context5.abrupt(\"return\", cached);\n            case 4:\n              aborted = false;\n              _iterator2 = _createForOfIteratorHelper(this._getShuffledServers());\n              _context5.prev = 6;\n              _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n                var server, controller, response, data, ttl;\n                return _regeneratorRuntime().wrap(function _loop2$(_context4) {\n                  while (1) switch (_context4.prev = _context4.next) {\n                    case 0:\n                      server = _step2.value;\n                      controller = new AbortController();\n                      _this2._abortControllers.push(controller);\n                      _context4.prev = 3;\n                      _context4.next = 6;\n                      return _this2._request(utils.buildResource(server, hostname, recordType), controller.signal);\n                    case 6:\n                      response = _context4.sent;\n                      data = response.Answer.map(function (a) {\n                        return a.data;\n                      });\n                      ttl = Math.min.apply(Math, _toConsumableArray(response.Answer.map(function (a) {\n                        return a.TTL;\n                      })));\n                      _this2._cache.set(utils.getCacheKey(hostname, recordType), data, {\n                        ttl: ttl\n                      });\n                      return _context4.abrupt(\"return\", {\n                        v: data\n                      });\n                    case 13:\n                      _context4.prev = 13;\n                      _context4.t0 = _context4[\"catch\"](3);\n                      if (controller.signal.aborted) {\n                        aborted = true;\n                      }\n                      log.error(\"\".concat(server, \" could not resolve \").concat(hostname, \" record \").concat(recordType));\n                    case 17:\n                      _context4.prev = 17;\n                      _this2._abortControllers = _this2._abortControllers.filter(function (c) {\n                        return c !== controller;\n                      });\n                      return _context4.finish(17);\n                    case 20:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }, _loop2, null, [[3, 13, 17, 20]]);\n              });\n              _iterator2.s();\n            case 9:\n              if ((_step2 = _iterator2.n()).done) {\n                _context5.next = 16;\n                break;\n              }\n              return _context5.delegateYield(_loop2(), \"t0\", 11);\n            case 11:\n              _ret2 = _context5.t0;\n              if (!_ret2) {\n                _context5.next = 14;\n                break;\n              }\n              return _context5.abrupt(\"return\", _ret2.v);\n            case 14:\n              _context5.next = 9;\n              break;\n            case 16:\n              _context5.next = 21;\n              break;\n            case 18:\n              _context5.prev = 18;\n              _context5.t1 = _context5[\"catch\"](6);\n              _iterator2.e(_context5.t1);\n            case 21:\n              _context5.prev = 21;\n              _iterator2.f();\n              return _context5.finish(21);\n            case 24:\n              if (!aborted) {\n                _context5.next = 26;\n                break;\n              }\n              throw Object.assign(new Error('queryAaaa ECANCELLED'), {\n                code: 'ECANCELLED'\n              });\n            case 26:\n              throw new Error(\"Could not resolve \".concat(hostname, \" record \").concat(recordType));\n            case 27:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee3, this, [[6, 18, 21, 24]]);\n      }));\n      function resolve6(_x3) {\n        return _resolve3.apply(this, arguments);\n      }\n      return resolve6;\n    }()\n    /**\n     * Uses the DNS protocol to resolve the given host name into a Text record\n     *\n     * @param {string} hostname - host name to resolve\n     */\n  }, {\n    key: \"resolveTxt\",\n    value: function () {\n      var _resolveTxt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(hostname) {\n        var _this3 = this;\n        var recordType, cached, aborted, _iterator3, _step3, _loop3, _ret3;\n        return _regeneratorRuntime().wrap(function _callee4$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              recordType = 'TXT';\n              cached = this._TXTcache.get(utils.getCacheKey(hostname, recordType));\n              if (!(cached != null)) {\n                _context7.next = 4;\n                break;\n              }\n              return _context7.abrupt(\"return\", cached);\n            case 4:\n              aborted = false;\n              _iterator3 = _createForOfIteratorHelper(this._getShuffledServers());\n              _context7.prev = 6;\n              _loop3 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop3() {\n                var server, controller, response, data, ttl;\n                return _regeneratorRuntime().wrap(function _loop3$(_context6) {\n                  while (1) switch (_context6.prev = _context6.next) {\n                    case 0:\n                      server = _step3.value;\n                      controller = new AbortController();\n                      _this3._abortControllers.push(controller);\n                      _context6.prev = 3;\n                      _context6.next = 6;\n                      return _this3._request(utils.buildResource(server, hostname, recordType), controller.signal);\n                    case 6:\n                      response = _context6.sent;\n                      data = response.Answer.map(function (a) {\n                        return [a.data.replace(/['\"]+/g, '')];\n                      });\n                      ttl = Math.min.apply(Math, _toConsumableArray(response.Answer.map(function (a) {\n                        return a.TTL;\n                      })));\n                      _this3._TXTcache.set(utils.getCacheKey(hostname, recordType), data, {\n                        ttl: ttl\n                      });\n                      return _context6.abrupt(\"return\", {\n                        v: data\n                      });\n                    case 13:\n                      _context6.prev = 13;\n                      _context6.t0 = _context6[\"catch\"](3);\n                      if (controller.signal.aborted) {\n                        aborted = true;\n                      }\n                      log.error(\"\".concat(server, \" could not resolve \").concat(hostname, \" record \").concat(recordType));\n                    case 17:\n                      _context6.prev = 17;\n                      _this3._abortControllers = _this3._abortControllers.filter(function (c) {\n                        return c !== controller;\n                      });\n                      return _context6.finish(17);\n                    case 20:\n                    case \"end\":\n                      return _context6.stop();\n                  }\n                }, _loop3, null, [[3, 13, 17, 20]]);\n              });\n              _iterator3.s();\n            case 9:\n              if ((_step3 = _iterator3.n()).done) {\n                _context7.next = 16;\n                break;\n              }\n              return _context7.delegateYield(_loop3(), \"t0\", 11);\n            case 11:\n              _ret3 = _context7.t0;\n              if (!_ret3) {\n                _context7.next = 14;\n                break;\n              }\n              return _context7.abrupt(\"return\", _ret3.v);\n            case 14:\n              _context7.next = 9;\n              break;\n            case 16:\n              _context7.next = 21;\n              break;\n            case 18:\n              _context7.prev = 18;\n              _context7.t1 = _context7[\"catch\"](6);\n              _iterator3.e(_context7.t1);\n            case 21:\n              _context7.prev = 21;\n              _iterator3.f();\n              return _context7.finish(21);\n            case 24:\n              if (!aborted) {\n                _context7.next = 26;\n                break;\n              }\n              throw Object.assign(new Error('queryTxt ECANCELLED'), {\n                code: 'ECANCELLED'\n              });\n            case 26:\n              throw new Error(\"Could not resolve \".concat(hostname, \" record \").concat(recordType));\n            case 27:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee4, this, [[6, 18, 21, 24]]);\n      }));\n      function resolveTxt(_x4) {\n        return _resolveTxt.apply(this, arguments);\n      }\n      return resolveTxt;\n    }()\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._cache.clear();\n      this._TXTcache.clear();\n    }\n  }]);\n  return Resolver;\n}();\nexport default Resolver;","map":{"version":3,"names":["debug","Receptacle","utils","log","Object","assign","error","Resolver","_options$maxCache","_options$maxCache2","_options$request","options","arguments","length","undefined","_classCallCheck","_cache","max","maxCache","_TXTcache","_servers","_request","request","_abortControllers","_createClass","key","value","cancel","forEach","controller","abort","getServers","_getShuffledServers","newServers","_toConsumableArray","i","j","Math","floor","random","temp","setServers","servers","_resolve","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hostname","rrType","_args","wrap","_callee$","_context","prev","next","t0","resolve4","abrupt","sent","resolve6","resolveTxt","Error","concat","stop","resolve","_x","apply","_resolve2","_callee2","_this","recordType","cached","aborted","_iterator","_step","_loop","_ret","_callee2$","_context3","get","getCacheKey","_createForOfIteratorHelper","server","response","data","ttl","_loop$","_context2","AbortController","push","buildResource","signal","Answer","map","a","min","TTL","set","v","filter","c","finish","s","n","done","delegateYield","t1","e","f","code","_x2","_resolve3","_callee3","_this2","_iterator2","_step2","_loop2","_ret2","_callee3$","_context5","_loop2$","_context4","_x3","_resolveTxt","_callee4","_this3","_iterator3","_step3","_loop3","_ret3","_callee4$","_context7","_loop3$","_context6","replace","_x4","clearCache","clear"],"sources":["/Users/apple/Documents/treasure/node_modules/dns-over-http-resolver/src/index.ts"],"sourcesContent":["import debug from 'debug'\nimport Receptacle from 'receptacle'\nimport * as utils from './utils.js'\nimport type { DNSJSON } from './utils'\n\nconst log = Object.assign(debug('dns-over-http-resolver'), {\n  error: debug('dns-over-http-resolver:error')\n})\n\nexport interface Request { (resource: string, signal: AbortSignal): Promise<DNSJSON> }\n\ninterface ResolverOptions {\n  maxCache?: number\n  request?: Request\n}\n\n/**\n * DNS over HTTP resolver.\n * Uses a list of servers to resolve DNS records with HTTP requests.\n */\nclass Resolver {\n  private readonly _cache: Receptacle<string[]>\n  private readonly _TXTcache: Receptacle<string[][]>\n  private _servers: string[]\n  private readonly _request: Request\n  private _abortControllers: AbortController[]\n\n  /**\n   * @class\n   * @param {object} [options]\n   * @param {number} [options.maxCache = 100] - maximum number of cached dns records\n   * @param {Request} [options.request] - function to return DNSJSON\n   */\n  constructor (options: ResolverOptions = {}) {\n    this._cache = new Receptacle({ max: options?.maxCache ?? 100 })\n    this._TXTcache = new Receptacle({ max: options?.maxCache ?? 100 })\n    this._servers = [\n      'https://cloudflare-dns.com/dns-query',\n      'https://dns.google/resolve'\n    ]\n    this._request = options.request ?? utils.request\n    this._abortControllers = []\n  }\n\n  /**\n   * Cancel all outstanding DNS queries made by this resolver. Any outstanding\n   * requests will be aborted and promises rejected.\n   */\n  cancel () {\n    this._abortControllers.forEach(controller => controller.abort())\n  }\n\n  /**\n   * Get an array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   */\n  getServers () {\n    return this._servers\n  }\n\n  /**\n   * Get a shuffled array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   */\n  _getShuffledServers () {\n    const newServers = [...this._servers]\n\n    for (let i = newServers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = newServers[i]\n      newServers[i] = newServers[j]\n      newServers[j] = temp\n    }\n\n    return newServers\n  }\n\n  /**\n   * Sets the IP address and port of servers to be used when performing DNS resolution.\n   *\n   * @param {string[]} servers - array of RFC 5952 formatted addresses.\n   */\n  setServers (servers: string[]) {\n    this._servers = servers\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into the appropriate DNS record\n   *\n   * @param {string} hostname - host name to resolve\n   * @param {string} [rrType = 'A'] - resource record type\n   */\n  async resolve (hostname: string, rrType = 'A') {\n    switch (rrType) {\n      case 'A':\n        return await this.resolve4(hostname)\n      case 'AAAA':\n        return await this.resolve6(hostname)\n      case 'TXT':\n        return await this.resolveTxt(hostname)\n      default:\n        throw new Error(`${rrType} is not supported`)\n    }\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv4 addresses\n   *\n   * @param {string} hostname - host name to resolve\n   */\n  async resolve4 (hostname: string) {\n    const recordType = 'A'\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType))\n    if (cached != null) {\n      return cached\n    }\n    let aborted = false\n\n    for (const server of this._getShuffledServers()) {\n      const controller = new AbortController()\n      this._abortControllers.push(controller)\n\n      try {\n        const response = await this._request(utils.buildResource(\n          server,\n          hostname,\n          recordType\n        ), controller.signal)\n\n        const data = response.Answer.map(a => a.data)\n        const ttl = Math.min(...response.Answer.map(a => a.TTL))\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, { ttl })\n\n        return data\n      } catch (err) {\n        if (controller.signal.aborted) {\n          aborted = true\n        }\n\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`)\n      } finally {\n        this._abortControllers = this._abortControllers.filter(c => c !== controller)\n      }\n    }\n\n    if (aborted) {\n      throw Object.assign(new Error('queryA ECANCELLED'), {\n        code: 'ECANCELLED'\n      })\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`)\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv6 addresses\n   *\n   * @param {string} hostname - host name to resolve\n   */\n  async resolve6 (hostname: string) {\n    const recordType = 'AAAA'\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType))\n    if (cached != null) {\n      return cached\n    }\n    let aborted = false\n\n    for (const server of this._getShuffledServers()) {\n      const controller = new AbortController()\n      this._abortControllers.push(controller)\n\n      try {\n        const response = await this._request(utils.buildResource(\n          server,\n          hostname,\n          recordType\n        ), controller.signal)\n\n        const data = response.Answer.map(a => a.data)\n        const ttl = Math.min(...response.Answer.map(a => a.TTL))\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, { ttl })\n\n        return data\n      } catch (err) {\n        if (controller.signal.aborted) {\n          aborted = true\n        }\n\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`)\n      } finally {\n        this._abortControllers = this._abortControllers.filter(c => c !== controller)\n      }\n    }\n\n    if (aborted) {\n      throw Object.assign(new Error('queryAaaa ECANCELLED'), {\n        code: 'ECANCELLED'\n      })\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`)\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into a Text record\n   *\n   * @param {string} hostname - host name to resolve\n   */\n  async resolveTxt (hostname: string) {\n    const recordType = 'TXT'\n    const cached = this._TXTcache.get(utils.getCacheKey(hostname, recordType))\n    if (cached != null) {\n      return cached\n    }\n    let aborted = false\n\n    for (const server of this._getShuffledServers()) {\n      const controller = new AbortController()\n      this._abortControllers.push(controller)\n\n      try {\n        const response = await this._request(utils.buildResource(\n          server,\n          hostname,\n          recordType\n        ), controller.signal)\n\n        const data = response.Answer.map(a => [a.data.replace(/['\"]+/g, '')])\n        const ttl = Math.min(...response.Answer.map(a => a.TTL))\n\n        this._TXTcache.set(utils.getCacheKey(hostname, recordType), data, { ttl })\n\n        return data\n      } catch (err) {\n        if (controller.signal.aborted) {\n          aborted = true\n        }\n\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`)\n      } finally {\n        this._abortControllers = this._abortControllers.filter(c => c !== controller)\n      }\n    }\n\n    if (aborted) {\n      throw Object.assign(new Error('queryTxt ECANCELLED'), {\n        code: 'ECANCELLED'\n      })\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`)\n  }\n\n  clearCache () {\n    this._cache.clear()\n    this._TXTcache.clear()\n  }\n}\n\nexport default Resolver\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
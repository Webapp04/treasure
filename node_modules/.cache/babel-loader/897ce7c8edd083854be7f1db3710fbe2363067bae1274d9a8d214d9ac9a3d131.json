{"ast":null,"code":"import _toConsumableArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar V = -1;\nexport var names = {};\nexport var codes = {};\nexport var table = [[4, 32, 'ip4'], [6, 16, 'tcp'], [33, 16, 'dccp'], [41, 128, 'ip6'], [42, V, 'ip6zone'], [43, 8, 'ipcidr'], [53, V, 'dns', true], [54, V, 'dns4', true], [55, V, 'dns6', true], [56, V, 'dnsaddr', true], [132, 16, 'sctp'], [273, 16, 'udp'], [275, 0, 'p2p-webrtc-star'], [276, 0, 'p2p-webrtc-direct'], [277, 0, 'p2p-stardust'], [280, 0, 'webrtc'], [290, 0, 'p2p-circuit'], [301, 0, 'udt'], [302, 0, 'utp'], [400, V, 'unix', false, true],\n// `ipfs` is added before `p2p` for legacy support.\n// All text representations will default to `p2p`, but `ipfs` will\n// still be supported\n[421, V, 'ipfs'],\n// `p2p` is the preferred name for 421, and is now the default\n[421, V, 'p2p'], [443, 0, 'https'], [444, 96, 'onion'], [445, 296, 'onion3'], [446, V, 'garlic64'], [448, 0, 'tls'], [460, 0, 'quic'], [461, 0, 'quic-v1'], [465, 0, 'webtransport'], [466, V, 'certhash'], [477, 0, 'ws'], [478, 0, 'wss'], [479, 0, 'p2p-websocket-star'], [480, 0, 'http'], [777, V, 'memory']];\n// populate tables\ntable.forEach(function (row) {\n  var proto = createProtocol.apply(void 0, _toConsumableArray(row));\n  codes[proto.code] = proto;\n  names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n  return {\n    code: code,\n    size: size,\n    name: name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto];\n    }\n    throw new Error(\"no protocol with code: \".concat(proto));\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto];\n    }\n    throw new Error(\"no protocol with name: \".concat(proto));\n  }\n  throw new Error(\"invalid protocol id type: \".concat(typeof proto));\n}","map":{"version":3,"names":["V","names","codes","table","forEach","row","proto","createProtocol","apply","_toConsumableArray","code","name","size","resolvable","path","Boolean","getProtocol","Error","concat"],"sources":["/Users/apple/Documents/treasure/node_modules/@multiformats/multiaddr/src/protocols-table.ts"],"sourcesContent":["import type { Protocol } from './index.js'\n\nconst V = -1\nexport const names: Record<string, Protocol> = {}\nexport const codes: Record<number, Protocol> = {}\n\nexport const table: Array<[number, number, string, boolean?, boolean?]> = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [43, 8, 'ipcidr'],\n  [53, V, 'dns', true],\n  [54, V, 'dns4', true],\n  [55, V, 'dns6', true],\n  [56, V, 'dnsaddr', true],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [280, 0, 'webrtc'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, true],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [448, 0, 'tls'],\n  [460, 0, 'quic'],\n  [461, 0, 'quic-v1'],\n  [465, 0, 'webtransport'],\n  [466, V, 'certhash'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n\n// populate tables\ntable.forEach(row => {\n  const proto = createProtocol(...row)\n  codes[proto.code] = proto\n  names[proto.name] = proto\n})\n\nexport function createProtocol (code: number, size: number, name: string, resolvable?: any, path?: any): Protocol {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol (proto: number | string): Protocol {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto]\n    }\n\n    throw new Error(`no protocol with code: ${proto}`)\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto]\n    }\n\n    throw new Error(`no protocol with name: ${proto}`)\n  }\n\n  throw new Error(`invalid protocol id type: ${typeof proto}`)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _toConsumableArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nvar pathSepS = '/';\nvar pathSepB = new TextEncoder().encode(pathSepS);\nvar pathSep = pathSepB[0];\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nexport var Key = /*#__PURE__*/function (_Symbol$toStringTag) {\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  function Key(s, clean) {\n    _classCallCheck(this, Key);\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n    if (clean == null) {\n      clean = true;\n    }\n    if (clean) {\n      this.clean();\n    }\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n  _createClass(Key, [{\n    key: \"toString\",\n    value: function toString() {\n      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf8';\n      return uint8ArrayToString(this._buf, encoding);\n    }\n    /**\n     * Return the Uint8Array representation of the key\n     *\n     * @returns {Uint8Array}\n     */\n  }, {\n    key: \"uint8Array\",\n    value: function uint8Array() {\n      return this._buf;\n    }\n    /**\n     * Return string representation of the key\n     *\n     * @returns {string}\n     */\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"Key(\".concat(this.toString(), \")\");\n    }\n    /**\n     * Constructs a key out of a namespace array.\n     *\n     * @param {Array<string>} list - The array of namespaces\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.withNamespaces(['one', 'two'])\n     * // => Key('/one/two')\n     * ```\n     */\n  }, {\n    key: \"clean\",\n    value:\n    /**\n     * Cleanup the current key\n     *\n     * @returns {void}\n     */\n    function clean() {\n      if (this._buf == null || this._buf.byteLength === 0) {\n        this._buf = pathSepB;\n      }\n      if (this._buf[0] !== pathSep) {\n        var bytes = new Uint8Array(this._buf.byteLength + 1);\n        bytes.fill(pathSep, 0, 1);\n        bytes.set(this._buf, 1);\n        this._buf = bytes;\n      }\n      // normalize does not remove trailing slashes\n      while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n        this._buf = this._buf.subarray(0, -1);\n      }\n    }\n    /**\n     * Check if the given key is sorted lower than ourself.\n     *\n     * @param {Key} key - The other Key to check against\n     * @returns {boolean}\n     */\n  }, {\n    key: \"less\",\n    value: function less(key) {\n      var list1 = this.list();\n      var list2 = key.list();\n      for (var i = 0; i < list1.length; i++) {\n        if (list2.length < i + 1) {\n          return false;\n        }\n        var c1 = list1[i];\n        var c2 = list2[i];\n        if (c1 < c2) {\n          return true;\n        } else if (c1 > c2) {\n          return false;\n        }\n      }\n      return list1.length < list2.length;\n    }\n    /**\n     * Returns the key with all parts in reversed order.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n     * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n     * ```\n     */\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      return Key.withNamespaces(this.list().slice().reverse());\n    }\n    /**\n     * Returns the `namespaces` making up this Key.\n     *\n     * @returns {Array<string>}\n     */\n  }, {\n    key: \"namespaces\",\n    value: function namespaces() {\n      return this.list();\n    }\n    /** Returns the \"base\" namespace of this key.\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n     * // => 'Actor:JohnCleese'\n     * ```\n     */\n  }, {\n    key: \"baseNamespace\",\n    value: function baseNamespace() {\n      var ns = this.namespaces();\n      return ns[ns.length - 1];\n    }\n    /**\n     * Returns the `list` representation of this key.\n     *\n     * @returns {Array<string>}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n     * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n     * ```\n     */\n  }, {\n    key: \"list\",\n    value: function list() {\n      return this.toString().split(pathSepS).slice(1);\n    }\n    /**\n     * Returns the \"type\" of this key (value of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n     * // => 'Actor'\n     * ```\n     */\n  }, {\n    key: \"type\",\n    value: function type() {\n      return namespaceType(this.baseNamespace());\n    }\n    /**\n     * Returns the \"name\" of this key (field of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n     * // => 'JohnCleese'\n     * ```\n     */\n  }, {\n    key: \"name\",\n    value: function name() {\n      return namespaceValue(this.baseNamespace());\n    }\n    /**\n     * Returns an \"instance\" of this type key (appends value to namespace).\n     *\n     * @param {string} s - The string to append.\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n  }, {\n    key: \"instance\",\n    value: function instance(s) {\n      return new Key(this.toString() + ':' + s);\n    }\n    /**\n     * Returns the \"path\" of this key (parent + type).\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n     * // => Key('/Comedy/MontyPython/Actor')\n     * ```\n     */\n  }, {\n    key: \"path\",\n    value: function path() {\n      var p = this.parent().toString();\n      if (!p.endsWith(pathSepS)) {\n        p += pathSepS;\n      }\n      p += this.type();\n      return new Key(p);\n    }\n    /**\n     * Returns the `parent` Key of this Key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n     * // => Key(\"/Comedy/MontyPython\")\n     * ```\n     */\n  }, {\n    key: \"parent\",\n    value: function parent() {\n      var list = this.list();\n      if (list.length === 1) {\n        return new Key(pathSepS);\n      }\n      return new Key(list.slice(0, -1).join(pathSepS));\n    }\n    /**\n     * Returns the `child` Key of this Key.\n     *\n     * @param {Key} key - The child Key to add\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n  }, {\n    key: \"child\",\n    value: function child(key) {\n      if (this.toString() === pathSepS) {\n        return key;\n      } else if (key.toString() === pathSepS) {\n        return this;\n      }\n      return new Key(this.toString() + key.toString(), false);\n    }\n    /**\n     * Returns whether this key is a prefix of `other`\n     *\n     * @param {Key} other - The other key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n     * // => true\n     * ```\n     */\n  }, {\n    key: \"isAncestorOf\",\n    value: function isAncestorOf(other) {\n      if (other.toString() === this.toString()) {\n        return false;\n      }\n      return other.toString().startsWith(this.toString());\n    }\n    /**\n     * Returns whether this key is a contains another as prefix.\n     *\n     * @param {Key} other - The other Key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n     * // => true\n     * ```\n     */\n  }, {\n    key: \"isDecendantOf\",\n    value: function isDecendantOf(other) {\n      if (other.toString() === this.toString()) {\n        return false;\n      }\n      return this.toString().startsWith(other.toString());\n    }\n    /**\n     * Checks if this key has only one namespace.\n     *\n     * @returns {boolean}\n     *\n     */\n  }, {\n    key: \"isTopLevel\",\n    value: function isTopLevel() {\n      return this.list().length === 1;\n    }\n    /**\n     * Concats one or more Keys into one new Key.\n     *\n     * @param {Array<Key>} keys - The array of keys to concatenate\n     * @returns {Key}\n     */\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n        keys[_key] = arguments[_key];\n      }\n      return Key.withNamespaces([].concat(_toConsumableArray(this.namespaces()), _toConsumableArray(flatten(keys.map(function (key) {\n        return key.namespaces();\n      })))));\n    }\n  }], [{\n    key: \"withNamespaces\",\n    value: function withNamespaces(list) {\n      return new Key(list.join(pathSepS));\n    }\n    /**\n     * Returns a randomly (uuid) generated key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.random()\n     * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n     * ```\n     */\n  }, {\n    key: \"random\",\n    value: function random() {\n      return new Key(nanoid().replace(/-/g, ''));\n    }\n    /**\n     * @param {*} other\n     */\n  }, {\n    key: \"asKey\",\n    value: function asKey(other) {\n      if (other instanceof Uint8Array || typeof other === 'string') {\n        // we can create a key from this\n        return new Key(other);\n      }\n      if (typeof other.uint8Array === 'function') {\n        // this is an older version or may have crossed the esm/cjs boundary\n        return new Key(other.uint8Array());\n      }\n      return null;\n    }\n  }]);\n  return Key;\n}(Symbol.toStringTag);\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType(ns) {\n  var parts = ns.split(':');\n  if (parts.length < 2) {\n    return '';\n  }\n  return parts.slice(0, -1).join(':');\n}\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue(ns) {\n  var parts = ns.split(':');\n  return parts[parts.length - 1];\n}\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<any>} arr\n * @returns {T[]}\n */\nfunction flatten(arr) {\n  var _ref;\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arr));\n}","map":{"version":3,"names":["nanoid","toString","uint8ArrayToString","fromString","uint8ArrayFromString","pathSepS","pathSepB","TextEncoder","encode","pathSep","Key","_Symbol$toStringTag","s","clean","_classCallCheck","_buf","Uint8Array","Error","byteLength","_createClass","key","value","encoding","arguments","length","undefined","uint8Array","get","concat","bytes","fill","set","subarray","less","list1","list","list2","i","c1","c2","reverse","withNamespaces","slice","namespaces","baseNamespace","ns","split","type","namespaceType","name","namespaceValue","instance","path","p","parent","endsWith","join","child","isAncestorOf","other","startsWith","isDecendantOf","isTopLevel","_len","keys","Array","_key","_toConsumableArray","flatten","map","random","replace","asKey","Symbol","toStringTag","parts","arr","_ref","apply"],"sources":["/Users/apple/Documents/treasure/node_modules/interface-datastore/src/key.ts"],"sourcesContent":["\nimport { nanoid } from 'nanoid'\nimport { SupportedEncodings, toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst pathSepS = '/'\nconst pathSepB = new TextEncoder().encode(pathSepS)\nconst pathSep = pathSepB[0]\n\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nexport class Key {\n  private _buf: Uint8Array\n\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  constructor (s: string | Uint8Array, clean?: boolean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s)\n    } else if (s instanceof Uint8Array) {\n      this._buf = s\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array')\n    }\n\n    if (clean == null) {\n      clean = true\n    }\n\n    if (clean) {\n      this.clean()\n    }\n\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key')\n    }\n  }\n\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n  toString (encoding: SupportedEncodings = 'utf8'): string {\n    return uint8ArrayToString(this._buf, encoding)\n  }\n\n  /**\n   * Return the Uint8Array representation of the key\n   *\n   * @returns {Uint8Array}\n   */\n  uint8Array (): Uint8Array {\n    return this._buf\n  }\n\n  /**\n   * Return string representation of the key\n   *\n   * @returns {string}\n   */\n  get [Symbol.toStringTag] (): string {\n    return `Key(${this.toString()})`\n  }\n\n  /**\n   * Constructs a key out of a namespace array.\n   *\n   * @param {Array<string>} list - The array of namespaces\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.withNamespaces(['one', 'two'])\n   * // => Key('/one/two')\n   * ```\n   */\n  static withNamespaces (list: string[]): Key {\n    return new Key(list.join(pathSepS))\n  }\n\n  /**\n   * Returns a randomly (uuid) generated key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.random()\n   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n   * ```\n   */\n  static random (): Key {\n    return new Key(nanoid().replace(/-/g, ''))\n  }\n\n  /**\n   * @param {*} other\n   */\n  static asKey (other: any): Key | null {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      // we can create a key from this\n      return new Key(other)\n    }\n\n    if (typeof other.uint8Array === 'function') {\n      // this is an older version or may have crossed the esm/cjs boundary\n      return new Key(other.uint8Array())\n    }\n\n    return null\n  }\n\n  /**\n   * Cleanup the current key\n   *\n   * @returns {void}\n   */\n  clean (): void {\n    if (this._buf == null || this._buf.byteLength === 0) {\n      this._buf = pathSepB\n    }\n\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1)\n      bytes.fill(pathSep, 0, 1)\n      bytes.set(this._buf, 1)\n      this._buf = bytes\n    }\n\n    // normalize does not remove trailing slashes\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1)\n    }\n  }\n\n  /**\n   * Check if the given key is sorted lower than ourself.\n   *\n   * @param {Key} key - The other Key to check against\n   * @returns {boolean}\n   */\n  less (key: Key): boolean {\n    const list1 = this.list()\n    const list2 = key.list()\n\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false\n      }\n\n      const c1 = list1[i]\n      const c2 = list2[i]\n\n      if (c1 < c2) {\n        return true\n      } else if (c1 > c2) {\n        return false\n      }\n    }\n\n    return list1.length < list2.length\n  }\n\n  /**\n   * Returns the key with all parts in reversed order.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n   * ```\n   */\n  reverse (): Key {\n    return Key.withNamespaces(this.list().slice().reverse())\n  }\n\n  /**\n   * Returns the `namespaces` making up this Key.\n   *\n   * @returns {Array<string>}\n   */\n  namespaces (): string[] {\n    return this.list()\n  }\n\n  /** Returns the \"base\" namespace of this key.\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n   * // => 'Actor:JohnCleese'\n   * ```\n   */\n  baseNamespace (): string {\n    const ns = this.namespaces()\n    return ns[ns.length - 1]\n  }\n\n  /**\n   * Returns the `list` representation of this key.\n   *\n   * @returns {Array<string>}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n   * ```\n   */\n  list (): string[] {\n    return this.toString().split(pathSepS).slice(1)\n  }\n\n  /**\n   * Returns the \"type\" of this key (value of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n   * // => 'Actor'\n   * ```\n   */\n  type (): string {\n    return namespaceType(this.baseNamespace())\n  }\n\n  /**\n   * Returns the \"name\" of this key (field of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n   * // => 'JohnCleese'\n   * ```\n   */\n  name (): string {\n    return namespaceValue(this.baseNamespace())\n  }\n\n  /**\n   * Returns an \"instance\" of this type key (appends value to namespace).\n   *\n   * @param {string} s - The string to append.\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  instance (s: string): Key {\n    return new Key(this.toString() + ':' + s)\n  }\n\n  /**\n   * Returns the \"path\" of this key (parent + type).\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n   * // => Key('/Comedy/MontyPython/Actor')\n   * ```\n   */\n  path (): Key {\n    let p = this.parent().toString()\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS\n    }\n    p += this.type()\n    return new Key(p)\n  }\n\n  /**\n   * Returns the `parent` Key of this Key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n   * // => Key(\"/Comedy/MontyPython\")\n   * ```\n   */\n  parent (): Key {\n    const list = this.list()\n    if (list.length === 1) {\n      return new Key(pathSepS)\n    }\n\n    return new Key(list.slice(0, -1).join(pathSepS))\n  }\n\n  /**\n   * Returns the `child` Key of this Key.\n   *\n   * @param {Key} key - The child Key to add\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  child (key: Key): Key {\n    if (this.toString() === pathSepS) {\n      return key\n    } else if (key.toString() === pathSepS) {\n      return this\n    }\n\n    return new Key(this.toString() + key.toString(), false)\n  }\n\n  /**\n   * Returns whether this key is a prefix of `other`\n   *\n   * @param {Key} other - The other key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n   * // => true\n   * ```\n   */\n  isAncestorOf (other: Key): boolean {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return other.toString().startsWith(this.toString())\n  }\n\n  /**\n   * Returns whether this key is a contains another as prefix.\n   *\n   * @param {Key} other - The other Key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n   * // => true\n   * ```\n   */\n  isDecendantOf (other: Key): boolean {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return this.toString().startsWith(other.toString())\n  }\n\n  /**\n   * Checks if this key has only one namespace.\n   *\n   * @returns {boolean}\n   *\n   */\n  isTopLevel (): boolean {\n    return this.list().length === 1\n  }\n\n  /**\n   * Concats one or more Keys into one new Key.\n   *\n   * @param {Array<Key>} keys - The array of keys to concatenate\n   * @returns {Key}\n   */\n  concat (...keys: Key[]): Key {\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))])\n  }\n}\n\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType (ns: string): string {\n  const parts = ns.split(':')\n  if (parts.length < 2) {\n    return ''\n  }\n  return parts.slice(0, -1).join(':')\n}\n\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue (ns: string): string {\n  const parts = ns.split(':')\n  return parts[parts.length - 1]\n}\n\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<any>} arr\n * @returns {T[]}\n */\nfunction flatten (arr: any[]): string[] {\n  return ([]).concat(...arr)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
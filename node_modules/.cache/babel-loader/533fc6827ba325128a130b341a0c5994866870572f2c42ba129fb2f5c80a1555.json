{"ast":null,"code":"// MaxRecordAge specifies the maximum time that any node will hold onto a record\n// from the time its received. This does not apply to any other forms of validity that\n// the record may contain.\n// For example, a record may contain an ipns entry with an EOL saying its valid\n// until the year 2020 (a great time in the future). For that record to stick around\n// it must be rebroadcasted more frequently than once every 'MaxRecordAge'\nexport var second = 1000;\nexport var minute = 60 * second;\nexport var hour = 60 * minute;\nexport var MAX_RECORD_AGE = 36 * hour;\nexport var LAN_PREFIX = '/lan';\nexport var PROTOCOL_PREFIX = '/ipfs';\nexport var PROTOCOL_DHT = '/kad/1.0.0';\nexport var RECORD_KEY_PREFIX = '/dht/record';\nexport var PROVIDER_KEY_PREFIX = '/dht/provider';\nexport var PROVIDERS_LRU_CACHE_SIZE = 256;\nexport var PROVIDERS_VALIDITY = 24 * hour;\nexport var PROVIDERS_CLEANUP_INTERVAL = hour;\nexport var READ_MESSAGE_TIMEOUT = 10 * second;\n// The number of records that will be retrieved on a call to getMany()\nexport var GET_MANY_RECORD_COUNT = 16;\n// K is the maximum number of requests to perform before returning failure\nexport var K = 20;\n// Alpha is the concurrency for asynchronous requests\nexport var ALPHA = 3;\n// How often we look for our closest DHT neighbours\nexport var QUERY_SELF_INTERVAL = Number(5 * minute);\n// How long to look for our closest DHT neighbours for\nexport var QUERY_SELF_TIMEOUT = Number(30 * second);\n// How often we try to find new peers\nexport var TABLE_REFRESH_INTERVAL = Number(5 * minute);\n// How how long to look for new peers for\nexport var TABLE_REFRESH_QUERY_TIMEOUT = Number(30 * second);\n// When a timeout is not specified, run a query for this long\nexport var DEFAULT_QUERY_TIMEOUT = Number(30 * second);","map":{"version":3,"names":["second","minute","hour","MAX_RECORD_AGE","LAN_PREFIX","PROTOCOL_PREFIX","PROTOCOL_DHT","RECORD_KEY_PREFIX","PROVIDER_KEY_PREFIX","PROVIDERS_LRU_CACHE_SIZE","PROVIDERS_VALIDITY","PROVIDERS_CLEANUP_INTERVAL","READ_MESSAGE_TIMEOUT","GET_MANY_RECORD_COUNT","K","ALPHA","QUERY_SELF_INTERVAL","Number","QUERY_SELF_TIMEOUT","TABLE_REFRESH_INTERVAL","TABLE_REFRESH_QUERY_TIMEOUT","DEFAULT_QUERY_TIMEOUT"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/constants.ts"],"sourcesContent":["// MaxRecordAge specifies the maximum time that any node will hold onto a record\n// from the time its received. This does not apply to any other forms of validity that\n// the record may contain.\n// For example, a record may contain an ipns entry with an EOL saying its valid\n// until the year 2020 (a great time in the future). For that record to stick around\n// it must be rebroadcasted more frequently than once every 'MaxRecordAge'\n\nexport const second = 1000\nexport const minute = 60 * second\nexport const hour = 60 * minute\n\nexport const MAX_RECORD_AGE = 36 * hour\n\nexport const LAN_PREFIX = '/lan'\n\nexport const PROTOCOL_PREFIX = '/ipfs'\n\nexport const PROTOCOL_DHT = '/kad/1.0.0'\n\nexport const RECORD_KEY_PREFIX = '/dht/record'\n\nexport const PROVIDER_KEY_PREFIX = '/dht/provider'\n\nexport const PROVIDERS_LRU_CACHE_SIZE = 256\n\nexport const PROVIDERS_VALIDITY = 24 * hour\n\nexport const PROVIDERS_CLEANUP_INTERVAL = hour\n\nexport const READ_MESSAGE_TIMEOUT = 10 * second\n\n// The number of records that will be retrieved on a call to getMany()\nexport const GET_MANY_RECORD_COUNT = 16\n\n// K is the maximum number of requests to perform before returning failure\nexport const K = 20\n\n// Alpha is the concurrency for asynchronous requests\nexport const ALPHA = 3\n\n// How often we look for our closest DHT neighbours\nexport const QUERY_SELF_INTERVAL = Number(5 * minute)\n\n// How long to look for our closest DHT neighbours for\nexport const QUERY_SELF_TIMEOUT = Number(30 * second)\n\n// How often we try to find new peers\nexport const TABLE_REFRESH_INTERVAL = Number(5 * minute)\n\n// How how long to look for new peers for\nexport const TABLE_REFRESH_QUERY_TIMEOUT = Number(30 * second)\n\n// When a timeout is not specified, run a query for this long\nexport const DEFAULT_QUERY_TIMEOUT = Number(30 * second)\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,IAAMA,MAAM,GAAG,IAAI;AAC1B,OAAO,IAAMC,MAAM,GAAG,EAAE,GAAGD,MAAM;AACjC,OAAO,IAAME,IAAI,GAAG,EAAE,GAAGD,MAAM;AAE/B,OAAO,IAAME,cAAc,GAAG,EAAE,GAAGD,IAAI;AAEvC,OAAO,IAAME,UAAU,GAAG,MAAM;AAEhC,OAAO,IAAMC,eAAe,GAAG,OAAO;AAEtC,OAAO,IAAMC,YAAY,GAAG,YAAY;AAExC,OAAO,IAAMC,iBAAiB,GAAG,aAAa;AAE9C,OAAO,IAAMC,mBAAmB,GAAG,eAAe;AAElD,OAAO,IAAMC,wBAAwB,GAAG,GAAG;AAE3C,OAAO,IAAMC,kBAAkB,GAAG,EAAE,GAAGR,IAAI;AAE3C,OAAO,IAAMS,0BAA0B,GAAGT,IAAI;AAE9C,OAAO,IAAMU,oBAAoB,GAAG,EAAE,GAAGZ,MAAM;AAE/C;AACA,OAAO,IAAMa,qBAAqB,GAAG,EAAE;AAEvC;AACA,OAAO,IAAMC,CAAC,GAAG,EAAE;AAEnB;AACA,OAAO,IAAMC,KAAK,GAAG,CAAC;AAEtB;AACA,OAAO,IAAMC,mBAAmB,GAAGC,MAAM,CAAC,CAAC,GAAGhB,MAAM,CAAC;AAErD;AACA,OAAO,IAAMiB,kBAAkB,GAAGD,MAAM,CAAC,EAAE,GAAGjB,MAAM,CAAC;AAErD;AACA,OAAO,IAAMmB,sBAAsB,GAAGF,MAAM,CAAC,CAAC,GAAGhB,MAAM,CAAC;AAExD;AACA,OAAO,IAAMmB,2BAA2B,GAAGH,MAAM,CAAC,EAAE,GAAGjB,MAAM,CAAC;AAE9D;AACA,OAAO,IAAMqB,qBAAqB,GAAGJ,MAAM,CAAC,EAAE,GAAGjB,MAAM,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
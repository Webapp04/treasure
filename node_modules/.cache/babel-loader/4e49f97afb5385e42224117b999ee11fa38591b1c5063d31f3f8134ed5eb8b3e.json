{"ast":null,"code":"import mergeOptions from 'merge-options';\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers';\nimport * as Constants from './constants.js';\nimport { AGENT_VERSION } from './identify/consts.js';\nimport * as RelayConstants from './circuit/constants.js';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nimport { FaultTolerance } from './transport-manager.js';\nimport { codes, messages } from './errors.js';\nimport errCode from 'err-code';\nimport { isNode, isBrowser, isWebWorker, isElectronMain, isElectronRenderer, isReactNative } from 'wherearewe';\nvar DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: function announceFilter(multiaddrs) {\n      return multiaddrs;\n    }\n  },\n  connectionManager: {\n    maxConnections: 300,\n    minConnections: 50,\n    autoDial: true,\n    autoDialInterval: 10000,\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    inboundUpgradeTimeout: Constants.INBOUND_UPGRADE_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  connectionGater: {},\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  metrics: {\n    enabled: false,\n    computeThrottleMaxQueueSize: 1000,\n    computeThrottleTimeout: 2000,\n    movingAverageIntervals: [60 * 1000, 5 * 60 * 1000, 15 * 60 * 1000 // 15 minutes\n    ],\n\n    maxOldPeersRetention: 50\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  nat: {\n    enabled: true,\n    ttl: 7200,\n    keepAlive: true\n  },\n  relay: {\n    enabled: true,\n    advertise: {\n      bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n      enabled: false,\n      ttl: RelayConstants.ADVERTISE_TTL\n    },\n    hop: {\n      enabled: false,\n      active: false,\n      timeout: 30000\n    },\n    autoRelay: {\n      enabled: false,\n      maxListeners: 2\n    }\n  },\n  identify: {\n    protocolPrefix: 'ipfs',\n    host: {\n      agentVersion: AGENT_VERSION\n    },\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n    timeout: 60000,\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    maxPushIncomingStreams: 1,\n    maxPushOutgoingStreams: 1\n  },\n  ping: {\n    protocolPrefix: 'ipfs',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  },\n  fetch: {\n    protocolPrefix: 'libp2p',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  }\n};\nexport function validateConfig(opts) {\n  var _globalThis$process;\n  var resultingOptions = mergeOptions(DefaultConfig, opts);\n  if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {\n    throw errCode(new Error(messages.ERR_TRANSPORTS_REQUIRED), codes.ERR_TRANSPORTS_REQUIRED);\n  }\n  if (resultingOptions.connectionEncryption == null || resultingOptions.connectionEncryption.length === 0) {\n    throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED);\n  }\n  if (resultingOptions.connectionProtector === null && ((_globalThis$process = globalThis.process) === null || _globalThis$process === void 0 || (_globalThis$process = _globalThis$process.env) === null || _globalThis$process === void 0 ? void 0 : _globalThis$process.LIBP2P_FORCE_PNET) != null) {\n    // eslint-disable-line no-undef\n    throw errCode(new Error(messages.ERR_PROTECTOR_REQUIRED), codes.ERR_PROTECTOR_REQUIRED);\n  }\n  // Append user agent version to default AGENT_VERSION depending on the environment\n  if (resultingOptions.identify.host.agentVersion === AGENT_VERSION) {\n    if (isNode || isElectronMain) {\n      resultingOptions.identify.host.agentVersion += \" UserAgent=\".concat(globalThis.process.version);\n    } else if (isBrowser || isWebWorker || isElectronRenderer || isReactNative) {\n      resultingOptions.identify.host.agentVersion += \" UserAgent=\".concat(globalThis.navigator.userAgent);\n    }\n  }\n  return resultingOptions;\n}","map":{"version":3,"names":["mergeOptions","dnsaddrResolver","Constants","AGENT_VERSION","RelayConstants","publicAddressesFirst","FaultTolerance","codes","messages","errCode","isNode","isBrowser","isWebWorker","isElectronMain","isElectronRenderer","isReactNative","DefaultConfig","addresses","listen","announce","noAnnounce","announceFilter","multiaddrs","connectionManager","maxConnections","minConnections","autoDial","autoDialInterval","maxParallelDials","MAX_PARALLEL_DIALS","maxDialsPerPeer","MAX_PER_PEER_DIALS","dialTimeout","DIAL_TIMEOUT","inboundUpgradeTimeout","INBOUND_UPGRADE_TIMEOUT","resolvers","dnsaddr","addressSorter","connectionGater","transportManager","faultTolerance","FATAL_ALL","metrics","enabled","computeThrottleMaxQueueSize","computeThrottleTimeout","movingAverageIntervals","maxOldPeersRetention","peerRouting","refreshManager","interval","bootDelay","nat","ttl","keepAlive","relay","advertise","ADVERTISE_BOOT_DELAY","ADVERTISE_TTL","hop","active","timeout","autoRelay","maxListeners","identify","protocolPrefix","host","agentVersion","maxInboundStreams","maxOutboundStreams","maxPushIncomingStreams","maxPushOutgoingStreams","ping","fetch","validateConfig","opts","_globalThis$process","resultingOptions","transports","length","Error","ERR_TRANSPORTS_REQUIRED","connectionEncryption","CONN_ENCRYPTION_REQUIRED","connectionProtector","globalThis","process","env","LIBP2P_FORCE_PNET","ERR_PROTECTOR_REQUIRED","concat","version","navigator","userAgent"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/config.ts"],"sourcesContent":["import mergeOptions from 'merge-options'\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\nimport * as Constants from './constants.js'\nimport { AGENT_VERSION } from './identify/consts.js'\nimport * as RelayConstants from './circuit/constants.js'\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort'\nimport { FaultTolerance } from './transport-manager.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Libp2pInit } from './index.js'\nimport { codes, messages } from './errors.js'\nimport errCode from 'err-code'\nimport type { RecursivePartial } from '@libp2p/interfaces'\nimport { isNode, isBrowser, isWebWorker, isElectronMain, isElectronRenderer, isReactNative } from 'wherearewe'\n\nconst DefaultConfig: Partial<Libp2pInit> = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (multiaddrs: Multiaddr[]) => multiaddrs\n  },\n  connectionManager: {\n    maxConnections: 300,\n    minConnections: 50,\n    autoDial: true,\n    autoDialInterval: 10000,\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    inboundUpgradeTimeout: Constants.INBOUND_UPGRADE_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  connectionGater: {},\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  metrics: {\n    enabled: false,\n    computeThrottleMaxQueueSize: 1000,\n    computeThrottleTimeout: 2000,\n    movingAverageIntervals: [\n      60 * 1000, // 1 minute\n      5 * 60 * 1000, // 5 minutes\n      15 * 60 * 1000 // 15 minutes\n    ],\n    maxOldPeersRetention: 50\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  nat: {\n    enabled: true,\n    ttl: 7200,\n    keepAlive: true\n  },\n  relay: {\n    enabled: true,\n    advertise: {\n      bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n      enabled: false,\n      ttl: RelayConstants.ADVERTISE_TTL\n    },\n    hop: {\n      enabled: false,\n      active: false,\n      timeout: 30000\n    },\n    autoRelay: {\n      enabled: false,\n      maxListeners: 2\n    }\n  },\n  identify: {\n    protocolPrefix: 'ipfs',\n    host: {\n      agentVersion: AGENT_VERSION\n    },\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n    timeout: 60000,\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    maxPushIncomingStreams: 1,\n    maxPushOutgoingStreams: 1\n  },\n  ping: {\n    protocolPrefix: 'ipfs',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  },\n  fetch: {\n    protocolPrefix: 'libp2p',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  }\n}\n\nexport function validateConfig (opts: RecursivePartial<Libp2pInit>): Libp2pInit {\n  const resultingOptions: Libp2pInit = mergeOptions(DefaultConfig, opts)\n\n  if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {\n    throw errCode(new Error(messages.ERR_TRANSPORTS_REQUIRED), codes.ERR_TRANSPORTS_REQUIRED)\n  }\n\n  if (resultingOptions.connectionEncryption == null || resultingOptions.connectionEncryption.length === 0) {\n    throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED)\n  }\n\n  if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) { // eslint-disable-line no-undef\n    throw errCode(new Error(messages.ERR_PROTECTOR_REQUIRED), codes.ERR_PROTECTOR_REQUIRED)\n  }\n\n  // Append user agent version to default AGENT_VERSION depending on the environment\n  if (resultingOptions.identify.host.agentVersion === AGENT_VERSION) {\n    if (isNode || isElectronMain) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.process.version}`\n    } else if (isBrowser || isWebWorker || isElectronRenderer || isReactNative) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.navigator.userAgent}`\n    }\n  }\n\n  return resultingOptions\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
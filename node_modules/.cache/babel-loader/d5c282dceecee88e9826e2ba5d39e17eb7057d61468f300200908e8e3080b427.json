{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nvar log = logger('libp2p:connection-manager:latency-monitor:visibility-change-emitter');\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\nexport var VisibilityChangeEmitter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(VisibilityChangeEmitter, _EventEmitter);\n  var _super = _createSuper(VisibilityChangeEmitter);\n  function VisibilityChangeEmitter() {\n    var _this;\n    _classCallCheck(this, VisibilityChangeEmitter);\n    _this = _super.call(this);\n    _this.hidden = 'hidden';\n    _this.visibilityChange = 'visibilityChange';\n    if (globalThis.document != null) {\n      _this._initializeVisibilityVarNames();\n      _this._addVisibilityChangeListener();\n    }\n    return _this;\n  }\n  /**\n   * document.hidden and document.visibilityChange are the two variables we need to check for;\n   * Since these variables are named differently in different browsers, this function sets\n   * the appropriate name based on the browser being used. Once executed, tha actual names of\n   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n   * respectively\n   *\n   * @private\n   */\n  _createClass(VisibilityChangeEmitter, [{\n    key: \"_initializeVisibilityVarNames\",\n    value: function _initializeVisibilityVarNames() {\n      var hidden = 'hidden';\n      var visibilityChange = 'visibilitychange';\n      if (typeof globalThis.document.hidden !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        hidden = 'hidden';\n        visibilityChange = 'visibilitychange';\n        // @ts-expect-error mozHidden is a non-standard field name\n      } else if (typeof globalThis.document.mozHidden !== 'undefined') {\n        hidden = 'mozHidden';\n        visibilityChange = 'mozvisibilitychange';\n        // @ts-expect-error msHidden is a non-standard field name\n      } else if (typeof globalThis.document.msHidden !== 'undefined') {\n        hidden = 'msHidden';\n        visibilityChange = 'msvisibilitychange';\n        // @ts-expect-error webkitHidden is a non-standard field name\n      } else if (typeof globalThis.document.webkitHidden !== 'undefined') {\n        hidden = 'webkitHidden';\n        visibilityChange = 'webkitvisibilitychange';\n      }\n      this.hidden = hidden;\n      this.visibilityChange = visibilityChange;\n    }\n    /**\n     * Adds an event listener on the document that listens to changes in document.visibilityChange\n     * (or whatever name by which the visibilityChange variable is known in the browser)\n     *\n     * @private\n     */\n  }, {\n    key: \"_addVisibilityChangeListener\",\n    value: function _addVisibilityChangeListener() {\n      // @ts-expect-error cannot index document object with string key\n      if (typeof globalThis.document.addEventListener === 'undefined' || typeof document[this.hidden] === 'undefined') {\n        log('Checking page visibility requires a browser that supports the Page Visibility API.');\n      } else {\n        // Handle page visibility change\n        globalThis.document.addEventListener(this.visibilityChange, this._handleVisibilityChange.bind(this), false);\n      }\n    }\n    /**\n     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n     * ```undefined``` if the page visibility API is not supported by the browser.\n     */\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      // @ts-expect-error cannot index document object with string key\n      if (this.hidden === undefined || document[this.hidden] === undefined) {\n        return undefined;\n      }\n      // @ts-expect-error cannot index document object with string key\n      return document[this.hidden] == null;\n    }\n    /**\n     * The function that is called when document.visibilityChange has changed\n     * It emits an event called visibilityChange and sends the value of document.hidden as a\n     * parameter\n     *\n     * @private\n     */\n  }, {\n    key: \"_handleVisibilityChange\",\n    value: function _handleVisibilityChange() {\n      // @ts-expect-error cannot index document object with string key\n      var visible = globalThis.document[this.hidden] === false;\n      log(visible ? 'Page Visible' : 'Page Hidden');\n      // Emit the event\n      this.dispatchEvent(new CustomEvent('visibilityChange', {\n        detail: visible\n      }));\n    }\n  }]);\n  return VisibilityChangeEmitter;\n}(EventEmitter);","map":{"version":3,"names":["CustomEvent","EventEmitter","logger","log","VisibilityChangeEmitter","_EventEmitter","_inherits","_super","_createSuper","_this","_classCallCheck","call","hidden","visibilityChange","globalThis","document","_initializeVisibilityVarNames","_addVisibilityChangeListener","_createClass","key","value","mozHidden","msHidden","webkitHidden","addEventListener","_handleVisibilityChange","bind","isVisible","undefined","visible","dispatchEvent","detail"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/connection-manager/visibility-change-emitter.ts"],"sourcesContent":["/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('libp2p:connection-manager:latency-monitor:visibility-change-emitter')\n\ninterface VisibilityChangeEmitterEvents {\n  'visibilityChange': CustomEvent<boolean>\n}\n\ntype Hidden = 'hidden' | 'mozHidden' | 'msHidden' | 'webkitHidden'\n\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\nexport class VisibilityChangeEmitter extends EventEmitter<VisibilityChangeEmitterEvents> {\n  private hidden: Hidden\n  private visibilityChange: string\n\n  constructor () {\n    super()\n\n    this.hidden = 'hidden'\n    this.visibilityChange = 'visibilityChange'\n\n    if (globalThis.document != null) {\n      this._initializeVisibilityVarNames()\n      this._addVisibilityChangeListener()\n    }\n  }\n\n  /**\n   * document.hidden and document.visibilityChange are the two variables we need to check for;\n   * Since these variables are named differently in different browsers, this function sets\n   * the appropriate name based on the browser being used. Once executed, tha actual names of\n   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n   * respectively\n   *\n   * @private\n   */\n  _initializeVisibilityVarNames () {\n    let hidden: Hidden = 'hidden'\n    let visibilityChange = 'visibilitychange'\n\n    if (typeof globalThis.document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden'\n      visibilityChange = 'visibilitychange'\n      // @ts-expect-error mozHidden is a non-standard field name\n    } else if (typeof globalThis.document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden'\n      visibilityChange = 'mozvisibilitychange'\n      // @ts-expect-error msHidden is a non-standard field name\n    } else if (typeof globalThis.document.msHidden !== 'undefined') {\n      hidden = 'msHidden'\n      visibilityChange = 'msvisibilitychange'\n      // @ts-expect-error webkitHidden is a non-standard field name\n    } else if (typeof globalThis.document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden'\n      visibilityChange = 'webkitvisibilitychange'\n    }\n\n    this.hidden = hidden\n    this.visibilityChange = visibilityChange\n  }\n\n  /**\n   * Adds an event listener on the document that listens to changes in document.visibilityChange\n   * (or whatever name by which the visibilityChange variable is known in the browser)\n   *\n   * @private\n   */\n  _addVisibilityChangeListener () {\n    // @ts-expect-error cannot index document object with string key\n    if (typeof globalThis.document.addEventListener === 'undefined' || typeof document[this.hidden] === 'undefined') {\n      log('Checking page visibility requires a browser that supports the Page Visibility API.')\n    } else {\n      // Handle page visibility change\n      globalThis.document.addEventListener(this.visibilityChange, this._handleVisibilityChange.bind(this), false)\n    }\n  }\n\n  /**\n   * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n   * ```undefined``` if the page visibility API is not supported by the browser.\n   */\n  isVisible () {\n    // @ts-expect-error cannot index document object with string key\n    if (this.hidden === undefined || document[this.hidden] === undefined) {\n      return undefined\n    }\n\n    // @ts-expect-error cannot index document object with string key\n    return document[this.hidden] == null\n  }\n\n  /**\n   * The function that is called when document.visibilityChange has changed\n   * It emits an event called visibilityChange and sends the value of document.hidden as a\n   * parameter\n   *\n   * @private\n   */\n  _handleVisibilityChange () {\n    // @ts-expect-error cannot index document object with string key\n    const visible = globalThis.document[this.hidden] === false\n    log(visible ? 'Page Visible' : 'Page Hidden')\n\n    // Emit the event\n    this.dispatchEvent(new CustomEvent<boolean>('visibilityChange', {\n      detail: visible\n    }))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
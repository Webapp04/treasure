{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { base64 } from 'multiformats/bases/base64';\nimport * as ciphers from '../ciphers/aes-gcm.js';\n/**\n * Exports the given PrivateKey as a base64 encoded string.\n * The PrivateKey is encrypted via a password derived PBKDF2 key\n * leveraging the aes-gcm cipher algorithm.\n */\nexport function exporter(_x, _x2) {\n  return _exporter.apply(this, arguments);\n}\nfunction _exporter() {\n  _exporter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(privateKey, password) {\n    var cipher, encryptedKey;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          cipher = ciphers.create();\n          _context.next = 3;\n          return cipher.encrypt(privateKey, password);\n        case 3:\n          encryptedKey = _context.sent;\n          return _context.abrupt(\"return\", base64.encode(encryptedKey));\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _exporter.apply(this, arguments);\n}","map":{"version":3,"names":["base64","ciphers","exporter","_x","_x2","_exporter","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","privateKey","password","cipher","encryptedKey","wrap","_callee$","_context","prev","next","create","encrypt","sent","abrupt","encode","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/exporter.ts"],"sourcesContent":["import { base64 } from 'multiformats/bases/base64'\nimport * as ciphers from '../ciphers/aes-gcm.js'\n\n/**\n * Exports the given PrivateKey as a base64 encoded string.\n * The PrivateKey is encrypted via a password derived PBKDF2 key\n * leveraging the aes-gcm cipher algorithm.\n */\nexport async function exporter (privateKey: Uint8Array, password: string) {\n  const cipher = ciphers.create()\n  const encryptedKey = await cipher.encrypt(privateKey, password)\n  return base64.encode(encryptedKey)\n}\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,2BAA2B;AAClD,OAAO,KAAKC,OAAO,MAAM,uBAAuB;AAEhD;;;;;AAKA,gBAAsBC,QAAQA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAI7B,SAAAF,UAAA;EAAAA,SAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAJM,SAAAC,QAAyBC,UAAsB,EAAEC,QAAgB;IAAA,IAAAC,MAAA,EAAAC,YAAA;IAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAChEN,MAAM,GAAGb,OAAO,CAACoB,MAAM,EAAE;UAAAH,QAAA,CAAAE,IAAA;UAAA,OACJN,MAAM,CAACQ,OAAO,CAACV,UAAU,EAAEC,QAAQ,CAAC;QAAA;UAAzDE,YAAY,GAAAG,QAAA,CAAAK,IAAA;UAAA,OAAAL,QAAA,CAAAM,MAAA,WACXxB,MAAM,CAACyB,MAAM,CAACV,YAAY,CAAC;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAf,OAAA;EAAA,CACnC;EAAA,OAAAN,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { importer } from 'ipfs-unixfs-importer';\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-multiple';\nimport { parseChunkerString } from './utils.js';\nimport { pipe } from 'it-pipe';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport mergeOpts from 'merge-options';\nvar mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * @template T\n *\n * @typedef {import('it-stream-types').Source<T>} Source<T>\n */\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {Multihashes} hashers\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n * @param {Context} context\n */\nexport function createAddAll(_ref) {\n  var repo = _ref.repo,\n    preload = _ref.preload,\n    hashers = _ref.hashers,\n    options = _ref.options;\n  var isShardingEnabled = options && options.sharding;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator(function (source) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var opts, totals, prog, hasher, iterator, releaseLock, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, added, _added$path, path;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              opts = mergeOptions({\n                shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n                strategy: 'balanced'\n              }, options, _objectSpread({}, parseChunkerString(options.chunker))); // CID v0 is for multihashes encoded with sha2-256\n              if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n                opts.cidVersion = 1;\n              }\n              if (opts.trickle) {\n                opts.strategy = 'trickle';\n              }\n              if (opts.strategy === 'trickle') {\n                opts.leafType = 'raw';\n                opts.reduceSingleLeafToSelf = false;\n              }\n              if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n                // if the cid version is 1 or above, use raw leaves as this is\n                // what go does.\n                opts.rawLeaves = true;\n              }\n              if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n                // if a non-default hash alg has been specified, use raw leaves as this is\n                // what go does.\n                opts.rawLeaves = true;\n              }\n              delete opts.trickle;\n\n              /** @type {Record<string, number>} */\n              totals = {};\n              if (opts.progress) {\n                prog = opts.progress;\n                /**\n                 * @param {number} bytes\n                 * @param {string} path\n                 */\n                opts.progress = function (bytes, path) {\n                  if (!totals[path]) {\n                    totals[path] = 0;\n                  }\n                  totals[path] += bytes;\n                  prog(totals[path], path);\n                };\n              }\n\n              /** @type {MultihashHasher | undefined} */\n              if (!(opts.hashAlg != null)) {\n                _context.next = 13;\n                break;\n              }\n              _context.next = 12;\n              return _awaitAsyncGenerator(hashers.getHasher(opts.hashAlg));\n            case 12:\n              hasher = _context.sent;\n            case 13:\n              iterator = pipe(normaliseInput(source),\n              /**\n               * @param {Source<import('ipfs-unixfs-importer').ImportCandidate>} source\n               */\n              function (source) {\n                return importer(source, repo.blocks, _objectSpread(_objectSpread({}, opts), {}, {\n                  hasher: hasher,\n                  pin: false\n                }));\n              }, transformFile(opts), preloadFile(preload, opts), pinFile(repo, opts));\n              _context.next = 16;\n              return _awaitAsyncGenerator(repo.gcLock.readLock());\n            case 16:\n              releaseLock = _context.sent;\n              _context.prev = 17;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 20;\n              _iterator = _asyncIterator(iterator);\n            case 22:\n              _context.next = 24;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 24:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 33;\n                break;\n              }\n              added = _step.value;\n              path = (_added$path = added.path) !== null && _added$path !== void 0 ? _added$path : added.cid.toString(); // do not keep file totals around forever\n              delete totals[path];\n              _context.next = 30;\n              return _objectSpread(_objectSpread({}, added), {}, {\n                path: path\n              });\n            case 30:\n              _iteratorAbruptCompletion = false;\n              _context.next = 22;\n              break;\n            case 33:\n              _context.next = 39;\n              break;\n            case 35:\n              _context.prev = 35;\n              _context.t0 = _context[\"catch\"](20);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 39:\n              _context.prev = 39;\n              _context.prev = 40;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 44;\n                break;\n              }\n              _context.next = 44;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 44:\n              _context.prev = 44;\n              if (!_didIteratorError) {\n                _context.next = 47;\n                break;\n              }\n              throw _iteratorError;\n            case 47:\n              return _context.finish(44);\n            case 48:\n              return _context.finish(39);\n            case 49:\n              _context.prev = 49;\n              releaseLock();\n              return _context.finish(49);\n            case 52:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[17,, 49, 52], [20, 35, 39, 49], [40,, 44, 48]]);\n      })();\n    });\n    return _addAll.apply(this, arguments);\n  }\n  return withTimeoutOption(addAll);\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile(opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  function transformFile(_x2) {\n    return _transformFile.apply(this, arguments);\n  }\n  function _transformFile() {\n    _transformFile = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(source) {\n      var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file, cid, path;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context2.prev = 2;\n            _iterator2 = _asyncIterator(source);\n          case 4:\n            _context2.next = 6;\n            return _awaitAsyncGenerator(_iterator2.next());\n          case 6:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n              _context2.next = 17;\n              break;\n            }\n            file = _step2.value;\n            cid = file.cid;\n            if (opts.cidVersion === 1) {\n              cid = cid.toV1();\n            }\n            path = file.path ? file.path : cid.toString();\n            if (opts.wrapWithDirectory && !file.path) {\n              path = '';\n            }\n            _context2.next = 14;\n            return {\n              path: path,\n              cid: cid,\n              size: file.size,\n              mode: file.unixfs && file.unixfs.mode,\n              mtime: file.unixfs && file.unixfs.mtime\n            };\n          case 14:\n            _iteratorAbruptCompletion2 = false;\n            _context2.next = 4;\n            break;\n          case 17:\n            _context2.next = 23;\n            break;\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](2);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context2.t0;\n          case 23:\n            _context2.prev = 23;\n            _context2.prev = 24;\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context2.next = 28;\n              break;\n            }\n            _context2.next = 28;\n            return _awaitAsyncGenerator(_iterator2.return());\n          case 28:\n            _context2.prev = 28;\n            if (!_didIteratorError2) {\n              _context2.next = 31;\n              break;\n            }\n            throw _iteratorError2;\n          case 31:\n            return _context2.finish(28);\n          case 32:\n            return _context2.finish(23);\n          case 33:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n    }));\n    return _transformFile.apply(this, arguments);\n  }\n  return transformFile;\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile(preload, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  function maybePreloadFile(_x3) {\n    return _maybePreloadFile.apply(this, arguments);\n  }\n  function _maybePreloadFile() {\n    _maybePreloadFile = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(source) {\n      var _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file, isRootFile, shouldPreload;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _iteratorAbruptCompletion3 = false;\n            _didIteratorError3 = false;\n            _context3.prev = 2;\n            _iterator3 = _asyncIterator(source);\n          case 4:\n            _context3.next = 6;\n            return _awaitAsyncGenerator(_iterator3.next());\n          case 6:\n            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context3.sent).done)) {\n              _context3.next = 16;\n              break;\n            }\n            file = _step3.value;\n            isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');\n            shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;\n            if (shouldPreload) {\n              preload(file.cid);\n            }\n            _context3.next = 13;\n            return file;\n          case 13:\n            _iteratorAbruptCompletion3 = false;\n            _context3.next = 4;\n            break;\n          case 16:\n            _context3.next = 22;\n            break;\n          case 18:\n            _context3.prev = 18;\n            _context3.t0 = _context3[\"catch\"](2);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context3.t0;\n          case 22:\n            _context3.prev = 22;\n            _context3.prev = 23;\n            if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n              _context3.next = 27;\n              break;\n            }\n            _context3.next = 27;\n            return _awaitAsyncGenerator(_iterator3.return());\n          case 27:\n            _context3.prev = 27;\n            if (!_didIteratorError3) {\n              _context3.next = 30;\n              break;\n            }\n            throw _iteratorError3;\n          case 30:\n            return _context3.finish(27);\n          case 31:\n            return _context3.finish(22);\n          case 32:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[2, 18, 22, 32], [23,, 27, 31]]);\n    }));\n    return _maybePreloadFile.apply(this, arguments);\n  }\n  return maybePreloadFile;\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile(repo, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  function maybePinFile(_x4) {\n    return _maybePinFile.apply(this, arguments);\n  }\n  function _maybePinFile() {\n    _maybePinFile = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(source) {\n      var _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, file, isRootDir, shouldPin;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _iteratorAbruptCompletion4 = false;\n            _didIteratorError4 = false;\n            _context4.prev = 2;\n            _iterator4 = _asyncIterator(source);\n          case 4:\n            _context4.next = 6;\n            return _awaitAsyncGenerator(_iterator4.next());\n          case 6:\n            if (!(_iteratorAbruptCompletion4 = !(_step4 = _context4.sent).done)) {\n              _context4.next = 18;\n              break;\n            }\n            file = _step4.value;\n            // Pin a file if it is the root dir of a recursive add or the single file\n            // of a direct add.\n            isRootDir = !(file.path && file.path.includes('/'));\n            shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;\n            if (!shouldPin) {\n              _context4.next = 13;\n              break;\n            }\n            _context4.next = 13;\n            return _awaitAsyncGenerator(repo.pins.pinRecursively(file.cid));\n          case 13:\n            _context4.next = 15;\n            return file;\n          case 15:\n            _iteratorAbruptCompletion4 = false;\n            _context4.next = 4;\n            break;\n          case 18:\n            _context4.next = 24;\n            break;\n          case 20:\n            _context4.prev = 20;\n            _context4.t0 = _context4[\"catch\"](2);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context4.t0;\n          case 24:\n            _context4.prev = 24;\n            _context4.prev = 25;\n            if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n              _context4.next = 29;\n              break;\n            }\n            _context4.next = 29;\n            return _awaitAsyncGenerator(_iterator4.return());\n          case 29:\n            _context4.prev = 29;\n            if (!_didIteratorError4) {\n              _context4.next = 32;\n              break;\n            }\n            throw _iteratorError4;\n          case 32:\n            return _context4.finish(29);\n          case 33:\n            return _context4.finish(24);\n          case 34:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n    }));\n    return _maybePinFile.apply(this, arguments);\n  }\n  return maybePinFile;\n}","map":{"version":3,"names":["importer","normaliseInput","parseChunkerString","pipe","withTimeoutOption","mergeOpts","mergeOptions","bind","ignoreUndefined","createAddAll","_ref","repo","preload","hashers","options","isShardingEnabled","sharding","addAll","_x","_addAll","apply","arguments","_wrapAsyncGenerator","source","length","undefined","_regeneratorRuntime","mark","_callee","opts","totals","prog","hasher","iterator","releaseLock","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","added","_added$path","path","wrap","_callee$","_context","prev","next","shardSplitThreshold","Infinity","strategy","_objectSpread","chunker","hashAlg","cidVersion","trickle","leafType","reduceSingleLeafToSelf","rawLeaves","progress","bytes","_awaitAsyncGenerator","getHasher","sent","blocks","pin","transformFile","preloadFile","pinFile","gcLock","readLock","_asyncIterator","done","value","cid","toString","t0","return","finish","stop","_x2","_transformFile","_callee2","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","file","_callee2$","_context2","toV1","wrapWithDirectory","size","mode","unixfs","mtime","maybePreloadFile","_x3","_maybePreloadFile","_callee3","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","isRootFile","shouldPreload","_callee3$","_context3","includes","onlyHash","maybePinFile","_x4","_maybePinFile","_callee4","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","isRootDir","shouldPin","_callee4$","_context4","pins","pinRecursively"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/add-all/index.js"],"sourcesContent":["import { importer } from 'ipfs-unixfs-importer'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-multiple'\nimport { parseChunkerString } from './utils.js'\nimport { pipe } from 'it-pipe'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * @template T\n *\n * @typedef {import('it-stream-types').Source<T>} Source<T>\n */\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {Multihashes} hashers\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n * @param {Context} context\n */\nexport function createAddAll ({ repo, preload, hashers, options }) {\n  const isShardingEnabled = options && options.sharding\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, {\n      ...parseChunkerString(options.chunker)\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw'\n      opts.reduceSingleLeafToSelf = false\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    delete opts.trickle\n\n    /** @type {Record<string, number>} */\n    const totals = {}\n\n    if (opts.progress) {\n      const prog = opts.progress\n\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0\n        }\n\n        totals[path] += bytes\n\n        prog(totals[path], path)\n      }\n    }\n\n    /** @type {MultihashHasher | undefined} */\n    let hasher\n\n    if (opts.hashAlg != null) {\n      hasher = await hashers.getHasher(opts.hashAlg)\n    }\n\n    const iterator = pipe(\n      normaliseInput(source),\n      /**\n       * @param {Source<import('ipfs-unixfs-importer').ImportCandidate>} source\n       */\n      source => importer(source, repo.blocks, {\n        ...opts,\n        hasher,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(repo, opts)\n    )\n\n    const releaseLock = await repo.gcLock.readLock()\n\n    try {\n      for await (const added of iterator) {\n        const path = added.path ?? added.cid.toString()\n\n        // do not keep file totals around forever\n        delete totals[path]\n\n        yield {\n          ...added,\n          path\n        }\n      }\n    } finally {\n      releaseLock()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile (opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * transformFile (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n\n  return transformFile\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile (preload, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePreloadFile (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePreloadFile\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile (repo, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePinFile (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'))\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePinFile\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { BaseBlockstore } from 'blockstore-core';\nimport merge from 'it-merge';\nimport { pushable } from 'it-pushable';\nimport filter from 'it-filter';\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nexport var BlockStorage = /*#__PURE__*/function (_BaseBlockstore) {\n  _inherits(BlockStorage, _BaseBlockstore);\n  var _super = _createSuper(BlockStorage);\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  function BlockStorage(blockstore, bitswap) {\n    var _this6;\n    _classCallCheck(this, BlockStorage);\n    _this6 = _super.call(this);\n    _this6.child = blockstore;\n    _this6.bitswap = bitswap;\n    return _this6;\n  }\n  _createClass(BlockStorage, [{\n    key: \"open\",\n    value: function open() {\n      return this.child.open();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.child.close();\n    }\n  }, {\n    key: \"unwrap\",\n    value: function unwrap() {\n      return this.child;\n    }\n\n    /**\n     * Put a block to the underlying datastore\n     *\n     * @param {CID} cid\n     * @param {Uint8Array} block\n     * @param {AbortOptions} [options]\n     */\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, block) {\n        var options,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              _context.next = 3;\n              return this.has(cid);\n            case 3:\n              if (!_context.sent) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 5:\n              if (!this.bitswap.isStarted()) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 8;\n              return this.bitswap.put(cid, block, options);\n            case 8:\n              _context.next = 12;\n              break;\n            case 10:\n              _context.next = 12;\n              return this.child.put(cid, block, options);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\n     * Put a multiple blocks to the underlying datastore\n     *\n     * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n     * @param {AbortOptions} [options]\n     */\n  }, {\n    key: \"putMany\",\n    value: function putMany(blocks) {\n      var _this = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var missingBlocks;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              missingBlocks = filter(blocks, /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref) {\n                  var key;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        key = _ref.key;\n                        _context2.next = 3;\n                        return _this.has(key);\n                      case 3:\n                        return _context2.abrupt(\"return\", !_context2.sent);\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n                return function (_x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              if (!_this.bitswap.isStarted()) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this.bitswap.putMany(missingBlocks, options)), _awaitAsyncGenerator), \"t0\", 3);\n            case 3:\n              _context3.next = 6;\n              break;\n            case 5:\n              return _context3.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this.child.putMany(missingBlocks, options)), _awaitAsyncGenerator), \"t1\", 6);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n\n    /**\n     * Get a block by cid\n     *\n     * @param {CID} cid\n     * @param {AbortOptions} [options]\n     */\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(cid) {\n        var options,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              _context4.next = 3;\n              return this.has(cid);\n            case 3:\n              _context4.t0 = !_context4.sent;\n              if (!_context4.t0) {\n                _context4.next = 6;\n                break;\n              }\n              _context4.t0 = this.bitswap.isStarted();\n            case 6:\n              if (!_context4.t0) {\n                _context4.next = 10;\n                break;\n              }\n              return _context4.abrupt(\"return\", this.bitswap.get(cid, options));\n            case 10:\n              return _context4.abrupt(\"return\", this.child.get(cid, options));\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function get(_x4) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n    /**\n     * Get multiple blocks back from an array of cids\n     *\n     * @param {AsyncIterable<CID> | Iterable<CID>} cids\n     * @param {AbortOptions} [options]\n     */\n  }, {\n    key: \"getMany\",\n    value: function getMany(cids) {\n      var _this2 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var getFromBitswap, getFromChild;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              getFromBitswap = pushable({\n                objectMode: true\n              });\n              getFromChild = pushable({\n                objectMode: true\n              });\n              Promise.resolve().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, cid;\n                return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _iteratorAbruptCompletion = false;\n                      _didIteratorError = false;\n                      _context5.prev = 2;\n                      _iterator = _asyncIterator(cids);\n                    case 4:\n                      _context5.next = 6;\n                      return _iterator.next();\n                    case 6:\n                      if (!(_iteratorAbruptCompletion = !(_step = _context5.sent).done)) {\n                        _context5.next = 21;\n                        break;\n                      }\n                      cid = _step.value;\n                      _context5.next = 10;\n                      return _this2.has(cid);\n                    case 10:\n                      _context5.t0 = !_context5.sent;\n                      if (!_context5.t0) {\n                        _context5.next = 13;\n                        break;\n                      }\n                      _context5.t0 = _this2.bitswap.isStarted();\n                    case 13:\n                      if (!_context5.t0) {\n                        _context5.next = 17;\n                        break;\n                      }\n                      getFromBitswap.push(cid);\n                      _context5.next = 18;\n                      break;\n                    case 17:\n                      getFromChild.push(cid);\n                    case 18:\n                      _iteratorAbruptCompletion = false;\n                      _context5.next = 4;\n                      break;\n                    case 21:\n                      _context5.next = 27;\n                      break;\n                    case 23:\n                      _context5.prev = 23;\n                      _context5.t1 = _context5[\"catch\"](2);\n                      _didIteratorError = true;\n                      _iteratorError = _context5.t1;\n                    case 27:\n                      _context5.prev = 27;\n                      _context5.prev = 28;\n                      if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                        _context5.next = 32;\n                        break;\n                      }\n                      _context5.next = 32;\n                      return _iterator.return();\n                    case 32:\n                      _context5.prev = 32;\n                      if (!_didIteratorError) {\n                        _context5.next = 35;\n                        break;\n                      }\n                      throw _iteratorError;\n                    case 35:\n                      return _context5.finish(32);\n                    case 36:\n                      return _context5.finish(27);\n                    case 37:\n                      getFromBitswap.end();\n                      getFromChild.end();\n                    case 39:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, _callee5, null, [[2, 23, 27, 37], [28,, 32, 36]]);\n              })));\n              return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(merge(_this2.bitswap.getMany(getFromBitswap, options), _this2.child.getMany(getFromChild, options))), _awaitAsyncGenerator), \"t0\", 4);\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    }\n\n    /**\n     * Delete a block from the blockstore\n     *\n     * @param {CID} cid\n     * @param {RmOptions} [options]\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(cid, options) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.child.delete(cid, options);\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function _delete(_x5, _x6) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * Delete multiple blocks from the blockstore\n     *\n     * @param {AsyncIterable<CID> | Iterable<CID>} cids\n     * @param {RmOptions} [options]\n     */\n  }, {\n    key: \"deleteMany\",\n    value: function deleteMany(cids, options) {\n      var _this3 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this3.child.deleteMany(cids, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }))();\n    }\n\n    /**\n     * @param {CID} cid\n     * @param {AbortOptions} options\n     */\n  }, {\n    key: \"has\",\n    value: function () {\n      var _has = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(cid) {\n        var options,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n              return _context9.abrupt(\"return\", this.child.has(cid, options));\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function has(_x7) {\n        return _has.apply(this, arguments);\n      }\n      return has;\n    }()\n    /**\n     * @param {Query} q\n     * @param {AbortOptions} options\n     */\n  }, {\n    key: \"query\",\n    value: function query(q) {\n      var _this4 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this4.child.query(q, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }))();\n    }\n\n    /**\n     * @param {KeyQuery} q\n     * @param {AbortOptions} options\n     */\n  }, {\n    key: \"queryKeys\",\n    value: function queryKeys(q) {\n      var _this5 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this5.child.queryKeys(q, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }))();\n    }\n  }]);\n  return BlockStorage;\n}(BaseBlockstore);","map":{"version":3,"names":["BaseBlockstore","merge","pushable","filter","BlockStorage","_BaseBlockstore","_inherits","_super","_createSuper","blockstore","bitswap","_this6","_classCallCheck","call","child","_createClass","key","value","open","close","unwrap","_put","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cid","block","options","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","has","sent","abrupt","isStarted","put","stop","_x","_x2","apply","putMany","blocks","_this","_wrapAsyncGenerator","_callee3","missingBlocks","_callee3$","_context3","_ref2","_callee2","_ref","_callee2$","_context2","_x3","delegateYield","_asyncGeneratorDelegate","_asyncIterator","_awaitAsyncGenerator","_get","_callee4","_args4","_callee4$","_context4","t0","get","_x4","getMany","cids","_this2","_callee6","getFromBitswap","getFromChild","_callee6$","_context6","objectMode","Promise","resolve","then","_callee5","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_callee5$","_context5","done","push","t1","return","finish","end","_delete2","_callee7","_callee7$","_context7","delete","_delete","_x5","_x6","deleteMany","_this3","_callee8","_callee8$","_context8","_has","_callee9","_args9","_callee9$","_context9","_x7","query","q","_this4","_callee10","_callee10$","_context10","queryKeys","_this5","_callee11","_callee11$","_context11"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/block-storage.js"],"sourcesContent":["import { BaseBlockstore } from 'blockstore-core'\nimport merge from 'it-merge'\nimport { pushable } from 'it-pushable'\nimport filter from 'it-filter'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nexport class BlockStorage extends BaseBlockstore {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor (blockstore, bitswap) {\n    super()\n\n    this.child = blockstore\n    this.bitswap = bitswap\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  unwrap () {\n    return this.child\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n  async put (cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options)\n    } else {\n      await this.child.put(cid, block, options)\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n  async * putMany (blocks, options = {}) {\n    const missingBlocks = filter(blocks, async ({ key }) => { return !(await this.has(key)) })\n\n    if (this.bitswap.isStarted()) {\n      yield * this.bitswap.putMany(missingBlocks, options)\n    } else {\n      yield * this.child.putMany(missingBlocks, options)\n    }\n  }\n\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  async get (cid, options = {}) {\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options)\n    } else {\n      return this.child.get(cid, options)\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n  async * getMany (cids, options = {}) {\n    const getFromBitswap = pushable({ objectMode: true })\n    const getFromChild = pushable({ objectMode: true })\n\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid)\n        } else {\n          getFromChild.push(cid)\n        }\n      }\n\n      getFromBitswap.end()\n      getFromChild.end()\n    })\n\n    yield * merge(\n      this.bitswap.getMany(getFromBitswap, options),\n      this.child.getMany(getFromChild, options)\n    )\n  }\n\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n  async delete (cid, options) {\n    await this.child.delete(cid, options)\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n  async * deleteMany (cids, options) {\n    yield * this.child.deleteMany(cids, options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n  async has (cid, options = {}) {\n    return this.child.has(cid, options)\n  }\n\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n  async * query (q, options = {}) {\n    yield * this.child.query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n  async * queryKeys (q, options = {}) {\n    yield * this.child.queryKeys(q, options)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
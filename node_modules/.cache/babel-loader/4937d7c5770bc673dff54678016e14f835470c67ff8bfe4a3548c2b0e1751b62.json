{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport errcode from 'err-code';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { bestRecord } from '@libp2p/record/selectors';\nimport parallel from 'it-parallel';\nimport map from 'it-map';\nimport { valueEvent, queryErrorEvent } from '../query/events.js';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { pipe } from 'it-pipe';\nimport { ALPHA } from '../constants.js';\nimport { createPutRecord, convertBuffer, bufferToRecordKey } from '../utils.js';\nimport { logger } from '@libp2p/logger';\nimport { Components } from '@libp2p/components';\nexport var ContentFetching = /*#__PURE__*/function () {\n  function ContentFetching(init) {\n    _classCallCheck(this, ContentFetching);\n    this.components = new Components();\n    var validators = init.validators,\n      selectors = init.selectors,\n      peerRouting = init.peerRouting,\n      queryManager = init.queryManager,\n      routingTable = init.routingTable,\n      network = init.network,\n      lan = init.lan;\n    this.log = logger(\"libp2p:kad-dht:\".concat(lan ? 'lan' : 'wan', \":content-fetching\"));\n    this.validators = validators;\n    this.selectors = selectors;\n    this.peerRouting = peerRouting;\n    this.queryManager = queryManager;\n    this.routingTable = routingTable;\n    this.network = network;\n  }\n  _createClass(ContentFetching, [{\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n    }\n  }, {\n    key: \"putLocal\",\n    value: function () {\n      var _putLocal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, rec) {\n        var dsKey;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              dsKey = bufferToRecordKey(key);\n              _context.next = 3;\n              return this.components.getDatastore().put(dsKey, rec);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function putLocal(_x3, _x4) {\n        return _putLocal.apply(this, arguments);\n      }\n      return putLocal;\n    }()\n    /**\n     * Attempt to retrieve the value for the given key from\n     * the local datastore\n     */\n  }, {\n    key: \"getLocal\",\n    value: function () {\n      var _getLocal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {\n        var dsKey, raw, rec;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.log('getLocal %b', key);\n              dsKey = bufferToRecordKey(key);\n              this.log('fetching record for key %k', dsKey);\n              _context2.next = 5;\n              return this.components.getDatastore().get(dsKey);\n            case 5:\n              raw = _context2.sent;\n              this.log('found %k in local datastore', dsKey);\n              rec = Libp2pRecord.deserialize(raw);\n              _context2.next = 10;\n              return verifyRecord(this.validators, rec);\n            case 10:\n              return _context2.abrupt(\"return\", rec);\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getLocal(_x5) {\n        return _getLocal.apply(this, arguments);\n      }\n      return getLocal;\n    }()\n    /**\n     * Send the best record found to any peers that have an out of date record\n     */\n  }, {\n    key: \"sendCorrectionRecord\",\n    value: function sendCorrectionRecord(key, vals, best) {\n      var _this = this;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var fixupRec, _iterator6, _step6, _step6$value, value, from, dsKey, sentCorrection, request, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, event;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.log('sendCorrection for %b', key);\n              _context3.next = 3;\n              return _awaitAsyncGenerator(createPutRecord(key, best));\n            case 3:\n              fixupRec = _context3.sent;\n              _iterator6 = _createForOfIteratorHelper(vals);\n              _context3.prev = 5;\n              _iterator6.s();\n            case 7:\n              if ((_step6 = _iterator6.n()).done) {\n                _context3.next = 63;\n                break;\n              }\n              _step6$value = _step6.value, value = _step6$value.value, from = _step6$value.from;\n              if (!uint8ArrayEquals(value, best)) {\n                _context3.next = 12;\n                break;\n              }\n              _this.log('record was ok');\n              return _context3.abrupt(\"continue\", 61);\n            case 12:\n              if (!_this.components.getPeerId().equals(from)) {\n                _context3.next = 24;\n                break;\n              }\n              _context3.prev = 13;\n              dsKey = bufferToRecordKey(key);\n              _this.log(\"Storing corrected record for key \".concat(dsKey.toString()));\n              _context3.next = 18;\n              return _awaitAsyncGenerator(_this.components.getDatastore().put(dsKey, fixupRec.subarray()));\n            case 18:\n              _context3.next = 23;\n              break;\n            case 20:\n              _context3.prev = 20;\n              _context3.t0 = _context3[\"catch\"](13);\n              _this.log.error('Failed error correcting self', _context3.t0);\n            case 23:\n              return _context3.abrupt(\"continue\", 61);\n            case 24:\n              // send correction\n              sentCorrection = false;\n              request = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n              request.record = Libp2pRecord.deserialize(fixupRec);\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context3.prev = 29;\n              _iterator = _asyncIterator(_this.network.sendRequest(from, request, options));\n            case 31:\n              _context3.next = 33;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 33:\n              if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n                _context3.next = 41;\n                break;\n              }\n              event = _step.value;\n              if (event.name === 'PEER_RESPONSE' && event.record != null && uint8ArrayEquals(event.record.value, Libp2pRecord.deserialize(fixupRec).value)) {\n                sentCorrection = true;\n              }\n              _context3.next = 38;\n              return event;\n            case 38:\n              _iteratorAbruptCompletion = false;\n              _context3.next = 31;\n              break;\n            case 41:\n              _context3.next = 47;\n              break;\n            case 43:\n              _context3.prev = 43;\n              _context3.t1 = _context3[\"catch\"](29);\n              _didIteratorError = true;\n              _iteratorError = _context3.t1;\n            case 47:\n              _context3.prev = 47;\n              _context3.prev = 48;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context3.next = 52;\n                break;\n              }\n              _context3.next = 52;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 52:\n              _context3.prev = 52;\n              if (!_didIteratorError) {\n                _context3.next = 55;\n                break;\n              }\n              throw _iteratorError;\n            case 55:\n              return _context3.finish(52);\n            case 56:\n              return _context3.finish(47);\n            case 57:\n              if (sentCorrection) {\n                _context3.next = 60;\n                break;\n              }\n              _context3.next = 60;\n              return queryErrorEvent({\n                from: from,\n                error: errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID')\n              });\n            case 60:\n              _this.log.error('Failed error correcting entry');\n            case 61:\n              _context3.next = 7;\n              break;\n            case 63:\n              _context3.next = 68;\n              break;\n            case 65:\n              _context3.prev = 65;\n              _context3.t2 = _context3[\"catch\"](5);\n              _iterator6.e(_context3.t2);\n            case 68:\n              _context3.prev = 68;\n              _iterator6.f();\n              return _context3.finish(68);\n            case 71:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[5, 65, 68, 71], [13, 20], [29, 43, 47, 57], [48,, 52, 56]]);\n      }))();\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n  }, {\n    key: \"put\",\n    value: function put(key, value) {\n      var _this2 = this;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var record, dsKey;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _this2.log('put key %b value %b', key, value);\n              // create record in the dht format\n              _context6.next = 3;\n              return _awaitAsyncGenerator(createPutRecord(key, value));\n            case 3:\n              record = _context6.sent;\n              // store the record locally\n              dsKey = bufferToRecordKey(key);\n              _this2.log(\"storing record for key \".concat(dsKey.toString()));\n              _context6.next = 8;\n              return _awaitAsyncGenerator(_this2.components.getDatastore().put(dsKey, record.subarray()));\n            case 8:\n              return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pipe(_this2.peerRouting.getClosestPeers(key, {\n                signal: options.signal\n              }), function (source) {\n                return map(source, function (event) {\n                  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                    var events, msg, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, putEvent;\n                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                      while (1) switch (_context4.prev = _context4.next) {\n                        case 0:\n                          if (!(event.name !== 'FINAL_PEER')) {\n                            _context4.next = 2;\n                            break;\n                          }\n                          return _context4.abrupt(\"return\", [event]);\n                        case 2:\n                          events = [];\n                          msg = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n                          msg.record = Libp2pRecord.deserialize(record);\n                          _this2.log('send put to %p', event.peer.id);\n                          _iteratorAbruptCompletion2 = false;\n                          _didIteratorError2 = false;\n                          _context4.prev = 8;\n                          _iterator2 = _asyncIterator(_this2.network.sendRequest(event.peer.id, msg, options));\n                        case 10:\n                          _context4.next = 12;\n                          return _iterator2.next();\n                        case 12:\n                          if (!(_iteratorAbruptCompletion2 = !(_step2 = _context4.sent).done)) {\n                            _context4.next = 21;\n                            break;\n                          }\n                          putEvent = _step2.value;\n                          events.push(putEvent);\n                          if (!(putEvent.name !== 'PEER_RESPONSE')) {\n                            _context4.next = 17;\n                            break;\n                          }\n                          return _context4.abrupt(\"continue\", 18);\n                        case 17:\n                          if (!(putEvent.record != null && uint8ArrayEquals(putEvent.record.value, Libp2pRecord.deserialize(record).value))) {\n                            events.push(queryErrorEvent({\n                              from: event.peer.id,\n                              error: errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID')\n                            }));\n                          }\n                        case 18:\n                          _iteratorAbruptCompletion2 = false;\n                          _context4.next = 10;\n                          break;\n                        case 21:\n                          _context4.next = 27;\n                          break;\n                        case 23:\n                          _context4.prev = 23;\n                          _context4.t0 = _context4[\"catch\"](8);\n                          _didIteratorError2 = true;\n                          _iteratorError2 = _context4.t0;\n                        case 27:\n                          _context4.prev = 27;\n                          _context4.prev = 28;\n                          if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                            _context4.next = 32;\n                            break;\n                          }\n                          _context4.next = 32;\n                          return _iterator2.return();\n                        case 32:\n                          _context4.prev = 32;\n                          if (!_didIteratorError2) {\n                            _context4.next = 35;\n                            break;\n                          }\n                          throw _iteratorError2;\n                        case 35:\n                          return _context4.finish(32);\n                        case 36:\n                          return _context4.finish(27);\n                        case 37:\n                          return _context4.abrupt(\"return\", events);\n                        case 38:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }, _callee4, null, [[8, 23, 27, 37], [28,, 32, 36]]);\n                  }));\n                });\n              }, function (source) {\n                return parallel(source, {\n                  ordered: false,\n                  concurrency: ALPHA\n                });\n              }, /*#__PURE__*/function () {\n                var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(source) {\n                  var _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, events;\n                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                    while (1) switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _iteratorAbruptCompletion3 = false;\n                        _didIteratorError3 = false;\n                        _context5.prev = 2;\n                        _iterator3 = _asyncIterator(source);\n                      case 4:\n                        _context5.next = 6;\n                        return _awaitAsyncGenerator(_iterator3.next());\n                      case 6:\n                        if (!(_iteratorAbruptCompletion3 = !(_step3 = _context5.sent).done)) {\n                          _context5.next = 12;\n                          break;\n                        }\n                        events = _step3.value;\n                        return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(events), _awaitAsyncGenerator), \"t0\", 9);\n                      case 9:\n                        _iteratorAbruptCompletion3 = false;\n                        _context5.next = 4;\n                        break;\n                      case 12:\n                        _context5.next = 18;\n                        break;\n                      case 14:\n                        _context5.prev = 14;\n                        _context5.t1 = _context5[\"catch\"](2);\n                        _didIteratorError3 = true;\n                        _iteratorError3 = _context5.t1;\n                      case 18:\n                        _context5.prev = 18;\n                        _context5.prev = 19;\n                        if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n                          _context5.next = 23;\n                          break;\n                        }\n                        _context5.next = 23;\n                        return _awaitAsyncGenerator(_iterator3.return());\n                      case 23:\n                        _context5.prev = 23;\n                        if (!_didIteratorError3) {\n                          _context5.next = 26;\n                          break;\n                        }\n                        throw _iteratorError3;\n                      case 26:\n                        return _context5.finish(23);\n                      case 27:\n                        return _context5.finish(18);\n                      case 28:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }, _callee5, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n                }));\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }())), _awaitAsyncGenerator), \"t0\", 9);\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    }\n    /**\n     * Get the value to the given key\n     */\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var _this3 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var vals, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, event, records, i, best;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _this3.log('get %b', key);\n              vals = [];\n              _iteratorAbruptCompletion4 = false;\n              _didIteratorError4 = false;\n              _context7.prev = 4;\n              _iterator4 = _asyncIterator(_this3.getMany(key, options));\n            case 6:\n              _context7.next = 8;\n              return _awaitAsyncGenerator(_iterator4.next());\n            case 8:\n              if (!(_iteratorAbruptCompletion4 = !(_step4 = _context7.sent).done)) {\n                _context7.next = 16;\n                break;\n              }\n              event = _step4.value;\n              if (event.name === 'VALUE') {\n                vals.push(event);\n              }\n              _context7.next = 13;\n              return event;\n            case 13:\n              _iteratorAbruptCompletion4 = false;\n              _context7.next = 6;\n              break;\n            case 16:\n              _context7.next = 22;\n              break;\n            case 18:\n              _context7.prev = 18;\n              _context7.t0 = _context7[\"catch\"](4);\n              _didIteratorError4 = true;\n              _iteratorError4 = _context7.t0;\n            case 22:\n              _context7.prev = 22;\n              _context7.prev = 23;\n              if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n                _context7.next = 27;\n                break;\n              }\n              _context7.next = 27;\n              return _awaitAsyncGenerator(_iterator4.return());\n            case 27:\n              _context7.prev = 27;\n              if (!_didIteratorError4) {\n                _context7.next = 30;\n                break;\n              }\n              throw _iteratorError4;\n            case 30:\n              return _context7.finish(27);\n            case 31:\n              return _context7.finish(22);\n            case 32:\n              if (!(vals.length === 0)) {\n                _context7.next = 34;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 34:\n              records = vals.map(function (v) {\n                return v.value;\n              });\n              i = 0;\n              _context7.prev = 36;\n              i = bestRecord(_this3.selectors, key, records);\n              _context7.next = 44;\n              break;\n            case 40:\n              _context7.prev = 40;\n              _context7.t1 = _context7[\"catch\"](36);\n              if (!(_context7.t1.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY')) {\n                _context7.next = 44;\n                break;\n              }\n              throw _context7.t1;\n            case 44:\n              best = records[i];\n              _this3.log('GetValue %b %b', key, best);\n              if (!(best == null)) {\n                _context7.next = 48;\n                break;\n              }\n              throw errcode(new Error('best value was not found'), 'ERR_NOT_FOUND');\n            case 48:\n              return _context7.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this3.sendCorrectionRecord(key, vals, best, options)), _awaitAsyncGenerator), \"t2\", 49);\n            case 49:\n              _context7.next = 51;\n              return vals[i];\n            case 51:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[4, 18, 22, 32], [23,, 27, 31], [36, 40]]);\n      }))();\n    }\n    /**\n     * Get the `n` values to the given key without sorting\n     */\n  }, {\n    key: \"getMany\",\n    value: function getMany(key) {\n      var _this4 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var localRec, id, rtp, self, getValueQuery;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _this4.log('getMany values for %b', key);\n              _context9.prev = 1;\n              _context9.next = 4;\n              return _awaitAsyncGenerator(_this4.getLocal(key));\n            case 4:\n              localRec = _context9.sent;\n              _context9.next = 7;\n              return valueEvent({\n                value: localRec.value,\n                from: _this4.components.getPeerId()\n              });\n            case 7:\n              _context9.next = 12;\n              break;\n            case 9:\n              _context9.prev = 9;\n              _context9.t0 = _context9[\"catch\"](1);\n              _this4.log('error getting local value for %b', key, _context9.t0);\n            case 12:\n              _context9.next = 14;\n              return _awaitAsyncGenerator(convertBuffer(key));\n            case 14:\n              id = _context9.sent;\n              rtp = _this4.routingTable.closestPeers(id);\n              _this4.log('found %d peers in routing table', rtp.length);\n              self = _this4; // eslint-disable-line @typescript-eslint/no-this-alias\n              getValueQuery = /*#__PURE__*/function () {\n                var _ref2 = _wrapAsyncGenerator(function (_ref4) {\n                  var peer = _ref4.peer,\n                    signal = _ref4.signal;\n                  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n                    var _iteratorAbruptCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, event;\n                    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                      while (1) switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _iteratorAbruptCompletion5 = false;\n                          _didIteratorError5 = false;\n                          _context8.prev = 2;\n                          _iterator5 = _asyncIterator(self.peerRouting.getValueOrPeers(peer, key, {\n                            signal: signal\n                          }));\n                        case 4:\n                          _context8.next = 6;\n                          return _awaitAsyncGenerator(_iterator5.next());\n                        case 6:\n                          if (!(_iteratorAbruptCompletion5 = !(_step5 = _context8.sent).done)) {\n                            _context8.next = 16;\n                            break;\n                          }\n                          event = _step5.value;\n                          _context8.next = 10;\n                          return event;\n                        case 10:\n                          if (!(event.name === 'PEER_RESPONSE' && event.record != null)) {\n                            _context8.next = 13;\n                            break;\n                          }\n                          _context8.next = 13;\n                          return valueEvent({\n                            from: peer,\n                            value: event.record.value\n                          });\n                        case 13:\n                          _iteratorAbruptCompletion5 = false;\n                          _context8.next = 4;\n                          break;\n                        case 16:\n                          _context8.next = 22;\n                          break;\n                        case 18:\n                          _context8.prev = 18;\n                          _context8.t0 = _context8[\"catch\"](2);\n                          _didIteratorError5 = true;\n                          _iteratorError5 = _context8.t0;\n                        case 22:\n                          _context8.prev = 22;\n                          _context8.prev = 23;\n                          if (!(_iteratorAbruptCompletion5 && _iterator5.return != null)) {\n                            _context8.next = 27;\n                            break;\n                          }\n                          _context8.next = 27;\n                          return _awaitAsyncGenerator(_iterator5.return());\n                        case 27:\n                          _context8.prev = 27;\n                          if (!_didIteratorError5) {\n                            _context8.next = 30;\n                            break;\n                          }\n                          throw _iteratorError5;\n                        case 30:\n                          return _context8.finish(27);\n                        case 31:\n                          return _context8.finish(22);\n                        case 32:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }, _callee8, null, [[2, 18, 22, 32], [23,, 27, 31]]);\n                  })();\n                });\n                return function getValueQuery(_x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(); // we have peers, lets send the actual query to them\n              return _context9.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this4.queryManager.run(key, rtp, getValueQuery, options)), _awaitAsyncGenerator), \"t1\", 20);\n            case 20:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[1, 9]]);\n      }))();\n    }\n  }]);\n  return ContentFetching;\n}();","map":{"version":3,"names":["errcode","equals","uint8ArrayEquals","Libp2pRecord","verifyRecord","bestRecord","parallel","map","valueEvent","queryErrorEvent","Message","MESSAGE_TYPE","pipe","ALPHA","createPutRecord","convertBuffer","bufferToRecordKey","logger","Components","ContentFetching","init","_classCallCheck","components","validators","selectors","peerRouting","queryManager","routingTable","network","lan","log","concat","_createClass","key","value","_putLocal","_asyncToGenerator","_regeneratorRuntime","mark","_callee","rec","dsKey","wrap","_callee$","_context","prev","next","getDatastore","put","stop","putLocal","_x3","_x4","apply","arguments","_getLocal","_callee2","raw","_callee2$","_context2","get","sent","deserialize","abrupt","getLocal","_x5","sendCorrectionRecord","vals","best","_this","options","length","undefined","_wrapAsyncGenerator","_callee3","fixupRec","_iterator6","_step6","_step6$value","from","sentCorrection","request","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","event","_callee3$","_context3","_awaitAsyncGenerator","_createForOfIteratorHelper","s","n","done","getPeerId","toString","subarray","t0","error","PUT_VALUE","record","_asyncIterator","sendRequest","name","t1","return","finish","Error","t2","e","f","_this2","_callee6","_callee6$","_context6","delegateYield","_asyncGeneratorDelegate","getClosestPeers","signal","source","_callee4","events","msg","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","putEvent","_callee4$","_context4","peer","id","push","ordered","concurrency","_ref","_callee5","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_callee5$","_context5","_x","_this3","_callee7","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","records","i","_callee7$","_context7","getMany","v","code","_this4","_callee9","localRec","rtp","self","getValueQuery","_callee9$","_context9","closestPeers","_ref2","_ref4","_callee8","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_callee8$","_context8","getValueOrPeers","_x2","run"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/content-fetching/index.ts"],"sourcesContent":["import errcode from 'err-code'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { Libp2pRecord } from '@libp2p/record'\nimport { verifyRecord } from '@libp2p/record/validators'\nimport { bestRecord } from '@libp2p/record/selectors'\nimport parallel from 'it-parallel'\nimport map from 'it-map'\nimport {\n  valueEvent,\n  queryErrorEvent\n} from '../query/events.js'\nimport { Message, MESSAGE_TYPE } from '../message/index.js'\nimport { pipe } from 'it-pipe'\nimport {\n  ALPHA\n} from '../constants.js'\nimport { createPutRecord, convertBuffer, bufferToRecordKey } from '../utils.js'\nimport { logger } from '@libp2p/logger'\nimport type { Validators, Selectors, ValueEvent, QueryOptions } from '@libp2p/interface-dht'\nimport type { PeerRouting } from '../peer-routing/index.js'\nimport type { QueryManager } from '../query/manager.js'\nimport type { RoutingTable } from '../routing-table/index.js'\nimport type { Network } from '../network.js'\nimport type { Logger } from '@libp2p/logger'\nimport type { AbortOptions } from '@libp2p/interfaces'\nimport type { QueryFunc } from '../query/types.js'\nimport { Components, Initializable } from '@libp2p/components'\n\nexport interface ContentFetchingInit {\n  validators: Validators\n  selectors: Selectors\n  peerRouting: PeerRouting\n  queryManager: QueryManager\n  routingTable: RoutingTable\n  network: Network\n  lan: boolean\n}\n\nexport class ContentFetching implements Initializable {\n  private readonly log: Logger\n  private components: Components = new Components()\n  private readonly validators: Validators\n  private readonly selectors: Selectors\n  private readonly peerRouting: PeerRouting\n  private readonly queryManager: QueryManager\n  private readonly routingTable: RoutingTable\n  private readonly network: Network\n\n  constructor (init: ContentFetchingInit) {\n    const { validators, selectors, peerRouting, queryManager, routingTable, network, lan } = init\n    this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-fetching`)\n    this.validators = validators\n    this.selectors = selectors\n    this.peerRouting = peerRouting\n    this.queryManager = queryManager\n    this.routingTable = routingTable\n    this.network = network\n  }\n\n  init (components: Components): void {\n    this.components = components\n  }\n\n  async putLocal (key: Uint8Array, rec: Uint8Array) { // eslint-disable-line require-await\n    const dsKey = bufferToRecordKey(key)\n    await this.components.getDatastore().put(dsKey, rec)\n  }\n\n  /**\n   * Attempt to retrieve the value for the given key from\n   * the local datastore\n   */\n  async getLocal (key: Uint8Array) {\n    this.log('getLocal %b', key)\n\n    const dsKey = bufferToRecordKey(key)\n\n    this.log('fetching record for key %k', dsKey)\n\n    const raw = await this.components.getDatastore().get(dsKey)\n    this.log('found %k in local datastore', dsKey)\n\n    const rec = Libp2pRecord.deserialize(raw)\n\n    await verifyRecord(this.validators, rec)\n\n    return rec\n  }\n\n  /**\n   * Send the best record found to any peers that have an out of date record\n   */\n  async * sendCorrectionRecord (key: Uint8Array, vals: ValueEvent[], best: Uint8Array, options: AbortOptions = {}) {\n    this.log('sendCorrection for %b', key)\n    const fixupRec = await createPutRecord(key, best)\n\n    for (const { value, from } of vals) {\n      // no need to do anything\n      if (uint8ArrayEquals(value, best)) {\n        this.log('record was ok')\n        continue\n      }\n\n      // correct ourself\n      if (this.components.getPeerId().equals(from)) {\n        try {\n          const dsKey = bufferToRecordKey(key)\n          this.log(`Storing corrected record for key ${dsKey.toString()}`)\n          await this.components.getDatastore().put(dsKey, fixupRec.subarray())\n        } catch (err: any) {\n          this.log.error('Failed error correcting self', err)\n        }\n\n        continue\n      }\n\n      // send correction\n      let sentCorrection = false\n      const request = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0)\n      request.record = Libp2pRecord.deserialize(fixupRec)\n\n      for await (const event of this.network.sendRequest(from, request, options)) {\n        if (event.name === 'PEER_RESPONSE' && (event.record != null) && uint8ArrayEquals(event.record.value, Libp2pRecord.deserialize(fixupRec).value)) {\n          sentCorrection = true\n        }\n\n        yield event\n      }\n\n      if (!sentCorrection) {\n        yield queryErrorEvent({ from, error: errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID') })\n      }\n\n      this.log.error('Failed error correcting entry')\n    }\n  }\n\n  /**\n   * Store the given key/value pair in the DHT\n   */\n  async * put (key: Uint8Array, value: Uint8Array, options: AbortOptions = {}) {\n    this.log('put key %b value %b', key, value)\n\n    // create record in the dht format\n    const record = await createPutRecord(key, value)\n\n    // store the record locally\n    const dsKey = bufferToRecordKey(key)\n    this.log(`storing record for key ${dsKey.toString()}`)\n    await this.components.getDatastore().put(dsKey, record.subarray())\n\n    // put record to the closest peers\n    yield * pipe(\n      this.peerRouting.getClosestPeers(key, { signal: options.signal }),\n      (source) => map(source, (event) => {\n        return async () => {\n          if (event.name !== 'FINAL_PEER') {\n            return [event]\n          }\n\n          const events = []\n\n          const msg = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0)\n          msg.record = Libp2pRecord.deserialize(record)\n\n          this.log('send put to %p', event.peer.id)\n          for await (const putEvent of this.network.sendRequest(event.peer.id, msg, options)) {\n            events.push(putEvent)\n\n            if (putEvent.name !== 'PEER_RESPONSE') {\n              continue\n            }\n\n            if (!(putEvent.record != null && uint8ArrayEquals(putEvent.record.value, Libp2pRecord.deserialize(record).value))) {\n              events.push(queryErrorEvent({ from: event.peer.id, error: errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID') }))\n            }\n          }\n\n          return events\n        }\n      }),\n      (source) => parallel(source, {\n        ordered: false,\n        concurrency: ALPHA\n      }),\n      async function * (source) {\n        for await (const events of source) {\n          yield * events\n        }\n      }\n    )\n  }\n\n  /**\n   * Get the value to the given key\n   */\n  async * get (key: Uint8Array, options: QueryOptions = {}) {\n    this.log('get %b', key)\n\n    const vals: ValueEvent[] = []\n\n    for await (const event of this.getMany(key, options)) {\n      if (event.name === 'VALUE') {\n        vals.push(event)\n      }\n\n      yield event\n    }\n\n    if (vals.length === 0) {\n      return\n    }\n\n    const records = vals.map((v) => v.value)\n    let i = 0\n\n    try {\n      i = bestRecord(this.selectors, key, records)\n    } catch (err: any) {\n      // Assume the first record if no selector available\n      if (err.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY') {\n        throw err\n      }\n    }\n\n    const best = records[i]\n    this.log('GetValue %b %b', key, best)\n\n    if (best == null) {\n      throw errcode(new Error('best value was not found'), 'ERR_NOT_FOUND')\n    }\n\n    yield * this.sendCorrectionRecord(key, vals, best, options)\n\n    yield vals[i]\n  }\n\n  /**\n   * Get the `n` values to the given key without sorting\n   */\n  async * getMany (key: Uint8Array, options: QueryOptions = {}) {\n    this.log('getMany values for %b', key)\n\n    try {\n      const localRec = await this.getLocal(key)\n\n      yield valueEvent({\n        value: localRec.value,\n        from: this.components.getPeerId()\n      })\n    } catch (err: any) {\n      this.log('error getting local value for %b', key, err)\n    }\n\n    const id = await convertBuffer(key)\n    const rtp = this.routingTable.closestPeers(id)\n\n    this.log('found %d peers in routing table', rtp.length)\n\n    const self = this // eslint-disable-line @typescript-eslint/no-this-alias\n\n    const getValueQuery: QueryFunc = async function * ({ peer, signal }) {\n      for await (const event of self.peerRouting.getValueOrPeers(peer, key, { signal })) {\n        yield event\n\n        if (event.name === 'PEER_RESPONSE' && (event.record != null)) {\n          yield valueEvent({ from: peer, value: event.record.value })\n        }\n      }\n    }\n\n    // we have peers, lets send the actual query to them\n    yield * this.queryManager.run(key, rtp, getValueQuery, options)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
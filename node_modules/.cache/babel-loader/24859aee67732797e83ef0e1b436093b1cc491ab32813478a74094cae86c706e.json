{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport debug from 'debug';\nimport { createUnsafe } from 'multiformats/block';\nvar log = debug('ipfs:repo:utils:walk-dag');\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport function walkDag(_x, _x2, _x3, _x4) {\n  return _walkDag.apply(this, arguments);\n}\nfunction _walkDag() {\n  _walkDag = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, blockstore, loadCodec, options) {\n    var bytes, codec, block, _iterator, _step, _step$value, childCid;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _awaitAsyncGenerator(blockstore.get(cid, options));\n        case 3:\n          bytes = _context.sent;\n          _context.next = 6;\n          return _awaitAsyncGenerator(loadCodec(cid.code));\n        case 6:\n          codec = _context.sent;\n          block = createUnsafe({\n            bytes: bytes,\n            cid: cid,\n            codec: codec\n          });\n          _iterator = _createForOfIteratorHelper(block.links());\n          _context.prev = 9;\n          _iterator.s();\n        case 11:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 18;\n            break;\n          }\n          _step$value = _slicedToArray(_step.value, 2), childCid = _step$value[1];\n          _context.next = 15;\n          return childCid;\n        case 15:\n          return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(walkDag(childCid, blockstore, loadCodec, options)), _awaitAsyncGenerator), \"t0\", 16);\n        case 16:\n          _context.next = 11;\n          break;\n        case 18:\n          _context.next = 23;\n          break;\n        case 20:\n          _context.prev = 20;\n          _context.t1 = _context[\"catch\"](9);\n          _iterator.e(_context.t1);\n        case 23:\n          _context.prev = 23;\n          _iterator.f();\n          return _context.finish(23);\n        case 26:\n          _context.next = 32;\n          break;\n        case 28:\n          _context.prev = 28;\n          _context.t2 = _context[\"catch\"](0);\n          log('Could not walk DAG for CID', cid.toString(), _context.t2);\n          throw _context.t2;\n        case 32:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 28], [9, 20, 23, 26]]);\n  }));\n  return _walkDag.apply(this, arguments);\n}","map":{"version":3,"names":["debug","createUnsafe","log","walkDag","_x","_x2","_x3","_x4","_walkDag","apply","arguments","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","cid","blockstore","loadCodec","options","bytes","codec","block","_iterator","_step","_step$value","childCid","wrap","_callee$","_context","prev","next","_awaitAsyncGenerator","get","sent","code","_createForOfIteratorHelper","links","s","n","done","_slicedToArray","value","delegateYield","_asyncGeneratorDelegate","_asyncIterator","t1","e","f","finish","t2","toString","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-repo/src/utils/walk-dag.js"],"sourcesContent":["import debug from 'debug'\nimport { createUnsafe } from 'multiformats/block'\n\nconst log = debug('ipfs:repo:utils:walk-dag')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport async function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (/** @type {any} */ err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,IAAMC,GAAG,GAAGF,KAAK,CAAC,0BAA0B,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAwBG,OAAOA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,QAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAe9B,SAAAF,SAAA;EAAAA,QAAA,GAAAG,mBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAfM,SAAAC,QAA0BC,GAAG,EAAEC,UAAU,EAAEC,SAAS,EAAEC,OAAO;IAAA,IAAAC,KAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,WAAA,EAAAC,QAAA;IAAA,OAAAb,mBAAA,GAAAc,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAE,IAAA;UAAA,OAAAC,oBAAA,CAE5Cf,UAAU,CAACgB,GAAG,CAACjB,GAAG,EAAEG,OAAO,CAAC;QAAA;UAA1CC,KAAK,GAAAS,QAAA,CAAAK,IAAA;UAAAL,QAAA,CAAAE,IAAA;UAAA,OAAAC,oBAAA,CACSd,SAAS,CAACF,GAAG,CAACmB,IAAI,CAAC;QAAA;UAAjCd,KAAK,GAAAQ,QAAA,CAAAK,IAAA;UACLZ,KAAK,GAAGpB,YAAY,CAAC;YAAEkB,KAAK,EAALA,KAAK;YAAEJ,GAAG,EAAHA,GAAG;YAAEK,KAAK,EAALA;UAAM,CAAC,CAAC;UAAAE,SAAA,GAAAa,0BAAA,CAEtBd,KAAK,CAACe,KAAK,CAAC,CAAC;UAAAR,QAAA,CAAAC,IAAA;UAAAP,SAAA,CAAAe,CAAA;QAAA;UAAA,KAAAd,KAAA,GAAAD,SAAA,CAAAgB,CAAA,IAAAC,IAAA;YAAAX,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAN,WAAA,GAAAgB,cAAA,CAAAjB,KAAA,CAAAkB,KAAA,MAA1BhB,QAAQ,GAAAD,WAAA;UAAAI,QAAA,CAAAE,IAAA;UACpB,OAAML,QAAQ;QAAA;UACd,OAAAG,QAAA,CAAAc,aAAA,CAAAC,uBAAA,CAAAC,cAAA,CAAQzC,OAAO,CAACsB,QAAQ,EAAET,UAAU,EAAEC,SAAS,EAAEC,OAAO,CAAC,GAAAa,oBAAA;QAAA;UAAAH,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAiB,EAAA,GAAAjB,QAAA;UAAAN,SAAA,CAAAwB,CAAA,CAAAlB,QAAA,CAAAiB,EAAA;QAAA;UAAAjB,QAAA,CAAAC,IAAA;UAAAP,SAAA,CAAAyB,CAAA;UAAA,OAAAnB,QAAA,CAAAoB,MAAA;QAAA;UAAApB,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAqB,EAAA,GAAArB,QAAA;UAG3D1B,GAAG,CAAC,4BAA4B,EAAEa,GAAG,CAACmC,QAAQ,CAAC,CAAC,EAAAtB,QAAA,CAAAqB,EAAK,CAAC;UAAA,MAAArB,QAAA,CAAAqB,EAAA;QAAA;QAAA;UAAA,OAAArB,QAAA,CAAAuB,IAAA;MAAA;IAAA,GAAArC,OAAA;EAAA,CAIzD;EAAA,OAAAN,QAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
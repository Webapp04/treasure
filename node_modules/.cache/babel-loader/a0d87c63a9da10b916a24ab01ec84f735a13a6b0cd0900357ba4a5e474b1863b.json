{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { WantListEntry as Entry } from './entry.js';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { Message } from '../message/message.js';\nimport { trackedMap } from '@libp2p/tracked-map';\nvar WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n};\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nvar sortBy = function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nexport var Wantlist = /*#__PURE__*/function () {\n  /**\n   * @param {import('../stats').Stats} [stats]\n   * @param {import('libp2p').Libp2p} [libp2p]\n   */\n  function Wantlist(stats, libp2p) {\n    _classCallCheck(this, Wantlist);\n    /** @type {Map<string, Entry>} */\n    this.set = libp2p ? trackedMap({\n      system: 'ipfs',\n      component: 'bitswap',\n      metric: 'wantlist',\n      metrics: libp2p.metrics\n    }) : new Map();\n    this._stats = stats;\n  }\n  _createClass(Wantlist, [{\n    key: \"length\",\n    get: function get() {\n      return this.set.size;\n    }\n\n    /**\n     * @param {CID} cid\n     * @param {number} priority\n     * @param {import('../message/message').Message.Wantlist.WantType} wantType\n     */\n  }, {\n    key: \"add\",\n    value: function add(cid, priority, wantType) {\n      var cidStr = cid.toString(base58btc);\n      var entry = this.set.get(cidStr);\n      if (entry) {\n        entry.inc();\n        entry.priority = priority;\n\n        // We can only overwrite want-have with want-block\n        if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n          entry.wantType = wantType;\n        }\n      } else {\n        this.set.set(cidStr, new Entry(cid, priority, wantType));\n        if (this._stats) {\n          this._stats.push(null, 'wantListSize', 1);\n        }\n      }\n    }\n\n    /**\n     * @param {CID} cid\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(cid) {\n      var cidStr = cid.toString(base58btc);\n      var entry = this.set.get(cidStr);\n      if (!entry) {\n        return;\n      }\n      entry.dec();\n\n      // only delete when no refs are held\n      if (entry.hasRefs()) {\n        return;\n      }\n      this.set.delete(cidStr);\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', -1);\n      }\n    }\n\n    /**\n     * @param {string} cidStr\n     */\n  }, {\n    key: \"removeForce\",\n    value: function removeForce(cidStr) {\n      if (this.set.has(cidStr)) {\n        this.set.delete(cidStr);\n      }\n    }\n\n    /**\n     * @param {(entry:Entry, key:string) => void} fn\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      return this.set.forEach(fn);\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return this.set.entries();\n    }\n  }, {\n    key: \"sortedEntries\",\n    value: function sortedEntries() {\n      // TODO: Figure out if this is an actual bug.\n      // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n      return new Map(sortBy(function (o) {\n        return o[1].key;\n      }, Array.from(this.set.entries())));\n    }\n\n    /**\n     * @param {CID} cid\n     */\n  }, {\n    key: \"contains\",\n    value: function contains(cid) {\n      var cidStr = cid.toString(base58btc);\n      return this.set.has(cidStr);\n    }\n\n    /**\n     * @param {CID} cid\n     */\n  }, {\n    key: \"get\",\n    value: function get(cid) {\n      var cidStr = cid.toString(base58btc);\n      return this.set.get(cidStr);\n    }\n  }]);\n  return Wantlist;\n}();\nWantlist.Entry = Entry;","map":{"version":3,"names":["WantListEntry","Entry","base58btc","Message","trackedMap","WantType","Block","Wantlist","Have","sortBy","fn","list","Array","prototype","slice","call","sort","a","b","aa","bb","stats","libp2p","_classCallCheck","set","system","component","metric","metrics","Map","_stats","_createClass","key","get","size","value","add","cid","priority","wantType","cidStr","toString","entry","inc","push","remove","dec","hasRefs","delete","removeForce","has","forEach","entries","sortedEntries","o","from","contains"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-bitswap/src/wantlist/index.js"],"sourcesContent":["\nimport { WantListEntry as Entry } from './entry.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { Message } from '../message/message.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\nconst WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class Wantlist {\n  /**\n   * @param {import('../stats').Stats} [stats]\n   * @param {import('libp2p').Libp2p} [libp2p]\n   */\n  constructor (stats, libp2p) {\n    /** @type {Map<string, Entry>} */\n    this.set = libp2p\n      ? trackedMap({\n        system: 'ipfs',\n        component: 'bitswap',\n        metric: 'wantlist',\n        metrics: libp2p.metrics\n      })\n      : new Map()\n    this._stats = stats\n  }\n\n  get length () {\n    return this.set.size\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  add (cid, priority, wantType) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (entry) {\n      entry.inc()\n      entry.priority = priority\n\n      // We can only overwrite want-have with want-block\n      if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType))\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1)\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  remove (cid) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (!entry) {\n      return\n    }\n\n    entry.dec()\n\n    // only delete when no refs are held\n    if (entry.hasRefs()) {\n      return\n    }\n\n    this.set.delete(cidStr)\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1)\n    }\n  }\n\n  /**\n   * @param {string} cidStr\n   */\n  removeForce (cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr)\n    }\n  }\n\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n  forEach (fn) {\n    return this.set.forEach(fn)\n  }\n\n  entries () {\n    return this.set.entries()\n  }\n\n  sortedEntries () {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  contains (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.has(cidStr)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  get (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.get(cidStr)\n  }\n}\n\nWantlist.Entry = Entry\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { MFS_ROOT_KEY } from '../../../utils.js';\nvar log = logger('ipfs:mfs:utils:with-mfs-root');\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport function loadMfsRoot(_x, _x2) {\n  return _loadMfsRoot.apply(this, arguments);\n}\nfunction _loadMfsRoot() {\n  _loadMfsRoot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, options) {\n    var cid, buf, _buf, hash;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(options && options.signal && options.signal.aborted)) {\n            _context.next = 2;\n            break;\n          }\n          throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n            name: 'Aborted'\n          });\n        case 2:\n          _context.next = 4;\n          return context.repo.datastore.open();\n        case 4:\n          _context.prev = 4;\n          _context.next = 7;\n          return context.repo.datastore.get(MFS_ROOT_KEY);\n        case 7:\n          buf = _context.sent;\n          cid = CID.decode(buf);\n          _context.next = 27;\n          break;\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](4);\n          if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {\n            _context.next = 15;\n            break;\n          }\n          throw _context.t0;\n        case 15:\n          log('Creating new MFS root');\n          _buf = dagPB.encode({\n            Data: new UnixFS({\n              type: 'directory'\n            }).marshal(),\n            Links: []\n          });\n          _context.next = 19;\n          return sha256.digest(_buf);\n        case 19:\n          hash = _context.sent;\n          cid = CID.createV0(hash);\n          _context.next = 23;\n          return context.repo.blocks.put(cid, _buf);\n        case 23:\n          if (!(options && options.signal && options.signal.aborted)) {\n            _context.next = 25;\n            break;\n          }\n          throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n            name: 'Aborted'\n          });\n        case 25:\n          _context.next = 27;\n          return context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n        case 27:\n          log(\"Loaded MFS root /ipfs/\".concat(cid));\n          return _context.abrupt(\"return\", cid);\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[4, 11]]);\n  }));\n  return _loadMfsRoot.apply(this, arguments);\n}","map":{"version":3,"names":["CID","UnixFS","dagPB","sha256","logger","errCode","MFS_ROOT_KEY","log","loadMfsRoot","_x","_x2","_loadMfsRoot","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","options","cid","buf","_buf","hash","wrap","_callee$","_context","prev","next","signal","aborted","Error","name","repo","datastore","open","get","sent","decode","t0","code","encode","Data","type","marshal","Links","digest","createV0","blocks","put","bytes","concat","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { MFS_ROOT_KEY } from '../../../utils.js'\n\nconst log = logger('ipfs:mfs:utils:with-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function loadMfsRoot (context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPB.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
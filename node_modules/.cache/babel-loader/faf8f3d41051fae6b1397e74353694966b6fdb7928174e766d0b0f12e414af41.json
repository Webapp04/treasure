{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri';\nimport { logger } from '@libp2p/logger';\nimport shuffle from 'array-shuffle';\nimport { preload } from 'ipfs-core-config/preload';\nimport hashlru from 'hashlru';\nvar log = logger('ipfs:preload');\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nexport function createPreloader() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n  options.cache = options.cache || 1000;\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n    var _api = function _api() {};\n    return Object.assign(_api, {\n      start: function start() {},\n      stop: function stop() {}\n    });\n  }\n  var stopped = true;\n  /** @type {AbortController[]} */\n  var requests = [];\n  var apiUris = options.addresses.map(function (str) {\n    return multiaddrToUri(str);\n  });\n\n  // Avoid preloading the same CID over and over again\n  var cache = hashlru(options.cache);\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  var api = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var path, fallbackApiUris, success, now, _iterator, _step, _loop;\n      return _regeneratorRuntime().wrap(function _callee$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            if (!stopped) {\n              _context2.next = 3;\n              break;\n            }\n            throw new Error(\"preload \".concat(cid, \" but preloader is not started\"));\n          case 3:\n            path = cid.toString();\n            if (!cache.has(path)) {\n              _context2.next = 6;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 6:\n            // make sure we don't preload this again any time soon\n            cache.set(path, true);\n            fallbackApiUris = shuffle(apiUris);\n            success = false;\n            now = Date.now();\n            _iterator = _createForOfIteratorHelper(fallbackApiUris);\n            _context2.prev = 11;\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n              var uri, controller;\n              return _regeneratorRuntime().wrap(function _loop$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    uri = _step.value;\n                    if (!stopped) {\n                      _context.next = 3;\n                      break;\n                    }\n                    throw new Error(\"preload aborted for \".concat(path));\n                  case 3:\n                    _context.prev = 3;\n                    controller = new AbortController();\n                    requests = requests.concat(controller);\n                    _context.next = 8;\n                    return preload(\"\".concat(uri, \"/api/v0/refs?r=true&arg=\").concat(encodeURIComponent(path)), {\n                      signal: controller.signal\n                    });\n                  case 8:\n                    success = true;\n                    _context.next = 14;\n                    break;\n                  case 11:\n                    _context.prev = 11;\n                    _context.t0 = _context[\"catch\"](3);\n                    if (_context.t0.type !== 'aborted') log.error(_context.t0);\n                  case 14:\n                    _context.prev = 14;\n                    requests = requests.filter(function (r) {\n                      return r !== controller;\n                    });\n                    return _context.finish(14);\n                  case 17:\n                    if (!success) {\n                      _context.next = 19;\n                      break;\n                    }\n                    return _context.abrupt(\"return\", 1);\n                  case 19:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _loop, null, [[3, 11, 14, 17]]);\n            });\n            _iterator.s();\n          case 14:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 20;\n              break;\n            }\n            return _context2.delegateYield(_loop(), \"t0\", 16);\n          case 16:\n            if (!_context2.t0) {\n              _context2.next = 18;\n              break;\n            }\n            return _context2.abrupt(\"break\", 20);\n          case 18:\n            _context2.next = 14;\n            break;\n          case 20:\n            _context2.next = 25;\n            break;\n          case 22:\n            _context2.prev = 22;\n            _context2.t1 = _context2[\"catch\"](11);\n            _iterator.e(_context2.t1);\n          case 25:\n            _context2.prev = 25;\n            _iterator.f();\n            return _context2.finish(25);\n          case 28:\n            log(\"\".concat(success ? '' : 'un', \"successfully preloaded \").concat(path, \" in \").concat(Date.now() - now, \"ms\"));\n            _context2.next = 34;\n            break;\n          case 31:\n            _context2.prev = 31;\n            _context2.t2 = _context2[\"catch\"](0);\n            log.error(_context2.t2);\n          case 34:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee, null, [[0, 31], [11, 22, 25, 28]]);\n    }));\n    return function api(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * @returns {void}\n   */\n  api.start = function () {\n    stopped = false;\n  };\n\n  /**\n   * @returns {void}\n   */\n  api.stop = function () {\n    stopped = true;\n    log(\"aborting \".concat(requests.length, \" pending preload request(s)\"));\n    requests.forEach(function (r) {\n      return r.abort();\n    });\n    requests = [];\n  };\n  return api;\n}","map":{"version":3,"names":["multiaddrToUri","logger","shuffle","preload","hashlru","log","createPreloader","options","arguments","length","undefined","enabled","Boolean","addresses","cache","api","Object","assign","start","stop","stopped","requests","apiUris","map","str","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cid","path","fallbackApiUris","success","now","_iterator","_step","_loop","wrap","_callee$","_context2","prev","next","Error","concat","toString","has","abrupt","set","Date","_createForOfIteratorHelper","uri","controller","_loop$","_context","value","AbortController","encodeURIComponent","signal","t0","type","error","filter","r","finish","s","n","done","delegateYield","t1","e","f","t2","_x","apply","forEach","abort"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/preload.js"],"sourcesContent":["import { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\nimport { logger } from '@libp2p/logger'\nimport shuffle from 'array-shuffle'\nimport { preload } from 'ipfs-core-config/preload'\nimport hashlru from 'hashlru'\n\nconst log = logger('ipfs:preload')\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nexport function createPreloader (options = {}) {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  /** @type {AbortController[]} */\n  let requests = []\n  const apiUris = options.addresses.map((str) => multiaddrToUri(str))\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`)\n      }\n\n      const path = cid.toString()\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        /** @type {AbortController} */\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (/** @type {any} */ err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
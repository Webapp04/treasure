{"ast":null,"code":"'use strict';\n\n// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,\n// which means the maximum amount of bits we can store inside each byte\n// is 7..\nvar _classCallCheck = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar BITS_PER_BYTE = 7;\nmodule.exports = /*#__PURE__*/function () {\n  function SparseArray() {\n    _classCallCheck(this, SparseArray);\n    this._bitArrays = [];\n    this._data = [];\n    this._length = 0;\n    this._changedLength = false;\n    this._changedData = false;\n  }\n  _createClass(SparseArray, [{\n    key: \"set\",\n    value: function set(index, value) {\n      var pos = this._internalPositionFor(index, false);\n      if (value === undefined) {\n        // unsetting\n        if (pos !== -1) {\n          // remove item from bit array and array itself\n          this._unsetInternalPos(pos);\n          this._unsetBit(index);\n          this._changedLength = true;\n          this._changedData = true;\n        }\n      } else {\n        var needsSort = false;\n        if (pos === -1) {\n          pos = this._data.length;\n          this._setBit(index);\n          this._changedData = true;\n        } else {\n          needsSort = true;\n        }\n        this._setInternalPos(pos, index, value, needsSort);\n        this._changedLength = true;\n      }\n    }\n  }, {\n    key: \"unset\",\n    value: function unset(index) {\n      this.set(index, undefined);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      this._sortData();\n      var pos = this._internalPositionFor(index, true);\n      if (pos === -1) {\n        return undefined;\n      }\n      return this._data[pos][1];\n    }\n  }, {\n    key: \"push\",\n    value: function push(value) {\n      this.set(this.length, value);\n      return this.length;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._sortData();\n      if (this._changedLength) {\n        var last = this._data[this._data.length - 1];\n        this._length = last ? last[0] + 1 : 0;\n        this._changedLength = false;\n      }\n      return this._length;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(iterator) {\n      var i = 0;\n      while (i < this.length) {\n        iterator(this.get(i), i, this);\n        i++;\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(iterator) {\n      var i = 0;\n      var mapped = new Array(this.length);\n      while (i < this.length) {\n        mapped[i] = iterator(this.get(i), i, this);\n        i++;\n      }\n      return mapped;\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(reducer, initialValue) {\n      var i = 0;\n      var acc = initialValue;\n      while (i < this.length) {\n        var value = this.get(i);\n        acc = reducer(acc, value, i);\n        i++;\n      }\n      return acc;\n    }\n  }, {\n    key: \"find\",\n    value: function find(finder) {\n      var i = 0,\n        found,\n        last;\n      while (i < this.length && !found) {\n        last = this.get(i);\n        found = finder(last);\n        i++;\n      }\n      return found ? last : undefined;\n    }\n  }, {\n    key: \"_internalPositionFor\",\n    value: function _internalPositionFor(index, noCreate) {\n      var bytePos = this._bytePosFor(index, noCreate);\n      if (bytePos >= this._bitArrays.length) {\n        return -1;\n      }\n      var byte = this._bitArrays[bytePos];\n      var bitPos = index - bytePos * BITS_PER_BYTE;\n      var exists = (byte & 1 << bitPos) > 0;\n      if (!exists) {\n        return -1;\n      }\n      var previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);\n      var mask = ~(0xffffffff << bitPos + 1);\n      var bytePopCount = popCount(byte & mask);\n      var arrayPos = previousPopCount + bytePopCount - 1;\n      return arrayPos;\n    }\n  }, {\n    key: \"_bytePosFor\",\n    value: function _bytePosFor(index, noCreate) {\n      var bytePos = Math.floor(index / BITS_PER_BYTE);\n      var targetLength = bytePos + 1;\n      while (!noCreate && this._bitArrays.length < targetLength) {\n        this._bitArrays.push(0);\n      }\n      return bytePos;\n    }\n  }, {\n    key: \"_setBit\",\n    value: function _setBit(index) {\n      var bytePos = this._bytePosFor(index, false);\n      this._bitArrays[bytePos] |= 1 << index - bytePos * BITS_PER_BYTE;\n    }\n  }, {\n    key: \"_unsetBit\",\n    value: function _unsetBit(index) {\n      var bytePos = this._bytePosFor(index, false);\n      this._bitArrays[bytePos] &= ~(1 << index - bytePos * BITS_PER_BYTE);\n    }\n  }, {\n    key: \"_setInternalPos\",\n    value: function _setInternalPos(pos, index, value, needsSort) {\n      var data = this._data;\n      var elem = [index, value];\n      if (needsSort) {\n        this._sortData();\n        data[pos] = elem;\n      } else {\n        // new element. just shove it into the array\n        // but be nice about where we shove it\n        // in order to make sorting it later easier\n        if (data.length) {\n          if (data[data.length - 1][0] >= index) {\n            data.push(elem);\n          } else if (data[0][0] <= index) {\n            data.unshift(elem);\n          } else {\n            var randomIndex = Math.round(data.length / 2);\n            this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));\n          }\n        } else {\n          this._data.push(elem);\n        }\n        this._changedData = true;\n        this._changedLength = true;\n      }\n    }\n  }, {\n    key: \"_unsetInternalPos\",\n    value: function _unsetInternalPos(pos) {\n      this._data.splice(pos, 1);\n    }\n  }, {\n    key: \"_sortData\",\n    value: function _sortData() {\n      if (this._changedData) {\n        this._data.sort(sortInternal);\n      }\n      this._changedData = false;\n    }\n  }, {\n    key: \"bitField\",\n    value: function bitField() {\n      var bytes = [];\n      var pendingBitsForResultingByte = 8;\n      var pendingBitsForNewByte = 0;\n      var resultingByte = 0;\n      var newByte;\n      var pending = this._bitArrays.slice();\n      while (pending.length || pendingBitsForNewByte) {\n        if (pendingBitsForNewByte === 0) {\n          newByte = pending.shift();\n          pendingBitsForNewByte = 7;\n        }\n        var usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);\n        var mask = ~(255 << usingBits);\n        var masked = newByte & mask;\n        resultingByte |= masked << 8 - pendingBitsForResultingByte;\n        newByte = newByte >>> usingBits;\n        pendingBitsForNewByte -= usingBits;\n        pendingBitsForResultingByte -= usingBits;\n        if (!pendingBitsForResultingByte || !pendingBitsForNewByte && !pending.length) {\n          bytes.push(resultingByte);\n          resultingByte = 0;\n          pendingBitsForResultingByte = 8;\n        }\n      }\n\n      // remove trailing zeroes\n      for (var i = bytes.length - 1; i > 0; i--) {\n        var value = bytes[i];\n        if (value === 0) {\n          bytes.pop();\n        } else {\n          break;\n        }\n      }\n      return bytes;\n    }\n  }, {\n    key: \"compactArray\",\n    value: function compactArray() {\n      this._sortData();\n      return this._data.map(valueOnly);\n    }\n  }]);\n  return SparseArray;\n}();\nfunction popCountReduce(count, byte) {\n  return count + popCount(byte);\n}\nfunction popCount(_v) {\n  var v = _v;\n  v = v - (v >> 1 & 0x55555555); // reuse input as temporary\n  v = (v & 0x33333333) + (v >> 2 & 0x33333333); // temp\n  return (v + (v >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;\n}\nfunction sortInternal(a, b) {\n  return a[0] - b[0];\n}\nfunction valueOnly(elem) {\n  return elem[1];\n}","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","BITS_PER_BYTE","module","exports","SparseArray","_bitArrays","_data","_length","_changedLength","_changedData","key","value","set","index","pos","_internalPositionFor","undefined","_unsetInternalPos","_unsetBit","needsSort","length","_setBit","_setInternalPos","unset","get","_sortData","push","last","forEach","iterator","i","map","mapped","Array","reduce","reducer","initialValue","acc","find","finder","found","noCreate","bytePos","_bytePosFor","byte","bitPos","exists","previousPopCount","slice","popCountReduce","mask","bytePopCount","popCount","arrayPos","Math","floor","targetLength","data","elem","unshift","randomIndex","round","concat","splice","sort","sortInternal","bitField","bytes","pendingBitsForResultingByte","pendingBitsForNewByte","resultingByte","newByte","pending","shift","usingBits","min","masked","pop","compactArray","valueOnly","count","_v","v","a","b"],"sources":["/Users/apple/Documents/treasure/node_modules/sparse-array/index.js"],"sourcesContent":["'use strict'\n\n// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,\n// which means the maximum amount of bits we can store inside each byte\n// is 7..\nconst BITS_PER_BYTE = 7\n\nmodule.exports = class SparseArray {\n  constructor () {\n    this._bitArrays = []\n    this._data = []\n    this._length = 0\n    this._changedLength = false\n    this._changedData = false\n  }\n\n  set (index, value) {\n    let pos = this._internalPositionFor(index, false)\n    if (value === undefined) {\n      // unsetting\n      if (pos !== -1) {\n        // remove item from bit array and array itself\n        this._unsetInternalPos(pos)\n        this._unsetBit(index)\n        this._changedLength = true\n        this._changedData = true\n      }\n    } else {\n      let needsSort = false\n      if (pos === -1) {\n        pos = this._data.length\n        this._setBit(index)\n        this._changedData = true\n      } else {\n        needsSort = true\n      }\n      this._setInternalPos(pos, index, value, needsSort)\n      this._changedLength = true\n    }\n  }\n\n  unset (index) {\n    this.set(index, undefined)\n  }\n\n  get (index) {\n    this._sortData()\n    const pos = this._internalPositionFor(index, true)\n    if (pos === -1) {\n      return undefined\n    }\n    return this._data[pos][1]\n  }\n\n  push (value) {\n    this.set(this.length, value)\n    return this.length\n  }\n\n  get length () {\n    this._sortData()\n    if (this._changedLength) {\n      const last = this._data[this._data.length - 1]\n      this._length = last ? last[0] + 1 : 0\n      this._changedLength = false\n    }\n    return this._length\n  }\n\n  forEach (iterator) {\n    let i = 0\n    while(i < this.length) {\n      iterator(this.get(i), i, this)\n      i++\n    }\n  }\n\n  map (iterator) {\n    let i = 0\n    let mapped = new Array(this.length)\n    while(i < this.length) {\n      mapped[i] = iterator(this.get(i), i, this)\n      i++\n    }\n    return mapped\n  }\n\n  reduce (reducer, initialValue) {\n    let i = 0\n    let acc = initialValue\n    while(i < this.length) {\n      const value = this.get(i)\n      acc = reducer(acc, value, i)\n      i++\n    }\n    return acc\n  }\n\n  find (finder) {\n    let i = 0, found, last\n    while ((i < this.length) && !found) {\n      last = this.get(i)\n      found = finder(last)\n      i++\n    }\n    return found ? last : undefined\n  }\n\n  _internalPositionFor (index, noCreate) {\n    const bytePos = this._bytePosFor(index, noCreate)\n    if (bytePos >= this._bitArrays.length) {\n      return -1\n    }\n    const byte = this._bitArrays[bytePos]\n    const bitPos = index - bytePos * BITS_PER_BYTE\n    const exists = (byte & (1 << bitPos)) > 0\n    if (!exists) {\n      return -1\n    }\n    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0)\n\n    const mask = ~(0xffffffff << (bitPos + 1))\n    const bytePopCount = popCount(byte & mask)\n    const arrayPos = previousPopCount + bytePopCount - 1\n    return arrayPos\n  }\n\n  _bytePosFor (index, noCreate) {\n    const bytePos = Math.floor(index / BITS_PER_BYTE)\n    const targetLength = bytePos + 1\n    while (!noCreate && this._bitArrays.length < targetLength) {\n      this._bitArrays.push(0)\n    }\n    return bytePos\n  }\n\n  _setBit (index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] |= (1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _unsetBit(index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] &= ~(1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _setInternalPos(pos, index, value, needsSort) {\n    const data =this._data\n    const elem = [index, value]\n    if (needsSort) {\n      this._sortData()\n      data[pos] = elem\n    } else {\n      // new element. just shove it into the array\n      // but be nice about where we shove it\n      // in order to make sorting it later easier\n      if (data.length) {\n        if (data[data.length - 1][0] >= index) {\n          data.push(elem)\n        } else if (data[0][0] <= index) {\n          data.unshift(elem)\n        } else {\n          const randomIndex = Math.round(data.length / 2)\n          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex))\n        }\n      } else {\n        this._data.push(elem)\n      }\n      this._changedData = true\n      this._changedLength = true\n    }\n  }\n\n  _unsetInternalPos (pos) {\n    this._data.splice(pos, 1)\n  }\n\n  _sortData () {\n    if (this._changedData) {\n      this._data.sort(sortInternal)\n    }\n\n    this._changedData = false\n  }\n\n  bitField () {\n    const bytes = []\n    let pendingBitsForResultingByte = 8\n    let pendingBitsForNewByte = 0\n    let resultingByte = 0\n    let newByte\n    const pending = this._bitArrays.slice()\n    while (pending.length || pendingBitsForNewByte) {\n      if (pendingBitsForNewByte === 0) {\n        newByte = pending.shift()\n        pendingBitsForNewByte = 7\n      }\n\n      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte)\n      const mask = ~(0b11111111 << usingBits)\n      const masked = newByte & mask\n      resultingByte |= masked << (8 - pendingBitsForResultingByte)\n      newByte = newByte >>> usingBits\n      pendingBitsForNewByte -= usingBits\n      pendingBitsForResultingByte -= usingBits\n\n      if (!pendingBitsForResultingByte || (!pendingBitsForNewByte && !pending.length)) {\n        bytes.push(resultingByte)\n        resultingByte = 0\n        pendingBitsForResultingByte = 8\n      }\n    }\n\n    // remove trailing zeroes\n    for(var i = bytes.length - 1; i > 0; i--) {\n      const value = bytes[i]\n      if (value === 0) {\n        bytes.pop()\n      } else {\n        break\n      }\n    }\n\n    return bytes\n  }\n\n  compactArray () {\n    this._sortData()\n    return this._data.map(valueOnly)\n  }\n}\n\nfunction popCountReduce (count, byte) {\n  return count + popCount(byte)\n}\n\nfunction popCount(_v) {\n  let v = _v\n  v = v - ((v >> 1) & 0x55555555)                    // reuse input as temporary\n  v = (v & 0x33333333) + ((v >> 2) & 0x33333333)     // temp\n  return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\nfunction sortInternal (a, b) {\n  return a[0] - b[0]\n}\n\nfunction valueOnly (elem) {\n  return elem[1]\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport findShardCid from '../../utils/find-cid-in-shard.js';\nimport { decode } from '@ipld/dag-pb';\nimport contentFile from './content/file.js';\nimport contentDirectory from './content/directory.js';\nimport contentHamtShardedDirectory from './content/hamt-sharded-directory.js';\n\n/**\n * @typedef {import('../../types').Resolve} Resolve\n * @typedef {import('../../types').Resolver} Resolver\n * @typedef {import('../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @param {PBNode} node\n * @param {string} name\n */\nvar findLinkCid = function findLinkCid(node, name) {\n  var link = node.Links.find(function (link) {\n    return link.Name === name;\n  });\n  return link && link.Hash;\n};\n\n/**\n * @type {{ [key: string]: UnixfsV1Resolver }}\n */\nvar contentExporters = {\n  raw: contentFile,\n  file: contentFile,\n  directory: contentDirectory,\n  'hamt-sharded-directory': contentHamtShardedDirectory,\n  metadata: function metadata(cid, node, unixfs, path, resolve, depth, blockstore) {\n    return function () {\n      return [];\n    };\n  },\n  symlink: function symlink(cid, node, unixfs, path, resolve, depth, blockstore) {\n    return function () {\n      return [];\n    };\n  }\n};\n\n/**\n * @type {Resolver}\n */\nvar unixFsResolver = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, name, path, toResolve, resolve, depth, blockstore, options) {\n    var block, node, unixfs, next, linkCid, nextName, nextPath;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return blockstore.get(cid, options);\n        case 2:\n          block = _context.sent;\n          node = decode(block);\n          if (!name) {\n            name = cid.toString();\n          }\n          if (!(node.Data == null)) {\n            _context.next = 7;\n            break;\n          }\n          throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n        case 7:\n          _context.prev = 7;\n          unixfs = UnixFS.unmarshal(node.Data);\n          _context.next = 14;\n          break;\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](7);\n          throw errCode(_context.t0, 'ERR_NOT_UNIXFS');\n        case 14:\n          if (!path) {\n            path = name;\n          }\n          if (!toResolve.length) {\n            _context.next = 28;\n            break;\n          }\n          if (!(unixfs && unixfs.type === 'hamt-sharded-directory')) {\n            _context.next = 22;\n            break;\n          }\n          _context.next = 19;\n          return findShardCid(node, toResolve[0], blockstore);\n        case 19:\n          linkCid = _context.sent;\n          _context.next = 23;\n          break;\n        case 22:\n          linkCid = findLinkCid(node, toResolve[0]);\n        case 23:\n          if (linkCid) {\n            _context.next = 25;\n            break;\n          }\n          throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND');\n        case 25:\n          // remove the path component we have resolved\n          nextName = toResolve.shift();\n          nextPath = \"\".concat(path, \"/\").concat(nextName);\n          next = {\n            cid: linkCid,\n            toResolve: toResolve,\n            name: nextName || '',\n            path: nextPath\n          };\n        case 28:\n          return _context.abrupt(\"return\", {\n            entry: {\n              type: unixfs.isDirectory() ? 'directory' : 'file',\n              name: name,\n              path: path,\n              cid: cid,\n              // @ts-ignore\n              content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n              unixfs: unixfs,\n              depth: depth,\n              node: node,\n              size: unixfs.fileSize()\n            },\n            next: next\n          });\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[7, 11]]);\n  }));\n  return function unixFsResolver(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default unixFsResolver;","map":{"version":3,"names":["errCode","UnixFS","findShardCid","decode","contentFile","contentDirectory","contentHamtShardedDirectory","findLinkCid","node","name","link","Links","find","Name","Hash","contentExporters","raw","file","directory","metadata","cid","unixfs","path","resolve","depth","blockstore","symlink","unixFsResolver","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","toResolve","options","block","next","linkCid","nextName","nextPath","wrap","_callee$","_context","prev","get","sent","toString","Data","Error","unmarshal","t0","length","type","shift","concat","abrupt","entry","isDirectory","content","size","fileSize","stop","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","apply","arguments"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/index.js"],"sourcesContent":["import errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport findShardCid from '../../utils/find-cid-in-shard.js'\nimport { decode } from '@ipld/dag-pb'\n\nimport contentFile from './content/file.js'\nimport contentDirectory from './content/directory.js'\nimport contentHamtShardedDirectory from './content/hamt-sharded-directory.js'\n\n/**\n * @typedef {import('../../types').Resolve} Resolve\n * @typedef {import('../../types').Resolver} Resolver\n * @typedef {import('../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @param {PBNode} node\n * @param {string} name\n */\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name)\n\n  return link && link.Hash\n}\n\n/**\n * @type {{ [key: string]: UnixfsV1Resolver }}\n */\nconst contentExporters = {\n  raw: contentFile,\n  file: contentFile,\n  directory: contentDirectory,\n  'hamt-sharded-directory': contentHamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  }\n}\n\n/**\n * @type {Resolver}\n */\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options)\n  const node = decode(block)\n  let unixfs\n  let next\n\n  if (!name) {\n    name = cid.toString()\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  try {\n    unixfs = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    // non-UnixFS dag-pb node? It could happen.\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  if (!path) {\n    path = name\n  }\n\n  if (toResolve.length) {\n    let linkCid\n\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      // special case - unixfs v1 hamt shards\n      linkCid = await findShardCid(node, toResolve[0], blockstore)\n    } else {\n      linkCid = findLinkCid(node, toResolve[0])\n    }\n\n    if (!linkCid) {\n      throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND')\n    }\n\n    // remove the path component we have resolved\n    const nextName = toResolve.shift()\n    const nextPath = `${path}/${nextName}`\n\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    }\n  }\n\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      // @ts-ignore\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  }\n}\n\nexport default unixFsResolver\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { logger } from '@libp2p/logger';\nimport { MFS_ROOT_KEY } from '../../../utils.js';\nimport errCode from 'err-code';\nvar log = logger('ipfs:mfs:utils:update-mfs-root');\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function updateMfsRoot(_x, _x2, _x3) {\n  return _updateMfsRoot.apply(this, arguments);\n}\nfunction _updateMfsRoot() {\n  _updateMfsRoot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, cid, options) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(options && options.signal && options.signal.aborted)) {\n            _context.next = 2;\n            break;\n          }\n          throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n            name: 'Aborted'\n          });\n        case 2:\n          log(\"New MFS root will be \".concat(cid));\n          _context.next = 5;\n          return context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n        case 5:\n          return _context.abrupt(\"return\", cid);\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _updateMfsRoot.apply(this, arguments);\n}","map":{"version":3,"names":["logger","MFS_ROOT_KEY","errCode","log","updateMfsRoot","_x","_x2","_x3","_updateMfsRoot","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","cid","options","wrap","_callee$","_context","prev","next","signal","aborted","Error","name","concat","repo","datastore","put","bytes","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/utils/update-mfs-root.js"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport {\n  MFS_ROOT_KEY\n} from '../../../utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:utils:update-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport async function updateMfsRoot (context, cid, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  log(`New MFS root will be ${cid}`)\n\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n\n  return cid\n}\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SACEC,YAAY,QACP,mBAAmB;AAC1B,OAAOC,OAAO,MAAM,UAAU;AAE9B,IAAMC,GAAG,GAAGH,MAAM,CAAC,gCAAgC,CAAC;;AAEpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAsBI,aAAaA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAUlC,SAAAF,eAAA;EAAAA,cAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAVM,SAAAC,QAA8BC,OAAO,EAAEC,GAAG,EAAEC,OAAO;IAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,MACpDL,OAAO,IAAIA,OAAO,CAACM,MAAM,IAAIN,OAAO,CAACM,MAAM,CAACC,OAAO;YAAAJ,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAC/CpB,OAAO,CAAC,IAAIuB,KAAK,CAAC,iBAAiB,CAAC,EAAE,aAAa,EAAE;YAAEC,IAAI,EAAE;UAAU,CAAC,CAAC;QAAA;UAGjFvB,GAAG,yBAAAwB,MAAA,CAAyBX,GAAG,CAAE,CAAC;UAAAI,QAAA,CAAAE,IAAA;UAAA,OAE5BP,OAAO,CAACa,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC7B,YAAY,EAAEe,GAAG,CAACe,KAAK,CAAC;QAAA;UAAA,OAAAX,QAAA,CAAAY,MAAA,WAElDhB,GAAG;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAAa,IAAA;MAAA;IAAA,GAAAnB,OAAA;EAAA,CACX;EAAA,OAAAN,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
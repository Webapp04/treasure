{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as crypto from './secp256k1.js';\nimport { exporter } from './exporter.js';\nimport * as keysProtobuf from './keys.js';\nexport var Secp256k1PublicKey = /*#__PURE__*/function () {\n  function Secp256k1PublicKey(key) {\n    _classCallCheck(this, Secp256k1PublicKey);\n    crypto.validatePublicKey(key);\n    this._key = key;\n  }\n  _createClass(Secp256k1PublicKey, [{\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, sig) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return crypto.hashAndVerify(this._key, sig, data);\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function verify(_x, _x2) {\n        return _verify.apply(this, arguments);\n      }\n      return verify;\n    }()\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.compressPublicKey(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      }).subarray();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$sha256$digest, bytes;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return sha256.digest(this.bytes);\n            case 2:\n              _yield$sha256$digest = _context2.sent;\n              bytes = _yield$sha256$digest.bytes;\n              return _context2.abrupt(\"return\", bytes);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function hash() {\n        return _hash.apply(this, arguments);\n      }\n      return hash;\n    }()\n  }]);\n  return Secp256k1PublicKey;\n}();\nexport var Secp256k1PrivateKey = /*#__PURE__*/function () {\n  function Secp256k1PrivateKey(key, publicKey) {\n    _classCallCheck(this, Secp256k1PrivateKey);\n    this._key = key;\n    this._publicKey = publicKey !== null && publicKey !== void 0 ? publicKey : crypto.computePublicKey(key);\n    crypto.validatePrivateKey(this._key);\n    crypto.validatePublicKey(this._publicKey);\n  }\n  _createClass(Secp256k1PrivateKey, [{\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(message) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return crypto.hashAndSign(this._key, message);\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function sign(_x3) {\n        return _sign.apply(this, arguments);\n      }\n      return sign;\n    }()\n  }, {\n    key: \"public\",\n    get: function get() {\n      return new Secp256k1PublicKey(this._publicKey);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return this._key;\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      }).subarray();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$sha256$digest2, bytes;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return sha256.digest(this.bytes);\n            case 2:\n              _yield$sha256$digest2 = _context4.sent;\n              bytes = _yield$sha256$digest2.bytes;\n              return _context4.abrupt(\"return\", bytes);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function hash() {\n        return _hash2.apply(this, arguments);\n      }\n      return hash;\n    }()\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n  }, {\n    key: \"id\",\n    value: function () {\n      var _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var hash;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.public.hash();\n            case 2:\n              hash = _context5.sent;\n              return _context5.abrupt(\"return\", uint8ArrayToString(hash, 'base58btc'));\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function id() {\n        return _id.apply(this, arguments);\n      }\n      return id;\n    }()\n    /**\n     * Exports the key into a password protected `format`\n     */\n  }, {\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(password) {\n        var format,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              format = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 'libp2p-key';\n              if (!(format === 'libp2p-key')) {\n                _context6.next = 7;\n                break;\n              }\n              _context6.next = 4;\n              return exporter(this.bytes, password);\n            case 4:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 7:\n              throw new CodeError(\"export format '\".concat(format, \"' is not supported\"), 'ERR_INVALID_EXPORT_FORMAT');\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _export(_x4) {\n        return _export2.apply(this, arguments);\n      }\n      return _export;\n    }()\n  }]);\n  return Secp256k1PrivateKey;\n}();\nexport function unmarshalSecp256k1PrivateKey(bytes) {\n  return new Secp256k1PrivateKey(bytes);\n}\nexport function unmarshalSecp256k1PublicKey(bytes) {\n  return new Secp256k1PublicKey(bytes);\n}\nexport function generateKeyPair() {\n  return _generateKeyPair.apply(this, arguments);\n}\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n    var privateKeyBytes;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return crypto.generateKey();\n        case 2:\n          privateKeyBytes = _context7.sent;\n          return _context7.abrupt(\"return\", new Secp256k1PrivateKey(privateKeyBytes));\n        case 4:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _generateKeyPair.apply(this, arguments);\n}","map":{"version":3,"names":["sha256","CodeError","equals","uint8ArrayEquals","toString","uint8ArrayToString","crypto","exporter","keysProtobuf","Secp256k1PublicKey","key","_classCallCheck","validatePublicKey","_key","_createClass","value","_verify","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","sig","wrap","_callee$","_context","prev","next","hashAndVerify","abrupt","sent","stop","verify","_x","_x2","apply","arguments","marshal","compressPublicKey","get","PublicKey","encode","Type","KeyType","Secp256k1","Data","subarray","bytes","_hash","_callee2","_yield$sha256$digest","_callee2$","_context2","digest","hash","Secp256k1PrivateKey","publicKey","_publicKey","computePublicKey","validatePrivateKey","_sign","_callee3","message","_callee3$","_context3","hashAndSign","sign","_x3","PrivateKey","_hash2","_callee4","_yield$sha256$digest2","_callee4$","_context4","_id","_callee5","_callee5$","_context5","public","id","_export2","_callee6","password","format","_args6","_callee6$","_context6","length","undefined","concat","_export","_x4","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","generateKeyPair","_generateKeyPair","_callee7","privateKeyBytes","_callee7$","_context7","generateKey"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/secp256k1-class.ts"],"sourcesContent":["import { sha256 } from 'multiformats/hashes/sha2'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as crypto from './secp256k1.js'\nimport { exporter } from './exporter.js'\nimport * as keysProtobuf from './keys.js'\n\nexport class Secp256k1PublicKey {\n  private readonly _key: Uint8Array\n\n  constructor (key: Uint8Array) {\n    crypto.validatePublicKey(key)\n    this._key = key\n  }\n\n  async verify (data: Uint8Array, sig: Uint8Array) {\n    return await crypto.hashAndVerify(this._key, sig, data)\n  }\n\n  marshal () {\n    return crypto.compressPublicKey(this._key)\n  }\n\n  get bytes () {\n    return keysProtobuf.PublicKey.encode({\n      Type: keysProtobuf.KeyType.Secp256k1,\n      Data: this.marshal()\n    }).subarray()\n  }\n\n  equals (key: any) {\n    return uint8ArrayEquals(this.bytes, key.bytes)\n  }\n\n  async hash () {\n    const { bytes } = await sha256.digest(this.bytes)\n\n    return bytes\n  }\n}\n\nexport class Secp256k1PrivateKey {\n  private readonly _key: Uint8Array\n  private readonly _publicKey: Uint8Array\n\n  constructor (key: Uint8Array, publicKey?: Uint8Array) {\n    this._key = key\n    this._publicKey = publicKey ?? crypto.computePublicKey(key)\n    crypto.validatePrivateKey(this._key)\n    crypto.validatePublicKey(this._publicKey)\n  }\n\n  async sign (message: Uint8Array) {\n    return await crypto.hashAndSign(this._key, message)\n  }\n\n  get public () {\n    return new Secp256k1PublicKey(this._publicKey)\n  }\n\n  marshal () {\n    return this._key\n  }\n\n  get bytes () {\n    return keysProtobuf.PrivateKey.encode({\n      Type: keysProtobuf.KeyType.Secp256k1,\n      Data: this.marshal()\n    }).subarray()\n  }\n\n  equals (key: any) {\n    return uint8ArrayEquals(this.bytes, key.bytes)\n  }\n\n  async hash () {\n    const { bytes } = await sha256.digest(this.bytes)\n\n    return bytes\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   */\n  async id () {\n    const hash = await this.public.hash()\n    return uint8ArrayToString(hash, 'base58btc')\n  }\n\n  /**\n   * Exports the key into a password protected `format`\n   */\n  async export (password: string, format = 'libp2p-key') { // eslint-disable-line require-await\n    if (format === 'libp2p-key') {\n      return await exporter(this.bytes, password)\n    } else {\n      throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT')\n    }\n  }\n}\n\nexport function unmarshalSecp256k1PrivateKey (bytes: Uint8Array) {\n  return new Secp256k1PrivateKey(bytes)\n}\n\nexport function unmarshalSecp256k1PublicKey (bytes: Uint8Array) {\n  return new Secp256k1PublicKey(bytes)\n}\n\nexport async function generateKeyPair () {\n  const privateKeyBytes = await crypto.generateKey()\n  return new Secp256k1PrivateKey(privateKeyBytes)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var empty = new Uint8Array(0);\n\n/**\n * @param {Uint8Array} d\n */\nvar toHex = function toHex(d) {\n  return d.reduce(function (hex, byte) {\n    return hex + byte.toString(16).padStart(2, '0');\n  }, '');\n};\n\n/**\n * @param {string} hex\n */\nvar fromHex = function fromHex(hex) {\n  var hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(function (b) {\n    return parseInt(b, 16);\n  })) : empty;\n};\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nvar equals = function equals(aa, bb) {\n  if (aa === bb) return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (var ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nvar coerce = function coerce(o) {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;\n  if (o instanceof ArrayBuffer) return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nvar isBinary = function isBinary(o) {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n};\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nvar fromString = function fromString(str) {\n  return new TextEncoder().encode(str);\n};\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nvar toString = function toString(b) {\n  return new TextDecoder().decode(b);\n};\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty };","map":{"version":3,"names":["empty","Uint8Array","toHex","d","reduce","hex","byte","toString","padStart","fromHex","hexes","match","map","b","parseInt","equals","aa","bb","byteLength","ii","coerce","o","constructor","name","ArrayBuffer","isView","buffer","byteOffset","Error","isBinary","fromString","str","TextEncoder","encode","TextDecoder","decode"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/peer-id/node_modules/multiformats/src/bytes.js"],"sourcesContent":["const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n"],"mappings":"AAAA,IAAMA,KAAK,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC;;AAE/B;AACA;AACA;AACA,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAGC,CAAC;EAAA,OAAIA,CAAC,CAACC,MAAM,CAAC,UAACC,GAAG,EAAEC,IAAI;IAAA,OAAKD,GAAG,GAAGC,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAAA,GAAE,EAAE,CAAC;AAAA;;AAExF;AACA;AACA;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAGJ,GAAG,EAAI;EACrB,IAAMK,KAAK,GAAGL,GAAG,CAACM,KAAK,CAAC,KAAK,CAAC;EAC9B,OAAOD,KAAK,GAAG,IAAIT,UAAU,CAACS,KAAK,CAACE,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIC,QAAQ,CAACD,CAAC,EAAE,EAAE,CAAC;EAAA,EAAC,CAAC,GAAGb,KAAK;AACxE,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAMe,MAAM,GAAG,SAATA,MAAMA,CAAIC,EAAE,EAAEC,EAAE,EAAK;EACzB,IAAID,EAAE,KAAKC,EAAE,EAAE,OAAO,IAAI;EAC1B,IAAID,EAAE,CAACE,UAAU,KAAKD,EAAE,CAACC,UAAU,EAAE;IACnC,OAAO,KAAK;EACd;EAEA,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGH,EAAE,CAACE,UAAU,EAAEC,EAAE,EAAE,EAAE;IACzC,IAAIH,EAAE,CAACG,EAAE,CAAC,KAAKF,EAAE,CAACE,EAAE,CAAC,EAAE;MACrB,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAGC,CAAC,EAAI;EAClB,IAAIA,CAAC,YAAYpB,UAAU,IAAIoB,CAAC,CAACC,WAAW,CAACC,IAAI,KAAK,YAAY,EAAE,OAAOF,CAAC;EAC5E,IAAIA,CAAC,YAAYG,WAAW,EAAE,OAAO,IAAIvB,UAAU,CAACoB,CAAC,CAAC;EACtD,IAAIG,WAAW,CAACC,MAAM,CAACJ,CAAC,CAAC,EAAE;IACzB,OAAO,IAAIpB,UAAU,CAACoB,CAAC,CAACK,MAAM,EAAEL,CAAC,CAACM,UAAU,EAAEN,CAAC,CAACH,UAAU,CAAC;EAC7D;EACA,MAAM,IAAIU,KAAK,CAAC,mCAAmC,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAGR,CAAC;EAAA,OAChBA,CAAC,YAAYG,WAAW,IAAIA,WAAW,CAACC,MAAM,CAACJ,CAAC,CAAC;AAAA;;AAEnD;AACA;AACA;AACA;AACA,IAAMS,UAAU,GAAG,SAAbA,UAAUA,CAAGC,GAAG;EAAA,OAAK,IAAIC,WAAW,CAAC,CAAC,CAAEC,MAAM,CAACF,GAAG,CAAC;AAAA;;AAEzD;AACA;AACA;AACA;AACA,IAAMxB,QAAQ,GAAG,SAAXA,QAAQA,CAAGM,CAAC;EAAA,OAAK,IAAIqB,WAAW,CAAC,CAAC,CAAEC,MAAM,CAACtB,CAAC,CAAC;AAAA;AAEnD,SAASE,MAAM,EAAEK,MAAM,EAAES,QAAQ,EAAEpB,OAAO,EAAEP,KAAK,EAAE4B,UAAU,EAAEvB,QAAQ,EAAEP,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}
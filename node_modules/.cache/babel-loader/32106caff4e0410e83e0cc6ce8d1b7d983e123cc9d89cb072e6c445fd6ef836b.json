{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { identity } from 'multiformats/hashes/identity';\nimport * as crypto from './ed25519.js';\nimport * as pbm from './keys.js';\nimport { exporter } from './exporter.js';\nexport var Ed25519PublicKey = /*#__PURE__*/function () {\n  function Ed25519PublicKey(key) {\n    _classCallCheck(this, Ed25519PublicKey);\n    this._key = ensureKey(key, crypto.publicKeyLength);\n  }\n  _createClass(Ed25519PublicKey, [{\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, sig) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return crypto.hashAndVerify(this._key, sig, data);\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function verify(_x, _x2) {\n        return _verify.apply(this, arguments);\n      }\n      return verify;\n    }()\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return this._key;\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PublicKey.encode({\n        Type: pbm.KeyType.Ed25519,\n        Data: this.marshal()\n      }).subarray();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$sha256$digest, bytes;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return sha256.digest(this.bytes);\n            case 2:\n              _yield$sha256$digest = _context2.sent;\n              bytes = _yield$sha256$digest.bytes;\n              return _context2.abrupt(\"return\", bytes);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function hash() {\n        return _hash.apply(this, arguments);\n      }\n      return hash;\n    }()\n  }]);\n  return Ed25519PublicKey;\n}();\nexport var Ed25519PrivateKey = /*#__PURE__*/function () {\n  // key       - 64 byte Uint8Array containing private key\n  // publicKey - 32 byte Uint8Array containing public key\n  function Ed25519PrivateKey(key, publicKey) {\n    _classCallCheck(this, Ed25519PrivateKey);\n    this._key = ensureKey(key, crypto.privateKeyLength);\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);\n  }\n  _createClass(Ed25519PrivateKey, [{\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(message) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return crypto.hashAndSign(this._key, message);\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function sign(_x3) {\n        return _sign.apply(this, arguments);\n      }\n      return sign;\n    }()\n  }, {\n    key: \"public\",\n    get: function get() {\n      return new Ed25519PublicKey(this._publicKey);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return this._key;\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PrivateKey.encode({\n        Type: pbm.KeyType.Ed25519,\n        Data: this.marshal()\n      }).subarray();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$sha256$digest2, bytes;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return sha256.digest(this.bytes);\n            case 2:\n              _yield$sha256$digest2 = _context4.sent;\n              bytes = _yield$sha256$digest2.bytes;\n              return _context4.abrupt(\"return\", bytes);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function hash() {\n        return _hash2.apply(this, arguments);\n      }\n      return hash;\n    }()\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the identity multihash containing its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<string>}\n     */\n  }, {\n    key: \"id\",\n    value: function () {\n      var _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var encoding;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return identity.digest(this.public.bytes);\n            case 2:\n              encoding = _context5.sent;\n              return _context5.abrupt(\"return\", base58btc.encode(encoding.bytes).substring(1));\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function id() {\n        return _id.apply(this, arguments);\n      }\n      return id;\n    }()\n    /**\n     * Exports the key into a password protected `format`\n     */\n  }, {\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(password) {\n        var format,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              format = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 'libp2p-key';\n              if (!(format === 'libp2p-key')) {\n                _context6.next = 7;\n                break;\n              }\n              _context6.next = 4;\n              return exporter(this.bytes, password);\n            case 4:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 7:\n              throw new CodeError(\"export format '\".concat(format, \"' is not supported\"), 'ERR_INVALID_EXPORT_FORMAT');\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _export(_x4) {\n        return _export2.apply(this, arguments);\n      }\n      return _export;\n    }()\n  }]);\n  return Ed25519PrivateKey;\n}();\nexport function unmarshalEd25519PrivateKey(bytes) {\n  // Try the old, redundant public key version\n  if (bytes.length > crypto.privateKeyLength) {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);\n    var _privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n    var _publicKeyBytes = bytes.subarray(crypto.privateKeyLength, bytes.length);\n    return new Ed25519PrivateKey(_privateKeyBytes, _publicKeyBytes);\n  }\n  bytes = ensureKey(bytes, crypto.privateKeyLength);\n  var privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n  var publicKeyBytes = bytes.subarray(crypto.publicKeyLength);\n  return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n}\nexport function unmarshalEd25519PublicKey(bytes) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength);\n  return new Ed25519PublicKey(bytes);\n}\nexport function generateKeyPair() {\n  return _generateKeyPair.apply(this, arguments);\n}\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n    var _yield$crypto$generat, privateKey, publicKey;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return crypto.generateKey();\n        case 2:\n          _yield$crypto$generat = _context7.sent;\n          privateKey = _yield$crypto$generat.privateKey;\n          publicKey = _yield$crypto$generat.publicKey;\n          return _context7.abrupt(\"return\", new Ed25519PrivateKey(privateKey, publicKey));\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _generateKeyPair.apply(this, arguments);\n}\nexport function generateKeyPairFromSeed(_x5) {\n  return _generateKeyPairFromSeed.apply(this, arguments);\n}\nfunction _generateKeyPairFromSeed() {\n  _generateKeyPairFromSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(seed) {\n    var _yield$crypto$generat2, privateKey, publicKey;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return crypto.generateKeyFromSeed(seed);\n        case 2:\n          _yield$crypto$generat2 = _context8.sent;\n          privateKey = _yield$crypto$generat2.privateKey;\n          publicKey = _yield$crypto$generat2.publicKey;\n          return _context8.abrupt(\"return\", new Ed25519PrivateKey(privateKey, publicKey));\n        case 6:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _generateKeyPairFromSeed.apply(this, arguments);\n}\nfunction ensureKey(key, length) {\n  var _key;\n  key = Uint8Array.from((_key = key) !== null && _key !== void 0 ? _key : []);\n  if (key.length !== length) {\n    throw new CodeError(\"Key must be a Uint8Array of length \".concat(length, \", got \").concat(key.length), 'ERR_INVALID_KEY_TYPE');\n  }\n  return key;\n}","map":{"version":3,"names":["CodeError","equals","uint8ArrayEquals","sha256","base58btc","identity","crypto","pbm","exporter","Ed25519PublicKey","key","_classCallCheck","_key","ensureKey","publicKeyLength","_createClass","value","_verify","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","sig","wrap","_callee$","_context","prev","next","hashAndVerify","abrupt","sent","stop","verify","_x","_x2","apply","arguments","marshal","get","PublicKey","encode","Type","KeyType","Ed25519","Data","subarray","bytes","_hash","_callee2","_yield$sha256$digest","_callee2$","_context2","digest","hash","Ed25519PrivateKey","publicKey","privateKeyLength","_publicKey","_sign","_callee3","message","_callee3$","_context3","hashAndSign","sign","_x3","PrivateKey","_hash2","_callee4","_yield$sha256$digest2","_callee4$","_context4","_id","_callee5","encoding","_callee5$","_context5","public","substring","id","_export2","_callee6","password","format","_args6","_callee6$","_context6","length","undefined","concat","_export","_x4","unmarshalEd25519PrivateKey","privateKeyBytes","publicKeyBytes","unmarshalEd25519PublicKey","generateKeyPair","_generateKeyPair","_callee7","_yield$crypto$generat","privateKey","_callee7$","_context7","generateKey","generateKeyPairFromSeed","_x5","_generateKeyPairFromSeed","_callee8","seed","_yield$crypto$generat2","_callee8$","_context8","generateKeyFromSeed","Uint8Array","from"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/ed25519-class.ts"],"sourcesContent":["import { CodeError } from '@libp2p/interfaces/errors'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { identity } from 'multiformats/hashes/identity'\nimport * as crypto from './ed25519.js'\nimport * as pbm from './keys.js'\nimport { exporter } from './exporter.js'\n\nexport class Ed25519PublicKey {\n  private readonly _key: Uint8Array\n\n  constructor (key: Uint8Array) {\n    this._key = ensureKey(key, crypto.publicKeyLength)\n  }\n\n  async verify (data: Uint8Array, sig: Uint8Array) { // eslint-disable-line require-await\n    return await crypto.hashAndVerify(this._key, sig, data)\n  }\n\n  marshal () {\n    return this._key\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    }).subarray()\n  }\n\n  equals (key: any) {\n    return uint8ArrayEquals(this.bytes, key.bytes)\n  }\n\n  async hash () {\n    const { bytes } = await sha256.digest(this.bytes)\n\n    return bytes\n  }\n}\n\nexport class Ed25519PrivateKey {\n  private readonly _key: Uint8Array\n  private readonly _publicKey: Uint8Array\n\n  // key       - 64 byte Uint8Array containing private key\n  // publicKey - 32 byte Uint8Array containing public key\n  constructor (key: Uint8Array, publicKey: Uint8Array) {\n    this._key = ensureKey(key, crypto.privateKeyLength)\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength)\n  }\n\n  async sign (message: Uint8Array) { // eslint-disable-line require-await\n    return await crypto.hashAndSign(this._key, message)\n  }\n\n  get public () {\n    return new Ed25519PublicKey(this._publicKey)\n  }\n\n  marshal () {\n    return this._key\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    }).subarray()\n  }\n\n  equals (key: any) {\n    return uint8ArrayEquals(this.bytes, key.bytes)\n  }\n\n  async hash () {\n    const { bytes } = await sha256.digest(this.bytes)\n\n    return bytes\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the identity multihash containing its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @returns {Promise<string>}\n   */\n  async id () {\n    const encoding = await identity.digest(this.public.bytes)\n    return base58btc.encode(encoding.bytes).substring(1)\n  }\n\n  /**\n   * Exports the key into a password protected `format`\n   */\n  async export (password: string, format = 'libp2p-key') { // eslint-disable-line require-await\n    if (format === 'libp2p-key') {\n      return await exporter(this.bytes, password)\n    } else {\n      throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT')\n    }\n  }\n}\n\nexport function unmarshalEd25519PrivateKey (bytes: Uint8Array) {\n  // Try the old, redundant public key version\n  if (bytes.length > crypto.privateKeyLength) {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength)\n    const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength)\n    const publicKeyBytes = bytes.subarray(crypto.privateKeyLength, bytes.length)\n    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes)\n  }\n\n  bytes = ensureKey(bytes, crypto.privateKeyLength)\n  const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength)\n  const publicKeyBytes = bytes.subarray(crypto.publicKeyLength)\n  return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes)\n}\n\nexport function unmarshalEd25519PublicKey (bytes: Uint8Array) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength)\n  return new Ed25519PublicKey(bytes)\n}\n\nexport async function generateKeyPair () {\n  const { privateKey, publicKey } = await crypto.generateKey()\n  return new Ed25519PrivateKey(privateKey, publicKey)\n}\n\nexport async function generateKeyPairFromSeed (seed: Uint8Array) {\n  const { privateKey, publicKey } = await crypto.generateKeyFromSeed(seed)\n  return new Ed25519PrivateKey(privateKey, publicKey)\n}\n\nfunction ensureKey (key: Uint8Array, length: number) {\n  key = Uint8Array.from(key ?? [])\n  if (key.length !== length) {\n    throw new CodeError(`Key must be a Uint8Array of length ${length}, got ${key.length}`, 'ERR_INVALID_KEY_TYPE')\n  }\n  return key\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
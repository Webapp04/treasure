{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\nvar defaultAddressFilter = function defaultAddressFilter(addrs) {\n  return addrs;\n};\nexport var DefaultAddressManager = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(DefaultAddressManager, _EventEmitter);\n  var _super = _createSuper(DefaultAddressManager);\n  /**\n   * Responsible for managing the peer addresses.\n   * Peers can specify their listen and announce addresses.\n   * The listen addresses will be used by the libp2p transports to listen for new connections,\n   * while the announce addresses will be used for the peer addresses' to other peers in the network.\n   */\n  function DefaultAddressManager(components, init) {\n    var _init$announceFilter;\n    var _this;\n    _classCallCheck(this, DefaultAddressManager);\n    _this = _super.call(this);\n    var _init$listen = init.listen,\n      listen = _init$listen === void 0 ? [] : _init$listen,\n      _init$announce = init.announce,\n      announce = _init$announce === void 0 ? [] : _init$announce;\n    _this.components = components;\n    _this.listen = new Set(listen.map(function (ma) {\n      return ma.toString();\n    }));\n    _this.announce = new Set(announce.map(function (ma) {\n      return ma.toString();\n    }));\n    _this.observed = new Set();\n    _this.announceFilter = (_init$announceFilter = init.announceFilter) !== null && _init$announceFilter !== void 0 ? _init$announceFilter : defaultAddressFilter;\n    return _this;\n  }\n  /**\n   * Get peer listen multiaddrs\n   */\n  _createClass(DefaultAddressManager, [{\n    key: \"getListenAddrs\",\n    value: function getListenAddrs() {\n      return Array.from(this.listen).map(function (a) {\n        return multiaddr(a);\n      });\n    }\n    /**\n     * Get peer announcing multiaddrs\n     */\n  }, {\n    key: \"getAnnounceAddrs\",\n    value: function getAnnounceAddrs() {\n      return Array.from(this.announce).map(function (a) {\n        return multiaddr(a);\n      });\n    }\n    /**\n     * Get observed multiaddrs\n     */\n  }, {\n    key: \"getObservedAddrs\",\n    value: function getObservedAddrs() {\n      return Array.from(this.observed).map(function (a) {\n        return multiaddr(a);\n      });\n    }\n    /**\n     * Add peer observed addresses\n     */\n  }, {\n    key: \"addObservedAddr\",\n    value: function addObservedAddr(addr) {\n      var ma = multiaddr(addr);\n      var remotePeer = ma.getPeerId();\n      // strip our peer id if it has been passed\n      if (remotePeer != null) {\n        var remotePeerId = peerIdFromString(remotePeer);\n        // use same encoding for comparison\n        if (remotePeerId.equals(this.components.getPeerId())) {\n          ma = ma.decapsulate(multiaddr(\"/p2p/\".concat(this.components.getPeerId().toString())));\n        }\n      }\n      var addrString = ma.toString();\n      // do not trigger the change:addresses event if we already know about this address\n      if (this.observed.has(addrString)) {\n        return;\n      }\n      this.observed.add(addrString);\n      this.dispatchEvent(new CustomEvent('change:addresses'));\n    }\n  }, {\n    key: \"getAddresses\",\n    value: function getAddresses() {\n      var _this2 = this;\n      var addrs = this.getAnnounceAddrs().map(function (ma) {\n        return ma.toString();\n      });\n      if (addrs.length === 0) {\n        // no configured announce addrs, add configured listen addresses\n        addrs = this.components.getTransportManager().getAddrs().map(function (ma) {\n          return ma.toString();\n        });\n      }\n      addrs = addrs.concat(this.getObservedAddrs().map(function (ma) {\n        return ma.toString();\n      }));\n      // dedupe multiaddrs\n      var addrSet = new Set(addrs);\n      // Create advertising list\n      return this.announceFilter(Array.from(addrSet).map(function (str) {\n        return multiaddr(str);\n      })).map(function (ma) {\n        if (ma.getPeerId() === _this2.components.getPeerId().toString()) {\n          return ma;\n        }\n        return ma.encapsulate(\"/p2p/\".concat(_this2.components.getPeerId().toString()));\n      });\n    }\n  }]);\n  return DefaultAddressManager;\n}(EventEmitter);","map":{"version":3,"names":["CustomEvent","EventEmitter","multiaddr","peerIdFromString","defaultAddressFilter","addrs","DefaultAddressManager","_EventEmitter","_inherits","_super","_createSuper","components","init","_init$announceFilter","_this","_classCallCheck","call","_init$listen","listen","_init$announce","announce","Set","map","ma","toString","observed","announceFilter","_createClass","key","value","getListenAddrs","Array","from","a","getAnnounceAddrs","getObservedAddrs","addObservedAddr","addr","remotePeer","getPeerId","remotePeerId","equals","decapsulate","concat","addrString","has","add","dispatchEvent","getAddresses","_this2","length","getTransportManager","getAddrs","addrSet","str","encapsulate"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/address-manager/index.ts"],"sourcesContent":["import type { AddressManagerEvents } from '@libp2p/interface-address-manager'\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport type { Components } from '@libp2p/components'\n\nexport interface AddressManagerInit {\n  announceFilter?: AddressFilter\n\n  /**\n   * list of multiaddrs string representation to listen\n   */\n  listen?: string[]\n\n  /**\n   * list of multiaddrs string representation to announce\n   */\n  announce?: string[]\n\n  /**\n   * list of multiaddrs string representation to never announce\n   */\n  noAnnounce?: string[]\n}\n\nexport interface AddressFilter {\n  (addrs: Multiaddr[]): Multiaddr[]\n}\n\nconst defaultAddressFilter = (addrs: Multiaddr[]): Multiaddr[] => addrs\n\nexport class DefaultAddressManager extends EventEmitter<AddressManagerEvents> {\n  private readonly components: Components\n  private readonly listen: Set<string>\n  private readonly announce: Set<string>\n  private readonly observed: Set<string>\n  private readonly announceFilter: AddressFilter\n\n  /**\n   * Responsible for managing the peer addresses.\n   * Peers can specify their listen and announce addresses.\n   * The listen addresses will be used by the libp2p transports to listen for new connections,\n   * while the announce addresses will be used for the peer addresses' to other peers in the network.\n   */\n  constructor (components: Components, init: AddressManagerInit) {\n    super()\n\n    const { listen = [], announce = [] } = init\n\n    this.components = components\n    this.listen = new Set(listen.map(ma => ma.toString()))\n    this.announce = new Set(announce.map(ma => ma.toString()))\n    this.observed = new Set()\n    this.announceFilter = init.announceFilter ?? defaultAddressFilter\n  }\n\n  /**\n   * Get peer listen multiaddrs\n   */\n  getListenAddrs (): Multiaddr[] {\n    return Array.from(this.listen).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs\n   */\n  getAnnounceAddrs (): Multiaddr[] {\n    return Array.from(this.announce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get observed multiaddrs\n   */\n  getObservedAddrs (): Multiaddr[] {\n    return Array.from(this.observed).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Add peer observed addresses\n   */\n  addObservedAddr (addr: string | Multiaddr): void {\n    let ma = multiaddr(addr)\n    const remotePeer = ma.getPeerId()\n\n    // strip our peer id if it has been passed\n    if (remotePeer != null) {\n      const remotePeerId = peerIdFromString(remotePeer)\n\n      // use same encoding for comparison\n      if (remotePeerId.equals(this.components.getPeerId())) {\n        ma = ma.decapsulate(multiaddr(`/p2p/${this.components.getPeerId().toString()}`))\n      }\n    }\n\n    const addrString = ma.toString()\n\n    // do not trigger the change:addresses event if we already know about this address\n    if (this.observed.has(addrString)) {\n      return\n    }\n\n    this.observed.add(addrString)\n    this.dispatchEvent(new CustomEvent('change:addresses'))\n  }\n\n  getAddresses (): Multiaddr[] {\n    let addrs = this.getAnnounceAddrs().map(ma => ma.toString())\n\n    if (addrs.length === 0) {\n      // no configured announce addrs, add configured listen addresses\n      addrs = this.components.getTransportManager().getAddrs().map(ma => ma.toString())\n    }\n\n    addrs = addrs.concat(this.getObservedAddrs().map(ma => ma.toString()))\n\n    // dedupe multiaddrs\n    const addrSet = new Set(addrs)\n\n    // Create advertising list\n    return this.announceFilter(Array.from(addrSet)\n      .map(str => multiaddr(str)))\n      .map(ma => {\n        if (ma.getPeerId() === this.components.getPeerId().toString()) {\n          return ma\n        }\n\n        return ma.encapsulate(`/p2p/${this.components.getPeerId().toString()}`)\n      })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
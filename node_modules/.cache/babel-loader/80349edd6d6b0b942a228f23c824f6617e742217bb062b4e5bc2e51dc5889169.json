{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from '../constants.js';\n// Returns generator that encrypts payload from the user\nexport function encryptStream(handshake) {\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, i, end, data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(source);\n          case 4:\n            _context.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 6:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 21;\n              break;\n            }\n            chunk = _step.value;\n            i = 0;\n          case 9:\n            if (!(i < chunk.length)) {\n              _context.next = 18;\n              break;\n            }\n            end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n            if (end > chunk.length) {\n              end = chunk.length;\n            }\n            data = handshake.encrypt(chunk.subarray(i, end), handshake.session);\n            _context.next = 15;\n            return data;\n          case 15:\n            i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n            _context.next = 9;\n            break;\n          case 18:\n            _iteratorAbruptCompletion = false;\n            _context.next = 4;\n            break;\n          case 21:\n            _context.next = 27;\n            break;\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 27:\n            _context.prev = 27;\n            _context.prev = 28;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 32;\n              break;\n            }\n            _context.next = 32;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 32:\n            _context.prev = 32;\n            if (!_didIteratorError) {\n              _context.next = 35;\n              break;\n            }\n            throw _iteratorError;\n          case 35:\n            return _context.finish(32);\n          case 36:\n            return _context.finish(27);\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 23, 27, 37], [28,, 32, 36]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n// Decrypt received payload to the user\nexport function decryptStream(handshake) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(source) {\n      var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, chunk, i, end, _yield$_awaitAsyncGen, decrypted, valid;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context2.prev = 2;\n            _iterator2 = _asyncIterator(source);\n          case 4:\n            _context2.next = 6;\n            return _awaitAsyncGenerator(_iterator2.next());\n          case 6:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n              _context2.next = 27;\n              break;\n            }\n            chunk = _step2.value;\n            i = 0;\n          case 9:\n            if (!(i < chunk.length)) {\n              _context2.next = 24;\n              break;\n            }\n            end = i + NOISE_MSG_MAX_LENGTH_BYTES;\n            if (end > chunk.length) {\n              end = chunk.length;\n            }\n            _context2.next = 14;\n            return _awaitAsyncGenerator(handshake.decrypt(chunk.subarray(i, end), handshake.session));\n          case 14:\n            _yield$_awaitAsyncGen = _context2.sent;\n            decrypted = _yield$_awaitAsyncGen.plaintext;\n            valid = _yield$_awaitAsyncGen.valid;\n            if (valid) {\n              _context2.next = 19;\n              break;\n            }\n            throw new Error('Failed to validate decrypted chunk');\n          case 19:\n            _context2.next = 21;\n            return decrypted;\n          case 21:\n            i += NOISE_MSG_MAX_LENGTH_BYTES;\n            _context2.next = 9;\n            break;\n          case 24:\n            _iteratorAbruptCompletion2 = false;\n            _context2.next = 4;\n            break;\n          case 27:\n            _context2.next = 33;\n            break;\n          case 29:\n            _context2.prev = 29;\n            _context2.t0 = _context2[\"catch\"](2);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context2.t0;\n          case 33:\n            _context2.prev = 33;\n            _context2.prev = 34;\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context2.next = 38;\n              break;\n            }\n            _context2.next = 38;\n            return _awaitAsyncGenerator(_iterator2.return());\n          case 38:\n            _context2.prev = 38;\n            if (!_didIteratorError2) {\n              _context2.next = 41;\n              break;\n            }\n            throw _iteratorError2;\n          case 41:\n            return _context2.finish(38);\n          case 42:\n            return _context2.finish(33);\n          case 43:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 29, 33, 43], [34,, 38, 42]]);\n    }));\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["NOISE_MSG_MAX_LENGTH_BYTES","NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG","encryptStream","handshake","_ref","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","source","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","i","end","data","wrap","_callee$","_context","prev","next","_asyncIterator","_awaitAsyncGenerator","sent","done","value","length","encrypt","subarray","session","t0","return","finish","stop","_x","apply","arguments","decryptStream","_ref2","_callee2","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_yield$_awaitAsyncGen","decrypted","valid","_callee2$","_context2","decrypt","plaintext","Error","_x2"],"sources":["/Users/apple/Documents/treasure/node_modules/@chainsafe/libp2p-noise/src/crypto/streaming.ts"],"sourcesContent":["import type { Transform } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\nimport type { IHandshake } from '../@types/handshake-interface.js'\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from '../constants.js'\n\n// Returns generator that encrypts payload from the user\nexport function encryptStream (handshake: IHandshake): Transform<Uint8Array> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        const data = handshake.encrypt(chunk.subarray(i, end), handshake.session)\n        yield data\n      }\n    }\n  }\n}\n\n// Decrypt received payload to the user\nexport function decryptStream (handshake: IHandshake): Transform<Uint8ArrayList, Uint8Array> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        const { plaintext: decrypted, valid } = await handshake.decrypt(chunk.subarray(i, end), handshake.session)\n        if (!valid) {\n          throw new Error('Failed to validate decrypted chunk')\n        }\n        yield decrypted\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
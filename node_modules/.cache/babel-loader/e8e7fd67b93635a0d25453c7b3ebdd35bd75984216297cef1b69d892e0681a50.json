{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { DUMP_SESSION_KEYS } from './constants.js';\nvar log = logger('libp2p:noise');\nexport { log as logger };\nvar keyLogger;\nif (DUMP_SESSION_KEYS) {\n  keyLogger = log;\n} else {\n  keyLogger = Object.assign(function () {}, {\n    enabled: false,\n    trace: function trace() {},\n    error: function error() {}\n  });\n}\nexport function logLocalStaticKeys(s) {\n  keyLogger(\"LOCAL_STATIC_PUBLIC_KEY \".concat(uint8ArrayToString(s.publicKey, 'hex')));\n  keyLogger(\"LOCAL_STATIC_PRIVATE_KEY \".concat(uint8ArrayToString(s.privateKey, 'hex')));\n}\nexport function logLocalEphemeralKeys(e) {\n  if (e) {\n    keyLogger(\"LOCAL_PUBLIC_EPHEMERAL_KEY \".concat(uint8ArrayToString(e.publicKey, 'hex')));\n    keyLogger(\"LOCAL_PRIVATE_EPHEMERAL_KEY \".concat(uint8ArrayToString(e.privateKey, 'hex')));\n  } else {\n    keyLogger('Missing local ephemeral keys.');\n  }\n}\nexport function logRemoteStaticKey(rs) {\n  keyLogger(\"REMOTE_STATIC_PUBLIC_KEY \".concat(uint8ArrayToString(rs, 'hex')));\n}\nexport function logRemoteEphemeralKey(re) {\n  keyLogger(\"REMOTE_EPHEMERAL_PUBLIC_KEY \".concat(uint8ArrayToString(re, 'hex')));\n}\nexport function logCipherState(session) {\n  if (session.cs1 && session.cs2) {\n    keyLogger(\"CIPHER_STATE_1 \".concat(session.cs1.n.getUint64(), \" \").concat(uint8ArrayToString(session.cs1.k, 'hex')));\n    keyLogger(\"CIPHER_STATE_2 \".concat(session.cs2.n.getUint64(), \" \").concat(uint8ArrayToString(session.cs2.k, 'hex')));\n  } else {\n    keyLogger('Missing cipher state.');\n  }\n}","map":{"version":3,"names":["logger","toString","uint8ArrayToString","DUMP_SESSION_KEYS","log","keyLogger","Object","assign","enabled","trace","error","logLocalStaticKeys","s","concat","publicKey","privateKey","logLocalEphemeralKeys","e","logRemoteStaticKey","rs","logRemoteEphemeralKey","re","logCipherState","session","cs1","cs2","n","getUint64","k"],"sources":["/Users/apple/Documents/treasure/node_modules/@chainsafe/libp2p-noise/src/logger.ts"],"sourcesContent":["import { Logger, logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { NoiseSession } from './@types/handshake.js'\nimport type { KeyPair } from './@types/libp2p.js'\nimport { DUMP_SESSION_KEYS } from './constants.js'\n\nconst log = logger('libp2p:noise')\n\nexport { log as logger }\n\nlet keyLogger: Logger\nif (DUMP_SESSION_KEYS) {\n  keyLogger = log\n} else {\n  keyLogger = Object.assign(() => { /* do nothing */ }, {\n    enabled: false,\n    trace: () => {},\n    error: () => {}\n  })\n}\n\nexport function logLocalStaticKeys (s: KeyPair): void {\n  keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${uint8ArrayToString(s.publicKey, 'hex')}`)\n  keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${uint8ArrayToString(s.privateKey, 'hex')}`)\n}\n\nexport function logLocalEphemeralKeys (e: KeyPair|undefined): void {\n  if (e) {\n    keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${uint8ArrayToString(e.publicKey, 'hex')}`)\n    keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${uint8ArrayToString(e.privateKey, 'hex')}`)\n  } else {\n    keyLogger('Missing local ephemeral keys.')\n  }\n}\n\nexport function logRemoteStaticKey (rs: Uint8Array): void {\n  keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${uint8ArrayToString(rs, 'hex')}`)\n}\n\nexport function logRemoteEphemeralKey (re: Uint8Array): void {\n  keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${uint8ArrayToString(re, 'hex')}`)\n}\n\nexport function logCipherState (session: NoiseSession): void {\n  if (session.cs1 && session.cs2) {\n    keyLogger(`CIPHER_STATE_1 ${session.cs1.n.getUint64()} ${uint8ArrayToString(session.cs1.k, 'hex')}`)\n    keyLogger(`CIPHER_STATE_2 ${session.cs2.n.getUint64()} ${uint8ArrayToString(session.cs2.k, 'hex')}`)\n  } else {\n    keyLogger('Missing cipher state.')\n  }\n}\n"],"mappings":"AAAA,SAAiBA,MAAM,QAAQ,gBAAgB;AAC/C,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AAGtE,SAASC,iBAAiB,QAAQ,gBAAgB;AAElD,IAAMC,GAAG,GAAGJ,MAAM,CAAC,cAAc,CAAC;AAElC,SAASI,GAAG,IAAIJ,MAAM;AAEtB,IAAIK,SAAiB;AACrB,IAAIF,iBAAiB,EAAE;EACrBE,SAAS,GAAGD,GAAG;CAChB,MAAM;EACLC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC,YAAK,CAAoB,CAAC,EAAE;IACpDC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,SAAAA,MAAA,EAAK,CAAE,CAAC;IACfC,KAAK,EAAE,SAAAA,MAAA,EAAK,CAAE;GACf,CAAC;;AAGJ,OAAM,SAAUC,kBAAkBA,CAAEC,CAAU;EAC5CP,SAAS,4BAAAQ,MAAA,CAA4BX,kBAAkB,CAACU,CAAC,CAACE,SAAS,EAAE,KAAK,CAAC,CAAE,CAAC;EAC9ET,SAAS,6BAAAQ,MAAA,CAA6BX,kBAAkB,CAACU,CAAC,CAACG,UAAU,EAAE,KAAK,CAAC,CAAE,CAAC;AAClF;AAEA,OAAM,SAAUC,qBAAqBA,CAAEC,CAAoB;EACzD,IAAIA,CAAC,EAAE;IACLZ,SAAS,+BAAAQ,MAAA,CAA+BX,kBAAkB,CAACe,CAAC,CAACH,SAAS,EAAE,KAAK,CAAC,CAAE,CAAC;IACjFT,SAAS,gCAAAQ,MAAA,CAAgCX,kBAAkB,CAACe,CAAC,CAACF,UAAU,EAAE,KAAK,CAAC,CAAE,CAAC;GACpF,MAAM;IACLV,SAAS,CAAC,+BAA+B,CAAC;;AAE9C;AAEA,OAAM,SAAUa,kBAAkBA,CAAEC,EAAc;EAChDd,SAAS,6BAAAQ,MAAA,CAA6BX,kBAAkB,CAACiB,EAAE,EAAE,KAAK,CAAC,CAAE,CAAC;AACxE;AAEA,OAAM,SAAUC,qBAAqBA,CAAEC,EAAc;EACnDhB,SAAS,gCAAAQ,MAAA,CAAgCX,kBAAkB,CAACmB,EAAE,EAAE,KAAK,CAAC,CAAE,CAAC;AAC3E;AAEA,OAAM,SAAUC,cAAcA,CAAEC,OAAqB;EACnD,IAAIA,OAAO,CAACC,GAAG,IAAID,OAAO,CAACE,GAAG,EAAE;IAC9BpB,SAAS,mBAAAQ,MAAA,CAAmBU,OAAO,CAACC,GAAG,CAACE,CAAC,CAACC,SAAS,EAAE,OAAAd,MAAA,CAAIX,kBAAkB,CAACqB,OAAO,CAACC,GAAG,CAACI,CAAC,EAAE,KAAK,CAAC,CAAE,CAAC;IACpGvB,SAAS,mBAAAQ,MAAA,CAAmBU,OAAO,CAACE,GAAG,CAACC,CAAC,CAACC,SAAS,EAAE,OAAAd,MAAA,CAAIX,kBAAkB,CAACqB,OAAO,CAACE,GAAG,CAACG,CAAC,EAAE,KAAK,CAAC,CAAE,CAAC;GACrG,MAAM;IACLvB,SAAS,CAAC,uBAAuB,CAAC;;AAEtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _awaitAsyncGenerator = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar batch = require('it-batch');\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>|Iterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nfunction parallelBatch(_x) {\n  return _parallelBatch.apply(this, arguments);\n}\nfunction _parallelBatch() {\n  _parallelBatch = _wrapAsyncGenerator(function (source) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, tasks, things, i, result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(batch(source, size));\n          case 4:\n            _context.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 6:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 26;\n              break;\n            }\n            tasks = _step.value;\n            /** @type {Promise<Success<T>|Failure>[]} */\n            things = tasks.map(\n            /**\n             * @param {() => Promise<T>} p\n             */\n            function (p) {\n              return p().then(function (value) {\n                return {\n                  ok: true,\n                  value: value\n                };\n              }, function (err) {\n                return {\n                  ok: false,\n                  err: err\n                };\n              });\n            });\n            i = 0;\n          case 10:\n            if (!(i < things.length)) {\n              _context.next = 23;\n              break;\n            }\n            _context.next = 13;\n            return _awaitAsyncGenerator(things[i]);\n          case 13:\n            result = _context.sent;\n            if (!result.ok) {\n              _context.next = 19;\n              break;\n            }\n            _context.next = 17;\n            return result.value;\n          case 17:\n            _context.next = 20;\n            break;\n          case 19:\n            throw result.err;\n          case 20:\n            i++;\n            _context.next = 10;\n            break;\n          case 23:\n            _iteratorAbruptCompletion = false;\n            _context.next = 4;\n            break;\n          case 26:\n            _context.next = 32;\n            break;\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 32:\n            _context.prev = 32;\n            _context.prev = 33;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 37;\n              break;\n            }\n            _context.next = 37;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 37:\n            _context.prev = 37;\n            if (!_didIteratorError) {\n              _context.next = 40;\n              break;\n            }\n            throw _iteratorError;\n          case 40:\n            return _context.finish(37);\n          case 41:\n            return _context.finish(32);\n          case 42:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 28, 32, 42], [33,, 37, 41]]);\n    })();\n  });\n  return _parallelBatch.apply(this, arguments);\n}\nmodule.exports = parallelBatch;","map":{"version":3,"names":["_regeneratorRuntime","require","default","_awaitAsyncGenerator","_wrapAsyncGenerator","_asyncIterator","batch","parallelBatch","_x","_parallelBatch","apply","arguments","source","size","length","undefined","mark","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","tasks","things","i","result","wrap","_callee$","_context","prev","next","sent","done","value","map","p","then","ok","err","t0","return","finish","stop","module","exports"],"sources":["/Users/apple/Documents/treasure/node_modules/it-parallel-batch/index.js"],"sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>|Iterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function * parallelBatch (source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n      /**\n       * @param {() => Promise<T>} p\n       */\n      p => {\n        return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n      })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { decode } from '@ipld/dag-pb';\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nvar hamtShardedDirectoryContent = function hamtShardedDirectoryContent(cid, node, unixfs, path, resolve, depth, blockstore) {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return listDirectory(node, path, resolve, depth, blockstore, options);\n  }\n  return yieldHamtDirectoryContent;\n};\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nfunction listDirectory(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _listDirectory.apply(this, arguments);\n}\nfunction _listDirectory() {\n  _listDirectory = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(node, path, resolve, depth, blockstore, options) {\n    var links, _iterator2, _step2, link, name, result, block, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          links = node.Links;\n          _iterator2 = _createForOfIteratorHelper(links);\n          _context.prev = 2;\n          _iterator2.s();\n        case 4:\n          if ((_step2 = _iterator2.n()).done) {\n            _context.next = 50;\n            break;\n          }\n          link = _step2.value;\n          name = link.Name != null ? link.Name.substring(2) : null;\n          if (!name) {\n            _context.next = 15;\n            break;\n          }\n          _context.next = 10;\n          return _awaitAsyncGenerator(resolve(link.Hash, name, \"\".concat(path, \"/\").concat(name), [], depth + 1, blockstore, options));\n        case 10:\n          result = _context.sent;\n          _context.next = 13;\n          return result.entry;\n        case 13:\n          _context.next = 48;\n          break;\n        case 15:\n          _context.next = 17;\n          return _awaitAsyncGenerator(blockstore.get(link.Hash));\n        case 17:\n          block = _context.sent;\n          node = decode(block);\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 21;\n          _iterator = _asyncIterator(listDirectory(node, path, resolve, depth, blockstore, options));\n        case 23:\n          _context.next = 25;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 25:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 32;\n            break;\n          }\n          file = _step.value;\n          _context.next = 29;\n          return file;\n        case 29:\n          _iteratorAbruptCompletion = false;\n          _context.next = 23;\n          break;\n        case 32:\n          _context.next = 38;\n          break;\n        case 34:\n          _context.prev = 34;\n          _context.t0 = _context[\"catch\"](21);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n        case 38:\n          _context.prev = 38;\n          _context.prev = 39;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 43;\n            break;\n          }\n          _context.next = 43;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 43:\n          _context.prev = 43;\n          if (!_didIteratorError) {\n            _context.next = 46;\n            break;\n          }\n          throw _iteratorError;\n        case 46:\n          return _context.finish(43);\n        case 47:\n          return _context.finish(38);\n        case 48:\n          _context.next = 4;\n          break;\n        case 50:\n          _context.next = 55;\n          break;\n        case 52:\n          _context.prev = 52;\n          _context.t1 = _context[\"catch\"](2);\n          _iterator2.e(_context.t1);\n        case 55:\n          _context.prev = 55;\n          _iterator2.f();\n          return _context.finish(55);\n        case 58:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 52, 55, 58], [21, 34, 38, 48], [39,, 43, 47]]);\n  }));\n  return _listDirectory.apply(this, arguments);\n}\nexport default hamtShardedDirectoryContent;","map":{"version":3,"names":["decode","hamtShardedDirectoryContent","cid","node","unixfs","path","resolve","depth","blockstore","yieldHamtDirectoryContent","options","arguments","length","undefined","listDirectory","_x","_x2","_x3","_x4","_x5","_x6","_listDirectory","apply","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","links","_iterator2","_step2","link","name","result","block","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","file","wrap","_callee$","_context","prev","next","Links","_createForOfIteratorHelper","s","n","done","value","Name","substring","_awaitAsyncGenerator","Hash","concat","sent","entry","get","_asyncIterator","t0","return","finish","t1","e","f","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js"],"sourcesContent":["import { decode } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent (options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options)\n  }\n\n  return yieldHamtDirectoryContent\n}\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nasync function * listDirectory (node, path, resolve, depth, blockstore, options) {\n  const links = node.Links\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options)\n\n      yield result.entry\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash)\n      node = decode(block)\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file\n      }\n    }\n  }\n}\n\nexport default hamtShardedDirectoryContent\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
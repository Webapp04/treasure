{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport { isBytes, isBlob, isReadableStream } from './utils.js';\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport function normaliseContent(_x) {\n  return _normaliseContent.apply(this, arguments);\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nfunction _normaliseContent() {\n  _normaliseContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n    var peekable, _yield$peekable$peek, value, done;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!isBytes(input)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", new Blob([input]));\n        case 2:\n          if (!(typeof input === 'string' || input instanceof String)) {\n            _context.next = 4;\n            break;\n          }\n          return _context.abrupt(\"return\", new Blob([input.toString()]));\n        case 4:\n          if (!isBlob(input)) {\n            _context.next = 6;\n            break;\n          }\n          return _context.abrupt(\"return\", input);\n        case 6:\n          // Browser stream\n          if (isReadableStream(input)) {\n            input = browserStreamToIt(input);\n          }\n\n          // (Async)Iterator<?>\n          if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n            _context.next = 28;\n            break;\n          }\n          /** @type {any} peekable */\n          peekable = itPeekable(input);\n          /** @type {any} value **/\n          _context.next = 11;\n          return peekable.peek();\n        case 11:\n          _yield$peekable$peek = _context.sent;\n          value = _yield$peekable$peek.value;\n          done = _yield$peekable$peek.done;\n          if (!done) {\n            _context.next = 16;\n            break;\n          }\n          return _context.abrupt(\"return\", itToBlob(peekable));\n        case 16:\n          peekable.push(value);\n\n          // (Async)Iterable<Number>\n          if (!Number.isInteger(value)) {\n            _context.next = 26;\n            break;\n          }\n          _context.t0 = Blob;\n          _context.t1 = Uint8Array;\n          _context.next = 22;\n          return all(peekable);\n        case 22:\n          _context.t2 = _context.sent;\n          _context.t3 = _context.t1.from.call(_context.t1, _context.t2);\n          _context.t4 = [_context.t3];\n          return _context.abrupt(\"return\", new _context.t0(_context.t4));\n        case 26:\n          if (!(isBytes(value) || typeof value === 'string' || value instanceof String)) {\n            _context.next = 28;\n            break;\n          }\n          return _context.abrupt(\"return\", itToBlob(peekable));\n        case 28:\n          throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _normaliseContent.apply(this, arguments);\n}\nfunction itToBlob(_x2) {\n  return _itToBlob.apply(this, arguments);\n}\nfunction _itToBlob() {\n  _itToBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(stream) {\n    var parts, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          parts = [];\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context2.prev = 3;\n          _iterator = _asyncIterator(stream);\n        case 5:\n          _context2.next = 7;\n          return _iterator.next();\n        case 7:\n          if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n            _context2.next = 13;\n            break;\n          }\n          chunk = _step.value;\n          parts.push(chunk);\n        case 10:\n          _iteratorAbruptCompletion = false;\n          _context2.next = 5;\n          break;\n        case 13:\n          _context2.next = 19;\n          break;\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](3);\n          _didIteratorError = true;\n          _iteratorError = _context2.t0;\n        case 19:\n          _context2.prev = 19;\n          _context2.prev = 20;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context2.next = 24;\n            break;\n          }\n          _context2.next = 24;\n          return _iterator.return();\n        case 24:\n          _context2.prev = 24;\n          if (!_didIteratorError) {\n            _context2.next = 27;\n            break;\n          }\n          throw _iteratorError;\n        case 27:\n          return _context2.finish(24);\n        case 28:\n          return _context2.finish(19);\n        case 29:\n          return _context2.abrupt(\"return\", new Blob(parts));\n        case 30:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n  }));\n  return _itToBlob.apply(this, arguments);\n}","map":{"version":3,"names":["errCode","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","normaliseContent","_x","_normaliseContent","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","input","peekable","_yield$peekable$peek","value","done","wrap","_callee$","_context","prev","next","abrupt","Blob","String","toString","Symbol","iterator","asyncIterator","peek","sent","itToBlob","push","Number","isInteger","t0","t1","Uint8Array","t2","t3","from","call","t4","Error","concat","stop","_x2","_itToBlob","_callee2","stream","parts","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","_callee2$","_context2","_asyncIterator","return","finish"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core-utils/src/files/normalise-content.browser.js"],"sourcesContent":["import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n"],"mappings":";;;AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,GAAG,MAAM,QAAQ;AACxB,SACEC,OAAO,EACPC,MAAM,EACNC,gBAAgB,QACX,YAAY;;AAEnB;AACA;AACA;AACA,gBAAsBC,gBAAgBA,CAAAC,EAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;;AAkDtC;AACA;AACA;AAFA,SAAAF,kBAAA;EAAAA,iBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAlDO,SAAAC,QAAiCC,KAAK;IAAA,IAAAC,QAAA,EAAAC,oBAAA,EAAAC,KAAA,EAAAC,IAAA;IAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,KAEvCrB,OAAO,CAACY,KAAK,CAAC;YAAAO,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACT,IAAIC,IAAI,CAAC,CAACX,KAAK,CAAC,CAAC;QAAA;UAAA,MAItB,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYY,MAAM;YAAAL,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WAC/C,IAAIC,IAAI,CAAC,CAACX,KAAK,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC;QAAA;UAAA,KAIjCxB,MAAM,CAACW,KAAK,CAAC;YAAAO,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACRV,KAAK;QAAA;UAGd;UACA,IAAIV,gBAAgB,CAACU,KAAK,CAAC,EAAE;YAC3BA,KAAK,GAAGd,iBAAiB,CAACc,KAAK,CAAC;UAClC;;UAEA;UAAA,MACIc,MAAM,CAACC,QAAQ,IAAIf,KAAK,IAAIc,MAAM,CAACE,aAAa,IAAIhB,KAAK;YAAAO,QAAA,CAAAE,IAAA;YAAA;UAAA;UAC3D;UACMR,QAAQ,GAAGhB,UAAU,CAACe,KAAK,CAAC;UAElC;UAAAO,QAAA,CAAAE,IAAA;UAAA,OAC8BR,QAAQ,CAACgB,IAAI,CAAC,CAAC;QAAA;UAAAf,oBAAA,GAAAK,QAAA,CAAAW,IAAA;UAArCf,KAAK,GAAAD,oBAAA,CAALC,KAAK;UAAEC,IAAI,GAAAF,oBAAA,CAAJE,IAAI;UAAA,KAEfA,IAAI;YAAAG,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WAECS,QAAQ,CAAClB,QAAQ,CAAC;QAAA;UAG3BA,QAAQ,CAACmB,IAAI,CAACjB,KAAK,CAAC;;UAEpB;UAAA,KACIkB,MAAM,CAACC,SAAS,CAACnB,KAAK,CAAC;YAAAI,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAgB,EAAA,GACdZ,IAAI;UAAAJ,QAAA,CAAAiB,EAAA,GAAEC,UAAU;UAAAlB,QAAA,CAAAE,IAAA;UAAA,OAAYtB,GAAG,CAACc,QAAQ,CAAC;QAAA;UAAAM,QAAA,CAAAmB,EAAA,GAAAnB,QAAA,CAAAW,IAAA;UAAAX,QAAA,CAAAoB,EAAA,GAAApB,QAAA,CAAAiB,EAAA,CAAxBI,IAAI,CAAAC,IAAA,CAAAtB,QAAA,CAAAiB,EAAA,EAAAjB,QAAA,CAAAmB,EAAA;UAAAnB,QAAA,CAAAuB,EAAA,IAAAvB,QAAA,CAAAoB,EAAA;UAAA,OAAApB,QAAA,CAAAG,MAAA,eAAAH,QAAA,CAAAgB,EAAA,CAAAhB,QAAA,CAAAuB,EAAA;QAAA;UAAA,MAI9B1C,OAAO,CAACe,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYS,MAAM;YAAAL,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACjES,QAAQ,CAAClB,QAAQ,CAAC;QAAA;UAAA,MAIvBjB,OAAO,CAAC,IAAI+C,KAAK,sBAAAC,MAAA,CAAsBhC,KAAK,CAAE,CAAC,EAAE,sBAAsB,CAAC;QAAA;QAAA;UAAA,OAAAO,QAAA,CAAA0B,IAAA;MAAA;IAAA,GAAAlC,OAAA;EAAA,CAC/E;EAAA,OAAAN,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAKcwB,QAAQA,CAAAe,GAAA;EAAA,OAAAC,SAAA,CAAAzC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAwC,UAAA;EAAAA,SAAA,GAAAvC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAvB,SAAAsC,SAAyBC,MAAM;IAAA,IAAAC,KAAA,EAAAC,yBAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,KAAA;IAAA,OAAA/C,mBAAA,GAAAQ,IAAA,UAAAwC,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAtC,IAAA,GAAAsC,SAAA,CAAArC,IAAA;QAAA;UACvB6B,KAAK,GAAG,EAAE;UAAAC,yBAAA;UAAAC,iBAAA;UAAAM,SAAA,CAAAtC,IAAA;UAAAkC,SAAA,GAAAK,cAAA,CAEUV,MAAM;QAAA;UAAAS,SAAA,CAAArC,IAAA;UAAA,OAAAiC,SAAA,CAAAjC,IAAA;QAAA;UAAA,MAAA8B,yBAAA,KAAAI,KAAA,GAAAG,SAAA,CAAA5B,IAAA,EAAAd,IAAA;YAAA0C,SAAA,CAAArC,IAAA;YAAA;UAAA;UAAfmC,KAAK,GAAAD,KAAA,CAAAxC,KAAA;UACpBmC,KAAK,CAAClB,IAAI,CAACwB,KAAK,CAAC;QAAA;UAAAL,yBAAA;UAAAO,SAAA,CAAArC,IAAA;UAAA;QAAA;UAAAqC,SAAA,CAAArC,IAAA;UAAA;QAAA;UAAAqC,SAAA,CAAAtC,IAAA;UAAAsC,SAAA,CAAAvB,EAAA,GAAAuB,SAAA;UAAAN,iBAAA;UAAAC,cAAA,GAAAK,SAAA,CAAAvB,EAAA;QAAA;UAAAuB,SAAA,CAAAtC,IAAA;UAAAsC,SAAA,CAAAtC,IAAA;UAAA,MAAA+B,yBAAA,IAAAG,SAAA,CAAAM,MAAA;YAAAF,SAAA,CAAArC,IAAA;YAAA;UAAA;UAAAqC,SAAA,CAAArC,IAAA;UAAA,OAAAiC,SAAA,CAAAM,MAAA;QAAA;UAAAF,SAAA,CAAAtC,IAAA;UAAA,KAAAgC,iBAAA;YAAAM,SAAA,CAAArC,IAAA;YAAA;UAAA;UAAA,MAAAgC,cAAA;QAAA;UAAA,OAAAK,SAAA,CAAAG,MAAA;QAAA;UAAA,OAAAH,SAAA,CAAAG,MAAA;QAAA;UAAA,OAAAH,SAAA,CAAApC,MAAA,WAGZ,IAAIC,IAAI,CAAC2B,KAAK,CAAC;QAAA;QAAA;UAAA,OAAAQ,SAAA,CAAAb,IAAA;MAAA;IAAA,GAAAG,QAAA;EAAA,CACvB;EAAA,OAAAD,SAAA,CAAAzC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
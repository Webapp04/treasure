{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { logger } from '@libp2p/logger';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport errcode from 'err-code';\nimport { codes } from './errors.js';\nimport { Key } from 'interface-datastore/key';\nimport { base32 } from 'multiformats/bases/base32';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { Peer as PeerPB } from './pb/peer.js';\nimport mortice from 'mortice';\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals';\nimport { Components } from '@libp2p/components';\nvar log = logger('libp2p:peer-store:store');\nvar NAMESPACE_COMMON = '/peers/';\nexport var PersistentStore = /*#__PURE__*/function () {\n  function PersistentStore() {\n    _classCallCheck(this, PersistentStore);\n    this.components = new Components();\n    this.lock = mortice({\n      name: 'peer-store',\n      singleProcess: true\n    });\n  }\n  _createClass(PersistentStore, [{\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n    }\n  }, {\n    key: \"_peerIdToDatastoreKey\",\n    value: function _peerIdToDatastoreKey(peerId) {\n      if (peerId.type == null) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n      }\n      var b32key = peerId.toCID().toString();\n      return new Key(\"\".concat(NAMESPACE_COMMON).concat(b32key));\n    }\n  }, {\n    key: \"has\",\n    value: function () {\n      var _has = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.components.getDatastore().has(this._peerIdToDatastoreKey(peerId));\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function has(_x) {\n        return _has.apply(this, arguments);\n      }\n      return has;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peerId) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.components.getDatastore().delete(this._peerIdToDatastoreKey(peerId));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _delete(_x2) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(peerId) {\n        var _peer$pubKey, _peer$peerRecordEnvel;\n        var buf, peer, metadata, _iterator2, _step2, meta;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.components.getDatastore().get(this._peerIdToDatastoreKey(peerId));\n            case 2:\n              buf = _context3.sent;\n              peer = PeerPB.decode(buf);\n              metadata = new Map();\n              _iterator2 = _createForOfIteratorHelper(peer.metadata);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  meta = _step2.value;\n                  metadata.set(meta.key, meta.value);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, peer), {}, {\n                id: peerId,\n                addresses: peer.addresses.map(function (_ref) {\n                  var ma = _ref.multiaddr,\n                    isCertified = _ref.isCertified;\n                  return {\n                    multiaddr: multiaddr(ma),\n                    isCertified: isCertified !== null && isCertified !== void 0 ? isCertified : false\n                  };\n                }),\n                metadata: metadata,\n                pubKey: (_peer$pubKey = peer.pubKey) !== null && _peer$pubKey !== void 0 ? _peer$pubKey : undefined,\n                peerRecordEnvelope: (_peer$peerRecordEnvel = peer.peerRecordEnvelope) !== null && _peer$peerRecordEnvel !== void 0 ? _peer$peerRecordEnvel : undefined\n              }));\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function load(_x3) {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(peer) {\n        var addressSet, addresses, metadata, buf;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(peer.pubKey != null && peer.id.publicKey != null && !uint8arrayEquals(peer.pubKey, peer.id.publicKey))) {\n                _context4.next = 3;\n                break;\n              }\n              log.error('peer publicKey bytes do not match peer id publicKey bytes');\n              throw errcode(new Error('publicKey bytes do not match peer id publicKey bytes'), codes.ERR_INVALID_PARAMETERS);\n            case 3:\n              // dedupe addresses\n              addressSet = new Set();\n              addresses = peer.addresses.filter(function (address) {\n                if (addressSet.has(address.multiaddr.toString())) {\n                  return false;\n                }\n                addressSet.add(address.multiaddr.toString());\n                return true;\n              }).sort(function (a, b) {\n                return a.multiaddr.toString().localeCompare(b.multiaddr.toString());\n              }).map(function (_ref2) {\n                var multiaddr = _ref2.multiaddr,\n                  isCertified = _ref2.isCertified;\n                return {\n                  multiaddr: multiaddr.bytes,\n                  isCertified: isCertified\n                };\n              });\n              metadata = [];\n              _toConsumableArray(peer.metadata.keys()).sort().forEach(function (key) {\n                var value = peer.metadata.get(key);\n                if (value != null) {\n                  metadata.push({\n                    key: key,\n                    value: value\n                  });\n                }\n              });\n              buf = PeerPB.encode({\n                addresses: addresses,\n                protocols: peer.protocols.sort(),\n                pubKey: peer.pubKey,\n                metadata: metadata,\n                peerRecordEnvelope: peer.peerRecordEnvelope\n              });\n              _context4.next = 10;\n              return this.components.getDatastore().put(this._peerIdToDatastoreKey(peer.id), buf.subarray());\n            case 10:\n              _context4.next = 12;\n              return this.load(peer.id);\n            case 12:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function save(_x4) {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n  }, {\n    key: \"patch\",\n    value: function () {\n      var _patch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(peerId, data) {\n        var peer;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.load(peerId);\n            case 2:\n              peer = _context5.sent;\n              _context5.next = 5;\n              return this._patch(peerId, data, peer);\n            case 5:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function patch(_x5, _x6) {\n        return _patch2.apply(this, arguments);\n      }\n      return patch;\n    }()\n  }, {\n    key: \"patchOrCreate\",\n    value: function () {\n      var _patchOrCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(peerId, data) {\n        var peer;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return this.load(peerId);\n            case 3:\n              peer = _context6.sent;\n              _context6.next = 11;\n              break;\n            case 6:\n              _context6.prev = 6;\n              _context6.t0 = _context6[\"catch\"](0);\n              if (!(_context6.t0.code !== codes.ERR_NOT_FOUND)) {\n                _context6.next = 10;\n                break;\n              }\n              throw _context6.t0;\n            case 10:\n              peer = {\n                id: peerId,\n                addresses: [],\n                protocols: [],\n                metadata: new Map()\n              };\n            case 11:\n              _context6.next = 13;\n              return this._patch(peerId, data, peer);\n            case 13:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 6]]);\n      }));\n      function patchOrCreate(_x7, _x8) {\n        return _patchOrCreate.apply(this, arguments);\n      }\n      return patchOrCreate;\n    }()\n  }, {\n    key: \"_patch\",\n    value: function () {\n      var _patch3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(peerId, data, peer) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.save(_objectSpread(_objectSpread(_objectSpread({}, peer), data), {}, {\n                id: peerId\n              }));\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function _patch(_x9, _x10, _x11) {\n        return _patch3.apply(this, arguments);\n      }\n      return _patch;\n    }()\n  }, {\n    key: \"merge\",\n    value: function () {\n      var _merge2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(peerId, data) {\n        var peer;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.load(peerId);\n            case 2:\n              peer = _context8.sent;\n              _context8.next = 5;\n              return this._merge(peerId, data, peer);\n            case 5:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function merge(_x12, _x13) {\n        return _merge2.apply(this, arguments);\n      }\n      return merge;\n    }()\n  }, {\n    key: \"mergeOrCreate\",\n    value: function () {\n      var _mergeOrCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(peerId, data) {\n        var peer;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return this.load(peerId);\n            case 3:\n              peer = _context9.sent;\n              _context9.next = 11;\n              break;\n            case 6:\n              _context9.prev = 6;\n              _context9.t0 = _context9[\"catch\"](0);\n              if (!(_context9.t0.code !== codes.ERR_NOT_FOUND)) {\n                _context9.next = 10;\n                break;\n              }\n              throw _context9.t0;\n            case 10:\n              peer = {\n                id: peerId,\n                addresses: [],\n                protocols: [],\n                metadata: new Map()\n              };\n            case 11:\n              _context9.next = 13;\n              return this._merge(peerId, data, peer);\n            case 13:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 14:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 6]]);\n      }));\n      function mergeOrCreate(_x14, _x15) {\n        return _mergeOrCreate.apply(this, arguments);\n      }\n      return mergeOrCreate;\n    }()\n  }, {\n    key: \"_merge\",\n    value: function () {\n      var _merge3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(peerId, data, peer) {\n        var _data$addresses, _peer$protocols, _data$protocols, _peer$metadata$entrie, _peer$metadata, _data$metadata$entrie, _data$metadata, _data$pubKey, _data$peerRecordEnvel;\n        var addresses;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              // if the peer has certified addresses, use those in\n              // favour of the supplied versions\n              addresses = new Map();\n              peer.addresses.forEach(function (addr) {\n                addresses.set(addr.multiaddr.toString(), addr.isCertified);\n              });\n              ((_data$addresses = data.addresses) !== null && _data$addresses !== void 0 ? _data$addresses : []).forEach(function (addr) {\n                var addrString = addr.multiaddr.toString();\n                var isAlreadyCertified = Boolean(addresses.get(addrString));\n                var isCertified = isAlreadyCertified || addr.isCertified;\n                addresses.set(addrString, isCertified);\n              });\n              _context10.next = 5;\n              return this.save({\n                id: peerId,\n                addresses: Array.from(addresses.entries()).map(function (_ref3) {\n                  var _ref4 = _slicedToArray(_ref3, 2),\n                    addrStr = _ref4[0],\n                    isCertified = _ref4[1];\n                  return {\n                    multiaddr: multiaddr(addrStr),\n                    isCertified: isCertified\n                  };\n                }),\n                protocols: Array.from(new Set([].concat(_toConsumableArray((_peer$protocols = peer.protocols) !== null && _peer$protocols !== void 0 ? _peer$protocols : []), _toConsumableArray((_data$protocols = data.protocols) !== null && _data$protocols !== void 0 ? _data$protocols : [])))),\n                metadata: new Map([].concat(_toConsumableArray((_peer$metadata$entrie = (_peer$metadata = peer.metadata) === null || _peer$metadata === void 0 ? void 0 : _peer$metadata.entries()) !== null && _peer$metadata$entrie !== void 0 ? _peer$metadata$entrie : []), _toConsumableArray((_data$metadata$entrie = (_data$metadata = data.metadata) === null || _data$metadata === void 0 ? void 0 : _data$metadata.entries()) !== null && _data$metadata$entrie !== void 0 ? _data$metadata$entrie : []))),\n                pubKey: (_data$pubKey = data.pubKey) !== null && _data$pubKey !== void 0 ? _data$pubKey : peer != null ? peer.pubKey : undefined,\n                peerRecordEnvelope: (_data$peerRecordEnvel = data.peerRecordEnvelope) !== null && _data$peerRecordEnvel !== void 0 ? _data$peerRecordEnvel : peer != null ? peer.peerRecordEnvelope : undefined\n              });\n            case 5:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function _merge(_x16, _x17, _x18) {\n        return _merge3.apply(this, arguments);\n      }\n      return _merge;\n    }()\n  }, {\n    key: \"all\",\n    value: function all() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, base32Str, buf;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context11.prev = 2;\n              _iterator = _asyncIterator(_this.components.getDatastore().queryKeys({\n                prefix: NAMESPACE_COMMON\n              }));\n            case 4:\n              _context11.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context11.sent).done)) {\n                _context11.next = 15;\n                break;\n              }\n              key = _step.value;\n              // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}\n              base32Str = key.toString().split('/')[2];\n              buf = base32.decode(base32Str);\n              _context11.next = 12;\n              return _this.load(peerIdFromBytes(buf));\n            case 12:\n              _iteratorAbruptCompletion = false;\n              _context11.next = 4;\n              break;\n            case 15:\n              _context11.next = 21;\n              break;\n            case 17:\n              _context11.prev = 17;\n              _context11.t0 = _context11[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context11.t0;\n            case 21:\n              _context11.prev = 21;\n              _context11.prev = 22;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context11.next = 26;\n                break;\n              }\n              _context11.next = 26;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 26:\n              _context11.prev = 26;\n              if (!_didIteratorError) {\n                _context11.next = 29;\n                break;\n              }\n              throw _iteratorError;\n            case 29:\n              return _context11.finish(26);\n            case 30:\n              return _context11.finish(21);\n            case 31:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, null, [[2, 17, 21, 31], [22,, 26, 30]]);\n      }))();\n    }\n  }]);\n  return PersistentStore;\n}();","map":{"version":3,"names":["logger","peerIdFromBytes","errcode","codes","Key","base32","multiaddr","Peer","PeerPB","mortice","equals","uint8arrayEquals","Components","log","NAMESPACE_COMMON","PersistentStore","_classCallCheck","components","lock","name","singleProcess","_createClass","key","value","init","_peerIdToDatastoreKey","peerId","type","error","Error","ERR_INVALID_PARAMETERS","b32key","toCID","toString","concat","_has","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","getDatastore","has","abrupt","sent","stop","_x","apply","arguments","_delete2","_callee2","_callee2$","_context2","delete","_delete","_x2","_load","_callee3","_peer$pubKey","_peer$peerRecordEnvel","buf","peer","metadata","_iterator2","_step2","meta","_callee3$","_context3","get","decode","Map","_createForOfIteratorHelper","s","n","done","set","err","e","f","_objectSpread","id","addresses","map","_ref","ma","isCertified","pubKey","undefined","peerRecordEnvelope","load","_x3","_save","_callee4","addressSet","_callee4$","_context4","publicKey","Set","filter","address","add","sort","a","b","localeCompare","_ref2","bytes","_toConsumableArray","keys","forEach","push","encode","protocols","put","subarray","save","_x4","_patch2","_callee5","data","_callee5$","_context5","_patch","patch","_x5","_x6","_patchOrCreate","_callee6","_callee6$","_context6","t0","code","ERR_NOT_FOUND","patchOrCreate","_x7","_x8","_patch3","_callee7","_callee7$","_context7","_x9","_x10","_x11","_merge2","_callee8","_callee8$","_context8","_merge","merge","_x12","_x13","_mergeOrCreate","_callee9","_callee9$","_context9","mergeOrCreate","_x14","_x15","_merge3","_callee10","_data$addresses","_peer$protocols","_data$protocols","_peer$metadata$entrie","_peer$metadata","_data$metadata$entrie","_data$metadata","_data$pubKey","_data$peerRecordEnvel","_callee10$","_context10","addr","addrString","isAlreadyCertified","Boolean","Array","from","entries","_ref3","_ref4","_slicedToArray","addrStr","_x16","_x17","_x18","all","_this","_wrapAsyncGenerator","_callee11","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","base32Str","_callee11$","_context11","_asyncIterator","queryKeys","prefix","_awaitAsyncGenerator","split","return","finish"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/peer-store/src/store.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { peerIdFromBytes } from '@libp2p/peer-id'\nimport errcode from 'err-code'\nimport { codes } from './errors.js'\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { Metadata, Peer as PeerPB } from './pb/peer.js'\nimport mortice from 'mortice'\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals'\nimport type { Peer } from '@libp2p/interface-peer-store'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport { Components } from '@libp2p/components'\n\nconst log = logger('libp2p:peer-store:store')\n\nconst NAMESPACE_COMMON = '/peers/'\n\nexport interface Store {\n  has: (peerId: PeerId) => Promise<boolean>\n  save: (peer: Peer) => Promise<Peer>\n  load: (peerId: PeerId) => Promise<Peer>\n  delete: (peerId: PeerId) => Promise<void>\n  merge: (peerId: PeerId, data: Partial<Peer>) => Promise<Peer>\n  mergeOrCreate: (peerId: PeerId, data: Partial<Peer>) => Promise<Peer>\n  patch: (peerId: PeerId, data: Partial<Peer>) => Promise<Peer>\n  patchOrCreate: (peerId: PeerId, data: Partial<Peer>) => Promise<Peer>\n  all: () => AsyncIterable<Peer>\n\n  lock: {\n    readLock: () => Promise<() => void>\n    writeLock: () => Promise<() => void>\n  }\n}\n\nexport class PersistentStore {\n  private components: Components = new Components()\n  public lock: any\n\n  constructor () {\n    this.lock = mortice({\n      name: 'peer-store',\n      singleProcess: true\n    })\n  }\n\n  init (components: Components) {\n    this.components = components\n  }\n\n  _peerIdToDatastoreKey (peerId: PeerId) {\n    if (peerId.type == null) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    const b32key = peerId.toCID().toString()\n    return new Key(`${NAMESPACE_COMMON}${b32key}`)\n  }\n\n  async has (peerId: PeerId) {\n    return await this.components.getDatastore().has(this._peerIdToDatastoreKey(peerId))\n  }\n\n  async delete (peerId: PeerId) {\n    await this.components.getDatastore().delete(this._peerIdToDatastoreKey(peerId))\n  }\n\n  async load (peerId: PeerId): Promise<Peer> {\n    const buf = await this.components.getDatastore().get(this._peerIdToDatastoreKey(peerId))\n    const peer = PeerPB.decode(buf)\n    const metadata = new Map()\n\n    for (const meta of peer.metadata) {\n      metadata.set(meta.key, meta.value)\n    }\n\n    return {\n      ...peer,\n      id: peerId,\n      addresses: peer.addresses.map(({ multiaddr: ma, isCertified }) => {\n        return {\n          multiaddr: multiaddr(ma),\n          isCertified: isCertified ?? false\n        }\n      }),\n      metadata,\n      pubKey: peer.pubKey ?? undefined,\n      peerRecordEnvelope: peer.peerRecordEnvelope ?? undefined\n    }\n  }\n\n  async save (peer: Peer) {\n    if (peer.pubKey != null && peer.id.publicKey != null && !uint8arrayEquals(peer.pubKey, peer.id.publicKey)) {\n      log.error('peer publicKey bytes do not match peer id publicKey bytes')\n      throw errcode(new Error('publicKey bytes do not match peer id publicKey bytes'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    // dedupe addresses\n    const addressSet = new Set()\n    const addresses = peer.addresses\n      .filter(address => {\n        if (addressSet.has(address.multiaddr.toString())) {\n          return false\n        }\n\n        addressSet.add(address.multiaddr.toString())\n        return true\n      })\n      .sort((a, b) => {\n        return a.multiaddr.toString().localeCompare(b.multiaddr.toString())\n      })\n      .map(({ multiaddr, isCertified }) => ({\n        multiaddr: multiaddr.bytes,\n        isCertified\n      }))\n\n    const metadata: Metadata[] = []\n\n    ;[...peer.metadata.keys()].sort().forEach(key => {\n      const value = peer.metadata.get(key)\n\n      if (value != null) {\n        metadata.push({ key, value })\n      }\n    })\n\n    const buf = PeerPB.encode({\n      addresses,\n      protocols: peer.protocols.sort(),\n      pubKey: peer.pubKey,\n      metadata,\n      peerRecordEnvelope: peer.peerRecordEnvelope\n    })\n\n    await this.components.getDatastore().put(this._peerIdToDatastoreKey(peer.id), buf.subarray())\n\n    return await this.load(peer.id)\n  }\n\n  async patch (peerId: PeerId, data: Partial<Peer>) {\n    const peer = await this.load(peerId)\n\n    return await this._patch(peerId, data, peer)\n  }\n\n  async patchOrCreate (peerId: PeerId, data: Partial<Peer>) {\n    let peer: Peer\n\n    try {\n      peer = await this.load(peerId)\n    } catch (err: any) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n\n      peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() }\n    }\n\n    return await this._patch(peerId, data, peer)\n  }\n\n  async _patch (peerId: PeerId, data: Partial<Peer>, peer: Peer) {\n    return await this.save({\n      ...peer,\n      ...data,\n      id: peerId\n    })\n  }\n\n  async merge (peerId: PeerId, data: Partial<Peer>) {\n    const peer = await this.load(peerId)\n\n    return await this._merge(peerId, data, peer)\n  }\n\n  async mergeOrCreate (peerId: PeerId, data: Partial<Peer>) {\n    /** @type {Peer} */\n    let peer\n\n    try {\n      peer = await this.load(peerId)\n    } catch (err: any) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n\n      peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() }\n    }\n\n    return await this._merge(peerId, data, peer)\n  }\n\n  async _merge (peerId: PeerId, data: Partial<Peer>, peer: Peer) {\n    // if the peer has certified addresses, use those in\n    // favour of the supplied versions\n    const addresses = new Map<string, boolean>()\n\n    peer.addresses.forEach((addr) => {\n      addresses.set(addr.multiaddr.toString(), addr.isCertified)\n    })\n\n    ;(data.addresses ?? []).forEach(addr => {\n      const addrString = addr.multiaddr.toString()\n      const isAlreadyCertified = Boolean(addresses.get(addrString))\n\n      const isCertified = isAlreadyCertified || addr.isCertified\n\n      addresses.set(addrString, isCertified)\n    })\n\n    return await this.save({\n      id: peerId,\n      addresses: Array.from(addresses.entries()).map(([addrStr, isCertified]) => {\n        return {\n          multiaddr: multiaddr(addrStr),\n          isCertified\n        }\n      }),\n      protocols: Array.from(new Set([\n        ...(peer.protocols ?? []),\n        ...(data.protocols ?? [])\n      ])),\n      metadata: new Map([\n        ...(peer.metadata?.entries() ?? []),\n        ...(data.metadata?.entries() ?? [])\n      ]),\n      pubKey: data.pubKey ?? (peer != null ? peer.pubKey : undefined),\n      peerRecordEnvelope: data.peerRecordEnvelope ?? (peer != null ? peer.peerRecordEnvelope : undefined)\n    })\n  }\n\n  async * all () {\n    for await (const key of this.components.getDatastore().queryKeys({\n      prefix: NAMESPACE_COMMON\n    })) {\n      // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}\n      const base32Str = key.toString().split('/')[2]\n      const buf = base32.decode(base32Str)\n\n      yield this.load(peerIdFromBytes(buf))\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,eAAe,QAAQ,iBAAiB;AACjD,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,GAAG,QAAQ,yBAAyB;AAC7C,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAAmBC,IAAI,IAAIC,MAAM,QAAQ,cAAc;AACvD,OAAOC,OAAO,MAAM,SAAS;AAC7B,SAASC,MAAM,IAAIC,gBAAgB,QAAQ,oBAAoB;AAG/D,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,IAAMC,GAAG,GAAGb,MAAM,CAAC,yBAAyB,CAAC;AAE7C,IAAMc,gBAAgB,GAAG,SAAS;AAmBlC,WAAaC,eAAe;EAI1B,SAAAA,gBAAA;IAAAC,eAAA,OAAAD,eAAA;IAHQ,KAAAE,UAAU,GAAe,IAAIL,UAAU,EAAE;IAI/C,IAAI,CAACM,IAAI,GAAGT,OAAO,CAAC;MAClBU,IAAI,EAAE,YAAY;MAClBC,aAAa,EAAE;KAChB,CAAC;EACJ;EAACC,YAAA,CAAAN,eAAA;IAAAO,GAAA;IAAAC,KAAA,EAED,SAAAC,KAAMP,UAAsB;MAC1B,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC9B;EAAC;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAE,sBAAuBC,MAAc;MACnC,IAAIA,MAAM,CAACC,IAAI,IAAI,IAAI,EAAE;QACvBd,GAAG,CAACe,KAAK,CAAC,qDAAqD,CAAC;QAChE,MAAM1B,OAAO,CAAC,IAAI2B,KAAK,CAAC,uCAAuC,CAAC,EAAE1B,KAAK,CAAC2B,sBAAsB,CAAC;;MAGjG,IAAMC,MAAM,GAAGL,MAAM,CAACM,KAAK,EAAE,CAACC,QAAQ,EAAE;MACxC,OAAO,IAAI7B,GAAG,IAAA8B,MAAA,CAAIpB,gBAAgB,EAAAoB,MAAA,CAAGH,MAAM,CAAE,CAAC;IAChD;EAAC;IAAAT,GAAA;IAAAC,KAAA;MAAA,IAAAY,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAWb,MAAc;QAAA,OAAAW,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACV,IAAI,CAAC3B,UAAU,CAAC4B,YAAY,EAAE,CAACC,GAAG,CAAC,IAAI,CAACrB,qBAAqB,CAACC,MAAM,CAAC,CAAC;YAAA;cAAA,OAAAgB,QAAA,CAAAK,MAAA,WAAAL,QAAA,CAAAM,IAAA;YAAA;YAAA;cAAA,OAAAN,QAAA,CAAAO,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA,CACpF;MAAA,SAAAO,IAAAI,EAAA;QAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAN,GAAA;IAAA;EAAA;IAAAxB,GAAA;IAAAC,KAAA;MAAA,IAAA8B,QAAA,GAAAjB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAgB,SAAc5B,MAAc;QAAA,OAAAW,mBAAA,GAAAG,IAAA,UAAAe,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAb,IAAA,GAAAa,SAAA,CAAAZ,IAAA;YAAA;cAAAY,SAAA,CAAAZ,IAAA;cAAA,OACpB,IAAI,CAAC3B,UAAU,CAAC4B,YAAY,EAAE,CAACY,MAAM,CAAC,IAAI,CAAChC,qBAAqB,CAACC,MAAM,CAAC,CAAC;YAAA;YAAA;cAAA,OAAA8B,SAAA,CAAAP,IAAA;UAAA;QAAA,GAAAK,QAAA;MAAA,CAChF;MAAA,SAAAI,QAAAC,GAAA;QAAA,OAAAN,QAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAM,OAAA;IAAA;EAAA;IAAApC,GAAA;IAAAC,KAAA;MAAA,IAAAqC,KAAA,GAAAxB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAuB,SAAYnC,MAAc;QAAA,IAAAoC,YAAA,EAAAC,qBAAA;QAAA,IAAAC,GAAA,EAAAC,IAAA,EAAAC,QAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,IAAA;QAAA,OAAAhC,mBAAA,GAAAG,IAAA,UAAA8B,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAA3B,IAAA;YAAA;cAAA2B,SAAA,CAAA3B,IAAA;cAAA,OACN,IAAI,CAAC3B,UAAU,CAAC4B,YAAY,EAAE,CAAC2B,GAAG,CAAC,IAAI,CAAC/C,qBAAqB,CAACC,MAAM,CAAC,CAAC;YAAA;cAAlFsC,GAAG,GAAAO,SAAA,CAAAvB,IAAA;cACHiB,IAAI,GAAGzD,MAAM,CAACiE,MAAM,CAACT,GAAG,CAAC;cACzBE,QAAQ,GAAG,IAAIQ,GAAG,EAAE;cAAAP,UAAA,GAAAQ,0BAAA,CAEPV,IAAI,CAACC,QAAQ;cAAA;gBAAhC,KAAAC,UAAA,CAAAS,CAAA,MAAAR,MAAA,GAAAD,UAAA,CAAAU,CAAA,IAAAC,IAAA,GAAkC;kBAAvBT,IAAI,GAAAD,MAAA,CAAA7C,KAAA;kBACb2C,QAAQ,CAACa,GAAG,CAACV,IAAI,CAAC/C,GAAG,EAAE+C,IAAI,CAAC9C,KAAK,CAAC;;cACnC,SAAAyD,GAAA;gBAAAb,UAAA,CAAAc,CAAA,CAAAD,GAAA;cAAA;gBAAAb,UAAA,CAAAe,CAAA;cAAA;cAAA,OAAAX,SAAA,CAAAxB,MAAA,WAAAoC,aAAA,CAAAA,aAAA,KAGIlB,IAAI;gBACPmB,EAAE,EAAE1D,MAAM;gBACV2D,SAAS,EAAEpB,IAAI,CAACoB,SAAS,CAACC,GAAG,CAAC,UAAAC,IAAA,EAAmC;kBAAA,IAArBC,EAAE,GAAAD,IAAA,CAAbjF,SAAS;oBAAMmF,WAAW,GAAAF,IAAA,CAAXE,WAAW;kBACzD,OAAO;oBACLnF,SAAS,EAAEA,SAAS,CAACkF,EAAE,CAAC;oBACxBC,WAAW,EAAEA,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAI;mBAC7B;gBACH,CAAC,CAAC;gBACFvB,QAAQ,EAARA,QAAQ;gBACRwB,MAAM,GAAA5B,YAAA,GAAEG,IAAI,CAACyB,MAAM,cAAA5B,YAAA,cAAAA,YAAA,GAAI6B,SAAS;gBAChCC,kBAAkB,GAAA7B,qBAAA,GAAEE,IAAI,CAAC2B,kBAAkB,cAAA7B,qBAAA,cAAAA,qBAAA,GAAI4B;cAAS;YAAA;YAAA;cAAA,OAAApB,SAAA,CAAAtB,IAAA;UAAA;QAAA,GAAAY,QAAA;MAAA,CAE3D;MAAA,SAAAgC,KAAAC,GAAA;QAAA,OAAAlC,KAAA,CAAAT,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAyC,IAAA;IAAA;EAAA;IAAAvE,GAAA;IAAAC,KAAA;MAAA,IAAAwE,KAAA,GAAA3D,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA0D,SAAY/B,IAAU;QAAA,IAAAgC,UAAA,EAAAZ,SAAA,EAAAnB,QAAA,EAAAF,GAAA;QAAA,OAAA3B,mBAAA,GAAAG,IAAA,UAAA0D,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAxD,IAAA,GAAAwD,SAAA,CAAAvD,IAAA;YAAA;cAAA,MAChBqB,IAAI,CAACyB,MAAM,IAAI,IAAI,IAAIzB,IAAI,CAACmB,EAAE,CAACgB,SAAS,IAAI,IAAI,IAAI,CAACzF,gBAAgB,CAACsD,IAAI,CAACyB,MAAM,EAAEzB,IAAI,CAACmB,EAAE,CAACgB,SAAS,CAAC;gBAAAD,SAAA,CAAAvD,IAAA;gBAAA;cAAA;cACvG/B,GAAG,CAACe,KAAK,CAAC,2DAA2D,CAAC;cAAA,MAChE1B,OAAO,CAAC,IAAI2B,KAAK,CAAC,sDAAsD,CAAC,EAAE1B,KAAK,CAAC2B,sBAAsB,CAAC;YAAA;cAGhH;cACMmE,UAAU,GAAG,IAAII,GAAG,EAAE;cACtBhB,SAAS,GAAGpB,IAAI,CAACoB,SAAS,CAC7BiB,MAAM,CAAC,UAAAC,OAAO,EAAG;gBAChB,IAAIN,UAAU,CAACnD,GAAG,CAACyD,OAAO,CAACjG,SAAS,CAAC2B,QAAQ,EAAE,CAAC,EAAE;kBAChD,OAAO,KAAK;;gBAGdgE,UAAU,CAACO,GAAG,CAACD,OAAO,CAACjG,SAAS,CAAC2B,QAAQ,EAAE,CAAC;gBAC5C,OAAO,IAAI;cACb,CAAC,CAAC,CACDwE,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAI;gBACb,OAAOD,CAAC,CAACpG,SAAS,CAAC2B,QAAQ,EAAE,CAAC2E,aAAa,CAACD,CAAC,CAACrG,SAAS,CAAC2B,QAAQ,EAAE,CAAC;cACrE,CAAC,CAAC,CACDqD,GAAG,CAAC,UAAAuB,KAAA;gBAAA,IAAGvG,SAAS,GAAAuG,KAAA,CAATvG,SAAS;kBAAEmF,WAAW,GAAAoB,KAAA,CAAXpB,WAAW;gBAAA,OAAQ;kBACpCnF,SAAS,EAAEA,SAAS,CAACwG,KAAK;kBAC1BrB,WAAW,EAAXA;iBACD;cAAA,CAAC,CAAC;cAECvB,QAAQ,GAAe,EAAE;cAE9B6C,kBAAA,CAAI9C,IAAI,CAACC,QAAQ,CAAC8C,IAAI,EAAE,EAAEP,IAAI,EAAE,CAACQ,OAAO,CAAC,UAAA3F,GAAG,EAAG;gBAC9C,IAAMC,KAAK,GAAG0C,IAAI,CAACC,QAAQ,CAACM,GAAG,CAAClD,GAAG,CAAC;gBAEpC,IAAIC,KAAK,IAAI,IAAI,EAAE;kBACjB2C,QAAQ,CAACgD,IAAI,CAAC;oBAAE5F,GAAG,EAAHA,GAAG;oBAAEC,KAAK,EAALA;kBAAK,CAAE,CAAC;;cAEjC,CAAC,CAAC;cAEIyC,GAAG,GAAGxD,MAAM,CAAC2G,MAAM,CAAC;gBACxB9B,SAAS,EAATA,SAAS;gBACT+B,SAAS,EAAEnD,IAAI,CAACmD,SAAS,CAACX,IAAI,EAAE;gBAChCf,MAAM,EAAEzB,IAAI,CAACyB,MAAM;gBACnBxB,QAAQ,EAARA,QAAQ;gBACR0B,kBAAkB,EAAE3B,IAAI,CAAC2B;eAC1B,CAAC;cAAAO,SAAA,CAAAvD,IAAA;cAAA,OAEI,IAAI,CAAC3B,UAAU,CAAC4B,YAAY,EAAE,CAACwE,GAAG,CAAC,IAAI,CAAC5F,qBAAqB,CAACwC,IAAI,CAACmB,EAAE,CAAC,EAAEpB,GAAG,CAACsD,QAAQ,EAAE,CAAC;YAAA;cAAAnB,SAAA,CAAAvD,IAAA;cAAA,OAEhF,IAAI,CAACiD,IAAI,CAAC5B,IAAI,CAACmB,EAAE,CAAC;YAAA;cAAA,OAAAe,SAAA,CAAApD,MAAA,WAAAoD,SAAA,CAAAnD,IAAA;YAAA;YAAA;cAAA,OAAAmD,SAAA,CAAAlD,IAAA;UAAA;QAAA,GAAA+C,QAAA;MAAA,CAChC;MAAA,SAAAuB,KAAAC,GAAA;QAAA,OAAAzB,KAAA,CAAA5C,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAmE,IAAA;IAAA;EAAA;IAAAjG,GAAA;IAAAC,KAAA;MAAA,IAAAkG,OAAA,GAAArF,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAoF,SAAahG,MAAc,EAAEiG,IAAmB;QAAA,IAAA1D,IAAA;QAAA,OAAA5B,mBAAA,GAAAG,IAAA,UAAAoF,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAlF,IAAA,GAAAkF,SAAA,CAAAjF,IAAA;YAAA;cAAAiF,SAAA,CAAAjF,IAAA;cAAA,OAC3B,IAAI,CAACiD,IAAI,CAACnE,MAAM,CAAC;YAAA;cAA9BuC,IAAI,GAAA4D,SAAA,CAAA7E,IAAA;cAAA6E,SAAA,CAAAjF,IAAA;cAAA,OAEG,IAAI,CAACkF,MAAM,CAACpG,MAAM,EAAEiG,IAAI,EAAE1D,IAAI,CAAC;YAAA;cAAA,OAAA4D,SAAA,CAAA9E,MAAA,WAAA8E,SAAA,CAAA7E,IAAA;YAAA;YAAA;cAAA,OAAA6E,SAAA,CAAA5E,IAAA;UAAA;QAAA,GAAAyE,QAAA;MAAA,CAC7C;MAAA,SAAAK,MAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAR,OAAA,CAAAtE,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAA2E,KAAA;IAAA;EAAA;IAAAzG,GAAA;IAAAC,KAAA;MAAA,IAAA2G,cAAA,GAAA9F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA6F,SAAqBzG,MAAc,EAAEiG,IAAmB;QAAA,IAAA1D,IAAA;QAAA,OAAA5B,mBAAA,GAAAG,IAAA,UAAA4F,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA1F,IAAA,GAAA0F,SAAA,CAAAzF,IAAA;YAAA;cAAAyF,SAAA,CAAA1F,IAAA;cAAA0F,SAAA,CAAAzF,IAAA;cAAA,OAIvC,IAAI,CAACiD,IAAI,CAACnE,MAAM,CAAC;YAAA;cAA9BuC,IAAI,GAAAoE,SAAA,CAAArF,IAAA;cAAAqF,SAAA,CAAAzF,IAAA;cAAA;YAAA;cAAAyF,SAAA,CAAA1F,IAAA;cAAA0F,SAAA,CAAAC,EAAA,GAAAD,SAAA;cAAA,MAEAA,SAAA,CAAAC,EAAA,CAAIC,IAAI,KAAKpI,KAAK,CAACqI,aAAa;gBAAAH,SAAA,CAAAzF,IAAA;gBAAA;cAAA;cAAA,MAAAyF,SAAA,CAAAC,EAAA;YAAA;cAIpCrE,IAAI,GAAG;gBAAEmB,EAAE,EAAE1D,MAAM;gBAAE2D,SAAS,EAAE,EAAE;gBAAE+B,SAAS,EAAE,EAAE;gBAAElD,QAAQ,EAAE,IAAIQ,GAAG;cAAE,CAAE;YAAA;cAAA2D,SAAA,CAAAzF,IAAA;cAAA,OAG7D,IAAI,CAACkF,MAAM,CAACpG,MAAM,EAAEiG,IAAI,EAAE1D,IAAI,CAAC;YAAA;cAAA,OAAAoE,SAAA,CAAAtF,MAAA,WAAAsF,SAAA,CAAArF,IAAA;YAAA;YAAA;cAAA,OAAAqF,SAAA,CAAApF,IAAA;UAAA;QAAA,GAAAkF,QAAA;MAAA,CAC7C;MAAA,SAAAM,cAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAT,cAAA,CAAA/E,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAqF,aAAA;IAAA;EAAA;IAAAnH,GAAA;IAAAC,KAAA;MAAA,IAAAqH,OAAA,GAAAxG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAuG,SAAcnH,MAAc,EAAEiG,IAAmB,EAAE1D,IAAU;QAAA,OAAA5B,mBAAA,GAAAG,IAAA,UAAAsG,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApG,IAAA,GAAAoG,SAAA,CAAAnG,IAAA;YAAA;cAAAmG,SAAA,CAAAnG,IAAA;cAAA,OAC9C,IAAI,CAAC2E,IAAI,CAAApC,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACjBlB,IAAI,GACJ0D,IAAI;gBACPvC,EAAE,EAAE1D;cAAM,EACX,CAAC;YAAA;cAAA,OAAAqH,SAAA,CAAAhG,MAAA,WAAAgG,SAAA,CAAA/F,IAAA;YAAA;YAAA;cAAA,OAAA+F,SAAA,CAAA9F,IAAA;UAAA;QAAA,GAAA4F,QAAA;MAAA,CACH;MAAA,SAAAf,OAAAkB,GAAA,EAAAC,IAAA,EAAAC,IAAA;QAAA,OAAAN,OAAA,CAAAzF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAA0E,MAAA;IAAA;EAAA;IAAAxG,GAAA;IAAAC,KAAA;MAAA,IAAA4H,OAAA,GAAA/G,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA8G,SAAa1H,MAAc,EAAEiG,IAAmB;QAAA,IAAA1D,IAAA;QAAA,OAAA5B,mBAAA,GAAAG,IAAA,UAAA6G,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA3G,IAAA,GAAA2G,SAAA,CAAA1G,IAAA;YAAA;cAAA0G,SAAA,CAAA1G,IAAA;cAAA,OAC3B,IAAI,CAACiD,IAAI,CAACnE,MAAM,CAAC;YAAA;cAA9BuC,IAAI,GAAAqF,SAAA,CAAAtG,IAAA;cAAAsG,SAAA,CAAA1G,IAAA;cAAA,OAEG,IAAI,CAAC2G,MAAM,CAAC7H,MAAM,EAAEiG,IAAI,EAAE1D,IAAI,CAAC;YAAA;cAAA,OAAAqF,SAAA,CAAAvG,MAAA,WAAAuG,SAAA,CAAAtG,IAAA;YAAA;YAAA;cAAA,OAAAsG,SAAA,CAAArG,IAAA;UAAA;QAAA,GAAAmG,QAAA;MAAA,CAC7C;MAAA,SAAAI,MAAAC,IAAA,EAAAC,IAAA;QAAA,OAAAP,OAAA,CAAAhG,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAoG,KAAA;IAAA;EAAA;IAAAlI,GAAA;IAAAC,KAAA;MAAA,IAAAoI,cAAA,GAAAvH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAsH,SAAqBlI,MAAc,EAAEiG,IAAmB;QAAA,IAAA1D,IAAA;QAAA,OAAA5B,mBAAA,GAAAG,IAAA,UAAAqH,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAnH,IAAA,GAAAmH,SAAA,CAAAlH,IAAA;YAAA;cAAAkH,SAAA,CAAAnH,IAAA;cAAAmH,SAAA,CAAAlH,IAAA;cAAA,OAKvC,IAAI,CAACiD,IAAI,CAACnE,MAAM,CAAC;YAAA;cAA9BuC,IAAI,GAAA6F,SAAA,CAAA9G,IAAA;cAAA8G,SAAA,CAAAlH,IAAA;cAAA;YAAA;cAAAkH,SAAA,CAAAnH,IAAA;cAAAmH,SAAA,CAAAxB,EAAA,GAAAwB,SAAA;cAAA,MAEAA,SAAA,CAAAxB,EAAA,CAAIC,IAAI,KAAKpI,KAAK,CAACqI,aAAa;gBAAAsB,SAAA,CAAAlH,IAAA;gBAAA;cAAA;cAAA,MAAAkH,SAAA,CAAAxB,EAAA;YAAA;cAIpCrE,IAAI,GAAG;gBAAEmB,EAAE,EAAE1D,MAAM;gBAAE2D,SAAS,EAAE,EAAE;gBAAE+B,SAAS,EAAE,EAAE;gBAAElD,QAAQ,EAAE,IAAIQ,GAAG;cAAE,CAAE;YAAA;cAAAoF,SAAA,CAAAlH,IAAA;cAAA,OAG7D,IAAI,CAAC2G,MAAM,CAAC7H,MAAM,EAAEiG,IAAI,EAAE1D,IAAI,CAAC;YAAA;cAAA,OAAA6F,SAAA,CAAA/G,MAAA,WAAA+G,SAAA,CAAA9G,IAAA;YAAA;YAAA;cAAA,OAAA8G,SAAA,CAAA7G,IAAA;UAAA;QAAA,GAAA2G,QAAA;MAAA,CAC7C;MAAA,SAAAG,cAAAC,IAAA,EAAAC,IAAA;QAAA,OAAAN,cAAA,CAAAxG,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAA2G,aAAA;IAAA;EAAA;IAAAzI,GAAA;IAAAC,KAAA;MAAA,IAAA2I,OAAA,GAAA9H,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA6H,UAAczI,MAAc,EAAEiG,IAAmB,EAAE1D,IAAU;QAAA,IAAAmG,eAAA,EAAAC,eAAA,EAAAC,eAAA,EAAAC,qBAAA,EAAAC,cAAA,EAAAC,qBAAA,EAAAC,cAAA,EAAAC,YAAA,EAAAC,qBAAA;QAAA,IAAAvF,SAAA;QAAA,OAAAhD,mBAAA,GAAAG,IAAA,UAAAqI,WAAAC,UAAA;UAAA,kBAAAA,UAAA,CAAAnI,IAAA,GAAAmI,UAAA,CAAAlI,IAAA;YAAA;cAC3D;cACA;cACMyC,SAAS,GAAG,IAAIX,GAAG,EAAmB;cAE5CT,IAAI,CAACoB,SAAS,CAAC4B,OAAO,CAAC,UAAC8D,IAAI,EAAI;gBAC9B1F,SAAS,CAACN,GAAG,CAACgG,IAAI,CAACzK,SAAS,CAAC2B,QAAQ,EAAE,EAAE8I,IAAI,CAACtF,WAAW,CAAC;cAC5D,CAAC,CAAC;cAED,EAAA2E,eAAA,GAACzC,IAAI,CAACtC,SAAS,cAAA+E,eAAA,cAAAA,eAAA,GAAI,EAAE,EAAEnD,OAAO,CAAC,UAAA8D,IAAI,EAAG;gBACrC,IAAMC,UAAU,GAAGD,IAAI,CAACzK,SAAS,CAAC2B,QAAQ,EAAE;gBAC5C,IAAMgJ,kBAAkB,GAAGC,OAAO,CAAC7F,SAAS,CAACb,GAAG,CAACwG,UAAU,CAAC,CAAC;gBAE7D,IAAMvF,WAAW,GAAGwF,kBAAkB,IAAIF,IAAI,CAACtF,WAAW;gBAE1DJ,SAAS,CAACN,GAAG,CAACiG,UAAU,EAAEvF,WAAW,CAAC;cACxC,CAAC,CAAC;cAAAqF,UAAA,CAAAlI,IAAA;cAAA,OAEW,IAAI,CAAC2E,IAAI,CAAC;gBACrBnC,EAAE,EAAE1D,MAAM;gBACV2D,SAAS,EAAE8F,KAAK,CAACC,IAAI,CAAC/F,SAAS,CAACgG,OAAO,EAAE,CAAC,CAAC/F,GAAG,CAAC,UAAAgG,KAAA,EAA2B;kBAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,KAAA;oBAAzBG,OAAO,GAAAF,KAAA;oBAAE9F,WAAW,GAAA8F,KAAA;kBACnE,OAAO;oBACLjL,SAAS,EAAEA,SAAS,CAACmL,OAAO,CAAC;oBAC7BhG,WAAW,EAAXA;mBACD;gBACH,CAAC,CAAC;gBACF2B,SAAS,EAAE+D,KAAK,CAACC,IAAI,CAAC,IAAI/E,GAAG,IAAAnE,MAAA,CAAA6E,kBAAA,EAAAsD,eAAA,GACvBpG,IAAI,CAACmD,SAAS,cAAAiD,eAAA,cAAAA,eAAA,GAAI,EAAE,GAAAtD,kBAAA,EAAAuD,eAAA,GACpB3C,IAAI,CAACP,SAAS,cAAAkD,eAAA,cAAAA,eAAA,GAAI,EAAE,EACzB,CAAC,CAAC;gBACHpG,QAAQ,EAAE,IAAIQ,GAAG,IAAAxC,MAAA,CAAA6E,kBAAA,EAAAwD,qBAAA,IAAAC,cAAA,GACXvG,IAAI,CAACC,QAAQ,cAAAsG,cAAA,uBAAbA,cAAA,CAAea,OAAO,EAAE,cAAAd,qBAAA,cAAAA,qBAAA,GAAI,EAAE,GAAAxD,kBAAA,EAAA0D,qBAAA,IAAAC,cAAA,GAC9B/C,IAAI,CAACzD,QAAQ,cAAAwG,cAAA,uBAAbA,cAAA,CAAeW,OAAO,EAAE,cAAAZ,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EACnC,CAAC;gBACF/E,MAAM,GAAAiF,YAAA,GAAEhD,IAAI,CAACjC,MAAM,cAAAiF,YAAA,cAAAA,YAAA,GAAK1G,IAAI,IAAI,IAAI,GAAGA,IAAI,CAACyB,MAAM,GAAGC,SAAU;gBAC/DC,kBAAkB,GAAAgF,qBAAA,GAAEjD,IAAI,CAAC/B,kBAAkB,cAAAgF,qBAAA,cAAAA,qBAAA,GAAK3G,IAAI,IAAI,IAAI,GAAGA,IAAI,CAAC2B,kBAAkB,GAAGD;eAC1F,CAAC;YAAA;cAAA,OAAAmF,UAAA,CAAA/H,MAAA,WAAA+H,UAAA,CAAA9H,IAAA;YAAA;YAAA;cAAA,OAAA8H,UAAA,CAAA7H,IAAA;UAAA;QAAA,GAAAkH,SAAA;MAAA,CACH;MAAA,SAAAZ,OAAAmC,IAAA,EAAAC,IAAA,EAAAC,IAAA;QAAA,OAAA1B,OAAA,CAAA/G,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAmG,MAAA;IAAA;EAAA;IAAAjI,GAAA;IAAAC,KAAA,EAED,SAAAsK,IAAA,EAAW;MAAA,IAAAC,KAAA;MAAA,OAAAC,mBAAA,eAAA1J,mBAAA,GAAAC,IAAA,UAAA0J,UAAA;QAAA,IAAAC,yBAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,SAAA,EAAAC,KAAA,EAAA/K,GAAA,EAAAgL,SAAA,EAAAtI,GAAA;QAAA,OAAA3B,mBAAA,GAAAG,IAAA,UAAA+J,WAAAC,UAAA;UAAA,kBAAAA,UAAA,CAAA7J,IAAA,GAAA6J,UAAA,CAAA5J,IAAA;YAAA;cAAAqJ,yBAAA;cAAAC,iBAAA;cAAAM,UAAA,CAAA7J,IAAA;cAAAyJ,SAAA,GAAAK,cAAA,CACeX,KAAI,CAAC7K,UAAU,CAAC4B,YAAY,EAAE,CAAC6J,SAAS,CAAC;gBAC/DC,MAAM,EAAE7L;eACT,CAAC;YAAA;cAAA0L,UAAA,CAAA5J,IAAA;cAAA,OAAAgK,oBAAA,CAAAR,SAAA,CAAAxJ,IAAA;YAAA;cAAA,MAAAqJ,yBAAA,KAAAI,KAAA,GAAAG,UAAA,CAAAxJ,IAAA,EAAA8B,IAAA;gBAAA0H,UAAA,CAAA5J,IAAA;gBAAA;cAAA;cAFetB,GAAG,GAAA+K,KAAA,CAAA9K,KAAA;cAGlB;cACM+K,SAAS,GAAGhL,GAAG,CAACW,QAAQ,EAAE,CAAC4K,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;cACxC7I,GAAG,GAAG3D,MAAM,CAACoE,MAAM,CAAC6H,SAAS,CAAC;cAAAE,UAAA,CAAA5J,IAAA;cAEpC,OAAMkJ,KAAI,CAACjG,IAAI,CAAC5F,eAAe,CAAC+D,GAAG,CAAC,CAAC;YAAA;cAAAiI,yBAAA;cAAAO,UAAA,CAAA5J,IAAA;cAAA;YAAA;cAAA4J,UAAA,CAAA5J,IAAA;cAAA;YAAA;cAAA4J,UAAA,CAAA7J,IAAA;cAAA6J,UAAA,CAAAlE,EAAA,GAAAkE,UAAA;cAAAN,iBAAA;cAAAC,cAAA,GAAAK,UAAA,CAAAlE,EAAA;YAAA;cAAAkE,UAAA,CAAA7J,IAAA;cAAA6J,UAAA,CAAA7J,IAAA;cAAA,MAAAsJ,yBAAA,IAAAG,SAAA,CAAAU,MAAA;gBAAAN,UAAA,CAAA5J,IAAA;gBAAA;cAAA;cAAA4J,UAAA,CAAA5J,IAAA;cAAA,OAAAgK,oBAAA,CAAAR,SAAA,CAAAU,MAAA;YAAA;cAAAN,UAAA,CAAA7J,IAAA;cAAA,KAAAuJ,iBAAA;gBAAAM,UAAA,CAAA5J,IAAA;gBAAA;cAAA;cAAA,MAAAuJ,cAAA;YAAA;cAAA,OAAAK,UAAA,CAAAO,MAAA;YAAA;cAAA,OAAAP,UAAA,CAAAO,MAAA;YAAA;YAAA;cAAA,OAAAP,UAAA,CAAAvJ,IAAA;UAAA;QAAA,GAAA+I,SAAA;MAAA;IAEzC;EAAC;EAAA,OAAAjL,eAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
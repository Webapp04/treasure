{"ast":null,"code":"import _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { createPublish } from './publish.js';\nimport { createResolve } from './resolve.js';\nimport { PubSubAPI } from './pubsub/index.js';\nexport var NameAPI = /*#__PURE__*/_createClass(\n/**\n * @param {object} config\n * @param {import('../ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('../../types').Options} config.options\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n */\nfunction NameAPI(_ref) {\n  var dns = _ref.dns,\n    ipns = _ref.ipns,\n    repo = _ref.repo,\n    codecs = _ref.codecs,\n    peerId = _ref.peerId,\n    isOnline = _ref.isOnline,\n    keychain = _ref.keychain,\n    options = _ref.options;\n  _classCallCheck(this, NameAPI);\n  this.publish = createPublish({\n    ipns: ipns,\n    repo: repo,\n    codecs: codecs,\n    peerId: peerId,\n    isOnline: isOnline,\n    keychain: keychain\n  });\n  this.resolve = createResolve({\n    dns: dns,\n    ipns: ipns,\n    isOnline: isOnline,\n    options: options\n  });\n  this.pubsub = new PubSubAPI({\n    ipns: ipns,\n    options: options\n  });\n});","map":{"version":3,"names":["createPublish","createResolve","PubSubAPI","NameAPI","_createClass","_ref","dns","ipns","repo","codecs","peerId","isOnline","keychain","options","_classCallCheck","publish","resolve","pubsub"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/name/index.js"],"sourcesContent":["import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { PubSubAPI } from './pubsub/index.js'\n\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublish({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolve({ dns, ipns, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,SAAS,QAAQ,mBAAmB;AAE7C,WAAaC,OAAO,gBAAAC,YAAA;AAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAAAD,QAAAE,IAAA,EAA+E;EAAA,IAAhEC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,IAAI,GAAAH,IAAA,CAAJG,IAAI;IAAEC,MAAM,GAAAJ,IAAA,CAANI,MAAM;IAAEC,MAAM,GAAAL,IAAA,CAANK,MAAM;IAAEC,QAAQ,GAAAN,IAAA,CAARM,QAAQ;IAAEC,QAAQ,GAAAP,IAAA,CAARO,QAAQ;IAAEC,OAAO,GAAAR,IAAA,CAAPQ,OAAO;EAAAC,eAAA,OAAAX,OAAA;EACzE,IAAI,CAACY,OAAO,GAAGf,aAAa,CAAC;IAAEO,IAAI,EAAJA,IAAI;IAAEC,IAAI,EAAJA,IAAI;IAAEC,MAAM,EAANA,MAAM;IAAEC,MAAM,EAANA,MAAM;IAAEC,QAAQ,EAARA,QAAQ;IAAEC,QAAQ,EAARA;EAAS,CAAC,CAAC;EAChF,IAAI,CAACI,OAAO,GAAGf,aAAa,CAAC;IAAEK,GAAG,EAAHA,GAAG;IAAEC,IAAI,EAAJA,IAAI;IAAEI,QAAQ,EAARA,QAAQ;IAAEE,OAAO,EAAPA;EAAQ,CAAC,CAAC;EAC9D,IAAI,CAACI,MAAM,GAAG,IAAIf,SAAS,CAAC;IAAEK,IAAI,EAAJA,IAAI;IAAEM,OAAO,EAAPA;EAAQ,CAAC,CAAC;AAChD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
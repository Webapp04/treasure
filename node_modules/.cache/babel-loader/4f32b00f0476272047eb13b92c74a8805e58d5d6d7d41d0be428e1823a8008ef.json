{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { multiaddr } from '@multiformats/multiaddr';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createList(_ref) {\n  var repo = _ref.repo;\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"list\"]}\n   */\n  function list() {\n    return _list.apply(this, arguments);\n  }\n  function _list() {\n    _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        peers,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return repo.config.get('Bootstrap', options);\n          case 3:\n            peers = _context.sent;\n            return _context.abrupt(\"return\", {\n              Peers: (peers || []).map(function (ma) {\n                return multiaddr(ma);\n              })\n            });\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _list.apply(this, arguments);\n  }\n  return withTimeoutOption(list);\n}","map":{"version":3,"names":["withTimeoutOption","multiaddr","createList","_ref","repo","list","_list","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","peers","_args","wrap","_callee$","_context","prev","next","length","undefined","config","get","sent","abrupt","Peers","map","ma","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/bootstrap/list.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createList ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"list\"]}\n   */\n  async function list (options = {}) {\n    /** @type {string[]|null} */\n    const peers = (await repo.config.get('Bootstrap', options))\n    return { Peers: (peers || []).map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(list)\n}\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,SAAS,QAAQ,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAAC,IAAA,EAAY;EAAA,IAARC,IAAI,GAAAD,IAAA,CAAJC,IAAI;EAChC;AACF;AACA;EAFE,SAGeC,IAAIA,CAAA;IAAA,OAAAC,KAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,MAAA;IAAAA,KAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAnB,SAAAC,QAAA;MAAA,IAAAC,OAAA;QAAAC,KAAA;QAAAC,KAAA,GAAAP,SAAA;MAAA,OAAAE,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAqBP,OAAO,GAAAE,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OAEVhB,IAAI,CAACmB,MAAM,CAACC,GAAG,CAAC,WAAW,EAAEX,OAAO,CAAC;UAAA;YAApDC,KAAK,GAAAI,QAAA,CAAAO,IAAA;YAAA,OAAAP,QAAA,CAAAQ,MAAA,WACJ;cAAEC,KAAK,EAAE,CAACb,KAAK,IAAI,EAAE,EAAEc,GAAG,CAAC,UAAAC,EAAE;gBAAA,OAAI5B,SAAS,CAAC4B,EAAE,CAAC;cAAA;YAAE,CAAC;UAAA;UAAA;YAAA,OAAAX,QAAA,CAAAY,IAAA;QAAA;MAAA,GAAAlB,OAAA;IAAA,CACzD;IAAA,OAAAN,KAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOR,iBAAiB,CAACK,IAAI,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
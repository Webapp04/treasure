{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/* eslint-disable import/export */\n/* eslint-disable @typescript-eslint/no-namespace */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var CircuitRelay;\n(function (CircuitRelay) {\n  var Status;\n  (function (Status) {\n    Status[\"SUCCESS\"] = \"SUCCESS\";\n    Status[\"HOP_SRC_ADDR_TOO_LONG\"] = \"HOP_SRC_ADDR_TOO_LONG\";\n    Status[\"HOP_DST_ADDR_TOO_LONG\"] = \"HOP_DST_ADDR_TOO_LONG\";\n    Status[\"HOP_SRC_MULTIADDR_INVALID\"] = \"HOP_SRC_MULTIADDR_INVALID\";\n    Status[\"HOP_DST_MULTIADDR_INVALID\"] = \"HOP_DST_MULTIADDR_INVALID\";\n    Status[\"HOP_NO_CONN_TO_DST\"] = \"HOP_NO_CONN_TO_DST\";\n    Status[\"HOP_CANT_DIAL_DST\"] = \"HOP_CANT_DIAL_DST\";\n    Status[\"HOP_CANT_OPEN_DST_STREAM\"] = \"HOP_CANT_OPEN_DST_STREAM\";\n    Status[\"HOP_CANT_SPEAK_RELAY\"] = \"HOP_CANT_SPEAK_RELAY\";\n    Status[\"HOP_CANT_RELAY_TO_SELF\"] = \"HOP_CANT_RELAY_TO_SELF\";\n    Status[\"STOP_SRC_ADDR_TOO_LONG\"] = \"STOP_SRC_ADDR_TOO_LONG\";\n    Status[\"STOP_DST_ADDR_TOO_LONG\"] = \"STOP_DST_ADDR_TOO_LONG\";\n    Status[\"STOP_SRC_MULTIADDR_INVALID\"] = \"STOP_SRC_MULTIADDR_INVALID\";\n    Status[\"STOP_DST_MULTIADDR_INVALID\"] = \"STOP_DST_MULTIADDR_INVALID\";\n    Status[\"STOP_RELAY_REFUSED\"] = \"STOP_RELAY_REFUSED\";\n    Status[\"MALFORMED_MESSAGE\"] = \"MALFORMED_MESSAGE\";\n  })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n  var __StatusValues;\n  (function (__StatusValues) {\n    __StatusValues[__StatusValues[\"SUCCESS\"] = 100] = \"SUCCESS\";\n    __StatusValues[__StatusValues[\"HOP_SRC_ADDR_TOO_LONG\"] = 220] = \"HOP_SRC_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"HOP_DST_ADDR_TOO_LONG\"] = 221] = \"HOP_DST_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"HOP_SRC_MULTIADDR_INVALID\"] = 250] = \"HOP_SRC_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"HOP_DST_MULTIADDR_INVALID\"] = 251] = \"HOP_DST_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"HOP_NO_CONN_TO_DST\"] = 260] = \"HOP_NO_CONN_TO_DST\";\n    __StatusValues[__StatusValues[\"HOP_CANT_DIAL_DST\"] = 261] = \"HOP_CANT_DIAL_DST\";\n    __StatusValues[__StatusValues[\"HOP_CANT_OPEN_DST_STREAM\"] = 262] = \"HOP_CANT_OPEN_DST_STREAM\";\n    __StatusValues[__StatusValues[\"HOP_CANT_SPEAK_RELAY\"] = 270] = \"HOP_CANT_SPEAK_RELAY\";\n    __StatusValues[__StatusValues[\"HOP_CANT_RELAY_TO_SELF\"] = 280] = \"HOP_CANT_RELAY_TO_SELF\";\n    __StatusValues[__StatusValues[\"STOP_SRC_ADDR_TOO_LONG\"] = 320] = \"STOP_SRC_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"STOP_DST_ADDR_TOO_LONG\"] = 321] = \"STOP_DST_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"STOP_SRC_MULTIADDR_INVALID\"] = 350] = \"STOP_SRC_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"STOP_DST_MULTIADDR_INVALID\"] = 351] = \"STOP_DST_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"STOP_RELAY_REFUSED\"] = 390] = \"STOP_RELAY_REFUSED\";\n    __StatusValues[__StatusValues[\"MALFORMED_MESSAGE\"] = 400] = \"MALFORMED_MESSAGE\";\n  })(__StatusValues || (__StatusValues = {}));\n  (function (Status) {\n    Status.codec = function () {\n      return enumeration(__StatusValues);\n    };\n  })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n  var Type;\n  (function (Type) {\n    Type[\"HOP\"] = \"HOP\";\n    Type[\"STOP\"] = \"STOP\";\n    Type[\"STATUS\"] = \"STATUS\";\n    Type[\"CAN_HOP\"] = \"CAN_HOP\";\n  })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n  var __TypeValues;\n  (function (__TypeValues) {\n    __TypeValues[__TypeValues[\"HOP\"] = 1] = \"HOP\";\n    __TypeValues[__TypeValues[\"STOP\"] = 2] = \"STOP\";\n    __TypeValues[__TypeValues[\"STATUS\"] = 3] = \"STATUS\";\n    __TypeValues[__TypeValues[\"CAN_HOP\"] = 4] = \"CAN_HOP\";\n  })(__TypeValues || (__TypeValues = {}));\n  (function (Type) {\n    Type.codec = function () {\n      return enumeration(__TypeValues);\n    };\n  })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n  var Peer;\n  (function (Peer) {\n    var _codec;\n    Peer.codec = function () {\n      if (_codec == null) {\n        _codec = message(function (obj, writer) {\n          var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          if (opts.lengthDelimited !== false) {\n            writer.fork();\n          }\n          if (obj.id != null) {\n            writer.uint32(10);\n            writer.bytes(obj.id);\n          } else {\n            throw new Error('Protocol error: required field \"id\" was not found in object');\n          }\n          if (obj.addrs != null) {\n            var _iterator = _createForOfIteratorHelper(obj.addrs),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var value = _step.value;\n                writer.uint32(18);\n                writer.bytes(value);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          } else {\n            throw new Error('Protocol error: required field \"addrs\" was not found in object');\n          }\n          if (opts.lengthDelimited !== false) {\n            writer.ldelim();\n          }\n        }, function (reader, length) {\n          var _obj$addrs, _obj$addrs2;\n          var obj = {};\n          var end = length == null ? reader.len : reader.pos + length;\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                obj.id = reader.bytes();\n                break;\n              case 2:\n                obj.addrs = (_obj$addrs = obj.addrs) !== null && _obj$addrs !== void 0 ? _obj$addrs : [];\n                obj.addrs.push(reader.bytes());\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          obj.addrs = (_obj$addrs2 = obj.addrs) !== null && _obj$addrs2 !== void 0 ? _obj$addrs2 : [];\n          if (obj.id == null) {\n            throw new Error('Protocol error: value for required field \"id\" was not found in protobuf');\n          }\n          if (obj.addrs == null) {\n            throw new Error('Protocol error: value for required field \"addrs\" was not found in protobuf');\n          }\n          return obj;\n        });\n      }\n      return _codec;\n    };\n    Peer.encode = function (obj) {\n      return encodeMessage(obj, Peer.codec());\n    };\n    Peer.decode = function (buf) {\n      return decodeMessage(buf, Peer.codec());\n    };\n  })(Peer = CircuitRelay.Peer || (CircuitRelay.Peer = {}));\n  var _codec;\n  CircuitRelay.codec = function () {\n    if (_codec == null) {\n      _codec = message(function (obj, writer) {\n        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (opts.lengthDelimited !== false) {\n          writer.fork();\n        }\n        if (obj.type != null) {\n          writer.uint32(8);\n          CircuitRelay.Type.codec().encode(obj.type, writer);\n        }\n        if (obj.srcPeer != null) {\n          writer.uint32(18);\n          CircuitRelay.Peer.codec().encode(obj.srcPeer, writer);\n        }\n        if (obj.dstPeer != null) {\n          writer.uint32(26);\n          CircuitRelay.Peer.codec().encode(obj.dstPeer, writer);\n        }\n        if (obj.code != null) {\n          writer.uint32(32);\n          CircuitRelay.Status.codec().encode(obj.code, writer);\n        }\n        if (opts.lengthDelimited !== false) {\n          writer.ldelim();\n        }\n      }, function (reader, length) {\n        var obj = {};\n        var end = length == null ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              obj.type = CircuitRelay.Type.codec().decode(reader);\n              break;\n            case 2:\n              obj.srcPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n              break;\n            case 3:\n              obj.dstPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n              break;\n            case 4:\n              obj.code = CircuitRelay.Status.codec().decode(reader);\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return obj;\n      });\n    }\n    return _codec;\n  };\n  CircuitRelay.encode = function (obj) {\n    return encodeMessage(obj, CircuitRelay.codec());\n  };\n  CircuitRelay.decode = function (buf) {\n    return decodeMessage(buf, CircuitRelay.codec());\n  };\n})(CircuitRelay || (CircuitRelay = {}));","map":{"version":3,"names":["enumeration","encodeMessage","decodeMessage","message","CircuitRelay","Status","__StatusValues","codec","Type","__TypeValues","Peer","_codec","obj","writer","opts","arguments","length","undefined","lengthDelimited","fork","id","uint32","bytes","Error","addrs","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","e","f","ldelim","reader","_obj$addrs","_obj$addrs2","end","len","pos","tag","push","skipType","encode","decode","buf","type","srcPeer","dstPeer","code"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/circuit/pb/index.ts"],"sourcesContent":["/* eslint-disable import/export */\n/* eslint-disable @typescript-eslint/no-namespace */\n\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\nimport type { Codec } from 'protons-runtime'\n\nexport interface CircuitRelay {\n  type?: CircuitRelay.Type\n  srcPeer?: CircuitRelay.Peer\n  dstPeer?: CircuitRelay.Peer\n  code?: CircuitRelay.Status\n}\n\nexport namespace CircuitRelay {\n  export enum Status {\n    SUCCESS = 'SUCCESS',\n    HOP_SRC_ADDR_TOO_LONG = 'HOP_SRC_ADDR_TOO_LONG',\n    HOP_DST_ADDR_TOO_LONG = 'HOP_DST_ADDR_TOO_LONG',\n    HOP_SRC_MULTIADDR_INVALID = 'HOP_SRC_MULTIADDR_INVALID',\n    HOP_DST_MULTIADDR_INVALID = 'HOP_DST_MULTIADDR_INVALID',\n    HOP_NO_CONN_TO_DST = 'HOP_NO_CONN_TO_DST',\n    HOP_CANT_DIAL_DST = 'HOP_CANT_DIAL_DST',\n    HOP_CANT_OPEN_DST_STREAM = 'HOP_CANT_OPEN_DST_STREAM',\n    HOP_CANT_SPEAK_RELAY = 'HOP_CANT_SPEAK_RELAY',\n    HOP_CANT_RELAY_TO_SELF = 'HOP_CANT_RELAY_TO_SELF',\n    STOP_SRC_ADDR_TOO_LONG = 'STOP_SRC_ADDR_TOO_LONG',\n    STOP_DST_ADDR_TOO_LONG = 'STOP_DST_ADDR_TOO_LONG',\n    STOP_SRC_MULTIADDR_INVALID = 'STOP_SRC_MULTIADDR_INVALID',\n    STOP_DST_MULTIADDR_INVALID = 'STOP_DST_MULTIADDR_INVALID',\n    STOP_RELAY_REFUSED = 'STOP_RELAY_REFUSED',\n    MALFORMED_MESSAGE = 'MALFORMED_MESSAGE'\n  }\n\n  enum __StatusValues {\n    SUCCESS = 100,\n    HOP_SRC_ADDR_TOO_LONG = 220,\n    HOP_DST_ADDR_TOO_LONG = 221,\n    HOP_SRC_MULTIADDR_INVALID = 250,\n    HOP_DST_MULTIADDR_INVALID = 251,\n    HOP_NO_CONN_TO_DST = 260,\n    HOP_CANT_DIAL_DST = 261,\n    HOP_CANT_OPEN_DST_STREAM = 262,\n    HOP_CANT_SPEAK_RELAY = 270,\n    HOP_CANT_RELAY_TO_SELF = 280,\n    STOP_SRC_ADDR_TOO_LONG = 320,\n    STOP_DST_ADDR_TOO_LONG = 321,\n    STOP_SRC_MULTIADDR_INVALID = 350,\n    STOP_DST_MULTIADDR_INVALID = 351,\n    STOP_RELAY_REFUSED = 390,\n    MALFORMED_MESSAGE = 400\n  }\n\n  export namespace Status {\n    export const codec = () => {\n      return enumeration<Status>(__StatusValues)\n    }\n  }\n\n  export enum Type {\n    HOP = 'HOP',\n    STOP = 'STOP',\n    STATUS = 'STATUS',\n    CAN_HOP = 'CAN_HOP'\n  }\n\n  enum __TypeValues {\n    HOP = 1,\n    STOP = 2,\n    STATUS = 3,\n    CAN_HOP = 4\n  }\n\n  export namespace Type {\n    export const codec = () => {\n      return enumeration<Type>(__TypeValues)\n    }\n  }\n\n  export interface Peer {\n    id: Uint8Array\n    addrs: Uint8Array[]\n  }\n\n  export namespace Peer {\n    let _codec: Codec<Peer>\n\n    export const codec = (): Codec<Peer> => {\n      if (_codec == null) {\n        _codec = message<Peer>((obj, writer, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            writer.fork()\n          }\n\n          if (obj.id != null) {\n            writer.uint32(10)\n            writer.bytes(obj.id)\n          } else {\n            throw new Error('Protocol error: required field \"id\" was not found in object')\n          }\n\n          if (obj.addrs != null) {\n            for (const value of obj.addrs) {\n              writer.uint32(18)\n              writer.bytes(value)\n            }\n          } else {\n            throw new Error('Protocol error: required field \"addrs\" was not found in object')\n          }\n\n          if (opts.lengthDelimited !== false) {\n            writer.ldelim()\n          }\n        }, (reader, length) => {\n          const obj: any = {}\n\n          const end = length == null ? reader.len : reader.pos + length\n\n          while (reader.pos < end) {\n            const tag = reader.uint32()\n\n            switch (tag >>> 3) {\n              case 1:\n                obj.id = reader.bytes()\n                break\n              case 2:\n                obj.addrs = obj.addrs ?? []\n                obj.addrs.push(reader.bytes())\n                break\n              default:\n                reader.skipType(tag & 7)\n                break\n            }\n          }\n\n          obj.addrs = obj.addrs ?? []\n\n          if (obj.id == null) {\n            throw new Error('Protocol error: value for required field \"id\" was not found in protobuf')\n          }\n\n          if (obj.addrs == null) {\n            throw new Error('Protocol error: value for required field \"addrs\" was not found in protobuf')\n          }\n\n          return obj\n        })\n      }\n\n      return _codec\n    }\n\n    export const encode = (obj: Peer): Uint8Array => {\n      return encodeMessage(obj, Peer.codec())\n    }\n\n    export const decode = (buf: Uint8Array | Uint8ArrayList): Peer => {\n      return decodeMessage(buf, Peer.codec())\n    }\n  }\n\n  let _codec: Codec<CircuitRelay>\n\n  export const codec = (): Codec<CircuitRelay> => {\n    if (_codec == null) {\n      _codec = message<CircuitRelay>((obj, writer, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          writer.fork()\n        }\n\n        if (obj.type != null) {\n          writer.uint32(8)\n          CircuitRelay.Type.codec().encode(obj.type, writer)\n        }\n\n        if (obj.srcPeer != null) {\n          writer.uint32(18)\n          CircuitRelay.Peer.codec().encode(obj.srcPeer, writer)\n        }\n\n        if (obj.dstPeer != null) {\n          writer.uint32(26)\n          CircuitRelay.Peer.codec().encode(obj.dstPeer, writer)\n        }\n\n        if (obj.code != null) {\n          writer.uint32(32)\n          CircuitRelay.Status.codec().encode(obj.code, writer)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          writer.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1:\n              obj.type = CircuitRelay.Type.codec().decode(reader)\n              break\n            case 2:\n              obj.srcPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32())\n              break\n            case 3:\n              obj.dstPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32())\n              break\n            case 4:\n              obj.code = CircuitRelay.Status.codec().decode(reader)\n              break\n            default:\n              reader.skipType(tag & 7)\n              break\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: CircuitRelay): Uint8Array => {\n    return encodeMessage(obj, CircuitRelay.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): CircuitRelay => {\n    return decodeMessage(buf, CircuitRelay.codec())\n  }\n}\n"],"mappings":";AAAA;AACA;AAEA,SAASA,WAAW,EAAEC,aAAa,EAAEC,aAAa,EAAEC,OAAO,QAAQ,iBAAiB;AAWpF,OAAM,IAAWC,YAAY;AAA7B,WAAiBA,YAAY;EAC3B,IAAYC,MAiBX;EAjBD,WAAYA,MAAM;IAChBA,MAAA,uBAAmB;IACnBA,MAAA,mDAA+C;IAC/CA,MAAA,mDAA+C;IAC/CA,MAAA,2DAAuD;IACvDA,MAAA,2DAAuD;IACvDA,MAAA,6CAAyC;IACzCA,MAAA,2CAAuC;IACvCA,MAAA,yDAAqD;IACrDA,MAAA,iDAA6C;IAC7CA,MAAA,qDAAiD;IACjDA,MAAA,qDAAiD;IACjDA,MAAA,qDAAiD;IACjDA,MAAA,6DAAyD;IACzDA,MAAA,6DAAyD;IACzDA,MAAA,6CAAyC;IACzCA,MAAA,2CAAuC;EACzC,CAAC,EAjBWA,MAAM,GAAND,YAAA,CAAAC,MAAM,KAAND,YAAA,CAAAC,MAAM;EAmBlB,IAAKC,cAiBJ;EAjBD,WAAKA,cAAc;IACjBA,cAAA,CAAAA,cAAA,8BAAa;IACbA,cAAA,CAAAA,cAAA,0DAA2B;IAC3BA,cAAA,CAAAA,cAAA,0DAA2B;IAC3BA,cAAA,CAAAA,cAAA,kEAA+B;IAC/BA,cAAA,CAAAA,cAAA,kEAA+B;IAC/BA,cAAA,CAAAA,cAAA,oDAAwB;IACxBA,cAAA,CAAAA,cAAA,kDAAuB;IACvBA,cAAA,CAAAA,cAAA,gEAA8B;IAC9BA,cAAA,CAAAA,cAAA,wDAA0B;IAC1BA,cAAA,CAAAA,cAAA,4DAA4B;IAC5BA,cAAA,CAAAA,cAAA,4DAA4B;IAC5BA,cAAA,CAAAA,cAAA,4DAA4B;IAC5BA,cAAA,CAAAA,cAAA,oEAAgC;IAChCA,cAAA,CAAAA,cAAA,oEAAgC;IAChCA,cAAA,CAAAA,cAAA,oDAAwB;IACxBA,cAAA,CAAAA,cAAA,kDAAuB;EACzB,CAAC,EAjBIA,cAAc,KAAdA,cAAc;EAmBnB,WAAiBD,MAAM;IACRA,MAAA,CAAAE,KAAK,GAAG,YAAK;MACxB,OAAOP,WAAW,CAASM,cAAc,CAAC;IAC5C,CAAC;EACH,CAAC,EAJgBD,MAAM,GAAND,YAAA,CAAAC,MAAM,KAAND,YAAA,CAAAC,MAAM;EAMvB,IAAYG,IAKX;EALD,WAAYA,IAAI;IACdA,IAAA,eAAW;IACXA,IAAA,iBAAa;IACbA,IAAA,qBAAiB;IACjBA,IAAA,uBAAmB;EACrB,CAAC,EALWA,IAAI,GAAJJ,YAAA,CAAAI,IAAI,KAAJJ,YAAA,CAAAI,IAAI;EAOhB,IAAKC,YAKJ;EALD,WAAKA,YAAY;IACfA,YAAA,CAAAA,YAAA,oBAAO;IACPA,YAAA,CAAAA,YAAA,sBAAQ;IACRA,YAAA,CAAAA,YAAA,0BAAU;IACVA,YAAA,CAAAA,YAAA,4BAAW;EACb,CAAC,EALIA,YAAY,KAAZA,YAAY;EAOjB,WAAiBD,IAAI;IACNA,IAAA,CAAAD,KAAK,GAAG,YAAK;MACxB,OAAOP,WAAW,CAAOS,YAAY,CAAC;IACxC,CAAC;EACH,CAAC,EAJgBD,IAAI,GAAJJ,YAAA,CAAAI,IAAI,KAAJJ,YAAA,CAAAI,IAAI;EAWrB,IAAiBE,IAAI;EAArB,WAAiBA,IAAI;IACnB,IAAIC,MAAmB;IAEVD,IAAA,CAAAH,KAAK,GAAG,YAAkB;MACrC,IAAII,MAAM,IAAI,IAAI,EAAE;QAClBA,MAAM,GAAGR,OAAO,CAAO,UAACS,GAAG,EAAEC,MAAM,EAAe;UAAA,IAAbC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;UAC5C,IAAID,IAAI,CAACI,eAAe,KAAK,KAAK,EAAE;YAClCL,MAAM,CAACM,IAAI,EAAE;;UAGf,IAAIP,GAAG,CAACQ,EAAE,IAAI,IAAI,EAAE;YAClBP,MAAM,CAACQ,MAAM,CAAC,EAAE,CAAC;YACjBR,MAAM,CAACS,KAAK,CAACV,GAAG,CAACQ,EAAE,CAAC;WACrB,MAAM;YACL,MAAM,IAAIG,KAAK,CAAC,6DAA6D,CAAC;;UAGhF,IAAIX,GAAG,CAACY,KAAK,IAAI,IAAI,EAAE;YAAA,IAAAC,SAAA,GAAAC,0BAAA,CACDd,GAAG,CAACY,KAAK;cAAAG,KAAA;YAAA;cAA7B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA+B;gBAAA,IAApBC,KAAK,GAAAJ,KAAA,CAAAI,KAAA;gBACdlB,MAAM,CAACQ,MAAM,CAAC,EAAE,CAAC;gBACjBR,MAAM,CAACS,KAAK,CAACS,KAAK,CAAC;;YACpB,SAAAC,GAAA;cAAAP,SAAA,CAAAQ,CAAA,CAAAD,GAAA;YAAA;cAAAP,SAAA,CAAAS,CAAA;YAAA;WACF,MAAM;YACL,MAAM,IAAIX,KAAK,CAAC,gEAAgE,CAAC;;UAGnF,IAAIT,IAAI,CAACI,eAAe,KAAK,KAAK,EAAE;YAClCL,MAAM,CAACsB,MAAM,EAAE;;QAEnB,CAAC,EAAE,UAACC,MAAM,EAAEpB,MAAM,EAAI;UAAA,IAAAqB,UAAA,EAAAC,WAAA;UACpB,IAAM1B,GAAG,GAAQ,EAAE;UAEnB,IAAM2B,GAAG,GAAGvB,MAAM,IAAI,IAAI,GAAGoB,MAAM,CAACI,GAAG,GAAGJ,MAAM,CAACK,GAAG,GAAGzB,MAAM;UAE7D,OAAOoB,MAAM,CAACK,GAAG,GAAGF,GAAG,EAAE;YACvB,IAAMG,GAAG,GAAGN,MAAM,CAACf,MAAM,EAAE;YAE3B,QAAQqB,GAAG,KAAK,CAAC;cACf,KAAK,CAAC;gBACJ9B,GAAG,CAACQ,EAAE,GAAGgB,MAAM,CAACd,KAAK,EAAE;gBACvB;cACF,KAAK,CAAC;gBACJV,GAAG,CAACY,KAAK,IAAAa,UAAA,GAAGzB,GAAG,CAACY,KAAK,cAAAa,UAAA,cAAAA,UAAA,GAAI,EAAE;gBAC3BzB,GAAG,CAACY,KAAK,CAACmB,IAAI,CAACP,MAAM,CAACd,KAAK,EAAE,CAAC;gBAC9B;cACF;gBACEc,MAAM,CAACQ,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;gBACxB;;;UAIN9B,GAAG,CAACY,KAAK,IAAAc,WAAA,GAAG1B,GAAG,CAACY,KAAK,cAAAc,WAAA,cAAAA,WAAA,GAAI,EAAE;UAE3B,IAAI1B,GAAG,CAACQ,EAAE,IAAI,IAAI,EAAE;YAClB,MAAM,IAAIG,KAAK,CAAC,yEAAyE,CAAC;;UAG5F,IAAIX,GAAG,CAACY,KAAK,IAAI,IAAI,EAAE;YACrB,MAAM,IAAID,KAAK,CAAC,4EAA4E,CAAC;;UAG/F,OAAOX,GAAG;QACZ,CAAC,CAAC;;MAGJ,OAAOD,MAAM;IACf,CAAC;IAEYD,IAAA,CAAAmC,MAAM,GAAG,UAACjC,GAAS,EAAgB;MAC9C,OAAOX,aAAa,CAACW,GAAG,EAAEF,IAAI,CAACH,KAAK,EAAE,CAAC;IACzC,CAAC;IAEYG,IAAA,CAAAoC,MAAM,GAAG,UAACC,GAAgC,EAAU;MAC/D,OAAO7C,aAAa,CAAC6C,GAAG,EAAErC,IAAI,CAACH,KAAK,EAAE,CAAC;IACzC,CAAC;EACH,CAAC,EA3EgBG,IAAI,GAAJN,YAAA,CAAAM,IAAI,KAAJN,YAAA,CAAAM,IAAI;EA6ErB,IAAIC,MAA2B;EAElBP,YAAA,CAAAG,KAAK,GAAG,YAA0B;IAC7C,IAAII,MAAM,IAAI,IAAI,EAAE;MAClBA,MAAM,GAAGR,OAAO,CAAe,UAACS,GAAG,EAAEC,MAAM,EAAe;QAAA,IAAbC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;QACpD,IAAID,IAAI,CAACI,eAAe,KAAK,KAAK,EAAE;UAClCL,MAAM,CAACM,IAAI,EAAE;;QAGf,IAAIP,GAAG,CAACoC,IAAI,IAAI,IAAI,EAAE;UACpBnC,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC;UAChBjB,YAAY,CAACI,IAAI,CAACD,KAAK,EAAE,CAACsC,MAAM,CAACjC,GAAG,CAACoC,IAAI,EAAEnC,MAAM,CAAC;;QAGpD,IAAID,GAAG,CAACqC,OAAO,IAAI,IAAI,EAAE;UACvBpC,MAAM,CAACQ,MAAM,CAAC,EAAE,CAAC;UACjBjB,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAACsC,MAAM,CAACjC,GAAG,CAACqC,OAAO,EAAEpC,MAAM,CAAC;;QAGvD,IAAID,GAAG,CAACsC,OAAO,IAAI,IAAI,EAAE;UACvBrC,MAAM,CAACQ,MAAM,CAAC,EAAE,CAAC;UACjBjB,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAACsC,MAAM,CAACjC,GAAG,CAACsC,OAAO,EAAErC,MAAM,CAAC;;QAGvD,IAAID,GAAG,CAACuC,IAAI,IAAI,IAAI,EAAE;UACpBtC,MAAM,CAACQ,MAAM,CAAC,EAAE,CAAC;UACjBjB,YAAY,CAACC,MAAM,CAACE,KAAK,EAAE,CAACsC,MAAM,CAACjC,GAAG,CAACuC,IAAI,EAAEtC,MAAM,CAAC;;QAGtD,IAAIC,IAAI,CAACI,eAAe,KAAK,KAAK,EAAE;UAClCL,MAAM,CAACsB,MAAM,EAAE;;MAEnB,CAAC,EAAE,UAACC,MAAM,EAAEpB,MAAM,EAAI;QACpB,IAAMJ,GAAG,GAAQ,EAAE;QAEnB,IAAM2B,GAAG,GAAGvB,MAAM,IAAI,IAAI,GAAGoB,MAAM,CAACI,GAAG,GAAGJ,MAAM,CAACK,GAAG,GAAGzB,MAAM;QAE7D,OAAOoB,MAAM,CAACK,GAAG,GAAGF,GAAG,EAAE;UACvB,IAAMG,GAAG,GAAGN,MAAM,CAACf,MAAM,EAAE;UAE3B,QAAQqB,GAAG,KAAK,CAAC;YACf,KAAK,CAAC;cACJ9B,GAAG,CAACoC,IAAI,GAAG5C,YAAY,CAACI,IAAI,CAACD,KAAK,EAAE,CAACuC,MAAM,CAACV,MAAM,CAAC;cACnD;YACF,KAAK,CAAC;cACJxB,GAAG,CAACqC,OAAO,GAAG7C,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAACuC,MAAM,CAACV,MAAM,EAAEA,MAAM,CAACf,MAAM,EAAE,CAAC;cACvE;YACF,KAAK,CAAC;cACJT,GAAG,CAACsC,OAAO,GAAG9C,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAACuC,MAAM,CAACV,MAAM,EAAEA,MAAM,CAACf,MAAM,EAAE,CAAC;cACvE;YACF,KAAK,CAAC;cACJT,GAAG,CAACuC,IAAI,GAAG/C,YAAY,CAACC,MAAM,CAACE,KAAK,EAAE,CAACuC,MAAM,CAACV,MAAM,CAAC;cACrD;YACF;cACEA,MAAM,CAACQ,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;cACxB;;;QAIN,OAAO9B,GAAG;MACZ,CAAC,CAAC;;IAGJ,OAAOD,MAAM;EACf,CAAC;EAEYP,YAAA,CAAAyC,MAAM,GAAG,UAACjC,GAAiB,EAAgB;IACtD,OAAOX,aAAa,CAACW,GAAG,EAAER,YAAY,CAACG,KAAK,EAAE,CAAC;EACjD,CAAC;EAEYH,YAAA,CAAA0C,MAAM,GAAG,UAACC,GAAgC,EAAkB;IACvE,OAAO7C,aAAa,CAAC6C,GAAG,EAAE3C,YAAY,CAACG,KAAK,EAAE,CAAC;EACjD,CAAC;AACH,CAAC,EA5NgBH,YAAY,KAAZA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}
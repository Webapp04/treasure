{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport last from 'it-last';\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single';\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd(_ref) {\n  var addAll = _ref.addAll;\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  function add(_x) {\n    return _add.apply(this, arguments);\n  }\n  function _add() {\n    _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry) {\n      var options,\n        result,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return last(addAll(normaliseInput(entry), options));\n          case 3:\n            result = _context.sent;\n            if (!(result == null)) {\n              _context.next = 6;\n              break;\n            }\n            throw Error('Failed to add a file, if you see this please report a bug');\n          case 6:\n            return _context.abrupt(\"return\", result);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _add.apply(this, arguments);\n  }\n  return add;\n}","map":{"version":3,"names":["last","normaliseInput","createAdd","_ref","addAll","add","_x","_add","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","entry","options","result","_args","wrap","_callee$","_context","prev","next","length","undefined","sent","Error","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/add.js"],"sourcesContent":["import last from 'it-last'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,SAASC,cAAc,QAAQ,8CAA8C;;AAE7E;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAAC,IAAA,EAAc;EAAA,IAAVC,MAAM,GAAAD,IAAA,CAANC,MAAM;EACjC;AACF;AACA;EAFE,SAGeC,GAAGA,CAAAC,EAAA;IAAA,OAAAC,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,KAAA;IAAAA,IAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAlB,SAAAC,QAAoBC,KAAK;MAAA,IAAAC,OAAA;QAAAC,MAAA;QAAAC,KAAA,GAAAR,SAAA;MAAA,OAAAE,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAEP,OAAO,GAAAE,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OAEhBtB,IAAI,CAACI,MAAM,CAACH,cAAc,CAACa,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAC;UAAA;YAA3DC,MAAM,GAAAI,QAAA,CAAAK,IAAA;YAAA,MAIRT,MAAM,IAAI,IAAI;cAAAI,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,MACVI,KAAK,CAAC,2DAA2D,CAAC;UAAA;YAAA,OAAAN,QAAA,CAAAO,MAAA,WAGnEX,MAAM;UAAA;UAAA;YAAA,OAAAI,QAAA,CAAAQ,IAAA;QAAA;MAAA,GAAAf,OAAA;IAAA,CACd;IAAA,OAAAN,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOJ,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
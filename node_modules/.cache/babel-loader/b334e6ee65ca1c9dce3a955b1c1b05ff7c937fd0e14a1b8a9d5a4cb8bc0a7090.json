{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport 'node-forge/lib/pkcs7.js';\nimport 'node-forge/lib/pbe.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { certificateForKey, findAsync } from './util.js';\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { codes } from '../errors.js';\nimport { logger } from '@libp2p/logger';\nvar log = logger('libp2p:keychain:cms');\nvar privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nexport var CMS = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance with a keychain\n   */\n  function CMS(keychain, dek) {\n    _classCallCheck(this, CMS);\n    if (keychain == null) {\n      throw errCode(new Error('keychain is required'), codes.ERR_KEYCHAIN_REQUIRED);\n    }\n    this.keychain = keychain;\n    privates.set(this, {\n      dek: dek\n    });\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   */\n  _createClass(CMS, [{\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, plain) {\n        var key, pem, cached, dek, privateKey, certificate, p7, der;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (plain instanceof Uint8Array) {\n                _context.next = 2;\n                break;\n              }\n              throw errCode(new Error('Plain data must be a Uint8Array'), codes.ERR_INVALID_PARAMETERS);\n            case 2:\n              _context.next = 4;\n              return this.keychain.findKeyByName(name);\n            case 4:\n              key = _context.sent;\n              _context.next = 7;\n              return this.keychain.getPrivateKey(name);\n            case 7:\n              pem = _context.sent;\n              cached = privates.get(this);\n              if (!(cached == null)) {\n                _context.next = 11;\n                break;\n              }\n              throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            case 11:\n              dek = cached.dek;\n              privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n              _context.next = 15;\n              return certificateForKey(key, privateKey);\n            case 15:\n              certificate = _context.sent;\n              // create a p7 enveloped message\n              p7 = forge.pkcs7.createEnvelopedData();\n              p7.addRecipient(certificate);\n              p7.content = forge.util.createBuffer(plain);\n              p7.encrypt();\n              // convert message to DER\n              der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n              return _context.abrupt(\"return\", uint8ArrayFromString(der, 'ascii'));\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function encrypt(_x, _x2) {\n        return _encrypt.apply(this, arguments);\n      }\n      return encrypt;\n    }()\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     */\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(cmsData) {\n        var _this = this;\n        var cms, buf, obj, recipients, r, missingKeys, key, pem, cached, dek, privateKey;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (cmsData instanceof Uint8Array) {\n                _context3.next = 2;\n                break;\n              }\n              throw errCode(new Error('CMS data is required'), codes.ERR_INVALID_PARAMETERS);\n            case 2:\n              _context3.prev = 2;\n              buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n              obj = forge.asn1.fromDer(buf);\n              cms = forge.pkcs7.messageFromAsn1(obj);\n              _context3.next = 12;\n              break;\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](2);\n              log.error(_context3.t0);\n              throw errCode(new Error('Invalid CMS'), codes.ERR_INVALID_CMS);\n            case 12:\n              // Find a recipient whose key we hold. We only deal with recipient certs\n              // issued by ipfs (O=ipfs).\n              recipients = cms.recipients\n              // @ts-expect-error cms types not defined\n              .filter(function (r) {\n                return r.issuer.find(function (a) {\n                  return a.shortName === 'O' && a.value === 'ipfs';\n                });\n              })\n              // @ts-expect-error cms types not defined\n              .filter(function (r) {\n                return r.issuer.find(function (a) {\n                  return a.shortName === 'CN';\n                });\n              })\n              // @ts-expect-error cms types not defined\n              .map(function (r) {\n                return {\n                  recipient: r,\n                  // @ts-expect-error cms types not defined\n                  keyId: r.issuer.find(function (a) {\n                    return a.shortName === 'CN';\n                  }).value\n                };\n              });\n              _context3.next = 15;\n              return findAsync(recipients, /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(recipient) {\n                  var _key;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.prev = 0;\n                        _context2.next = 3;\n                        return _this.keychain.findKeyById(recipient.keyId);\n                      case 3:\n                        _key = _context2.sent;\n                        if (!(_key != null)) {\n                          _context2.next = 6;\n                          break;\n                        }\n                        return _context2.abrupt(\"return\", true);\n                      case 6:\n                        _context2.next = 11;\n                        break;\n                      case 8:\n                        _context2.prev = 8;\n                        _context2.t0 = _context2[\"catch\"](0);\n                        return _context2.abrupt(\"return\", false);\n                      case 11:\n                        return _context2.abrupt(\"return\", false);\n                      case 12:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2, null, [[0, 8]]);\n                }));\n                return function (_x4) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            case 15:\n              r = _context3.sent;\n              if (!(r == null)) {\n                _context3.next = 19;\n                break;\n              }\n              // @ts-expect-error cms types not defined\n              missingKeys = recipients.map(function (r) {\n                return r.keyId;\n              });\n              throw errCode(new Error(\"Decryption needs one of the key(s): \".concat(missingKeys.join(', '))), codes.ERR_MISSING_KEYS, {\n                missingKeys: missingKeys\n              });\n            case 19:\n              _context3.next = 21;\n              return this.keychain.findKeyById(r.keyId);\n            case 21:\n              key = _context3.sent;\n              if (!(key == null)) {\n                _context3.next = 24;\n                break;\n              }\n              throw errCode(new Error('No key available to decrypto'), codes.ERR_NO_KEY);\n            case 24:\n              _context3.next = 26;\n              return this.keychain.getPrivateKey(key.name);\n            case 26:\n              pem = _context3.sent;\n              cached = privates.get(this);\n              if (!(cached == null)) {\n                _context3.next = 30;\n                break;\n              }\n              throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            case 30:\n              dek = cached.dek;\n              privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n              cms.decrypt(r.recipient, privateKey);\n              return _context3.abrupt(\"return\", uint8ArrayFromString(cms.content.getBytes(), 'ascii'));\n            case 34:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[2, 8]]);\n      }));\n      function decrypt(_x3) {\n        return _decrypt.apply(this, arguments);\n      }\n      return decrypt;\n    }()\n  }]);\n  return CMS;\n}();","map":{"version":3,"names":["forge","certificateForKey","findAsync","errCode","fromString","uint8ArrayFromString","toString","uint8ArrayToString","codes","logger","log","privates","WeakMap","CMS","keychain","dek","_classCallCheck","Error","ERR_KEYCHAIN_REQUIRED","set","_createClass","key","value","_encrypt","_asyncToGenerator","_regeneratorRuntime","mark","_callee","name","plain","pem","cached","privateKey","certificate","p7","der","wrap","_callee$","_context","prev","next","Uint8Array","ERR_INVALID_PARAMETERS","findKeyByName","sent","getPrivateKey","get","pki","decryptRsaPrivateKey","pkcs7","createEnvelopedData","addRecipient","content","util","createBuffer","encrypt","asn1","toDer","toAsn1","getBytes","abrupt","stop","_x","_x2","apply","arguments","_decrypt","_callee3","cmsData","_this","cms","buf","obj","recipients","r","missingKeys","_callee3$","_context3","fromDer","messageFromAsn1","t0","error","ERR_INVALID_CMS","filter","issuer","find","a","shortName","map","recipient","keyId","_ref","_callee2","_key","_callee2$","_context2","findKeyById","_x4","concat","join","ERR_MISSING_KEYS","ERR_NO_KEY","decrypt","_x3"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/keychain/cms.ts"],"sourcesContent":["import 'node-forge/lib/pkcs7.js'\nimport 'node-forge/lib/pbe.js'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\nimport { certificateForKey, findAsync } from './util.js'\nimport errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { codes } from '../errors.js'\nimport { logger } from '@libp2p/logger'\nimport type { KeyChain } from './index.js'\n\nconst log = logger('libp2p:keychain:cms')\n\nconst privates = new WeakMap<object, { dek: string }>()\n\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nexport class CMS {\n  private readonly keychain: KeyChain\n\n  /**\n   * Creates a new instance with a keychain\n   */\n  constructor (keychain: KeyChain, dek: string) {\n    if (keychain == null) {\n      throw errCode(new Error('keychain is required'), codes.ERR_KEYCHAIN_REQUIRED)\n    }\n\n    this.keychain = keychain\n    privates.set(this, { dek })\n  }\n\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   */\n  async encrypt (name: string, plain: Uint8Array): Promise<Uint8Array> {\n    if (!(plain instanceof Uint8Array)) {\n      throw errCode(new Error('Plain data must be a Uint8Array'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    const key = await this.keychain.findKeyByName(name)\n    const pem = await this.keychain.getPrivateKey(name)\n    const cached = privates.get(this)\n\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    const dek = cached.dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    const certificate = await certificateForKey(key, privateKey)\n\n    // create a p7 enveloped message\n    const p7 = forge.pkcs7.createEnvelopedData()\n    p7.addRecipient(certificate)\n    p7.content = forge.util.createBuffer(plain)\n    p7.encrypt()\n\n    // convert message to DER\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes()\n    return uint8ArrayFromString(der, 'ascii')\n  }\n\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   */\n  async decrypt (cmsData: Uint8Array): Promise<Uint8Array> {\n    if (!(cmsData instanceof Uint8Array)) {\n      throw errCode(new Error('CMS data is required'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    let cms: any\n    try {\n      const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'))\n      const obj = forge.asn1.fromDer(buf)\n\n      cms = forge.pkcs7.messageFromAsn1(obj)\n    } catch (err: any) {\n      log.error(err)\n      throw errCode(new Error('Invalid CMS'), codes.ERR_INVALID_CMS)\n    }\n\n    // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n    const recipients: any = cms.recipients\n      // @ts-expect-error cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n      // @ts-expect-error cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n      // @ts-expect-error cms types not defined\n      .map(r => {\n        return {\n          recipient: r,\n          // @ts-expect-error cms types not defined\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        }\n      })\n\n    const r = await findAsync(recipients, async (recipient: any) => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId)\n        if (key != null) {\n          return true\n        }\n      } catch (err: any) {\n        return false\n      }\n      return false\n    })\n\n    if (r == null) {\n      // @ts-expect-error cms types not defined\n      const missingKeys: string[] = recipients.map(r => r.keyId)\n      throw errCode(new Error(`Decryption needs one of the key(s): ${missingKeys.join(', ')}`), codes.ERR_MISSING_KEYS, {\n        missingKeys\n      })\n    }\n\n    const key = await this.keychain.findKeyById(r.keyId)\n\n    if (key == null) {\n      throw errCode(new Error('No key available to decrypto'), codes.ERR_NO_KEY)\n    }\n\n    const pem = await this.keychain.getPrivateKey(key.name)\n    const cached = privates.get(this)\n\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    const dek = cached.dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    cms.decrypt(r.recipient, privateKey)\n    return uint8ArrayFromString(cms.content.getBytes(), 'ascii')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{ethers}from\"ethers\";import{useContractNFKeyStakingWithSigner}from\"hooks/blockchain/useHandleContracts\";import{useDispatch,useSelector}from\"react-redux\";import ACTIONS from\"redux/action\";import{selectNftSelected}from\"redux/slice/nftSlice\";import{hexToNumber}from\"utils/blockchain\";export default function useGetTresrRewardsBalance(){var dispatch=useDispatch();var nftSelected=useSelector(selectNftSelected);var handleContractNFKeyStakingWithSigner=useContractNFKeyStakingWithSigner();var getTresrRewardsBalance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(tokenId){var count,contractNFKeyStakingWithSigner,_args=arguments;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:count=_args.length>1&&_args[1]!==undefined?_args[1]:3;if(nftSelected!==null&&nftSelected!==void 0&&nftSelected.staked){_context.next=3;break;}return _context.abrupt(\"return\",ACTIONS.SET_TRESR_REWARDS(dispatch,0));case 3:_context.next=5;return handleContractNFKeyStakingWithSigner;case 5:contractNFKeyStakingWithSigner=_context.sent;return _context.abrupt(\"return\",contractNFKeyStakingWithSigner.calcRewards(tokenId).then(function(tx){var _hexToNumber;// FIXME: this is for dev\nACTIONS.SET_TRESR_REWARDS(dispatch,+ethers.utils.formatEther((_hexToNumber=hexToNumber(tx===null||tx===void 0?void 0:tx._hex))===null||_hexToNumber===void 0?void 0:_hexToNumber.toString()));}).catch(function(){return count?getTresrRewardsBalance(tokenId,count-1):null;}));case 7:case\"end\":return _context.stop();}},_callee);}));return function getTresrRewardsBalance(_x){return _ref.apply(this,arguments);};}();return{getTresrRewardsBalance:getTresrRewardsBalance};}","map":{"version":3,"names":["ethers","useContractNFKeyStakingWithSigner","useDispatch","useSelector","ACTIONS","selectNftSelected","hexToNumber","useGetTresrRewardsBalance","dispatch","nftSelected","handleContractNFKeyStakingWithSigner","getTresrRewardsBalance","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tokenId","count","contractNFKeyStakingWithSigner","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","staked","abrupt","SET_TRESR_REWARDS","sent","calcRewards","then","tx","_hexToNumber","utils","formatEther","_hex","toString","catch","stop","_x","apply"],"sources":["/Users/apple/Documents/treasure/src/hooks/nft/useGetTresrRewardsBalance.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { useContractNFKeyStakingWithSigner } from \"hooks/blockchain/useHandleContracts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ACTIONS from \"redux/action\";\nimport { selectNftSelected } from \"redux/slice/nftSlice\";\nimport { hexToNumber } from \"utils/blockchain\";\n\nexport default function useGetTresrRewardsBalance() {\n  const dispatch = useDispatch();\n  const nftSelected = useSelector(selectNftSelected);\n  const handleContractNFKeyStakingWithSigner =\n    useContractNFKeyStakingWithSigner();\n\n  const getTresrRewardsBalance = async (tokenId, count = 3) => {\n    if (!nftSelected?.staked) return ACTIONS.SET_TRESR_REWARDS(dispatch, 0);\n    const contractNFKeyStakingWithSigner =\n      await handleContractNFKeyStakingWithSigner;\n    return contractNFKeyStakingWithSigner\n      .calcRewards(tokenId)\n      .then((tx) => {\n        // FIXME: this is for dev\n        ACTIONS.SET_TRESR_REWARDS(\n          dispatch,\n          +ethers.utils.formatEther(hexToNumber(tx?._hex)?.toString())\n        );\n      })\n      .catch(() => (count ? getTresrRewardsBalance(tokenId, count - 1) : null));\n  };\n  return { getTresrRewardsBalance };\n}\n"],"mappings":"0PAAA,OAASA,MAAM,KAAQ,QAAQ,CAC/B,OAASC,iCAAiC,KAAQ,qCAAqC,CACvF,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,MAAO,CAAAC,OAAO,KAAM,cAAc,CAClC,OAASC,iBAAiB,KAAQ,sBAAsB,CACxD,OAASC,WAAW,KAAQ,kBAAkB,CAE9C,cAAe,SAAS,CAAAC,yBAAyBA,CAAA,CAAG,CAClD,GAAM,CAAAC,QAAQ,CAAGN,WAAW,CAAC,CAAC,CAC9B,GAAM,CAAAO,WAAW,CAAGN,WAAW,CAACE,iBAAiB,CAAC,CAClD,GAAM,CAAAK,oCAAoC,CACxCT,iCAAiC,CAAC,CAAC,CAErC,GAAM,CAAAU,sBAAsB,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,OAAO,MAAAC,KAAA,CAAAC,8BAAA,CAAAC,KAAA,CAAAC,SAAA,QAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAER,KAAK,CAAAE,KAAA,CAAAO,MAAA,IAAAP,KAAA,MAAAQ,SAAA,CAAAR,KAAA,IAAG,CAAC,IACjDX,WAAW,SAAXA,WAAW,WAAXA,WAAW,CAAEoB,MAAM,EAAAL,QAAA,CAAAE,IAAA,iBAAAF,QAAA,CAAAM,MAAA,UAAS1B,OAAO,CAAC2B,iBAAiB,CAACvB,QAAQ,CAAE,CAAC,CAAC,SAAAgB,QAAA,CAAAE,IAAA,SAE/D,CAAAhB,oCAAoC,QADtCS,8BAA8B,CAAAK,QAAA,CAAAQ,IAAA,QAAAR,QAAA,CAAAM,MAAA,UAE7BX,8BAA8B,CAClCc,WAAW,CAAChB,OAAO,CAAC,CACpBiB,IAAI,CAAC,SAACC,EAAE,CAAK,KAAAC,YAAA,CACZ;AACAhC,OAAO,CAAC2B,iBAAiB,CACvBvB,QAAQ,CACR,CAACR,MAAM,CAACqC,KAAK,CAACC,WAAW,EAAAF,YAAA,CAAC9B,WAAW,CAAC6B,EAAE,SAAFA,EAAE,iBAAFA,EAAE,CAAEI,IAAI,CAAC,UAAAH,YAAA,iBAArBA,YAAA,CAAuBI,QAAQ,CAAC,CAAC,CAC7D,CAAC,CACH,CAAC,CAAC,CACDC,KAAK,CAAC,iBAAO,CAAAvB,KAAK,CAAGP,sBAAsB,CAACM,OAAO,CAAEC,KAAK,CAAG,CAAC,CAAC,CAAG,IAAI,EAAC,CAAC,0BAAAM,QAAA,CAAAkB,IAAA,MAAA1B,OAAA,GAC5E,kBAdK,CAAAL,sBAAsBA,CAAAgC,EAAA,SAAA/B,IAAA,CAAAgC,KAAA,MAAAvB,SAAA,OAc3B,CACD,MAAO,CAAEV,sBAAsB,CAAtBA,sBAAuB,CAAC,CACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
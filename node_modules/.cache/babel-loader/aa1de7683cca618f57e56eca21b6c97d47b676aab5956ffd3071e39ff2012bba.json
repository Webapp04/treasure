{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createGet(_ref) {\n  var preload = _ref.preload,\n    repo = _ref.repo;\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            // eslint-disable-line require-await\n            if (options.preload !== false) {\n              preload(cid);\n            }\n            return _context.abrupt(\"return\", repo.blocks.get(cid, options));\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n  return withTimeoutOption(get);\n}","map":{"version":3,"names":["withTimeoutOption","createGet","_ref","preload","repo","get","_x","_get","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cid","options","_args","wrap","_callee$","_context","prev","next","length","undefined","abrupt","blocks","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/block/get.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createGet ({ preload, repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return repo.blocks.get(cid, options)\n  }\n\n  return withTimeoutOption(get)\n}\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAAC,IAAA,EAAqB;EAAA,IAAjBC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;EACxC;AACF;AACA;EAFE,SAGeC,GAAGA,CAAAC,EAAA;IAAA,OAAAC,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,KAAA;IAAAA,IAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAlB,SAAAC,QAAoBC,GAAG;MAAA,IAAAC,OAAA;QAAAC,KAAA,GAAAP,SAAA;MAAA,OAAAE,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAEN,OAAO,GAAAC,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAI;YACvC,IAAID,OAAO,CAACZ,OAAO,KAAK,KAAK,EAAE;cAC7BA,OAAO,CAACW,GAAG,CAAC;YACd;YAAC,OAAAK,QAAA,CAAAK,MAAA,WAEMpB,IAAI,CAACqB,MAAM,CAACpB,GAAG,CAACS,GAAG,EAAEC,OAAO,CAAC;UAAA;UAAA;YAAA,OAAAI,QAAA,CAAAO,IAAA;QAAA;MAAA,GAAAb,OAAA;IAAA,CACrC;IAAA,OAAAN,IAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOT,iBAAiB,CAACK,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
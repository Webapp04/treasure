{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { Components } from '@libp2p/components';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport var TopologyListener = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(TopologyListener, _EventEmitter);\n  var _super = _createSuper(TopologyListener);\n  function TopologyListener(init) {\n    var _this;\n    _classCallCheck(this, TopologyListener);\n    _this = _super.call(this);\n    _this.components = new Components();\n    var protocol = init.protocol,\n      lan = init.lan;\n    _this.log = logger(\"libp2p:kad-dht:topology-listener:\".concat(lan ? 'lan' : 'wan'));\n    _this.running = false;\n    _this.protocol = protocol;\n    return _this;\n  }\n  _createClass(TopologyListener, [{\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.running;\n    }\n    /**\n     * Start the network\n     */\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var topology;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.running) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              this.running = true;\n              // register protocol with topology\n              topology = createTopology({\n                onConnect: function onConnect(peerId) {\n                  _this2.log('observed peer %p with protocol %s', peerId, _this2.protocol);\n                  _this2.dispatchEvent(new CustomEvent('peer', {\n                    detail: peerId\n                  }));\n                }\n              });\n              _context.next = 6;\n              return this.components.getRegistrar().register(this.protocol, topology);\n            case 6:\n              this.registrarId = _context.sent;\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n    /**\n     * Stop all network activity\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n      // unregister protocol and handlers\n      if (this.registrarId != null) {\n        this.components.getRegistrar().unregister(this.registrarId);\n        this.registrarId = undefined;\n      }\n    }\n  }]);\n  return TopologyListener;\n}(EventEmitter);","map":{"version":3,"names":["createTopology","CustomEvent","EventEmitter","logger","Components","TopologyListener","_EventEmitter","_inherits","_super","_createSuper","init","_this","_classCallCheck","call","components","protocol","lan","log","concat","running","_createClass","key","value","isStarted","_start","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","topology","wrap","_callee$","_context","prev","next","abrupt","onConnect","peerId","dispatchEvent","detail","getRegistrar","register","registrarId","sent","stop","start","apply","arguments","unregister","undefined"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/topology-listener.ts"],"sourcesContent":["import { createTopology } from '@libp2p/topology'\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport { logger } from '@libp2p/logger'\nimport type { Logger } from '@libp2p/logger'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport { Components, Initializable } from '@libp2p/components'\n\nexport interface TopologyListenerInit {\n  protocol: string\n  lan: boolean\n}\n\nexport interface TopologyListenerEvents {\n  'peer': CustomEvent<PeerId>\n}\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class TopologyListener extends EventEmitter<TopologyListenerEvents> implements Startable, Initializable {\n  private readonly log: Logger\n  private components: Components = new Components()\n  private readonly protocol: string\n  private running: boolean\n  private registrarId?: string\n\n  constructor (init: TopologyListenerInit) {\n    super()\n\n    const { protocol, lan } = init\n\n    this.log = logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}`)\n    this.running = false\n    this.protocol = protocol\n  }\n\n  init (components: Components): void {\n    this.components = components\n  }\n\n  isStarted () {\n    return this.running\n  }\n\n  /**\n   * Start the network\n   */\n  async start () {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    // register protocol with topology\n    const topology = createTopology({\n      onConnect: (peerId) => {\n        this.log('observed peer %p with protocol %s', peerId, this.protocol)\n        this.dispatchEvent(new CustomEvent('peer', {\n          detail: peerId\n        }))\n      }\n    })\n    this.registrarId = await this.components.getRegistrar().register(this.protocol, topology)\n  }\n\n  /**\n   * Stop all network activity\n   */\n  stop () {\n    this.running = false\n\n    // unregister protocol and handlers\n    if (this.registrarId != null) {\n      this.components.getRegistrar().unregister(this.registrarId)\n      this.registrarId = undefined\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
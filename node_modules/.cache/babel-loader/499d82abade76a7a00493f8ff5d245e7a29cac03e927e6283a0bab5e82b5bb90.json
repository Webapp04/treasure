{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport webcrypto from '../webcrypto.js';\nimport randomBytes from '../random-bytes.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport * as utils from './rsa-utils.js';\nimport { jwk2pub, jwk2priv } from './jwk2pem.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nexport { utils };\nexport function generateKey(_x) {\n  return _generateKey.apply(this, arguments);\n}\n// Takes a jwk key\nfunction _generateKey() {\n  _generateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(bits) {\n    var pair, keys;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return webcrypto.get().subtle.generateKey({\n            name: 'RSASSA-PKCS1-v1_5',\n            modulusLength: bits,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: {\n              name: 'SHA-256'\n            }\n          }, true, ['sign', 'verify']);\n        case 2:\n          pair = _context.sent;\n          _context.next = 5;\n          return exportKey(pair);\n        case 5:\n          keys = _context.sent;\n          return _context.abrupt(\"return\", {\n            privateKey: keys[0],\n            publicKey: keys[1]\n          });\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _generateKey.apply(this, arguments);\n}\nexport function unmarshalPrivateKey(_x2) {\n  return _unmarshalPrivateKey.apply(this, arguments);\n}\nfunction _unmarshalPrivateKey() {\n  _unmarshalPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {\n    var privateKey, pair, keys;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return webcrypto.get().subtle.importKey('jwk', key, {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: {\n              name: 'SHA-256'\n            }\n          }, true, ['sign']);\n        case 2:\n          privateKey = _context2.sent;\n          _context2.t0 = privateKey;\n          _context2.next = 6;\n          return derivePublicFromPrivate(key);\n        case 6:\n          _context2.t1 = _context2.sent;\n          pair = [_context2.t0, _context2.t1];\n          _context2.next = 10;\n          return exportKey({\n            privateKey: pair[0],\n            publicKey: pair[1]\n          });\n        case 10:\n          keys = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            privateKey: keys[0],\n            publicKey: keys[1]\n          });\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _unmarshalPrivateKey.apply(this, arguments);\n}\nexport { randomBytes as getRandomValues };\nexport function hashAndSign(_x3, _x4) {\n  return _hashAndSign.apply(this, arguments);\n}\nfunction _hashAndSign() {\n  _hashAndSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, msg) {\n    var privateKey, sig;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return webcrypto.get().subtle.importKey('jwk', key, {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: {\n              name: 'SHA-256'\n            }\n          }, false, ['sign']);\n        case 2:\n          privateKey = _context3.sent;\n          _context3.next = 5;\n          return webcrypto.get().subtle.sign({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, privateKey, Uint8Array.from(msg));\n        case 5:\n          sig = _context3.sent;\n          return _context3.abrupt(\"return\", new Uint8Array(sig, 0, sig.byteLength));\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _hashAndSign.apply(this, arguments);\n}\nexport function hashAndVerify(_x5, _x6, _x7) {\n  return _hashAndVerify.apply(this, arguments);\n}\nfunction _hashAndVerify() {\n  _hashAndVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key, sig, msg) {\n    var publicKey;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return webcrypto.get().subtle.importKey('jwk', key, {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: {\n              name: 'SHA-256'\n            }\n          }, false, ['verify']);\n        case 2:\n          publicKey = _context4.sent;\n          _context4.next = 5;\n          return webcrypto.get().subtle.verify({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, publicKey, sig, msg);\n        case 5:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _hashAndVerify.apply(this, arguments);\n}\nfunction exportKey(_x8) {\n  return _exportKey.apply(this, arguments);\n}\nfunction _exportKey() {\n  _exportKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(pair) {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!(pair.privateKey == null || pair.publicKey == null)) {\n            _context5.next = 2;\n            break;\n          }\n          throw new CodeError('Private and public key are required', 'ERR_INVALID_PARAMETERS');\n        case 2:\n          _context5.next = 4;\n          return Promise.all([webcrypto.get().subtle.exportKey('jwk', pair.privateKey), webcrypto.get().subtle.exportKey('jwk', pair.publicKey)]);\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _exportKey.apply(this, arguments);\n}\nfunction derivePublicFromPrivate(_x9) {\n  return _derivePublicFromPrivate.apply(this, arguments);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workaround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our Uint8Array a binary string\n  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array\n\n*/\nfunction _derivePublicFromPrivate() {\n  _derivePublicFromPrivate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(jwKey) {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return webcrypto.get().subtle.importKey('jwk', {\n            kty: jwKey.kty,\n            n: jwKey.n,\n            e: jwKey.e\n          }, {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: {\n              name: 'SHA-256'\n            }\n          }, true, ['verify']);\n        case 2:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _derivePublicFromPrivate.apply(this, arguments);\n}\nfunction convertKey(key, pub, msg, handle) {\n  var fkey = pub ? jwk2pub(key) : jwk2priv(key);\n  var fmsg = uint8ArrayToString(Uint8Array.from(msg), 'ascii');\n  var fomsg = handle(fmsg, fkey);\n  return uint8ArrayFromString(fomsg, 'ascii');\n}\nexport function encrypt(key, msg) {\n  return convertKey(key, true, msg, function (msg, key) {\n    return key.encrypt(msg);\n  });\n}\nexport function decrypt(key, msg) {\n  return convertKey(key, false, msg, function (msg, key) {\n    return key.decrypt(msg);\n  });\n}","map":{"version":3,"names":["webcrypto","randomBytes","toString","uint8ArrayToString","fromString","uint8ArrayFromString","utils","jwk2pub","jwk2priv","CodeError","generateKey","_x","_generateKey","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","bits","pair","keys","wrap","_callee$","_context","prev","next","get","subtle","name","modulusLength","publicExponent","Uint8Array","hash","sent","exportKey","abrupt","privateKey","publicKey","stop","unmarshalPrivateKey","_x2","_unmarshalPrivateKey","_callee2","key","_callee2$","_context2","importKey","t0","derivePublicFromPrivate","t1","getRandomValues","hashAndSign","_x3","_x4","_hashAndSign","_callee3","msg","sig","_callee3$","_context3","sign","from","byteLength","hashAndVerify","_x5","_x6","_x7","_hashAndVerify","_callee4","_callee4$","_context4","verify","_x8","_exportKey","_callee5","_callee5$","_context5","Promise","all","_x9","_derivePublicFromPrivate","_callee6","jwKey","_callee6$","_context6","kty","n","e","convertKey","pub","handle","fkey","fmsg","fomsg","encrypt","decrypt"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/rsa-browser.ts"],"sourcesContent":["import webcrypto from '../webcrypto.js'\nimport randomBytes from '../random-bytes.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport * as utils from './rsa-utils.js'\nimport { jwk2pub, jwk2priv } from './jwk2pem.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\n\nexport { utils }\n\nexport async function generateKey (bits: number) {\n  const pair = await webcrypto.get().subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign', 'verify']\n  )\n\n  const keys = await exportKey(pair)\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\n// Takes a jwk key\nexport async function unmarshalPrivateKey (key: JsonWebKey) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign']\n  )\n\n  const pair = [\n    privateKey,\n    await derivePublicFromPrivate(key)\n  ]\n\n  const keys = await exportKey({\n    privateKey: pair[0],\n    publicKey: pair[1]\n  })\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\nexport { randomBytes as getRandomValues }\n\nexport async function hashAndSign (key: JsonWebKey, msg: Uint8Array) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['sign']\n  )\n\n  const sig = await webcrypto.get().subtle.sign(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    privateKey,\n    Uint8Array.from(msg)\n  )\n\n  return new Uint8Array(sig, 0, sig.byteLength)\n}\n\nexport async function hashAndVerify (key: JsonWebKey, sig: Uint8Array, msg: Uint8Array) {\n  const publicKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['verify']\n  )\n\n  return await webcrypto.get().subtle.verify(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    publicKey,\n    sig,\n    msg\n  )\n}\n\nasync function exportKey (pair: CryptoKeyPair) {\n  if (pair.privateKey == null || pair.publicKey == null) {\n    throw new CodeError('Private and public key are required', 'ERR_INVALID_PARAMETERS')\n  }\n\n  return await Promise.all([\n    webcrypto.get().subtle.exportKey('jwk', pair.privateKey),\n    webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n  ])\n}\n\nasync function derivePublicFromPrivate (jwKey: JsonWebKey) {\n  return await webcrypto.get().subtle.importKey(\n    'jwk',\n    {\n      kty: jwKey.kty,\n      n: jwKey.n,\n      e: jwKey.e\n    },\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['verify']\n  )\n}\n\n/*\n\nRSA encryption/decryption for the browser with webcrypto workaround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our Uint8Array a binary string\n  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array\n\n*/\n\nfunction convertKey (key: JsonWebKey, pub: boolean, msg: Uint8Array, handle: (msg: string, key: { encrypt: (msg: string) => string, decrypt: (msg: string) => string}) => string) {\n  const fkey = pub ? jwk2pub(key) : jwk2priv(key)\n  const fmsg = uint8ArrayToString(Uint8Array.from(msg), 'ascii')\n  const fomsg = handle(fmsg, fkey)\n  return uint8ArrayFromString(fomsg, 'ascii')\n}\n\nexport function encrypt (key: JsonWebKey, msg: Uint8Array) {\n  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg))\n}\n\nexport function decrypt (key: JsonWebKey, msg: Uint8Array) {\n  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
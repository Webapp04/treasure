{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as ed from '@noble/ed25519';\nvar PUBLIC_KEY_BYTE_LENGTH = 32;\nvar PRIVATE_KEY_BYTE_LENGTH = 64; // private key is actually 32 bytes but for historical reasons we concat private and public keys\nvar KEYS_BYTE_LENGTH = 32;\nexport { PUBLIC_KEY_BYTE_LENGTH as publicKeyLength };\nexport { PRIVATE_KEY_BYTE_LENGTH as privateKeyLength };\nexport function generateKey() {\n  return _generateKey.apply(this, arguments);\n}\n/**\n * Generate keypair from a 32 byte uint8array\n */\nfunction _generateKey() {\n  _generateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var privateKeyRaw, publicKey, privateKey;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // the actual private key (32 bytes)\n          privateKeyRaw = ed.utils.randomPrivateKey();\n          _context.next = 3;\n          return ed.getPublicKey(privateKeyRaw);\n        case 3:\n          publicKey = _context.sent;\n          // concatenated the public key to the private key\n          privateKey = concatKeys(privateKeyRaw, publicKey);\n          return _context.abrupt(\"return\", {\n            privateKey: privateKey,\n            publicKey: publicKey\n          });\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _generateKey.apply(this, arguments);\n}\nexport function generateKeyFromSeed(_x) {\n  return _generateKeyFromSeed.apply(this, arguments);\n}\nfunction _generateKeyFromSeed() {\n  _generateKeyFromSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(seed) {\n    var privateKeyRaw, publicKey, privateKey;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(seed.length !== KEYS_BYTE_LENGTH)) {\n            _context2.next = 4;\n            break;\n          }\n          throw new TypeError('\"seed\" must be 32 bytes in length.');\n        case 4:\n          if (seed instanceof Uint8Array) {\n            _context2.next = 6;\n            break;\n          }\n          throw new TypeError('\"seed\" must be a node.js Buffer, or Uint8Array.');\n        case 6:\n          // based on node forges algorithm, the seed is used directly as private key\n          privateKeyRaw = seed;\n          _context2.next = 9;\n          return ed.getPublicKey(privateKeyRaw);\n        case 9:\n          publicKey = _context2.sent;\n          privateKey = concatKeys(privateKeyRaw, publicKey);\n          return _context2.abrupt(\"return\", {\n            privateKey: privateKey,\n            publicKey: publicKey\n          });\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _generateKeyFromSeed.apply(this, arguments);\n}\nexport function hashAndSign(_x2, _x3) {\n  return _hashAndSign.apply(this, arguments);\n}\nfunction _hashAndSign() {\n  _hashAndSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(privateKey, msg) {\n    var privateKeyRaw;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          privateKeyRaw = privateKey.subarray(0, KEYS_BYTE_LENGTH);\n          _context3.next = 3;\n          return ed.sign(msg, privateKeyRaw);\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _hashAndSign.apply(this, arguments);\n}\nexport function hashAndVerify(_x4, _x5, _x6) {\n  return _hashAndVerify.apply(this, arguments);\n}\nfunction _hashAndVerify() {\n  _hashAndVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(publicKey, sig, msg) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return ed.verify(sig, msg, publicKey);\n        case 2:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _hashAndVerify.apply(this, arguments);\n}\nfunction concatKeys(privateKeyRaw, publicKey) {\n  var privateKey = new Uint8Array(PRIVATE_KEY_BYTE_LENGTH);\n  for (var i = 0; i < KEYS_BYTE_LENGTH; i++) {\n    privateKey[i] = privateKeyRaw[i];\n    privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i];\n  }\n  return privateKey;\n}","map":{"version":3,"names":["ed","PUBLIC_KEY_BYTE_LENGTH","PRIVATE_KEY_BYTE_LENGTH","KEYS_BYTE_LENGTH","publicKeyLength","privateKeyLength","generateKey","_generateKey","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","privateKeyRaw","publicKey","privateKey","wrap","_callee$","_context","prev","next","utils","randomPrivateKey","getPublicKey","sent","concatKeys","abrupt","stop","generateKeyFromSeed","_x","_generateKeyFromSeed","_callee2","seed","_callee2$","_context2","length","TypeError","Uint8Array","hashAndSign","_x2","_x3","_hashAndSign","_callee3","msg","_callee3$","_context3","subarray","sign","hashAndVerify","_x4","_x5","_x6","_hashAndVerify","_callee4","sig","_callee4$","_context4","verify","i"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/ed25519-browser.ts"],"sourcesContent":["import * as ed from '@noble/ed25519'\n\nconst PUBLIC_KEY_BYTE_LENGTH = 32\nconst PRIVATE_KEY_BYTE_LENGTH = 64 // private key is actually 32 bytes but for historical reasons we concat private and public keys\nconst KEYS_BYTE_LENGTH = 32\n\nexport { PUBLIC_KEY_BYTE_LENGTH as publicKeyLength }\nexport { PRIVATE_KEY_BYTE_LENGTH as privateKeyLength }\n\nexport async function generateKey () {\n  // the actual private key (32 bytes)\n  const privateKeyRaw = ed.utils.randomPrivateKey()\n  const publicKey = await ed.getPublicKey(privateKeyRaw)\n\n  // concatenated the public key to the private key\n  const privateKey = concatKeys(privateKeyRaw, publicKey)\n\n  return {\n    privateKey,\n    publicKey\n  }\n}\n\n/**\n * Generate keypair from a 32 byte uint8array\n */\nexport async function generateKeyFromSeed (seed: Uint8Array) {\n  if (seed.length !== KEYS_BYTE_LENGTH) {\n    throw new TypeError('\"seed\" must be 32 bytes in length.')\n  } else if (!(seed instanceof Uint8Array)) {\n    throw new TypeError('\"seed\" must be a node.js Buffer, or Uint8Array.')\n  }\n\n  // based on node forges algorithm, the seed is used directly as private key\n  const privateKeyRaw = seed\n  const publicKey = await ed.getPublicKey(privateKeyRaw)\n\n  const privateKey = concatKeys(privateKeyRaw, publicKey)\n\n  return {\n    privateKey,\n    publicKey\n  }\n}\n\nexport async function hashAndSign (privateKey: Uint8Array, msg: Uint8Array) {\n  const privateKeyRaw = privateKey.subarray(0, KEYS_BYTE_LENGTH)\n\n  return await ed.sign(msg, privateKeyRaw)\n}\n\nexport async function hashAndVerify (publicKey: Uint8Array, sig: Uint8Array, msg: Uint8Array) {\n  return await ed.verify(sig, msg, publicKey)\n}\n\nfunction concatKeys (privateKeyRaw: Uint8Array, publicKey: Uint8Array) {\n  const privateKey = new Uint8Array(PRIVATE_KEY_BYTE_LENGTH)\n  for (let i = 0; i < KEYS_BYTE_LENGTH; i++) {\n    privateKey[i] = privateKeyRaw[i]\n    privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i]\n  }\n  return privateKey\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isValidPublicKey } from '../utils.js';\nimport { AbstractHandshake } from './abstract-handshake.js';\nexport var XX = /*#__PURE__*/function (_AbstractHandshake) {\n  _inherits(XX, _AbstractHandshake);\n  var _super = _createSuper(XX);\n  function XX() {\n    _classCallCheck(this, XX);\n    return _super.apply(this, arguments);\n  }\n  _createClass(XX, [{\n    key: \"initializeInitiator\",\n    value: function initializeInitiator(prologue, s, rs, psk) {\n      var name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n      var ss = this.initializeSymmetric(name);\n      this.mixHash(ss, prologue);\n      var re = new Uint8Array(32);\n      return {\n        ss: ss,\n        s: s,\n        rs: rs,\n        psk: psk,\n        re: re\n      };\n    }\n  }, {\n    key: \"initializeResponder\",\n    value: function initializeResponder(prologue, s, rs, psk) {\n      var name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n      var ss = this.initializeSymmetric(name);\n      this.mixHash(ss, prologue);\n      var re = new Uint8Array(32);\n      return {\n        ss: ss,\n        s: s,\n        rs: rs,\n        psk: psk,\n        re: re\n      };\n    }\n  }, {\n    key: \"writeMessageA\",\n    value: function writeMessageA(hs, payload, e) {\n      var ns = new Uint8Array(0);\n      if (e !== undefined) {\n        hs.e = e;\n      } else {\n        hs.e = this.crypto.generateX25519KeyPair();\n      }\n      var ne = hs.e.publicKey;\n      this.mixHash(hs.ss, ne);\n      var ciphertext = this.encryptAndHash(hs.ss, payload);\n      return {\n        ne: ne,\n        ns: ns,\n        ciphertext: ciphertext\n      };\n    }\n  }, {\n    key: \"writeMessageB\",\n    value: function writeMessageB(hs, payload) {\n      hs.e = this.crypto.generateX25519KeyPair();\n      var ne = hs.e.publicKey;\n      this.mixHash(hs.ss, ne);\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n      var spk = hs.s.publicKey;\n      var ns = this.encryptAndHash(hs.ss, spk);\n      this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n      var ciphertext = this.encryptAndHash(hs.ss, payload);\n      return {\n        ne: ne,\n        ns: ns,\n        ciphertext: ciphertext\n      };\n    }\n  }, {\n    key: \"writeMessageC\",\n    value: function writeMessageC(hs, payload) {\n      var spk = hs.s.publicKey;\n      var ns = this.encryptAndHash(hs.ss, spk);\n      this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n      var ciphertext = this.encryptAndHash(hs.ss, payload);\n      var ne = this.createEmptyKey();\n      var messageBuffer = {\n        ne: ne,\n        ns: ns,\n        ciphertext: ciphertext\n      };\n      var _this$split = this.split(hs.ss),\n        cs1 = _this$split.cs1,\n        cs2 = _this$split.cs2;\n      return {\n        h: hs.ss.h,\n        messageBuffer: messageBuffer,\n        cs1: cs1,\n        cs2: cs2\n      };\n    }\n  }, {\n    key: \"readMessageA\",\n    value: function readMessageA(hs, message) {\n      if (isValidPublicKey(message.ne)) {\n        hs.re = message.ne;\n      }\n      this.mixHash(hs.ss, hs.re);\n      return this.decryptAndHash(hs.ss, message.ciphertext);\n    }\n  }, {\n    key: \"readMessageB\",\n    value: function readMessageB(hs, message) {\n      if (isValidPublicKey(message.ne)) {\n        hs.re = message.ne;\n      }\n      this.mixHash(hs.ss, hs.re);\n      if (!hs.e) {\n        throw new Error('Handshake state `e` param is missing.');\n      }\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n      var _this$decryptAndHash = this.decryptAndHash(hs.ss, message.ns),\n        ns = _this$decryptAndHash.plaintext,\n        valid1 = _this$decryptAndHash.valid;\n      if (valid1 && isValidPublicKey(ns)) {\n        hs.rs = ns;\n      }\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n      var _this$decryptAndHash2 = this.decryptAndHash(hs.ss, message.ciphertext),\n        plaintext = _this$decryptAndHash2.plaintext,\n        valid2 = _this$decryptAndHash2.valid;\n      return {\n        plaintext: plaintext,\n        valid: valid1 && valid2\n      };\n    }\n  }, {\n    key: \"readMessageC\",\n    value: function readMessageC(hs, message) {\n      var _this$decryptAndHash3 = this.decryptAndHash(hs.ss, message.ns),\n        ns = _this$decryptAndHash3.plaintext,\n        valid1 = _this$decryptAndHash3.valid;\n      if (valid1 && isValidPublicKey(ns)) {\n        hs.rs = ns;\n      }\n      if (!hs.e) {\n        throw new Error('Handshake state `e` param is missing.');\n      }\n      this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n      var _this$decryptAndHash4 = this.decryptAndHash(hs.ss, message.ciphertext),\n        plaintext = _this$decryptAndHash4.plaintext,\n        valid2 = _this$decryptAndHash4.valid;\n      var _this$split2 = this.split(hs.ss),\n        cs1 = _this$split2.cs1,\n        cs2 = _this$split2.cs2;\n      return {\n        h: hs.ss.h,\n        plaintext: plaintext,\n        valid: valid1 && valid2,\n        cs1: cs1,\n        cs2: cs2\n      };\n    }\n  }, {\n    key: \"initSession\",\n    value: function initSession(initiator, prologue, s) {\n      var psk = this.createEmptyKey();\n      var rs = new Uint8Array(32); // no static key yet\n      var hs;\n      if (initiator) {\n        hs = this.initializeInitiator(prologue, s, rs, psk);\n      } else {\n        hs = this.initializeResponder(prologue, s, rs, psk);\n      }\n      return {\n        hs: hs,\n        i: initiator,\n        mc: 0\n      };\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(session, message, ephemeral) {\n      var messageBuffer;\n      if (session.mc === 0) {\n        messageBuffer = this.writeMessageA(session.hs, message, ephemeral);\n      } else if (session.mc === 1) {\n        messageBuffer = this.writeMessageB(session.hs, message);\n      } else if (session.mc === 2) {\n        var _this$writeMessageC = this.writeMessageC(session.hs, message),\n          h = _this$writeMessageC.h,\n          resultingBuffer = _this$writeMessageC.messageBuffer,\n          cs1 = _this$writeMessageC.cs1,\n          cs2 = _this$writeMessageC.cs2;\n        messageBuffer = resultingBuffer;\n        session.h = h;\n        session.cs1 = cs1;\n        session.cs2 = cs2;\n      } else if (session.mc > 2) {\n        if (session.i) {\n          if (!session.cs1) {\n            throw new Error('CS1 (cipher state) is not defined');\n          }\n          messageBuffer = this.writeMessageRegular(session.cs1, message);\n        } else {\n          if (!session.cs2) {\n            throw new Error('CS2 (cipher state) is not defined');\n          }\n          messageBuffer = this.writeMessageRegular(session.cs2, message);\n        }\n      } else {\n        throw new Error('Session invalid.');\n      }\n      session.mc++;\n      return messageBuffer;\n    }\n  }, {\n    key: \"recvMessage\",\n    value: function recvMessage(session, message) {\n      var plaintext = new Uint8Array(0);\n      var valid = false;\n      if (session.mc === 0) {\n        var _this$readMessageA = this.readMessageA(session.hs, message);\n        plaintext = _this$readMessageA.plaintext;\n        valid = _this$readMessageA.valid;\n      } else if (session.mc === 1) {\n        var _this$readMessageB = this.readMessageB(session.hs, message);\n        plaintext = _this$readMessageB.plaintext;\n        valid = _this$readMessageB.valid;\n      } else if (session.mc === 2) {\n        var _this$readMessageC = this.readMessageC(session.hs, message),\n          h = _this$readMessageC.h,\n          resultingPlaintext = _this$readMessageC.plaintext,\n          resultingValid = _this$readMessageC.valid,\n          cs1 = _this$readMessageC.cs1,\n          cs2 = _this$readMessageC.cs2;\n        plaintext = resultingPlaintext;\n        valid = resultingValid;\n        session.h = h;\n        session.cs1 = cs1;\n        session.cs2 = cs2;\n      }\n      session.mc++;\n      return {\n        plaintext: plaintext,\n        valid: valid\n      };\n    }\n  }]);\n  return XX;\n}(AbstractHandshake);","map":{"version":3,"names":["isValidPublicKey","AbstractHandshake","XX","_AbstractHandshake","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","initializeInitiator","prologue","s","rs","psk","name","ss","initializeSymmetric","mixHash","re","Uint8Array","initializeResponder","writeMessageA","hs","payload","e","ns","undefined","crypto","generateX25519KeyPair","ne","publicKey","ciphertext","encryptAndHash","writeMessageB","mixKey","dh","privateKey","spk","writeMessageC","createEmptyKey","messageBuffer","_this$split","split","cs1","cs2","h","readMessageA","message","decryptAndHash","readMessageB","Error","_this$decryptAndHash","plaintext","valid1","valid","_this$decryptAndHash2","valid2","readMessageC","_this$decryptAndHash3","_this$decryptAndHash4","_this$split2","initSession","initiator","i","mc","sendMessage","session","ephemeral","_this$writeMessageC","resultingBuffer","writeMessageRegular","recvMessage","_this$readMessageA","_this$readMessageB","_this$readMessageC","resultingPlaintext","resultingValid"],"sources":["/Users/apple/Documents/treasure/node_modules/@chainsafe/libp2p-noise/src/handshakes/xx.ts"],"sourcesContent":["import type { bytes32, bytes } from '../@types/basic.js'\nimport type { KeyPair } from '../@types/libp2p.js'\nimport { isValidPublicKey } from '../utils.js'\nimport type { CipherState, HandshakeState, MessageBuffer, NoiseSession } from '../@types/handshake.js'\nimport { AbstractHandshake } from './abstract-handshake.js'\n\nexport class XX extends AbstractHandshake {\n  private initializeInitiator (prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = 'Noise_XX_25519_ChaChaPoly_SHA256'\n    const ss = this.initializeSymmetric(name)\n    this.mixHash(ss, prologue)\n    const re = new Uint8Array(32)\n\n    return { ss, s, rs, psk, re }\n  }\n\n  private initializeResponder (prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = 'Noise_XX_25519_ChaChaPoly_SHA256'\n    const ss = this.initializeSymmetric(name)\n    this.mixHash(ss, prologue)\n    const re = new Uint8Array(32)\n\n    return { ss, s, rs, psk, re }\n  }\n\n  private writeMessageA (hs: HandshakeState, payload: bytes, e?: KeyPair): MessageBuffer {\n    const ns = new Uint8Array(0)\n\n    if (e !== undefined) {\n      hs.e = e\n    } else {\n      hs.e = this.crypto.generateX25519KeyPair()\n    }\n\n    const ne = hs.e.publicKey\n\n    this.mixHash(hs.ss, ne)\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n\n    return { ne, ns, ciphertext }\n  }\n\n  private writeMessageB (hs: HandshakeState, payload: bytes): MessageBuffer {\n    hs.e = this.crypto.generateX25519KeyPair()\n    const ne = hs.e.publicKey\n    this.mixHash(hs.ss, ne)\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re))\n    const spk = hs.s.publicKey\n    const ns = this.encryptAndHash(hs.ss, spk)\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re))\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n\n    return { ne, ns, ciphertext }\n  }\n\n  private writeMessageC (hs: HandshakeState, payload: bytes): { messageBuffer: MessageBuffer, cs1: CipherState, cs2: CipherState, h: bytes } {\n    const spk = hs.s.publicKey\n    const ns = this.encryptAndHash(hs.ss, spk)\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re))\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n    const ne = this.createEmptyKey()\n    const messageBuffer: MessageBuffer = { ne, ns, ciphertext }\n    const { cs1, cs2 } = this.split(hs.ss)\n\n    return { h: hs.ss.h, messageBuffer, cs1, cs2 }\n  }\n\n  private readMessageA (hs: HandshakeState, message: MessageBuffer): {plaintext: bytes, valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne\n    }\n\n    this.mixHash(hs.ss, hs.re)\n    return this.decryptAndHash(hs.ss, message.ciphertext)\n  }\n\n  private readMessageB (hs: HandshakeState, message: MessageBuffer): {plaintext: bytes, valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne\n    }\n\n    this.mixHash(hs.ss, hs.re)\n    if (!hs.e) {\n      throw new Error('Handshake state `e` param is missing.')\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re))\n    const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns)\n    if (valid1 && isValidPublicKey(ns)) {\n      hs.rs = ns\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs))\n    const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext)\n    return { plaintext, valid: (valid1 && valid2) }\n  }\n\n  private readMessageC (hs: HandshakeState, message: MessageBuffer): {h: bytes, plaintext: bytes, valid: boolean, cs1: CipherState, cs2: CipherState} {\n    const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns)\n    if (valid1 && isValidPublicKey(ns)) {\n      hs.rs = ns\n    }\n    if (!hs.e) {\n      throw new Error('Handshake state `e` param is missing.')\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs))\n\n    const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext)\n    const { cs1, cs2 } = this.split(hs.ss)\n\n    return { h: hs.ss.h, plaintext, valid: (valid1 && valid2), cs1, cs2 }\n  }\n\n  public initSession (initiator: boolean, prologue: bytes32, s: KeyPair): NoiseSession {\n    const psk = this.createEmptyKey()\n    const rs = new Uint8Array(32) // no static key yet\n    let hs\n\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk)\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk)\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0\n    }\n  }\n\n  public sendMessage (session: NoiseSession, message: bytes, ephemeral?: KeyPair): MessageBuffer {\n    let messageBuffer: MessageBuffer\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message, ephemeral)\n    } else if (session.mc === 1) {\n      messageBuffer = this.writeMessageB(session.hs, message)\n    } else if (session.mc === 2) {\n      const { h, messageBuffer: resultingBuffer, cs1, cs2 } = this.writeMessageC(session.hs, message)\n      messageBuffer = resultingBuffer\n      session.h = h\n      session.cs1 = cs1\n      session.cs2 = cs2\n    } else if (session.mc > 2) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error('CS1 (cipher state) is not defined')\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message)\n      } else {\n        if (!session.cs2) {\n          throw new Error('CS2 (cipher state) is not defined')\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message)\n      }\n    } else {\n      throw new Error('Session invalid.')\n    }\n\n    session.mc++\n    return messageBuffer\n  }\n\n  public recvMessage (session: NoiseSession, message: MessageBuffer): {plaintext: bytes, valid: boolean} {\n    let plaintext: bytes = new Uint8Array(0)\n    let valid = false\n    if (session.mc === 0) {\n      ({ plaintext, valid } = this.readMessageA(session.hs, message))\n    } else if (session.mc === 1) {\n      ({ plaintext, valid } = this.readMessageB(session.hs, message))\n    } else if (session.mc === 2) {\n      const { h, plaintext: resultingPlaintext, valid: resultingValid, cs1, cs2 } = this.readMessageC(session.hs, message)\n      plaintext = resultingPlaintext\n      valid = resultingValid\n      session.h = h\n      session.cs1 = cs1\n      session.cs2 = cs2\n    }\n    session.mc++\n    return { plaintext, valid }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
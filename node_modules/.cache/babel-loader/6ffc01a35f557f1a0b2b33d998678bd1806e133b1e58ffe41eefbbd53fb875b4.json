{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport errcode from 'err-code';\nimport { pipe } from 'it-pipe';\nimport * as lp from 'it-length-prefixed';\nimport drain from 'it-drain';\nimport first from 'it-first';\nimport { Message } from './message/index.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { dialingPeerEvent, sendingQueryEvent, peerResponseEvent, queryErrorEvent } from './query/events.js';\nimport { logger } from '@libp2p/logger';\nimport { Components } from '@libp2p/components';\nimport { abortableDuplex } from 'abortable-iterator';\n/**\n * Handle network operations for the dht\n */\nexport var Network = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Network, _EventEmitter);\n  var _super = _createSuper(Network);\n  /**\n   * Create a new network\n   */\n  function Network(init) {\n    var _this3;\n    _classCallCheck(this, Network);\n    _this3 = _super.call(this);\n    _this3.components = new Components();\n    var protocol = init.protocol,\n      lan = init.lan;\n    _this3.log = logger(\"libp2p:kad-dht:\".concat(lan ? 'lan' : 'wan', \":network\"));\n    _this3.running = false;\n    _this3.protocol = protocol;\n    return _this3;\n  }\n  _createClass(Network, [{\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n    }\n    /**\n     * Start the network\n     */\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.running) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              this.running = true;\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n    /**\n     * Stop all network activity\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.running = false;\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n    /**\n     * Is the network online?\n     */\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.running;\n    }\n    /**\n     * Send a request and record RTT for latency measurements\n     */\n  }, {\n    key: \"sendRequest\",\n    value: function sendRequest(to, msg) {\n      var _this = this;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var stream, connection, _stream, response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this.running) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              _this.log('sending %s to %p', msg.type, to);\n              _context3.next = 5;\n              return dialingPeerEvent({\n                peer: to\n              });\n            case 5:\n              _context3.next = 7;\n              return sendingQueryEvent({\n                to: to,\n                type: msg.type\n              });\n            case 7:\n              _context3.prev = 7;\n              _context3.next = 10;\n              return _awaitAsyncGenerator(_this.components.getConnectionManager().openConnection(to, options));\n            case 10:\n              connection = _context3.sent;\n              _context3.next = 13;\n              return _awaitAsyncGenerator(connection.newStream(_this.protocol, options));\n            case 13:\n              _stream = _context3.sent;\n              _context3.next = 16;\n              return _awaitAsyncGenerator(_this._writeReadMessage(_stream, msg.serialize(), options));\n            case 16:\n              response = _context3.sent;\n              _context3.next = 19;\n              return peerResponseEvent({\n                from: to,\n                messageType: response.type,\n                closer: response.closerPeers,\n                providers: response.providerPeers,\n                record: response.record\n              });\n            case 19:\n              _context3.next = 25;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](7);\n              _context3.next = 25;\n              return queryErrorEvent({\n                from: to,\n                error: _context3.t0\n              });\n            case 25:\n              _context3.prev = 25;\n              if (stream != null) {\n                stream.close();\n              }\n              return _context3.finish(25);\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[7, 21, 25, 28]]);\n      }))();\n    }\n    /**\n     * Sends a message without expecting an answer\n     */\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(to, msg) {\n      var _this2 = this;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var stream, connection, _stream2;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_this2.running) {\n                _context4.next = 2;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 2:\n              _this2.log('sending %s to %p', msg.type, to);\n              _context4.next = 5;\n              return dialingPeerEvent({\n                peer: to\n              });\n            case 5:\n              _context4.next = 7;\n              return sendingQueryEvent({\n                to: to,\n                type: msg.type\n              });\n            case 7:\n              _context4.prev = 7;\n              _context4.next = 10;\n              return _awaitAsyncGenerator(_this2.components.getConnectionManager().openConnection(to, options));\n            case 10:\n              connection = _context4.sent;\n              _context4.next = 13;\n              return _awaitAsyncGenerator(connection.newStream(_this2.protocol, options));\n            case 13:\n              _stream2 = _context4.sent;\n              _context4.next = 16;\n              return _awaitAsyncGenerator(_this2._writeMessage(_stream2, msg.serialize(), options));\n            case 16:\n              _context4.next = 18;\n              return peerResponseEvent({\n                from: to,\n                messageType: msg.type\n              });\n            case 18:\n              _context4.next = 24;\n              break;\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](7);\n              _context4.next = 24;\n              return queryErrorEvent({\n                from: to,\n                error: _context4.t0\n              });\n            case 24:\n              _context4.prev = 24;\n              if (stream != null) {\n                stream.close();\n              }\n              return _context4.finish(24);\n            case 27:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[7, 20, 24, 27]]);\n      }))();\n    }\n    /**\n     * Write a message to the given stream\n     */\n  }, {\n    key: \"_writeMessage\",\n    value: function () {\n      var _writeMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(stream, msg, options) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (options.signal != null) {\n                stream = abortableDuplex(stream, options.signal);\n              }\n              _context5.next = 3;\n              return pipe([msg], lp.encode(), stream, drain);\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function _writeMessage(_x, _x2, _x3) {\n        return _writeMessage2.apply(this, arguments);\n      }\n      return _writeMessage;\n    }()\n    /**\n     * Write a message and read its response.\n     * If no response is received after the specified timeout\n     * this will error out.\n     */\n  }, {\n    key: \"_writeReadMessage\",\n    value: function () {\n      var _writeReadMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(stream, msg, options) {\n        var _this4 = this;\n        var res, message;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (options.signal != null) {\n                stream = abortableDuplex(stream, options.signal);\n              }\n              _context7.next = 3;\n              return pipe([msg], lp.encode(), stream, lp.decode(), /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(source) {\n                  var buf;\n                  return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                    while (1) switch (_context6.prev = _context6.next) {\n                      case 0:\n                        _context6.next = 2;\n                        return first(source);\n                      case 2:\n                        buf = _context6.sent;\n                        if (!(buf != null)) {\n                          _context6.next = 5;\n                          break;\n                        }\n                        return _context6.abrupt(\"return\", buf);\n                      case 5:\n                        throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED');\n                      case 6:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }, _callee6);\n                }));\n                return function (_x7) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            case 3:\n              res = _context7.sent;\n              message = Message.deserialize(res); // tell any listeners about new peers we've seen\n              message.closerPeers.forEach(function (peerData) {\n                _this4.dispatchEvent(new CustomEvent('peer', {\n                  detail: peerData\n                }));\n              });\n              message.providerPeers.forEach(function (peerData) {\n                _this4.dispatchEvent(new CustomEvent('peer', {\n                  detail: peerData\n                }));\n              });\n              return _context7.abrupt(\"return\", message);\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      }));\n      function _writeReadMessage(_x4, _x5, _x6) {\n        return _writeReadMessage2.apply(this, arguments);\n      }\n      return _writeReadMessage;\n    }()\n  }]);\n  return Network;\n}(EventEmitter);","map":{"version":3,"names":["errcode","pipe","lp","drain","first","Message","EventEmitter","CustomEvent","dialingPeerEvent","sendingQueryEvent","peerResponseEvent","queryErrorEvent","logger","Components","abortableDuplex","Network","_EventEmitter","_inherits","_super","_createSuper","init","_this3","_classCallCheck","call","components","protocol","lan","log","concat","running","_createClass","key","value","_start","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","start","apply","arguments","_stop","_callee2","_callee2$","_context2","isStarted","sendRequest","to","msg","_this","options","length","undefined","_wrapAsyncGenerator","_callee3","stream","connection","_stream","response","_callee3$","_context3","type","peer","_awaitAsyncGenerator","getConnectionManager","openConnection","sent","newStream","_writeReadMessage","serialize","from","messageType","closer","closerPeers","providers","providerPeers","record","t0","error","close","finish","sendMessage","_this2","_callee4","_stream2","_callee4$","_context4","_writeMessage","_writeMessage2","_callee5","_callee5$","_context5","signal","encode","_x","_x2","_x3","_writeReadMessage2","_callee7","_this4","res","message","_callee7$","_context7","decode","_ref","_callee6","source","buf","_callee6$","_context6","Error","_x7","deserialize","forEach","peerData","dispatchEvent","detail","_x4","_x5","_x6"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/network.ts"],"sourcesContent":["import errcode from 'err-code'\nimport { pipe } from 'it-pipe'\nimport * as lp from 'it-length-prefixed'\nimport drain from 'it-drain'\nimport first from 'it-first'\nimport { Message } from './message/index.js'\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events'\nimport {\n  dialingPeerEvent,\n  sendingQueryEvent,\n  peerResponseEvent,\n  queryErrorEvent\n} from './query/events.js'\nimport { logger } from '@libp2p/logger'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { AbortOptions } from '@libp2p/interfaces'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { Logger } from '@libp2p/logger'\nimport type { Duplex } from 'it-stream-types'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\nimport { Components, Initializable } from '@libp2p/components'\nimport type { Stream } from '@libp2p/interface-connection'\nimport { abortableDuplex } from 'abortable-iterator'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface NetworkInit {\n  protocol: string\n  lan: boolean\n}\n\ninterface NetworkEvents {\n  'peer': CustomEvent<PeerInfo>\n}\n\n/**\n * Handle network operations for the dht\n */\nexport class Network extends EventEmitter<NetworkEvents> implements Startable, Initializable {\n  private readonly log: Logger\n  private readonly protocol: string\n  private running: boolean\n  private components: Components = new Components()\n\n  /**\n   * Create a new network\n   */\n  constructor (init: NetworkInit) {\n    super()\n\n    const { protocol, lan } = init\n    this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:network`)\n    this.running = false\n    this.protocol = protocol\n  }\n\n  init (components: Components): void {\n    this.components = components\n  }\n\n  /**\n   * Start the network\n   */\n  async start () {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n  }\n\n  /**\n   * Stop all network activity\n   */\n  async stop () {\n    this.running = false\n  }\n\n  /**\n   * Is the network online?\n   */\n  isStarted () {\n    return this.running\n  }\n\n  /**\n   * Send a request and record RTT for latency measurements\n   */\n  async * sendRequest (to: PeerId, msg: Message, options: AbortOptions = {}) {\n    if (!this.running) {\n      return\n    }\n\n    this.log('sending %s to %p', msg.type, to)\n    yield dialingPeerEvent({ peer: to })\n    yield sendingQueryEvent({ to, type: msg.type })\n\n    let stream: Stream | undefined\n\n    try {\n      const connection = await this.components.getConnectionManager().openConnection(to, options)\n      const stream = await connection.newStream(this.protocol, options)\n\n      const response = await this._writeReadMessage(stream, msg.serialize(), options)\n\n      yield peerResponseEvent({\n        from: to,\n        messageType: response.type,\n        closer: response.closerPeers,\n        providers: response.providerPeers,\n        record: response.record\n      })\n    } catch (err: any) {\n      yield queryErrorEvent({ from: to, error: err })\n    } finally {\n      if (stream != null) {\n        stream.close()\n      }\n    }\n  }\n\n  /**\n   * Sends a message without expecting an answer\n   */\n  async * sendMessage (to: PeerId, msg: Message, options: AbortOptions = {}) {\n    if (!this.running) {\n      return\n    }\n\n    this.log('sending %s to %p', msg.type, to)\n    yield dialingPeerEvent({ peer: to })\n    yield sendingQueryEvent({ to, type: msg.type })\n\n    let stream: Stream | undefined\n\n    try {\n      const connection = await this.components.getConnectionManager().openConnection(to, options)\n      const stream = await connection.newStream(this.protocol, options)\n\n      await this._writeMessage(stream, msg.serialize(), options)\n\n      yield peerResponseEvent({ from: to, messageType: msg.type })\n    } catch (err: any) {\n      yield queryErrorEvent({ from: to, error: err })\n    } finally {\n      if (stream != null) {\n        stream.close()\n      }\n    }\n  }\n\n  /**\n   * Write a message to the given stream\n   */\n  async _writeMessage (stream: Duplex<Uint8ArrayList, Uint8ArrayList | Uint8Array>, msg: Uint8Array | Uint8ArrayList, options: AbortOptions) {\n    if (options.signal != null) {\n      stream = abortableDuplex(stream, options.signal)\n    }\n\n    await pipe(\n      [msg],\n      lp.encode(),\n      stream,\n      drain\n    )\n  }\n\n  /**\n   * Write a message and read its response.\n   * If no response is received after the specified timeout\n   * this will error out.\n   */\n  async _writeReadMessage (stream: Duplex<Uint8ArrayList, Uint8ArrayList | Uint8Array>, msg: Uint8Array | Uint8ArrayList, options: AbortOptions) {\n    if (options.signal != null) {\n      stream = abortableDuplex(stream, options.signal)\n    }\n\n    const res = await pipe(\n      [msg],\n      lp.encode(),\n      stream,\n      lp.decode(),\n      async source => {\n        const buf = await first(source)\n\n        if (buf != null) {\n          return buf\n        }\n\n        throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED')\n      }\n    )\n\n    const message = Message.deserialize(res)\n\n    // tell any listeners about new peers we've seen\n    message.closerPeers.forEach(peerData => {\n      this.dispatchEvent(new CustomEvent('peer', {\n        detail: peerData\n      }))\n    })\n    message.providerPeers.forEach(peerData => {\n      this.dispatchEvent(new CustomEvent('peer', {\n        detail: peerData\n      }))\n    })\n\n    return message\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
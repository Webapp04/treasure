{"ast":null,"code":"import _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport { persist } from './persist.js';\nimport { createHAMT, Bucket } from 'hamt-sharding';\nimport { hamtHashCode, hamtHashFn, hamtBucketBits } from './hamt-constants.js';\n\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nexport var Dir = /*#__PURE__*/function () {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  function Dir(props, options) {\n    _classCallCheck(this, Dir);\n    this.options = options || {};\n    this.root = props.root;\n    this.dir = props.dir;\n    this.path = props.path;\n    this.dirty = props.dirty;\n    this.flat = props.flat;\n    this.parent = props.parent;\n    this.parentKey = props.parentKey;\n    this.unixfs = props.unixfs;\n    this.mode = props.mode;\n    this.mtime = props.mtime;\n    /** @type {CID | undefined} */\n    this.cid = undefined;\n    /** @type {number | undefined} */\n    this.size = undefined;\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  _createClass(Dir, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, value) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function put(_x5, _x6) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\n     * @param {string} name\n     * @returns {Promise<DirContents | undefined>}\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return Promise.resolve(this);\n    }\n\n    /**\n     * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n     */\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n    /**\n     * @param {Blockstore} blockstore\n     * @returns {AsyncIterable<ImportResult>}\n     */\n  }, {\n    key: \"flush\",\n    value: function flush(blockstore) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n  }]);\n  return Dir;\n}();\nexport var DirSharded = /*#__PURE__*/function (_Dir) {\n  _inherits(DirSharded, _Dir);\n  var _super = _createSuper(DirSharded);\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  function DirSharded(props, options) {\n    var _this3;\n    _classCallCheck(this, DirSharded);\n    _this3 = _super.call(this, props, options);\n\n    /** @type {Bucket<DirContents>} */\n    _this3._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    });\n    return _this3;\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  _createClass(DirSharded, [{\n    key: \"put\",\n    value: function () {\n      var _put2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name, value) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this._bucket.put(name, value);\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function put(_x7, _x8) {\n        return _put2.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\n     * @param {string} name\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this._bucket.get(name);\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return this._bucket.leafCount();\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this._bucket.childrenCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._bucket.onlyChild();\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context5.prev = 2;\n              _iterator = _asyncIterator(_this._bucket.eachLeafSeries());\n            case 4:\n              _context5.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context5.sent).done)) {\n                _context5.next = 13;\n                break;\n              }\n              _step$value = _step.value, key = _step$value.key, value = _step$value.value;\n              _context5.next = 10;\n              return {\n                key: key,\n                child: value\n              };\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _context5.next = 4;\n              break;\n            case 13:\n              _context5.next = 19;\n              break;\n            case 15:\n              _context5.prev = 15;\n              _context5.t0 = _context5[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context5.t0;\n            case 19:\n              _context5.prev = 19;\n              _context5.prev = 20;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context5.next = 24;\n                break;\n              }\n              _context5.next = 24;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 24:\n              _context5.prev = 24;\n              if (!_didIteratorError) {\n                _context5.next = 27;\n                break;\n              }\n              throw _iteratorError;\n            case 27:\n              return _context5.finish(24);\n            case 28:\n              return _context5.finish(19);\n            case 29:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n\n    /**\n     * @param {Blockstore} blockstore\n     * @returns {AsyncIterable<ImportResult>}\n     */\n  }, {\n    key: \"flush\",\n    value: function flush(blockstore) {\n      var _this2 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_flush2(_this2._bucket, blockstore, _this2, _this2.options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    }\n  }]);\n  return DirSharded;\n}(Dir);\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nfunction _flush2(_x, _x2, _x3, _x4) {\n  return _flush.apply(this, arguments);\n}\nfunction _flush() {\n  _flush = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bucket, blockstore, shardRoot, options) {\n    var children, links, childrenSize, i, child, labelPrefix, shard, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, subShard, _dir, flushedDir, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, entry, label, value, _label, _size, data, dir, node, buffer, cid, size;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          children = bucket._children;\n          links = [];\n          childrenSize = 0;\n          i = 0;\n        case 4:\n          if (!(i < children.length)) {\n            _context7.next = 97;\n            break;\n          }\n          child = children.get(i);\n          if (child) {\n            _context7.next = 8;\n            break;\n          }\n          return _context7.abrupt(\"continue\", 94);\n        case 8:\n          labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n          if (!(child instanceof Bucket)) {\n            _context7.next = 49;\n            break;\n          }\n          shard = void 0;\n          _iteratorAbruptCompletion2 = false;\n          _didIteratorError2 = false;\n          _context7.prev = 13;\n          _context7.t0 = _asyncIterator;\n          _context7.next = 17;\n          return _awaitAsyncGenerator(_flush2(child, blockstore, null, options));\n        case 17:\n          _context7.t1 = _context7.sent;\n          _iterator2 = (0, _context7.t0)(_context7.t1);\n        case 19:\n          _context7.next = 21;\n          return _awaitAsyncGenerator(_iterator2.next());\n        case 21:\n          if (!(_iteratorAbruptCompletion2 = !(_step2 = _context7.sent).done)) {\n            _context7.next = 27;\n            break;\n          }\n          subShard = _step2.value;\n          shard = subShard;\n        case 24:\n          _iteratorAbruptCompletion2 = false;\n          _context7.next = 19;\n          break;\n        case 27:\n          _context7.next = 33;\n          break;\n        case 29:\n          _context7.prev = 29;\n          _context7.t2 = _context7[\"catch\"](13);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context7.t2;\n        case 33:\n          _context7.prev = 33;\n          _context7.prev = 34;\n          if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n            _context7.next = 38;\n            break;\n          }\n          _context7.next = 38;\n          return _awaitAsyncGenerator(_iterator2.return());\n        case 38:\n          _context7.prev = 38;\n          if (!_didIteratorError2) {\n            _context7.next = 41;\n            break;\n          }\n          throw _iteratorError2;\n        case 41:\n          return _context7.finish(38);\n        case 42:\n          return _context7.finish(33);\n        case 43:\n          if (shard) {\n            _context7.next = 45;\n            break;\n          }\n          throw new Error('Could not flush sharded directory, no subshard found');\n        case 45:\n          links.push({\n            Name: labelPrefix,\n            Tsize: shard.size,\n            Hash: shard.cid\n          });\n          childrenSize += shard.size;\n          _context7.next = 94;\n          break;\n        case 49:\n          if (!(typeof child.value.flush === 'function')) {\n            _context7.next = 87;\n            break;\n          }\n          _dir = child.value;\n          flushedDir = void 0;\n          _iteratorAbruptCompletion3 = false;\n          _didIteratorError3 = false;\n          _context7.prev = 54;\n          _iterator3 = _asyncIterator(_dir.flush(blockstore));\n        case 56:\n          _context7.next = 58;\n          return _awaitAsyncGenerator(_iterator3.next());\n        case 58:\n          if (!(_iteratorAbruptCompletion3 = !(_step3 = _context7.sent).done)) {\n            _context7.next = 66;\n            break;\n          }\n          entry = _step3.value;\n          flushedDir = entry;\n          _context7.next = 63;\n          return flushedDir;\n        case 63:\n          _iteratorAbruptCompletion3 = false;\n          _context7.next = 56;\n          break;\n        case 66:\n          _context7.next = 72;\n          break;\n        case 68:\n          _context7.prev = 68;\n          _context7.t3 = _context7[\"catch\"](54);\n          _didIteratorError3 = true;\n          _iteratorError3 = _context7.t3;\n        case 72:\n          _context7.prev = 72;\n          _context7.prev = 73;\n          if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n            _context7.next = 77;\n            break;\n          }\n          _context7.next = 77;\n          return _awaitAsyncGenerator(_iterator3.return());\n        case 77:\n          _context7.prev = 77;\n          if (!_didIteratorError3) {\n            _context7.next = 80;\n            break;\n          }\n          throw _iteratorError3;\n        case 80:\n          return _context7.finish(77);\n        case 81:\n          return _context7.finish(72);\n        case 82:\n          label = labelPrefix + child.key;\n          links.push({\n            Name: label,\n            Tsize: flushedDir.size,\n            Hash: flushedDir.cid\n          });\n          childrenSize += flushedDir.size;\n          _context7.next = 94;\n          break;\n        case 87:\n          value = child.value;\n          if (value.cid) {\n            _context7.next = 90;\n            break;\n          }\n          return _context7.abrupt(\"continue\", 94);\n        case 90:\n          _label = labelPrefix + child.key;\n          _size = value.size;\n          links.push({\n            Name: _label,\n            Tsize: _size,\n            Hash: value.cid\n          });\n          childrenSize += _size;\n        case 94:\n          i++;\n          _context7.next = 4;\n          break;\n        case 97:\n          // go-ipfs uses little endian, that's why we have to\n          // reverse the bit field before storing it\n          data = Uint8Array.from(children.bitField().reverse());\n          dir = new UnixFS({\n            type: 'hamt-sharded-directory',\n            data: data,\n            fanout: bucket.tableSize(),\n            hashType: hamtHashCode,\n            mtime: shardRoot && shardRoot.mtime,\n            mode: shardRoot && shardRoot.mode\n          });\n          node = {\n            Data: dir.marshal(),\n            Links: links\n          };\n          buffer = encode(prepare(node));\n          _context7.next = 103;\n          return _awaitAsyncGenerator(persist(buffer, blockstore, options));\n        case 103:\n          cid = _context7.sent;\n          size = buffer.length + childrenSize;\n          _context7.next = 107;\n          return {\n            cid: cid,\n            node: node,\n            size: size\n          };\n        case 107:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[13, 29, 33, 43], [34,, 38, 42], [54, 68, 72, 82], [73,, 77, 81]]);\n  }));\n  return _flush.apply(this, arguments);\n}","map":{"version":3,"names":["encode","prepare","UnixFS","persist","createHAMT","Bucket","hamtHashCode","hamtHashFn","hamtBucketBits","Dir","props","options","_classCallCheck","root","dir","path","dirty","flat","parent","parentKey","unixfs","mode","mtime","cid","undefined","size","_createClass","key","value","_put","_asyncToGenerator","_regeneratorRuntime","mark","_callee","name","wrap","_callee$","_context","prev","next","stop","put","_x5","_x6","apply","arguments","get","Promise","resolve","eachChildSeries","_wrapAsyncGenerator","_callee2","_callee2$","_context2","flush","blockstore","_callee3","_callee3$","_context3","DirSharded","_Dir","_inherits","_super","_createSuper","_this3","call","_bucket","hashFn","bits","_put2","_callee4","_callee4$","_context4","_x7","_x8","childCount","leafCount","directChildrenCount","childrenCount","onlyChild","_this","_callee5","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_step$value","_callee5$","_context5","_asyncIterator","eachLeafSeries","_awaitAsyncGenerator","sent","done","child","t0","return","finish","_this2","_callee6","_callee6$","_context6","delegateYield","_asyncGeneratorDelegate","_x","_x2","_x3","_x4","_flush","_callee7","bucket","shardRoot","children","links","childrenSize","i","labelPrefix","shard","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","subShard","_dir","flushedDir","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","entry","label","_label","_size","data","node","buffer","_callee7$","_context7","_children","length","abrupt","toString","toUpperCase","padStart","t1","t2","Error","push","Name","Tsize","Hash","t3","Uint8Array","from","bitField","reverse","type","fanout","tableSize","hashType","Data","marshal","Links"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/utils/dir-sharded.js"],"sourcesContent":["import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { persist } from './persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\nimport {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} from './hamt-constants.js'\n\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nexport class Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) { }\n  /**\n   * @param {string} name\n   * @returns {Promise<DirContents | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n   */\n  async * eachChildSeries () { }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport class DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<DirContents>} */\n    this._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    yield * flush(this._bucket, blockstore, this, this.options)\n  }\n}\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    node,\n    size\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
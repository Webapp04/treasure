{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createId } from './id.js';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport var createIsOnline = function createIsOnline(options) {\n  var id = createId(options);\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  function isOnline() {\n    return _isOnline.apply(this, arguments);\n  }\n  function _isOnline() {\n    _isOnline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return id(options);\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", Boolean(res && res.addresses && res.addresses.length));\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _isOnline.apply(this, arguments);\n  }\n  return isOnline;\n};","map":{"version":3,"names":["createId","createIsOnline","options","id","isOnline","_isOnline","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","_args","wrap","_callee$","_context","prev","next","length","undefined","sent","abrupt","Boolean","addresses","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-http-client/src/is-online.js"],"sourcesContent":["import { createId } from './id.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,SAAS;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,OAAO,EAAI;EACvC,IAAMC,EAAE,GAAGH,QAAQ,CAACE,OAAO,CAAC;;EAE5B;AACF;AACA;EAFE,SAGeE,QAAQA,CAAA;IAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,UAAA;IAAAA,SAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAvB,SAAAC,QAAA;MAAA,IAAAT,OAAA;QAAAU,GAAA;QAAAC,KAAA,GAAAN,SAAA;MAAA,OAAAE,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAyBhB,OAAO,GAAAW,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OACjBf,EAAE,CAACD,OAAO,CAAC;UAAA;YAAvBU,GAAG,GAAAI,QAAA,CAAAK,IAAA;YAAA,OAAAL,QAAA,CAAAM,MAAA,WAEFC,OAAO,CAACX,GAAG,IAAIA,GAAG,CAACY,SAAS,IAAIZ,GAAG,CAACY,SAAS,CAACL,MAAM,CAAC;UAAA;UAAA;YAAA,OAAAH,QAAA,CAAAS,IAAA;QAAA;MAAA,GAAAd,OAAA;IAAA,CAC7D;IAAA,OAAAN,SAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EACD,OAAOH,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
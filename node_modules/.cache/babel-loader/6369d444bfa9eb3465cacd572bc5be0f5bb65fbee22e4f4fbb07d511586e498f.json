{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport errCode from 'err-code';\nimport parallel from 'it-parallel';\nimport map from 'it-map';\nimport filter from 'it-filter';\nimport { pipe } from 'it-pipe';\nimport { cleanCid } from './utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nvar BLOCK_RM_CONCURRENCY = 8;\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm(_ref) {\n  var repo = _ref.repo;\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"rm\"]}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n  function _rm() {\n    _rm = _wrapAsyncGenerator(function (cids) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var release;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!Array.isArray(cids)) {\n                cids = [cids];\n              }\n\n              // We need to take a write lock here to ensure that adding and removing\n              // blocks are exclusive operations\n              _context2.next = 3;\n              return _awaitAsyncGenerator(repo.gcLock.writeLock());\n            case 3:\n              release = _context2.sent;\n              _context2.prev = 4;\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pipe(cids, function (source) {\n                return map(source, function (cid) {\n                  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                    var result, has;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          cid = cleanCid(cid);\n\n                          /** @type {import('ipfs-core-types/src/block').RmResult} */\n                          result = {\n                            cid: cid\n                          };\n                          _context.prev = 2;\n                          _context.next = 5;\n                          return repo.blocks.has(cid);\n                        case 5:\n                          has = _context.sent;\n                          if (has) {\n                            _context.next = 8;\n                            break;\n                          }\n                          throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n                        case 8:\n                          _context.next = 10;\n                          return repo.blocks.delete(cid);\n                        case 10:\n                          _context.next = 15;\n                          break;\n                        case 12:\n                          _context.prev = 12;\n                          _context.t0 = _context[\"catch\"](2);\n                          if (!options.force) {\n                            _context.t0.message = \"cannot remove \".concat(cid, \": \").concat(_context.t0.message);\n                            result.error = _context.t0;\n                          }\n                        case 15:\n                          return _context.abrupt(\"return\", result);\n                        case 16:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee, null, [[2, 12]]);\n                  }));\n                });\n              }, function (source) {\n                return parallel(source, {\n                  concurrency: BLOCK_RM_CONCURRENCY\n                });\n              }, function (source) {\n                return filter(source, function () {\n                  return !options.quiet;\n                });\n              })), _awaitAsyncGenerator), \"t0\", 6);\n            case 6:\n              _context2.prev = 6;\n              release();\n              return _context2.finish(6);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[4,, 6, 9]]);\n      })();\n    });\n    return _rm.apply(this, arguments);\n  }\n  return withTimeoutOption(rm);\n}","map":{"version":3,"names":["errCode","parallel","map","filter","pipe","cleanCid","withTimeoutOption","BLOCK_RM_CONCURRENCY","createRm","_ref","repo","rm","_x","_rm","apply","arguments","_wrapAsyncGenerator","cids","options","length","undefined","_regeneratorRuntime","mark","_callee2","release","wrap","_callee2$","_context2","prev","next","Array","isArray","_awaitAsyncGenerator","gcLock","writeLock","sent","delegateYield","_asyncGeneratorDelegate","_asyncIterator","source","cid","_asyncToGenerator","_callee","result","has","_callee$","_context","blocks","Error","delete","t0","force","message","concat","error","abrupt","stop","concurrency","quiet","finish"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/block/rm.js"],"sourcesContent":["import errCode from 'err-code'\nimport parallel from 'it-parallel'\nimport map from 'it-map'\nimport filter from 'it-filter'\nimport { pipe } from 'it-pipe'\nimport { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst BLOCK_RM_CONCURRENCY = 8\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"rm\"]}\n   */\n  async function * rm (cids, options = {}) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n    const release = await repo.gcLock.writeLock()\n\n    try {\n      yield * pipe(\n        cids,\n        source => map(source, cid => {\n          return async () => {\n            cid = cleanCid(cid)\n\n            /** @type {import('ipfs-core-types/src/block').RmResult} */\n            const result = { cid }\n\n            try {\n              const has = await repo.blocks.has(cid)\n\n              if (!has) {\n                throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND')\n              }\n\n              await repo.blocks.delete(cid)\n            } catch (/** @type {any} */ err) {\n              if (!options.force) {\n                err.message = `cannot remove ${cid}: ${err.message}`\n                result.error = err\n              }\n            }\n\n            return result\n          }\n        }),\n        source => parallel(source, { concurrency: BLOCK_RM_CONCURRENCY }),\n        source => filter(source, () => !options.quiet)\n      )\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rm)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut(_ref) {\n  var repo = _ref.repo,\n    codecs = _ref.codecs,\n    hashers = _ref.hashers,\n    preload = _ref.preload;\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dagNode) {\n      var options,\n        release,\n        storeCodec,\n        inputCodec,\n        cidVersion,\n        hasher,\n        buf,\n        hash,\n        cid,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            if (!options.pin) {\n              _context.next = 7;\n              break;\n            }\n            _context.next = 4;\n            return repo.gcLock.readLock();\n          case 4:\n            _context.t0 = _context.sent;\n            _context.next = 8;\n            break;\n          case 7:\n            _context.t0 = null;\n          case 8:\n            release = _context.t0;\n            _context.prev = 9;\n            _context.next = 12;\n            return codecs.getCodec(options.storeCodec || 'dag-cbor');\n          case 12:\n            storeCodec = _context.sent;\n            if (storeCodec) {\n              _context.next = 15;\n              break;\n            }\n            throw new Error(\"Unknown storeCodec \".concat(options.storeCodec, \", please configure additional BlockCodecs for this IPFS instance\"));\n          case 15:\n            if (!options.inputCodec) {\n              _context.next = 24;\n              break;\n            }\n            if (dagNode instanceof Uint8Array) {\n              _context.next = 18;\n              break;\n            }\n            throw new Error('Can only inputCodec on raw bytes that can be decoded');\n          case 18:\n            _context.next = 20;\n            return codecs.getCodec(options.inputCodec);\n          case 20:\n            inputCodec = _context.sent;\n            if (inputCodec) {\n              _context.next = 23;\n              break;\n            }\n            throw new Error(\"Unknown inputCodec \".concat(options.inputCodec, \", please configure additional BlockCodecs for this IPFS instance\"));\n          case 23:\n            dagNode = inputCodec.decode(dagNode);\n          case 24:\n            cidVersion = options.version != null ? options.version : 1;\n            _context.next = 27;\n            return hashers.getHasher(options.hashAlg || 'sha2-256');\n          case 27:\n            hasher = _context.sent;\n            if (hasher) {\n              _context.next = 30;\n              break;\n            }\n            throw new Error(\"Unknown hash algorithm \".concat(options.hashAlg, \", please configure additional MultihashHashers for this IPFS instance\"));\n          case 30:\n            buf = storeCodec.encode(dagNode);\n            _context.next = 33;\n            return hasher.digest(buf);\n          case 33:\n            hash = _context.sent;\n            cid = CID.create(cidVersion, storeCodec.code, hash);\n            _context.next = 37;\n            return repo.blocks.put(cid, buf, {\n              signal: options.signal\n            });\n          case 37:\n            if (!options.pin) {\n              _context.next = 40;\n              break;\n            }\n            _context.next = 40;\n            return repo.pins.pinRecursively(cid);\n          case 40:\n            if (options.preload !== false) {\n              preload(cid);\n            }\n            return _context.abrupt(\"return\", cid);\n          case 42:\n            _context.prev = 42;\n            if (release) {\n              release();\n            }\n            return _context.finish(42);\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[9,, 42, 45]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n  return withTimeoutOption(put);\n}","map":{"version":3,"names":["CID","withTimeoutOption","createPut","_ref","repo","codecs","hashers","preload","put","_x","_put","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dagNode","options","release","storeCodec","inputCodec","cidVersion","hasher","buf","hash","cid","_args","wrap","_callee$","_context","prev","next","length","undefined","pin","gcLock","readLock","t0","sent","getCodec","Error","concat","Uint8Array","decode","version","getHasher","hashAlg","encode","digest","create","code","blocks","signal","pins","pinRecursively","abrupt","finish","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/dag/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, codecs, hashers, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor')\n      // TODO: doesn't getCodec throw? verify and possibly remove this\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec)\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`)\n        }\n        dagNode = inputCodec.decode(dagNode)\n      }\n\n      const cidVersion = options.version != null ? options.version : 1\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = storeCodec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, storeCodec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
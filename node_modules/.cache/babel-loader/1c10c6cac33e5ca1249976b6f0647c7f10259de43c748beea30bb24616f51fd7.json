{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { logger } from '@libp2p/logger';\nimport drain from 'it-drain';\nimport PQueue from 'p-queue';\nimport defer from 'p-defer';\nimport errCode from 'err-code';\nimport anySignal from 'any-signal';\nvar log = logger('libp2p:delegated-content-routing');\nvar DEFAULT_TIMEOUT = 30e3; // 30 second default\nvar CONCURRENT_HTTP_REQUESTS = 4;\nvar CONCURRENT_HTTP_REFS_REQUESTS = 2;\n/**\n * An implementation of content routing, using a delegated peer\n */\nexport var DelegatedContentRouting = /*#__PURE__*/function () {\n  /**\n   * Create a new DelegatedContentRouting instance\n   */\n  function DelegatedContentRouting(client) {\n    _classCallCheck(this, DelegatedContentRouting);\n    if (client == null) {\n      throw new Error('missing ipfs http client');\n    }\n    this.client = client;\n    this.started = false;\n    this.abortController = new AbortController();\n    // limit concurrency to avoid request flood in web browser\n    // https://github.com/libp2p/js-libp2p-delegated-content-routing/issues/12\n    this.httpQueue = new PQueue({\n      concurrency: CONCURRENT_HTTP_REQUESTS\n    });\n    // sometimes refs requests take long time, they need separate queue\n    // to not suffocate regular business\n    this.httpQueueRefs = new PQueue({\n      concurrency: CONCURRENT_HTTP_REFS_REQUESTS\n    });\n    var _client$getEndpointCo = client.getEndpointConfig(),\n      protocol = _client$getEndpointCo.protocol,\n      host = _client$getEndpointCo.host,\n      port = _client$getEndpointCo.port;\n    log(\"enabled DelegatedContentRouting via \".concat(protocol, \"://\").concat(host, \":\").concat(port));\n  }\n  _createClass(DelegatedContentRouting, [{\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.started = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.httpQueue.clear();\n      this.httpQueueRefs.clear();\n      this.abortController.abort();\n      this.abortController = new AbortController();\n      this.started = false;\n    }\n    /**\n     * Search the dht for providers of the given CID.\n     *\n     * - call `findProviders` on the delegated node.\n     */\n  }, {\n    key: \"findProviders\",\n    value: function findProviders(key) {\n      var _this = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _options$timeout;\n        var onStart, onFinish, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, event;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              log('findProviders starts: %c', key);\n              options.timeout = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : DEFAULT_TIMEOUT;\n              options.signal = anySignal([_this.abortController.signal].concat(options.signal != null ? [options.signal] : []));\n              onStart = defer();\n              onFinish = defer();\n              void _this.httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      onStart.resolve();\n                      _context.next = 3;\n                      return onFinish.promise;\n                    case 3:\n                      return _context.abrupt(\"return\", _context.sent);\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              })));\n              _context2.prev = 6;\n              _context2.next = 9;\n              return _awaitAsyncGenerator(onStart.promise);\n            case 9:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context2.prev = 11;\n              _iterator = _asyncIterator(_this.client.dht.findProvs(key, options));\n            case 13:\n              _context2.next = 15;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 15:\n              if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                _context2.next = 22;\n                break;\n              }\n              event = _step.value;\n              if (!(event.name === 'PROVIDER')) {\n                _context2.next = 19;\n                break;\n              }\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(event.providers.map(function (prov) {\n                var peerInfo = {\n                  id: prov.id,\n                  protocols: [],\n                  multiaddrs: prov.multiaddrs\n                };\n                return peerInfo;\n              })), _awaitAsyncGenerator), \"t0\", 19);\n            case 19:\n              _iteratorAbruptCompletion = false;\n              _context2.next = 13;\n              break;\n            case 22:\n              _context2.next = 28;\n              break;\n            case 24:\n              _context2.prev = 24;\n              _context2.t1 = _context2[\"catch\"](11);\n              _didIteratorError = true;\n              _iteratorError = _context2.t1;\n            case 28:\n              _context2.prev = 28;\n              _context2.prev = 29;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context2.next = 33;\n                break;\n              }\n              _context2.next = 33;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 33:\n              _context2.prev = 33;\n              if (!_didIteratorError) {\n                _context2.next = 36;\n                break;\n              }\n              throw _iteratorError;\n            case 36:\n              return _context2.finish(33);\n            case 37:\n              return _context2.finish(28);\n            case 38:\n              _context2.next = 44;\n              break;\n            case 40:\n              _context2.prev = 40;\n              _context2.t2 = _context2[\"catch\"](6);\n              log.error('findProviders errored:', _context2.t2);\n              throw _context2.t2;\n            case 44:\n              _context2.prev = 44;\n              onFinish.resolve();\n              log('findProviders finished: %c', key);\n              return _context2.finish(44);\n            case 48:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[6, 40, 44, 48], [11, 24, 28, 38], [29,, 33, 37]]);\n      }))();\n    }\n    /**\n     * Announce to the network that the delegated node can provide the given key.\n     *\n     * Currently this uses the following hack\n     * - delegate is one of bootstrap nodes, so we are always connected to it\n     * - call block stat on the delegated node, so it fetches the content\n     * - call dht provide with the passed cid\n     *\n     * N.B. this must be called for every block in the dag you want provided otherwise\n     * the delegate will only be able to supply the root block of the dag when asked\n     * for the data by an interested peer.\n     */\n  }, {\n    key: \"provide\",\n    value: function () {\n      var _provide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key) {\n        var _options$timeout2,\n          _this2 = this;\n        var options,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              log('provide starts: %c', key);\n              options.timeout = (_options$timeout2 = options.timeout) !== null && _options$timeout2 !== void 0 ? _options$timeout2 : DEFAULT_TIMEOUT;\n              options.signal = anySignal([this.abortController.signal].concat(options.signal != null ? [options.signal] : []));\n              _context4.next = 6;\n              return this.httpQueueRefs.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _context3.next = 2;\n                      return _this2.client.block.stat(key, options);\n                    case 2:\n                      _context3.next = 4;\n                      return drain(_this2.client.dht.provide(key, options));\n                    case 4:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }, _callee3);\n              })));\n            case 6:\n              log('provide finished: %c', key);\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function provide(_x) {\n        return _provide.apply(this, arguments);\n      }\n      return provide;\n    }()\n    /**\n     * Stores a value in the backing key/value store of the delegated content router.\n     * This may fail if the delegated node's content routing implementation does not\n     * use a key/value store, or if the delegated operation fails.\n     */\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, value) {\n        var _options$timeout3,\n          _this3 = this;\n        var options,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              options = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};\n              log('put value start: %b', key);\n              options.timeout = (_options$timeout3 = options.timeout) !== null && _options$timeout3 !== void 0 ? _options$timeout3 : DEFAULT_TIMEOUT;\n              options.signal = anySignal([this.abortController.signal].concat(options.signal != null ? [options.signal] : []));\n              _context6.next = 6;\n              return this.httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _context5.next = 2;\n                      return drain(_this3.client.dht.put(key, value, options));\n                    case 2:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, _callee5);\n              })));\n            case 6:\n              log('put value finished: %b', key);\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function put(_x2, _x3) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\n     * Fetches an value from the backing key/value store of the delegated content router.\n     * This may fail if the delegated node's content routing implementation does not\n     * use a key/value store, or if the delegated operation fails.\n     */\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(key) {\n        var _options$timeout4,\n          _this4 = this;\n        var options,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n              log('get value start: %b', key);\n              options.timeout = (_options$timeout4 = options.timeout) !== null && _options$timeout4 !== void 0 ? _options$timeout4 : DEFAULT_TIMEOUT;\n              options.signal = anySignal([this.abortController.signal].concat(options.signal != null ? [options.signal] : []));\n              _context8.next = 6;\n              return this.httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n                var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, event;\n                return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                  while (1) switch (_context7.prev = _context7.next) {\n                    case 0:\n                      _iteratorAbruptCompletion2 = false;\n                      _didIteratorError2 = false;\n                      _context7.prev = 2;\n                      _iterator2 = _asyncIterator(_this4.client.dht.get(key, options));\n                    case 4:\n                      _context7.next = 6;\n                      return _iterator2.next();\n                    case 6:\n                      if (!(_iteratorAbruptCompletion2 = !(_step2 = _context7.sent).done)) {\n                        _context7.next = 14;\n                        break;\n                      }\n                      event = _step2.value;\n                      if (!(event.name === 'VALUE')) {\n                        _context7.next = 11;\n                        break;\n                      }\n                      log('get value finished: %b', key);\n                      return _context7.abrupt(\"return\", event.value);\n                    case 11:\n                      _iteratorAbruptCompletion2 = false;\n                      _context7.next = 4;\n                      break;\n                    case 14:\n                      _context7.next = 20;\n                      break;\n                    case 16:\n                      _context7.prev = 16;\n                      _context7.t0 = _context7[\"catch\"](2);\n                      _didIteratorError2 = true;\n                      _iteratorError2 = _context7.t0;\n                    case 20:\n                      _context7.prev = 20;\n                      _context7.prev = 21;\n                      if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                        _context7.next = 25;\n                        break;\n                      }\n                      _context7.next = 25;\n                      return _iterator2.return();\n                    case 25:\n                      _context7.prev = 25;\n                      if (!_didIteratorError2) {\n                        _context7.next = 28;\n                        break;\n                      }\n                      throw _iteratorError2;\n                    case 28:\n                      return _context7.finish(25);\n                    case 29:\n                      return _context7.finish(20);\n                    case 30:\n                      throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n                    case 31:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }, _callee7, null, [[2, 16, 20, 30], [21,, 25, 29]]);\n              })));\n            case 6:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function get(_x4) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n  }]);\n  return DelegatedContentRouting;\n}();","map":{"version":3,"names":["logger","drain","PQueue","defer","errCode","anySignal","log","DEFAULT_TIMEOUT","CONCURRENT_HTTP_REQUESTS","CONCURRENT_HTTP_REFS_REQUESTS","DelegatedContentRouting","client","_classCallCheck","Error","started","abortController","AbortController","httpQueue","concurrency","httpQueueRefs","_client$getEndpointCo","getEndpointConfig","protocol","host","port","concat","_createClass","key","value","isStarted","start","stop","clear","abort","findProviders","_this","options","arguments","length","undefined","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee2","_options$timeout","onStart","onFinish","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","event","wrap","_callee2$","_context2","prev","next","timeout","signal","add","_asyncToGenerator","_callee","_callee$","_context","resolve","promise","abrupt","sent","_awaitAsyncGenerator","_asyncIterator","dht","findProvs","done","name","delegateYield","_asyncGeneratorDelegate","providers","map","prov","peerInfo","id","protocols","multiaddrs","t1","return","finish","t2","error","_provide","_callee4","_options$timeout2","_this2","_args4","_callee4$","_context4","_callee3","_callee3$","_context3","block","stat","provide","_x","apply","_put","_callee6","_options$timeout3","_this3","_args6","_callee6$","_context6","_callee5","_callee5$","_context5","put","_x2","_x3","_get","_callee8","_options$timeout4","_this4","_args8","_callee8$","_context8","_callee7","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee7$","_context7","get","t0","_x4"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/delegated-content-routing/src/index.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport drain from 'it-drain'\nimport PQueue from 'p-queue'\nimport defer from 'p-defer'\nimport errCode from 'err-code'\nimport anySignal from 'any-signal'\nimport type { IPFSHTTPClient, CID, HTTPClientExtraOptions } from 'ipfs-http-client'\nimport type { AbortOptions } from 'ipfs-core-types/src/utils'\nimport type { ContentRouting } from '@libp2p/interface-content-routing'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\nimport type { Startable } from '@libp2p/interfaces/startable'\n\nconst log = logger('libp2p:delegated-content-routing')\n\nconst DEFAULT_TIMEOUT = 30e3 // 30 second default\nconst CONCURRENT_HTTP_REQUESTS = 4\nconst CONCURRENT_HTTP_REFS_REQUESTS = 2\n\n/**\n * An implementation of content routing, using a delegated peer\n */\nexport class DelegatedContentRouting implements ContentRouting, Startable {\n  private readonly client: IPFSHTTPClient\n  private readonly httpQueue: PQueue\n  private readonly httpQueueRefs: PQueue\n  private started: boolean\n  private abortController: AbortController\n\n  /**\n   * Create a new DelegatedContentRouting instance\n   */\n  constructor (client: IPFSHTTPClient) {\n    if (client == null) {\n      throw new Error('missing ipfs http client')\n    }\n\n    this.client = client\n    this.started = false\n    this.abortController = new AbortController()\n\n    // limit concurrency to avoid request flood in web browser\n    // https://github.com/libp2p/js-libp2p-delegated-content-routing/issues/12\n    this.httpQueue = new PQueue({\n      concurrency: CONCURRENT_HTTP_REQUESTS\n    })\n    // sometimes refs requests take long time, they need separate queue\n    // to not suffocate regular business\n    this.httpQueueRefs = new PQueue({\n      concurrency: CONCURRENT_HTTP_REFS_REQUESTS\n    })\n\n    const {\n      protocol,\n      host,\n      port\n    } = client.getEndpointConfig()\n\n    log(`enabled DelegatedContentRouting via ${protocol}://${host}:${port}`)\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  start () {\n    this.started = true\n  }\n\n  stop () {\n    this.httpQueue.clear()\n    this.httpQueueRefs.clear()\n    this.abortController.abort()\n    this.abortController = new AbortController()\n    this.started = false\n  }\n\n  /**\n   * Search the dht for providers of the given CID.\n   *\n   * - call `findProviders` on the delegated node.\n   */\n  async * findProviders (key: CID, options: HTTPClientExtraOptions & AbortOptions = {}) {\n    log('findProviders starts: %c', key)\n    options.timeout = options.timeout ?? DEFAULT_TIMEOUT\n    options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []))\n\n    const onStart = defer()\n    const onFinish = defer()\n\n    void this.httpQueue.add(async () => {\n      onStart.resolve()\n      return await onFinish.promise\n    })\n\n    try {\n      await onStart.promise\n\n      for await (const event of this.client.dht.findProvs(key, options)) {\n        if (event.name === 'PROVIDER') {\n          yield * event.providers.map(prov => {\n            const peerInfo: PeerInfo = {\n              id: prov.id,\n              protocols: [],\n              multiaddrs: prov.multiaddrs\n            }\n\n            return peerInfo\n          })\n        }\n      }\n    } catch (err) {\n      log.error('findProviders errored:', err)\n      throw err\n    } finally {\n      onFinish.resolve()\n      log('findProviders finished: %c', key)\n    }\n  }\n\n  /**\n   * Announce to the network that the delegated node can provide the given key.\n   *\n   * Currently this uses the following hack\n   * - delegate is one of bootstrap nodes, so we are always connected to it\n   * - call block stat on the delegated node, so it fetches the content\n   * - call dht provide with the passed cid\n   *\n   * N.B. this must be called for every block in the dag you want provided otherwise\n   * the delegate will only be able to supply the root block of the dag when asked\n   * for the data by an interested peer.\n   */\n  async provide (key: CID, options: HTTPClientExtraOptions & AbortOptions = {}) {\n    log('provide starts: %c', key)\n    options.timeout = options.timeout ?? DEFAULT_TIMEOUT\n    options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []))\n\n    await this.httpQueueRefs.add(async () => {\n      await this.client.block.stat(key, options)\n      await drain(this.client.dht.provide(key, options))\n    })\n    log('provide finished: %c', key)\n  }\n\n  /**\n   * Stores a value in the backing key/value store of the delegated content router.\n   * This may fail if the delegated node's content routing implementation does not\n   * use a key/value store, or if the delegated operation fails.\n   */\n  async put (key: Uint8Array, value: Uint8Array, options: HTTPClientExtraOptions & AbortOptions = {}) {\n    log('put value start: %b', key)\n    options.timeout = options.timeout ?? DEFAULT_TIMEOUT\n    options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []))\n\n    await this.httpQueue.add(async () => {\n      await drain(this.client.dht.put(key, value, options))\n    })\n\n    log('put value finished: %b', key)\n  }\n\n  /**\n   * Fetches an value from the backing key/value store of the delegated content router.\n   * This may fail if the delegated node's content routing implementation does not\n   * use a key/value store, or if the delegated operation fails.\n   */\n  async get (key: Uint8Array, options: HTTPClientExtraOptions & AbortOptions = {}) {\n    log('get value start: %b', key)\n    options.timeout = options.timeout ?? DEFAULT_TIMEOUT\n    options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []))\n\n    return await this.httpQueue.add(async () => {\n      for await (const event of this.client.dht.get(key, options)) {\n        if (event.name === 'VALUE') {\n          log('get value finished: %b', key)\n          return event.value\n        }\n      }\n\n      throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n    })\n  }\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,MAAM,MAAM,SAAS;AAC5B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAOlC,IAAMC,GAAG,GAAGN,MAAM,CAAC,kCAAkC,CAAC;AAEtD,IAAMO,eAAe,GAAG,IAAI,EAAC;AAC7B,IAAMC,wBAAwB,GAAG,CAAC;AAClC,IAAMC,6BAA6B,GAAG,CAAC;AAEvC;;;AAGA,WAAaC,uBAAuB;EAOlC;;;EAGA,SAAAA,wBAAaC,MAAsB;IAAAC,eAAA,OAAAF,uBAAA;IACjC,IAAIC,MAAM,IAAI,IAAI,EAAE;MAClB,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;;IAG7C,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,eAAe,GAAG,IAAIC,eAAe,EAAE;IAE5C;IACA;IACA,IAAI,CAACC,SAAS,GAAG,IAAIf,MAAM,CAAC;MAC1BgB,WAAW,EAAEV;KACd,CAAC;IACF;IACA;IACA,IAAI,CAACW,aAAa,GAAG,IAAIjB,MAAM,CAAC;MAC9BgB,WAAW,EAAET;KACd,CAAC;IAEF,IAAAW,qBAAA,GAIIT,MAAM,CAACU,iBAAiB,EAAE;MAH5BC,QAAQ,GAAAF,qBAAA,CAARE,QAAQ;MACRC,IAAI,GAAAH,qBAAA,CAAJG,IAAI;MACJC,IAAI,GAAAJ,qBAAA,CAAJI,IAAI;IAGNlB,GAAG,wCAAAmB,MAAA,CAAwCH,QAAQ,SAAAG,MAAA,CAAMF,IAAI,OAAAE,MAAA,CAAID,IAAI,CAAE,CAAC;EAC1E;EAACE,YAAA,CAAAhB,uBAAA;IAAAiB,GAAA;IAAAC,KAAA,EAED,SAAAC,UAAA,EAAS;MACP,OAAO,IAAI,CAACf,OAAO;IACrB;EAAC;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAE,MAAA,EAAK;MACH,IAAI,CAAChB,OAAO,GAAG,IAAI;IACrB;EAAC;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAG,KAAA,EAAI;MACF,IAAI,CAACd,SAAS,CAACe,KAAK,EAAE;MACtB,IAAI,CAACb,aAAa,CAACa,KAAK,EAAE;MAC1B,IAAI,CAACjB,eAAe,CAACkB,KAAK,EAAE;MAC5B,IAAI,CAAClB,eAAe,GAAG,IAAIC,eAAe,EAAE;MAC5C,IAAI,CAACF,OAAO,GAAG,KAAK;IACtB;IAEA;;;;;EAAA;IAAAa,GAAA;IAAAC,KAAA,EAKA,SAAAM,cAAuBP,GAAQ,EAAqD;MAAA,IAAAQ,KAAA;MAAA,IAAnDC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiD,EAAE;MAAA,OAAAG,mBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,SAAA;QAAA,IAAAC,gBAAA;QAAA,IAAAC,OAAA,EAAAC,QAAA,EAAAC,yBAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,KAAA;QAAA,OAAAX,mBAAA,GAAAY,IAAA,UAAAC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAC,IAAA,GAAAD,SAAA,CAAAE,IAAA;YAAA;cAClFnD,GAAG,CAAC,0BAA0B,EAAEqB,GAAG,CAAC;cACpCS,OAAO,CAACsB,OAAO,IAAAd,gBAAA,GAAGR,OAAO,CAACsB,OAAO,cAAAd,gBAAA,cAAAA,gBAAA,GAAIrC,eAAe;cACpD6B,OAAO,CAACuB,MAAM,GAAGtD,SAAS,CAAC,CAAC8B,KAAI,CAACpB,eAAe,CAAC4C,MAAM,CAAC,CAAClC,MAAM,CAAEW,OAAO,CAACuB,MAAM,IAAI,IAAI,GAAI,CAACvB,OAAO,CAACuB,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;cAE5Gd,OAAO,GAAG1C,KAAK,EAAE;cACjB2C,QAAQ,GAAG3C,KAAK,EAAE;cAExB,KAAKgC,KAAI,CAAClB,SAAS,CAAC2C,GAAG,eAAAC,iBAAA,eAAApB,mBAAA,GAAAC,IAAA,CAAC,SAAAoB,QAAA;gBAAA,OAAArB,mBAAA,GAAAY,IAAA,UAAAU,SAAAC,QAAA;kBAAA,kBAAAA,QAAA,CAAAR,IAAA,GAAAQ,QAAA,CAAAP,IAAA;oBAAA;sBACtBZ,OAAO,CAACoB,OAAO,EAAE;sBAAAD,QAAA,CAAAP,IAAA;sBAAA,OACJX,QAAQ,CAACoB,OAAO;oBAAA;sBAAA,OAAAF,QAAA,CAAAG,MAAA,WAAAH,QAAA,CAAAI,IAAA;oBAAA;oBAAA;sBAAA,OAAAJ,QAAA,CAAAjC,IAAA;kBAAA;gBAAA,GAAA+B,OAAA;cAAA,CAC9B,GAAC;cAAAP,SAAA,CAAAC,IAAA;cAAAD,SAAA,CAAAE,IAAA;cAAA,OAAAY,oBAAA,CAGMxB,OAAO,CAACqB,OAAO;YAAA;cAAAnB,yBAAA;cAAAC,iBAAA;cAAAO,SAAA,CAAAC,IAAA;cAAAN,SAAA,GAAAoB,cAAA,CAEKnC,KAAI,CAACxB,MAAM,CAAC4D,GAAG,CAACC,SAAS,CAAC7C,GAAG,EAAES,OAAO,CAAC;YAAA;cAAAmB,SAAA,CAAAE,IAAA;cAAA,OAAAY,oBAAA,CAAAnB,SAAA,CAAAO,IAAA;YAAA;cAAA,MAAAV,yBAAA,KAAAI,KAAA,GAAAI,SAAA,CAAAa,IAAA,EAAAK,IAAA;gBAAAlB,SAAA,CAAAE,IAAA;gBAAA;cAAA;cAAhDL,KAAK,GAAAD,KAAA,CAAAvB,KAAA;cAAA,MAChBwB,KAAK,CAACsB,IAAI,KAAK,UAAU;gBAAAnB,SAAA,CAAAE,IAAA;gBAAA;cAAA;cAC3B,OAAAF,SAAA,CAAAoB,aAAA,CAAAC,uBAAA,CAAAN,cAAA,CAAQlB,KAAK,CAACyB,SAAS,CAACC,GAAG,CAAC,UAAAC,IAAI,EAAG;gBACjC,IAAMC,QAAQ,GAAa;kBACzBC,EAAE,EAAEF,IAAI,CAACE,EAAE;kBACXC,SAAS,EAAE,EAAE;kBACbC,UAAU,EAAEJ,IAAI,CAACI;iBAClB;gBAED,OAAOH,QAAQ;cACjB,CAAC,CAAC,GAAAX,oBAAA;YAAA;cAAAtB,yBAAA;cAAAQ,SAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,SAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,SAAA,CAAAC,IAAA;cAAAD,SAAA,CAAA6B,EAAA,GAAA7B,SAAA;cAAAP,iBAAA;cAAAC,cAAA,GAAAM,SAAA,CAAA6B,EAAA;YAAA;cAAA7B,SAAA,CAAAC,IAAA;cAAAD,SAAA,CAAAC,IAAA;cAAA,MAAAT,yBAAA,IAAAG,SAAA,CAAAmC,MAAA;gBAAA9B,SAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,SAAA,CAAAE,IAAA;cAAA,OAAAY,oBAAA,CAAAnB,SAAA,CAAAmC,MAAA;YAAA;cAAA9B,SAAA,CAAAC,IAAA;cAAA,KAAAR,iBAAA;gBAAAO,SAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MAAAR,cAAA;YAAA;cAAA,OAAAM,SAAA,CAAA+B,MAAA;YAAA;cAAA,OAAA/B,SAAA,CAAA+B,MAAA;YAAA;cAAA/B,SAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,SAAA,CAAAC,IAAA;cAAAD,SAAA,CAAAgC,EAAA,GAAAhC,SAAA;cAINjD,GAAG,CAACkF,KAAK,CAAC,wBAAwB,EAAAjC,SAAA,CAAAgC,EAAK,CAAC;cAAA,MAAAhC,SAAA,CAAAgC,EAAA;YAAA;cAAAhC,SAAA,CAAAC,IAAA;cAGxCV,QAAQ,CAACmB,OAAO,EAAE;cAClB3D,GAAG,CAAC,4BAA4B,EAAEqB,GAAG,CAAC;cAAA,OAAA4B,SAAA,CAAA+B,MAAA;YAAA;YAAA;cAAA,OAAA/B,SAAA,CAAAxB,IAAA;UAAA;QAAA,GAAAY,QAAA;MAAA;IAE1C;IAEA;;;;;;;;;;;;EAAA;IAAAhB,GAAA;IAAAC,KAAA;MAAA,IAAA6D,QAAA,GAAA5B,iBAAA,eAAApB,mBAAA,GAAAC,IAAA,CAYA,SAAAgD,SAAe/D,GAAQ;QAAA,IAAAgE,iBAAA;UAAAC,MAAA;QAAA,IAAAxD,OAAA;UAAAyD,MAAA,GAAAxD,SAAA;QAAA,OAAAI,mBAAA,GAAAY,IAAA,UAAAyC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAvC,IAAA,GAAAuC,SAAA,CAAAtC,IAAA;YAAA;cAAErB,OAAA,GAAAyD,MAAA,CAAAvD,MAAA,QAAAuD,MAAA,QAAAtD,SAAA,GAAAsD,MAAA,MAAiD,EAAE;cAC1EvF,GAAG,CAAC,oBAAoB,EAAEqB,GAAG,CAAC;cAC9BS,OAAO,CAACsB,OAAO,IAAAiC,iBAAA,GAAGvD,OAAO,CAACsB,OAAO,cAAAiC,iBAAA,cAAAA,iBAAA,GAAIpF,eAAe;cACpD6B,OAAO,CAACuB,MAAM,GAAGtD,SAAS,CAAC,CAAC,IAAI,CAACU,eAAe,CAAC4C,MAAM,CAAC,CAAClC,MAAM,CAAEW,OAAO,CAACuB,MAAM,IAAI,IAAI,GAAI,CAACvB,OAAO,CAACuB,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;cAAAoC,SAAA,CAAAtC,IAAA;cAAA,OAE5G,IAAI,CAACtC,aAAa,CAACyC,GAAG,eAAAC,iBAAA,eAAApB,mBAAA,GAAAC,IAAA,CAAC,SAAAsD,SAAA;gBAAA,OAAAvD,mBAAA,GAAAY,IAAA,UAAA4C,UAAAC,SAAA;kBAAA,kBAAAA,SAAA,CAAA1C,IAAA,GAAA0C,SAAA,CAAAzC,IAAA;oBAAA;sBAAAyC,SAAA,CAAAzC,IAAA;sBAAA,OACrBmC,MAAI,CAACjF,MAAM,CAACwF,KAAK,CAACC,IAAI,CAACzE,GAAG,EAAES,OAAO,CAAC;oBAAA;sBAAA8D,SAAA,CAAAzC,IAAA;sBAAA,OACpCxD,KAAK,CAAC2F,MAAI,CAACjF,MAAM,CAAC4D,GAAG,CAAC8B,OAAO,CAAC1E,GAAG,EAAES,OAAO,CAAC,CAAC;oBAAA;oBAAA;sBAAA,OAAA8D,SAAA,CAAAnE,IAAA;kBAAA;gBAAA,GAAAiE,QAAA;cAAA,CACnD,GAAC;YAAA;cACF1F,GAAG,CAAC,sBAAsB,EAAEqB,GAAG,CAAC;YAAA;YAAA;cAAA,OAAAoE,SAAA,CAAAhE,IAAA;UAAA;QAAA,GAAA2D,QAAA;MAAA,CACjC;MAAA,SAAAW,QAAAC,EAAA;QAAA,OAAAb,QAAA,CAAAc,KAAA,OAAAlE,SAAA;MAAA;MAAA,OAAAgE,OAAA;IAAA;IAED;;;;;EAAA;IAAA1E,GAAA;IAAAC,KAAA;MAAA,IAAA4E,IAAA,GAAA3C,iBAAA,eAAApB,mBAAA,GAAAC,IAAA,CAKA,SAAA+D,SAAW9E,GAAe,EAAEC,KAAiB;QAAA,IAAA8E,iBAAA;UAAAC,MAAA;QAAA,IAAAvE,OAAA;UAAAwE,MAAA,GAAAvE,SAAA;QAAA,OAAAI,mBAAA,GAAAY,IAAA,UAAAwD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAtD,IAAA,GAAAsD,SAAA,CAAArD,IAAA;YAAA;cAAErB,OAAA,GAAAwE,MAAA,CAAAtE,MAAA,QAAAsE,MAAA,QAAArE,SAAA,GAAAqE,MAAA,MAAiD,EAAE;cAChGtG,GAAG,CAAC,qBAAqB,EAAEqB,GAAG,CAAC;cAC/BS,OAAO,CAACsB,OAAO,IAAAgD,iBAAA,GAAGtE,OAAO,CAACsB,OAAO,cAAAgD,iBAAA,cAAAA,iBAAA,GAAInG,eAAe;cACpD6B,OAAO,CAACuB,MAAM,GAAGtD,SAAS,CAAC,CAAC,IAAI,CAACU,eAAe,CAAC4C,MAAM,CAAC,CAAClC,MAAM,CAAEW,OAAO,CAACuB,MAAM,IAAI,IAAI,GAAI,CAACvB,OAAO,CAACuB,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;cAAAmD,SAAA,CAAArD,IAAA;cAAA,OAE5G,IAAI,CAACxC,SAAS,CAAC2C,GAAG,eAAAC,iBAAA,eAAApB,mBAAA,GAAAC,IAAA,CAAC,SAAAqE,SAAA;gBAAA,OAAAtE,mBAAA,GAAAY,IAAA,UAAA2D,UAAAC,SAAA;kBAAA,kBAAAA,SAAA,CAAAzD,IAAA,GAAAyD,SAAA,CAAAxD,IAAA;oBAAA;sBAAAwD,SAAA,CAAAxD,IAAA;sBAAA,OACjBxD,KAAK,CAAC0G,MAAI,CAAChG,MAAM,CAAC4D,GAAG,CAAC2C,GAAG,CAACvF,GAAG,EAAEC,KAAK,EAAEQ,OAAO,CAAC,CAAC;oBAAA;oBAAA;sBAAA,OAAA6E,SAAA,CAAAlF,IAAA;kBAAA;gBAAA,GAAAgF,QAAA;cAAA,CACtD,GAAC;YAAA;cAEFzG,GAAG,CAAC,wBAAwB,EAAEqB,GAAG,CAAC;YAAA;YAAA;cAAA,OAAAmF,SAAA,CAAA/E,IAAA;UAAA;QAAA,GAAA0E,QAAA;MAAA,CACnC;MAAA,SAAAS,IAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAZ,IAAA,CAAAD,KAAA,OAAAlE,SAAA;MAAA;MAAA,OAAA6E,GAAA;IAAA;IAED;;;;;EAAA;IAAAvF,GAAA;IAAAC,KAAA;MAAA,IAAAyF,IAAA,GAAAxD,iBAAA,eAAApB,mBAAA,GAAAC,IAAA,CAKA,SAAA4E,SAAW3F,GAAe;QAAA,IAAA4F,iBAAA;UAAAC,MAAA;QAAA,IAAApF,OAAA;UAAAqF,MAAA,GAAApF,SAAA;QAAA,OAAAI,mBAAA,GAAAY,IAAA,UAAAqE,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAnE,IAAA,GAAAmE,SAAA,CAAAlE,IAAA;YAAA;cAAErB,OAAA,GAAAqF,MAAA,CAAAnF,MAAA,QAAAmF,MAAA,QAAAlF,SAAA,GAAAkF,MAAA,MAAiD,EAAE;cAC7EnH,GAAG,CAAC,qBAAqB,EAAEqB,GAAG,CAAC;cAC/BS,OAAO,CAACsB,OAAO,IAAA6D,iBAAA,GAAGnF,OAAO,CAACsB,OAAO,cAAA6D,iBAAA,cAAAA,iBAAA,GAAIhH,eAAe;cACpD6B,OAAO,CAACuB,MAAM,GAAGtD,SAAS,CAAC,CAAC,IAAI,CAACU,eAAe,CAAC4C,MAAM,CAAC,CAAClC,MAAM,CAAEW,OAAO,CAACuB,MAAM,IAAI,IAAI,GAAI,CAACvB,OAAO,CAACuB,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;cAAAgE,SAAA,CAAAlE,IAAA;cAAA,OAErG,IAAI,CAACxC,SAAS,CAAC2C,GAAG,eAAAC,iBAAA,eAAApB,mBAAA,GAAAC,IAAA,CAAC,SAAAkF,SAAA;gBAAA,IAAAC,0BAAA,EAAAC,kBAAA,EAAAC,eAAA,EAAAC,UAAA,EAAAC,MAAA,EAAA7E,KAAA;gBAAA,OAAAX,mBAAA,GAAAY,IAAA,UAAA6E,UAAAC,SAAA;kBAAA,kBAAAA,SAAA,CAAA3E,IAAA,GAAA2E,SAAA,CAAA1E,IAAA;oBAAA;sBAAAoE,0BAAA;sBAAAC,kBAAA;sBAAAK,SAAA,CAAA3E,IAAA;sBAAAwE,UAAA,GAAA1D,cAAA,CACJkD,MAAI,CAAC7G,MAAM,CAAC4D,GAAG,CAAC6D,GAAG,CAACzG,GAAG,EAAES,OAAO,CAAC;oBAAA;sBAAA+F,SAAA,CAAA1E,IAAA;sBAAA,OAAAuE,UAAA,CAAAvE,IAAA;oBAAA;sBAAA,MAAAoE,0BAAA,KAAAI,MAAA,GAAAE,SAAA,CAAA/D,IAAA,EAAAK,IAAA;wBAAA0D,SAAA,CAAA1E,IAAA;wBAAA;sBAAA;sBAA1CL,KAAK,GAAA6E,MAAA,CAAArG,KAAA;sBAAA,MAChBwB,KAAK,CAACsB,IAAI,KAAK,OAAO;wBAAAyD,SAAA,CAAA1E,IAAA;wBAAA;sBAAA;sBACxBnD,GAAG,CAAC,wBAAwB,EAAEqB,GAAG,CAAC;sBAAA,OAAAwG,SAAA,CAAAhE,MAAA,WAC3Bf,KAAK,CAACxB,KAAK;oBAAA;sBAAAiG,0BAAA;sBAAAM,SAAA,CAAA1E,IAAA;sBAAA;oBAAA;sBAAA0E,SAAA,CAAA1E,IAAA;sBAAA;oBAAA;sBAAA0E,SAAA,CAAA3E,IAAA;sBAAA2E,SAAA,CAAAE,EAAA,GAAAF,SAAA;sBAAAL,kBAAA;sBAAAC,eAAA,GAAAI,SAAA,CAAAE,EAAA;oBAAA;sBAAAF,SAAA,CAAA3E,IAAA;sBAAA2E,SAAA,CAAA3E,IAAA;sBAAA,MAAAqE,0BAAA,IAAAG,UAAA,CAAA3C,MAAA;wBAAA8C,SAAA,CAAA1E,IAAA;wBAAA;sBAAA;sBAAA0E,SAAA,CAAA1E,IAAA;sBAAA,OAAAuE,UAAA,CAAA3C,MAAA;oBAAA;sBAAA8C,SAAA,CAAA3E,IAAA;sBAAA,KAAAsE,kBAAA;wBAAAK,SAAA,CAAA1E,IAAA;wBAAA;sBAAA;sBAAA,MAAAsE,eAAA;oBAAA;sBAAA,OAAAI,SAAA,CAAA7C,MAAA;oBAAA;sBAAA,OAAA6C,SAAA,CAAA7C,MAAA;oBAAA;sBAAA,MAIhBlF,OAAO,CAAC,IAAIS,KAAK,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC;oBAAA;oBAAA;sBAAA,OAAAsH,SAAA,CAAApG,IAAA;kBAAA;gBAAA,GAAA6F,QAAA;cAAA,CACvD,GAAC;YAAA;cAAA,OAAAD,SAAA,CAAAxD,MAAA,WAAAwD,SAAA,CAAAvD,IAAA;YAAA;YAAA;cAAA,OAAAuD,SAAA,CAAA5F,IAAA;UAAA;QAAA,GAAAuF,QAAA;MAAA,CACH;MAAA,SAAAc,IAAAE,GAAA;QAAA,OAAAjB,IAAA,CAAAd,KAAA,OAAAlE,SAAA;MAAA;MAAA,OAAA+F,GAAA;IAAA;EAAA;EAAA,OAAA1H,uBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
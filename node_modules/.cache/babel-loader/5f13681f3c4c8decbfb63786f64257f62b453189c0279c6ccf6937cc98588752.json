{"ast":null,"code":"import errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * Select the best record out of the given records\n */\nexport function bestRecord(selectors, k, records) {\n  if (records.length === 0) {\n    var errMsg = 'No records given';\n    throw errCode(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED');\n  }\n  var kStr = uint8ArrayToString(k);\n  var parts = kStr.split('/');\n  if (parts.length < 3) {\n    var _errMsg = 'Record key does not have a selector function';\n    throw errCode(new Error(_errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY');\n  }\n  var selector = selectors[parts[1].toString()];\n  if (selector == null) {\n    var _errMsg2 = \"Unrecognized key prefix: \".concat(parts[1]);\n    throw errCode(new Error(_errMsg2), 'ERR_UNRECOGNIZED_KEY_PREFIX');\n  }\n  if (records.length === 1) {\n    return 0;\n  }\n  return selector(k, records);\n}\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal\n */\nfunction publickKey(k, records) {\n  return 0;\n}\nexport var selectors = {\n  pk: publickKey\n};","map":{"version":3,"names":["errCode","toString","uint8ArrayToString","bestRecord","selectors","k","records","length","errMsg","Error","kStr","parts","split","selector","concat","publickKey","pk"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/record/src/selectors.ts"],"sourcesContent":["import errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Selectors } from '@libp2p/interface-dht'\n\n/**\n * Select the best record out of the given records\n */\nexport function bestRecord (selectors: Selectors, k: Uint8Array, records: Uint8Array[]) {\n  if (records.length === 0) {\n    const errMsg = 'No records given'\n\n    throw errCode(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED')\n  }\n\n  const kStr = uint8ArrayToString(k)\n  const parts = kStr.split('/')\n\n  if (parts.length < 3) {\n    const errMsg = 'Record key does not have a selector function'\n\n    throw errCode(new Error(errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY')\n  }\n\n  const selector = selectors[parts[1].toString()]\n\n  if (selector == null) {\n    const errMsg = `Unrecognized key prefix: ${parts[1]}`\n\n    throw errCode(new Error(errMsg), 'ERR_UNRECOGNIZED_KEY_PREFIX')\n  }\n\n  if (records.length === 1) {\n    return 0\n  }\n\n  return selector(k, records)\n}\n\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal\n */\nfunction publickKey (k: Uint8Array, records: Uint8Array[]) {\n  return 0\n}\n\nexport const selectors: Selectors = {\n  pk: publickKey\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AAGtE;;;AAGA,OAAM,SAAUC,UAAUA,CAAEC,SAAoB,EAAEC,CAAa,EAAEC,OAAqB;EACpF,IAAIA,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,IAAMC,MAAM,GAAG,kBAAkB;IAEjC,MAAMR,OAAO,CAAC,IAAIS,KAAK,CAACD,MAAM,CAAC,EAAE,yBAAyB,CAAC;;EAG7D,IAAME,IAAI,GAAGR,kBAAkB,CAACG,CAAC,CAAC;EAClC,IAAMM,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;EAE7B,IAAID,KAAK,CAACJ,MAAM,GAAG,CAAC,EAAE;IACpB,IAAMC,OAAM,GAAG,8CAA8C;IAE7D,MAAMR,OAAO,CAAC,IAAIS,KAAK,CAACD,OAAM,CAAC,EAAE,yCAAyC,CAAC;;EAG7E,IAAMK,QAAQ,GAAGT,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC,CAACV,QAAQ,EAAE,CAAC;EAE/C,IAAIY,QAAQ,IAAI,IAAI,EAAE;IACpB,IAAML,QAAM,+BAAAM,MAAA,CAA+BH,KAAK,CAAC,CAAC,CAAC,CAAE;IAErD,MAAMX,OAAO,CAAC,IAAIS,KAAK,CAACD,QAAM,CAAC,EAAE,6BAA6B,CAAC;;EAGjE,IAAIF,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,CAAC;;EAGV,OAAOM,QAAQ,CAACR,CAAC,EAAEC,OAAO,CAAC;AAC7B;AAEA;;;;;AAKA,SAASS,UAAUA,CAAEV,CAAa,EAAEC,OAAqB;EACvD,OAAO,CAAC;AACV;AAEA,OAAO,IAAMF,SAAS,GAAc;EAClCY,EAAE,EAAED;CACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}
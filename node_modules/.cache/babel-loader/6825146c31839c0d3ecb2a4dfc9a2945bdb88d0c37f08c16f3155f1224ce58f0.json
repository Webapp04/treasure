{"ast":null,"code":"import _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { createExport } from './export.js';\nimport { createGet } from './get.js';\nimport { createImport } from './import.js';\nimport { createPut } from './put.js';\nimport { createResolve } from './resolve.js';\nexport var DagAPI = /*#__PURE__*/_createClass(\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nfunction DagAPI(_ref) {\n  var repo = _ref.repo,\n    codecs = _ref.codecs,\n    hashers = _ref.hashers,\n    preload = _ref.preload;\n  _classCallCheck(this, DagAPI);\n  this.export = createExport({\n    repo: repo,\n    preload: preload,\n    codecs: codecs\n  });\n  this.get = createGet({\n    codecs: codecs,\n    repo: repo,\n    preload: preload\n  });\n  this.import = createImport({\n    repo: repo\n  });\n  this.resolve = createResolve({\n    repo: repo,\n    codecs: codecs,\n    preload: preload\n  });\n  this.put = createPut({\n    repo: repo,\n    codecs: codecs,\n    hashers: hashers,\n    preload: preload\n  });\n});","map":{"version":3,"names":["createExport","createGet","createImport","createPut","createResolve","DagAPI","_createClass","_ref","repo","codecs","hashers","preload","_classCallCheck","export","get","import","resolve","put"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/dag/index.js"],"sourcesContent":["import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\nexport class DagAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('../../types').Preload} config.preload\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ repo, codecs, hashers, preload }) {\n    this.export = createExport({ repo, preload, codecs })\n    this.get = createGet({ codecs, repo, preload })\n    this.import = createImport({ repo })\n    this.resolve = createResolve({ repo, codecs, preload })\n    this.put = createPut({ repo, codecs, hashers, preload })\n  }\n}\n"],"mappings":";;AAAA,SAASA,YAAY,QAAQ,aAAa;AAC1C,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,aAAa,QAAQ,cAAc;AAE5C,WAAaC,MAAM,gBAAAC,YAAA;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACE,SAAAD,OAAAE,IAAA,EAAiD;EAAA,IAAlCC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,MAAM,GAAAF,IAAA,CAANE,MAAM;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IAAEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;EAAAC,eAAA,OAAAP,MAAA;EAC3C,IAAI,CAACQ,MAAM,GAAGb,YAAY,CAAC;IAAEQ,IAAI,EAAJA,IAAI;IAAEG,OAAO,EAAPA,OAAO;IAAEF,MAAM,EAANA;EAAO,CAAC,CAAC;EACrD,IAAI,CAACK,GAAG,GAAGb,SAAS,CAAC;IAAEQ,MAAM,EAANA,MAAM;IAAED,IAAI,EAAJA,IAAI;IAAEG,OAAO,EAAPA;EAAQ,CAAC,CAAC;EAC/C,IAAI,CAACI,MAAM,GAAGb,YAAY,CAAC;IAAEM,IAAI,EAAJA;EAAK,CAAC,CAAC;EACpC,IAAI,CAACQ,OAAO,GAAGZ,aAAa,CAAC;IAAEI,IAAI,EAAJA,IAAI;IAAEC,MAAM,EAANA,MAAM;IAAEE,OAAO,EAAPA;EAAQ,CAAC,CAAC;EACvD,IAAI,CAACM,GAAG,GAAGd,SAAS,CAAC;IAAEK,IAAI,EAAJA,IAAI;IAAEC,MAAM,EAANA,MAAM;IAAEC,OAAO,EAAPA,OAAO;IAAEC,OAAO,EAAPA;EAAQ,CAAC,CAAC;AAC1D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CID } from 'multiformats/cid';\nimport errcode from 'err-code';\nimport { logger } from '@libp2p/logger';\nvar log = logger('libp2p:kad-dht:rpc:handlers:add-provider');\nexport var AddProviderHandler = /*#__PURE__*/function () {\n  function AddProviderHandler(init) {\n    _classCallCheck(this, AddProviderHandler);\n    var providers = init.providers;\n    this.providers = providers;\n  }\n  _createClass(AddProviderHandler, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peerId, msg) {\n        var _this = this;\n        var cid;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              log('start');\n              if (!(msg.key == null || msg.key.length === 0)) {\n                _context2.next = 3;\n                break;\n              }\n              throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY');\n            case 3:\n              _context2.prev = 3;\n              // this is actually just the multihash, not the whole CID\n              cid = CID.decode(msg.key);\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](3);\n              throw errcode(new Error('Invalid CID'), 'ERR_INVALID_CID');\n            case 10:\n              if (msg.providerPeers == null || msg.providerPeers.length === 0) {\n                log.error('no providers found in message');\n              }\n              _context2.next = 13;\n              return Promise.all(msg.providerPeers.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(pi) {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        if (pi.id.equals(peerId)) {\n                          _context.next = 3;\n                          break;\n                        }\n                        log('invalid provider peer %p from %p', pi.id, peerId);\n                        return _context.abrupt(\"return\");\n                      case 3:\n                        if (!(pi.multiaddrs.length < 1)) {\n                          _context.next = 6;\n                          break;\n                        }\n                        log('no valid addresses for provider %p. Ignore', peerId);\n                        return _context.abrupt(\"return\");\n                      case 6:\n                        log('received provider %p for %s (addrs %s)', peerId, cid, pi.multiaddrs.map(function (m) {\n                          return m.toString();\n                        }));\n                        _context.next = 9;\n                        return _this.providers.addProvider(cid, pi.id);\n                      case 9:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n                return function (_x3) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n            case 13:\n              return _context2.abrupt(\"return\", undefined);\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 7]]);\n      }));\n      function handle(_x, _x2) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n  }]);\n  return AddProviderHandler;\n}();","map":{"version":3,"names":["CID","errcode","logger","log","AddProviderHandler","init","_classCallCheck","providers","_createClass","key","value","_handle","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","peerId","msg","_this","cid","wrap","_callee2$","_context2","prev","next","length","Error","decode","t0","providerPeers","error","Promise","all","map","_ref","_callee","pi","_callee$","_context","id","equals","abrupt","multiaddrs","m","toString","addProvider","stop","_x3","apply","arguments","undefined","handle","_x","_x2"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/rpc/handlers/add-provider.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport type { Providers } from '../../providers'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { Message } from '../../message/index.js'\nimport type { Initializable } from '@libp2p/components'\n\nconst log = logger('libp2p:kad-dht:rpc:handlers:add-provider')\n\nexport interface AddProviderHandlerInit {\n  providers: Providers\n}\n\nexport class AddProviderHandler implements DHTMessageHandler, Initializable {\n  private readonly providers: Providers\n\n  constructor (init: AddProviderHandlerInit) {\n    const { providers } = init\n    this.providers = providers\n  }\n\n  init (): void {\n\n  }\n\n  async handle (peerId: PeerId, msg: Message) {\n    log('start')\n\n    if (msg.key == null || msg.key.length === 0) {\n      throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY')\n    }\n\n    let cid: CID\n    try {\n      // this is actually just the multihash, not the whole CID\n      cid = CID.decode(msg.key)\n    } catch (err: any) {\n      throw errcode(new Error('Invalid CID'), 'ERR_INVALID_CID')\n    }\n\n    if (msg.providerPeers == null || msg.providerPeers.length === 0) {\n      log.error('no providers found in message')\n    }\n\n    await Promise.all(\n      msg.providerPeers.map(async (pi) => {\n        // Ignore providers not from the originator\n        if (!pi.id.equals(peerId)) {\n          log('invalid provider peer %p from %p', pi.id, peerId)\n          return\n        }\n\n        if (pi.multiaddrs.length < 1) {\n          log('no valid addresses for provider %p. Ignore', peerId)\n          return\n        }\n\n        log('received provider %p for %s (addrs %s)', peerId, cid, pi.multiaddrs.map((m) => m.toString()))\n\n        await this.providers.addProvider(cid, pi.id)\n      })\n    )\n\n    return undefined\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
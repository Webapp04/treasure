{"ast":null,"code":"export var topologySymbol = Symbol.for('@libp2p/topology');\nexport function isTopology(other) {\n  return other != null && Boolean(other[topologySymbol]);\n}","map":{"version":3,"names":["topologySymbol","Symbol","for","isTopology","other","Boolean"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/interface-registrar/src/index.ts"],"sourcesContent":["import type { Connection, Stream } from '@libp2p/interface-connection'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\nexport interface IncomingStreamData {\n  stream: Stream\n  connection: Connection\n}\n\nexport interface StreamHandler {\n  (data: IncomingStreamData): void\n}\n\nexport interface StreamHandlerOptions {\n  /**\n   * How many incoming streams can be open for this protocol at the same time on each connection (default: 1)\n   */\n  maxInboundStreams?: number\n\n  /**\n   * How many outgoing streams can be open for this protocol at the same time on each connection (default: 1)\n   */\n  maxOutboundStreams?: number\n}\n\nexport interface StreamHandlerRecord {\n  handler: StreamHandler\n  options: StreamHandlerOptions\n}\n\nexport interface Registrar {\n  getProtocols: () => string[]\n  handle: (protocol: string, handler: StreamHandler, options?: StreamHandlerOptions) => Promise<void>\n  unhandle: (protocol: string) => Promise<void>\n  getHandler: (protocol: string) => StreamHandlerRecord\n\n  register: (protocol: string, topology: Topology) => Promise<string>\n  unregister: (id: string) => void\n  getTopologies: (protocol: string) => Topology[]\n}\n\nexport interface onConnectHandler {\n  (peerId: PeerId, conn: Connection): void\n}\n\nexport interface onDisconnectHandler {\n  (peerId: PeerId, conn?: Connection): void\n}\n\nexport interface TopologyInit {\n  /**\n   * minimum needed connections\n   */\n  min?: number\n\n  /**\n   * maximum needed connections\n   */\n  max?: number\n  onConnect?: onConnectHandler\n  onDisconnect?: onDisconnectHandler\n}\n\nexport interface Topology {\n  min: number\n  max: number\n  peers: Set<string>\n\n  onConnect: (peerId: PeerId, conn: Connection) => void\n  onDisconnect: (peerId: PeerId) => void\n  setRegistrar: (registrar: Registrar) => Promise<void>\n}\n\nexport const topologySymbol = Symbol.for('@libp2p/topology')\n\nexport function isTopology (other: any): other is Topology {\n  return other != null && Boolean(other[topologySymbol])\n}\n"],"mappings":"AAwEA,OAAO,IAAMA,cAAc,GAAGC,MAAM,CAACC,GAAG,CAAC,kBAAkB,CAAC;AAE5D,OAAM,SAAUC,UAAUA,CAAEC,KAAU;EACpC,OAAOA,KAAK,IAAI,IAAI,IAAIC,OAAO,CAACD,KAAK,CAACJ,cAAc,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
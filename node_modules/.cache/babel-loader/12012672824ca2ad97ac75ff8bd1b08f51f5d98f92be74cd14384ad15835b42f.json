{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport mergeOpts from 'merge-options';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport { exporter } from 'ipfs-unixfs-exporter';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport * as dagPB from '@ipld/dag-pb';\nvar mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nvar log = logger('ipfs:mfs:stat');\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nvar defaultOptions = {\n  withLocal: false\n};\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  function mfsStat(_x) {\n    return _mfsStat.apply(this, arguments);\n  }\n  function _mfsStat() {\n    _mfsStat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n        _yield$toMfsPath,\n        type,\n        cid,\n        mfsPath,\n        exportPath,\n        file,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            /** @type {DefaultOptions} */\n            options = mergeOptions(defaultOptions, options);\n            log(\"Fetching stats for \".concat(path));\n            _context.next = 5;\n            return toMfsPath(context, path, options);\n          case 5:\n            _yield$toMfsPath = _context.sent;\n            type = _yield$toMfsPath.type;\n            cid = _yield$toMfsPath.cid;\n            mfsPath = _yield$toMfsPath.mfsPath;\n            exportPath = type === 'ipfs' && cid ? cid : mfsPath;\n            _context.prev = 10;\n            _context.next = 13;\n            return exporter(exportPath, context.repo.blocks);\n          case 13:\n            file = _context.sent;\n            _context.next = 21;\n            break;\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](10);\n            if (!(_context.t0.code === 'ERR_NOT_FOUND')) {\n              _context.next = 20;\n              break;\n            }\n            throw errCode(new Error(\"\".concat(path, \" does not exist\")), 'ERR_NOT_FOUND');\n          case 20:\n            throw _context.t0;\n          case 21:\n            if (statters[file.type]) {\n              _context.next = 23;\n              break;\n            }\n            throw new Error(\"Cannot stat codec \".concat(file.cid.code));\n          case 23:\n            return _context.abrupt(\"return\", statters[file.type](file));\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[10, 16]]);\n    }));\n    return _mfsStat.apply(this, arguments);\n  }\n  return withTimeoutOption(mfsStat);\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nvar statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: function raw(file) {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: function file(_file) {\n    /** @type {StatResult} */\n    var stat = {\n      cid: _file.cid,\n      type: 'file',\n      size: _file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(_file.node).length + (_file.node.Links || []).reduce(function (acc, curr) {\n        return acc + (curr.Tsize || 0);\n      }, 0),\n      blocks: _file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: _file.unixfs.mode\n    };\n    if (_file.unixfs.mtime) {\n      stat.mtime = _file.unixfs.mtime;\n    }\n    return stat;\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: function directory(file) {\n    /** @type {StatResult} */\n    var stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce(function (acc, curr) {\n        return acc + (curr.Tsize || 0);\n      }, 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n    return stat;\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: function object(file) {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file',\n      // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: function identity(file) {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  }\n};","map":{"version":3,"names":["mergeOpts","toMfsPath","exporter","logger","errCode","withTimeoutOption","dagPB","mergeOptions","bind","ignoreUndefined","log","defaultOptions","withLocal","createStat","context","mfsStat","_x","_mfsStat","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","path","options","_yield$toMfsPath","type","cid","mfsPath","exportPath","file","_args","wrap","_callee$","_context","prev","next","length","undefined","concat","sent","repo","blocks","t0","code","Error","statters","abrupt","stop","raw","size","node","cumulativeSize","local","sizeLocal","withLocality","stat","unixfs","fileSize","encode","Links","reduce","acc","curr","Tsize","blockSizes","mode","mtime","directory","object","identity"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/stat.js"],"sourcesContent":["import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport * as dagPB from '@ipld/dag-pb'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:stat')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
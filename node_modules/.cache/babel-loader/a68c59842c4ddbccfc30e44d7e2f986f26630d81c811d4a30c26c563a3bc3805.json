{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { RoutingTable } from './routing-table/index.js';\nimport { RoutingTableRefresh } from './routing-table/refresh.js';\nimport { Network } from './network.js';\nimport { ContentFetching } from './content-fetching/index.js';\nimport { ContentRouting } from './content-routing/index.js';\nimport { PeerRouting } from './peer-routing/index.js';\nimport { Providers } from './providers.js';\nimport { QueryManager } from './query/manager.js';\nimport { RPC } from './rpc/index.js';\nimport { TopologyListener } from './topology-listener.js';\nimport { QuerySelf } from './query-self.js';\nimport { removePrivateAddresses, removePublicAddresses } from './utils.js';\nimport { logger } from '@libp2p/logger';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { Components } from '@libp2p/components';\nimport { validators as recordValidators } from '@libp2p/record/validators';\nimport { selectors as recordSelectors } from '@libp2p/record/selectors';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nimport { PROTOCOL_DHT, PROTOCOL_PREFIX, LAN_PREFIX } from './constants.js';\nexport var DEFAULT_MAX_INBOUND_STREAMS = 32;\nexport var DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport var KadDHT = /*#__PURE__*/function (_EventEmitter, _Symbol$toStringTag) {\n  _inherits(KadDHT, _EventEmitter);\n  var _super = _createSuper(KadDHT);\n  /**\n   * Create a new KadDHT\n   */\n  function KadDHT(init) {\n    var _this7;\n    _classCallCheck(this, KadDHT);\n    _this7 = _super.call(this);\n    _this7.components = new Components();\n    var kBucketSize = init.kBucketSize,\n      clientMode = init.clientMode,\n      validators = init.validators,\n      selectors = init.selectors,\n      querySelfInterval = init.querySelfInterval,\n      lan = init.lan,\n      protocolPrefix = init.protocolPrefix,\n      pingTimeout = init.pingTimeout,\n      pingConcurrency = init.pingConcurrency,\n      maxInboundStreams = init.maxInboundStreams,\n      maxOutboundStreams = init.maxOutboundStreams;\n    _this7.running = false;\n    _this7.lan = Boolean(lan);\n    _this7.log = logger(\"libp2p:kad-dht:\".concat(lan === true ? 'lan' : 'wan'));\n    _this7.protocol = \"\".concat(protocolPrefix !== null && protocolPrefix !== void 0 ? protocolPrefix : PROTOCOL_PREFIX).concat(lan === true ? LAN_PREFIX : '').concat(PROTOCOL_DHT);\n    _this7.kBucketSize = kBucketSize !== null && kBucketSize !== void 0 ? kBucketSize : 20;\n    _this7.clientMode = clientMode !== null && clientMode !== void 0 ? clientMode : true;\n    _this7.maxInboundStreams = maxInboundStreams !== null && maxInboundStreams !== void 0 ? maxInboundStreams : DEFAULT_MAX_INBOUND_STREAMS;\n    _this7.maxOutboundStreams = maxOutboundStreams !== null && maxOutboundStreams !== void 0 ? maxOutboundStreams : DEFAULT_MAX_OUTBOUND_STREAMS;\n    _this7.routingTable = new RoutingTable({\n      kBucketSize: kBucketSize,\n      lan: _this7.lan,\n      pingTimeout: pingTimeout,\n      pingConcurrency: pingConcurrency,\n      protocol: _this7.protocol\n    });\n    _this7.providers = new Providers();\n    _this7.validators = _objectSpread(_objectSpread({}, recordValidators), validators);\n    _this7.selectors = _objectSpread(_objectSpread({}, recordSelectors), selectors);\n    _this7.network = new Network({\n      protocol: _this7.protocol,\n      lan: _this7.lan\n    });\n    _this7.queryManager = new QueryManager({\n      // Number of disjoint query paths to use - This is set to `kBucketSize/2` per the S/Kademlia paper\n      disjointPaths: Math.ceil(_this7.kBucketSize / 2),\n      lan: lan\n    });\n    // DHT components\n    _this7.peerRouting = new PeerRouting({\n      routingTable: _this7.routingTable,\n      network: _this7.network,\n      validators: _this7.validators,\n      queryManager: _this7.queryManager,\n      lan: _this7.lan\n    });\n    _this7.contentFetching = new ContentFetching({\n      validators: _this7.validators,\n      selectors: _this7.selectors,\n      peerRouting: _this7.peerRouting,\n      queryManager: _this7.queryManager,\n      routingTable: _this7.routingTable,\n      network: _this7.network,\n      lan: _this7.lan\n    });\n    _this7.contentRouting = new ContentRouting({\n      network: _this7.network,\n      peerRouting: _this7.peerRouting,\n      queryManager: _this7.queryManager,\n      routingTable: _this7.routingTable,\n      providers: _this7.providers,\n      lan: _this7.lan\n    });\n    _this7.routingTableRefresh = new RoutingTableRefresh({\n      peerRouting: _this7.peerRouting,\n      routingTable: _this7.routingTable,\n      lan: _this7.lan\n    });\n    _this7.rpc = new RPC({\n      routingTable: _this7.routingTable,\n      providers: _this7.providers,\n      peerRouting: _this7.peerRouting,\n      validators: _this7.validators,\n      lan: _this7.lan\n    });\n    _this7.topologyListener = new TopologyListener({\n      protocol: _this7.protocol,\n      lan: _this7.lan\n    });\n    _this7.querySelf = new QuerySelf({\n      peerRouting: _this7.peerRouting,\n      interval: querySelfInterval,\n      lan: _this7.lan\n    });\n    // handle peers being discovered during processing of DHT messages\n    _this7.network.addEventListener('peer', function (evt) {\n      var peerData = evt.detail;\n      _this7.onPeerConnect(peerData).catch(function (err) {\n        _this7.log.error('could not add %p to routing table', peerData.id, err);\n      });\n      _this7.dispatchEvent(new CustomEvent('peer', {\n        detail: peerData\n      }));\n    });\n    // handle peers being discovered via other peer discovery mechanisms\n    _this7.topologyListener.addEventListener('peer', function (evt) {\n      var peerId = evt.detail;\n      Promise.resolve().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var multiaddrs, peerData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this7.components.getPeerStore().addressBook.get(peerId);\n            case 2:\n              multiaddrs = _context.sent;\n              peerData = {\n                id: peerId,\n                multiaddrs: multiaddrs.map(function (addr) {\n                  return addr.multiaddr;\n                }),\n                protocols: []\n              };\n              _context.next = 6;\n              return _this7.onPeerConnect(peerData);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))).catch(function (err) {\n        _this7.log.error('could not add %p to routing table', peerId, err);\n      });\n    });\n    return _this7;\n  }\n  _createClass(KadDHT, [{\n    key: symbol,\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return '@libp2p/kad-dht';\n    }\n  }, {\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n      this.routingTable.init(components);\n      this.providers.init(components);\n      this.network.init(components);\n      this.queryManager.init(components);\n      this.peerRouting.init(components);\n      this.contentFetching.init(components);\n      this.contentRouting.init(components);\n      this.routingTableRefresh.init(components);\n      this.rpc.init(components);\n      this.topologyListener.init(components);\n      this.querySelf.init(components);\n    }\n  }, {\n    key: \"onPeerConnect\",\n    value: function () {\n      var _onPeerConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peerData) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.log('peer %p connected with protocols %s', peerData.id, peerData.protocols);\n              if (this.lan) {\n                peerData = removePublicAddresses(peerData);\n              } else {\n                peerData = removePrivateAddresses(peerData);\n              }\n              if (!(peerData.multiaddrs.length === 0)) {\n                _context2.next = 5;\n                break;\n              }\n              this.log('ignoring %p as they do not have any %s addresses in %s', peerData.id, this.lan ? 'private' : 'public', peerData.multiaddrs.map(function (addr) {\n                return addr.toString();\n              }));\n              return _context2.abrupt(\"return\");\n            case 5:\n              _context2.prev = 5;\n              _context2.next = 8;\n              return this.routingTable.add(peerData.id);\n            case 8:\n              _context2.next = 13;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](5);\n              this.log.error('could not add %p to routing table', peerData.id, _context2.t0);\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[5, 10]]);\n      }));\n      function onPeerConnect(_x) {\n        return _onPeerConnect.apply(this, arguments);\n      }\n      return onPeerConnect;\n    }()\n    /**\n     * Is this DHT running.\n     */\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.running;\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n  }, {\n    key: \"getMode\",\n    value: function () {\n      var _getMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.clientMode ? 'client' : 'server');\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getMode() {\n        return _getMode.apply(this, arguments);\n      }\n      return getMode;\n    }()\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n  }, {\n    key: \"setMode\",\n    value: function () {\n      var _setMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(mode) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.components.getRegistrar().unhandle(this.protocol);\n            case 2:\n              if (!(mode === 'client')) {\n                _context4.next = 7;\n                break;\n              }\n              this.log('enabling client mode');\n              this.clientMode = true;\n              _context4.next = 11;\n              break;\n            case 7:\n              this.log('enabling server mode');\n              this.clientMode = false;\n              _context4.next = 11;\n              return this.components.getRegistrar().handle(this.protocol, this.rpc.onIncomingStream.bind(this.rpc), {\n                maxInboundStreams: this.maxInboundStreams,\n                maxOutboundStreams: this.maxOutboundStreams\n              });\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function setMode(_x2) {\n        return _setMode.apply(this, arguments);\n      }\n      return setMode;\n    }()\n    /**\n     * Start listening to incoming connections.\n     */\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              this.running = true;\n              // Only respond to queries when not in client mode\n              _context5.next = 3;\n              return this.setMode(this.clientMode ? 'client' : 'server');\n            case 3:\n              _context5.next = 5;\n              return Promise.all([this.providers.start(), this.queryManager.start(), this.network.start(), this.routingTable.start(), this.topologyListener.start(), this.querySelf.start()]);\n            case 5:\n              _context5.next = 7;\n              return this.routingTableRefresh.start();\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              this.running = false;\n              _context6.next = 3;\n              return Promise.all([this.providers.stop(), this.queryManager.stop(), this.network.stop(), this.routingTable.stop(), this.routingTableRefresh.stop(), this.topologyListener.stop(), this.querySelf.stop()]);\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n    /**\n     * Store the given key/value pair in the DHT\n     */\n  }, {\n    key: \"put\",\n    value: function put(key, value) {\n      var _this = this;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this.contentFetching.put(key, value, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      }))();\n    }\n    /**\n     * Get the value that corresponds to the passed key\n     */\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var _this2 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this2.contentFetching.get(key, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }))();\n    }\n    // ----------- Content Routing\n    /**\n     * Announce to the network that we can provide given key's value\n     */\n  }, {\n    key: \"provide\",\n    value: function provide(key) {\n      var _this3 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this3.contentRouting.provide(key, _this3.components.getAddressManager().getAddresses(), options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      }))();\n    }\n    /**\n     * Search the dht for providers of the given CID\n     */\n  }, {\n    key: \"findProviders\",\n    value: function findProviders(key) {\n      var _this4 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this4.contentRouting.findProviders(key, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }))();\n    }\n    // ----------- Peer Routing -----------\n    /**\n     * Search for a peer with the given ID\n     */\n  }, {\n    key: \"findPeer\",\n    value: function findPeer(id) {\n      var _this5 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this5.peerRouting.findPeer(id, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }))();\n    }\n    /**\n     * Kademlia 'node lookup' operation\n     */\n  }, {\n    key: \"getClosestPeers\",\n    value: function getClosestPeers(key) {\n      var _this6 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              return _context12.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this6.peerRouting.getClosestPeers(key, options)), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12);\n      }))();\n    }\n  }, {\n    key: \"refreshRoutingTable\",\n    value: function () {\n      var _refreshRoutingTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.routingTableRefresh.refreshTable(true);\n            case 2:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function refreshRoutingTable() {\n        return _refreshRoutingTable.apply(this, arguments);\n      }\n      return refreshRoutingTable;\n    }()\n  }]);\n  return KadDHT;\n}(EventEmitter, Symbol.toStringTag);","map":{"version":3,"names":["RoutingTable","RoutingTableRefresh","Network","ContentFetching","ContentRouting","PeerRouting","Providers","QueryManager","RPC","TopologyListener","QuerySelf","removePrivateAddresses","removePublicAddresses","logger","CustomEvent","EventEmitter","Components","validators","recordValidators","selectors","recordSelectors","symbol","PROTOCOL_DHT","PROTOCOL_PREFIX","LAN_PREFIX","DEFAULT_MAX_INBOUND_STREAMS","DEFAULT_MAX_OUTBOUND_STREAMS","KadDHT","_EventEmitter","_Symbol$toStringTag","_inherits","_super","_createSuper","init","_this7","_classCallCheck","call","components","kBucketSize","clientMode","querySelfInterval","lan","protocolPrefix","pingTimeout","pingConcurrency","maxInboundStreams","maxOutboundStreams","running","Boolean","log","concat","protocol","routingTable","providers","_objectSpread","network","queryManager","disjointPaths","Math","ceil","peerRouting","contentFetching","contentRouting","routingTableRefresh","rpc","topologyListener","querySelf","interval","addEventListener","evt","peerData","detail","onPeerConnect","catch","err","error","id","dispatchEvent","peerId","Promise","resolve","then","_asyncToGenerator","_regeneratorRuntime","mark","_callee","multiaddrs","wrap","_callee$","_context","prev","next","getPeerStore","addressBook","get","sent","map","addr","multiaddr","protocols","stop","_createClass","key","value","_onPeerConnect","_callee2","_callee2$","_context2","length","toString","abrupt","add","t0","_x","apply","arguments","isStarted","_getMode","_callee3","_callee3$","_context3","getMode","_setMode","_callee4","mode","_callee4$","_context4","getRegistrar","unhandle","handle","onIncomingStream","bind","setMode","_x2","_start","_callee5","_callee5$","_context5","all","start","_stop","_callee6","_callee6$","_context6","put","_this","options","undefined","_wrapAsyncGenerator","_callee7","_callee7$","_context7","delegateYield","_asyncGeneratorDelegate","_asyncIterator","_awaitAsyncGenerator","_this2","_callee8","_callee8$","_context8","provide","_this3","_callee9","_callee9$","_context9","getAddressManager","getAddresses","findProviders","_this4","_callee10","_callee10$","_context10","findPeer","_this5","_callee11","_callee11$","_context11","getClosestPeers","_this6","_callee12","_callee12$","_context12","_refreshRoutingTable","_callee13","_callee13$","_context13","refreshTable","refreshRoutingTable","Symbol","toStringTag"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/kad-dht.ts"],"sourcesContent":["import { RoutingTable } from './routing-table/index.js'\nimport { RoutingTableRefresh } from './routing-table/refresh.js'\nimport { Network } from './network.js'\nimport { ContentFetching } from './content-fetching/index.js'\nimport { ContentRouting } from './content-routing/index.js'\nimport { PeerRouting } from './peer-routing/index.js'\nimport { Providers } from './providers.js'\nimport { QueryManager } from './query/manager.js'\nimport { RPC } from './rpc/index.js'\nimport { TopologyListener } from './topology-listener.js'\nimport { QuerySelf } from './query-self.js'\nimport {\n  removePrivateAddresses,\n  removePublicAddresses\n} from './utils.js'\nimport { Logger, logger } from '@libp2p/logger'\nimport type { QueryOptions, Validators, Selectors, DHT } from '@libp2p/interface-dht'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { CID } from 'multiformats/cid'\nimport type { PeerDiscoveryEvents } from '@libp2p/interface-peer-discovery'\nimport { Components, Initializable } from '@libp2p/components'\nimport type { KadDHTInit } from './index.js'\nimport { validators as recordValidators } from '@libp2p/record/validators'\nimport { selectors as recordSelectors } from '@libp2p/record/selectors'\nimport { symbol } from '@libp2p/interface-peer-discovery'\nimport { PROTOCOL_DHT, PROTOCOL_PREFIX, LAN_PREFIX } from './constants.js'\n\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64\n\nexport interface SingleKadDHTInit extends KadDHTInit {\n  /**\n   * Whether to start up in lan or wan mode\n   */\n  lan?: boolean\n}\n\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport class KadDHT extends EventEmitter<PeerDiscoveryEvents> implements DHT, Initializable {\n  public protocol: string\n  public routingTable: RoutingTable\n  public providers: Providers\n  public network: Network\n  public peerRouting: PeerRouting\n\n  public components: Components = new Components()\n  private readonly log: Logger\n  private running: boolean\n  private readonly kBucketSize: number\n  private clientMode: boolean\n  private readonly lan: boolean\n  private readonly validators: Validators\n  private readonly selectors: Selectors\n  private readonly queryManager: QueryManager\n  private readonly contentFetching: ContentFetching\n  private readonly contentRouting: ContentRouting\n  private readonly routingTableRefresh: RoutingTableRefresh\n  private readonly rpc: RPC\n  private readonly topologyListener: TopologyListener\n  private readonly querySelf: QuerySelf\n  private readonly maxInboundStreams: number\n  private readonly maxOutboundStreams: number\n\n  /**\n   * Create a new KadDHT\n   */\n  constructor (init: SingleKadDHTInit) {\n    super()\n\n    const {\n      kBucketSize,\n      clientMode,\n      validators,\n      selectors,\n      querySelfInterval,\n      lan,\n      protocolPrefix,\n      pingTimeout,\n      pingConcurrency,\n      maxInboundStreams,\n      maxOutboundStreams\n    } = init\n\n    this.running = false\n    this.lan = Boolean(lan)\n    this.log = logger(`libp2p:kad-dht:${lan === true ? 'lan' : 'wan'}`)\n    this.protocol = `${protocolPrefix ?? PROTOCOL_PREFIX}${lan === true ? LAN_PREFIX : ''}${PROTOCOL_DHT}`\n    this.kBucketSize = kBucketSize ?? 20\n    this.clientMode = clientMode ?? true\n    this.maxInboundStreams = maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS\n    this.maxOutboundStreams = maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS\n    this.routingTable = new RoutingTable({\n      kBucketSize,\n      lan: this.lan,\n      pingTimeout,\n      pingConcurrency,\n      protocol: this.protocol\n    })\n\n    this.providers = new Providers()\n\n    this.validators = {\n      ...recordValidators,\n      ...validators\n    }\n    this.selectors = {\n      ...recordSelectors,\n      ...selectors\n    }\n    this.network = new Network({\n      protocol: this.protocol,\n      lan: this.lan\n    })\n    this.queryManager = new QueryManager({\n      // Number of disjoint query paths to use - This is set to `kBucketSize/2` per the S/Kademlia paper\n      disjointPaths: Math.ceil(this.kBucketSize / 2),\n      lan\n    })\n\n    // DHT components\n    this.peerRouting = new PeerRouting({\n      routingTable: this.routingTable,\n      network: this.network,\n      validators: this.validators,\n      queryManager: this.queryManager,\n      lan: this.lan\n    })\n    this.contentFetching = new ContentFetching({\n      validators: this.validators,\n      selectors: this.selectors,\n      peerRouting: this.peerRouting,\n      queryManager: this.queryManager,\n      routingTable: this.routingTable,\n      network: this.network,\n      lan: this.lan\n    })\n    this.contentRouting = new ContentRouting({\n      network: this.network,\n      peerRouting: this.peerRouting,\n      queryManager: this.queryManager,\n      routingTable: this.routingTable,\n      providers: this.providers,\n      lan: this.lan\n    })\n    this.routingTableRefresh = new RoutingTableRefresh({\n      peerRouting: this.peerRouting,\n      routingTable: this.routingTable,\n      lan: this.lan\n    })\n    this.rpc = new RPC({\n      routingTable: this.routingTable,\n      providers: this.providers,\n      peerRouting: this.peerRouting,\n      validators: this.validators,\n      lan: this.lan\n    })\n    this.topologyListener = new TopologyListener({\n      protocol: this.protocol,\n      lan: this.lan\n    })\n    this.querySelf = new QuerySelf({\n      peerRouting: this.peerRouting,\n      interval: querySelfInterval,\n      lan: this.lan\n    })\n\n    // handle peers being discovered during processing of DHT messages\n    this.network.addEventListener('peer', (evt) => {\n      const peerData = evt.detail\n\n      this.onPeerConnect(peerData).catch(err => {\n        this.log.error('could not add %p to routing table', peerData.id, err)\n      })\n\n      this.dispatchEvent(new CustomEvent('peer', {\n        detail: peerData\n      }))\n    })\n\n    // handle peers being discovered via other peer discovery mechanisms\n    this.topologyListener.addEventListener('peer', (evt) => {\n      const peerId = evt.detail\n\n      Promise.resolve().then(async () => {\n        const multiaddrs = await this.components.getPeerStore().addressBook.get(peerId)\n\n        const peerData = {\n          id: peerId,\n          multiaddrs: multiaddrs.map(addr => addr.multiaddr),\n          protocols: []\n        }\n\n        await this.onPeerConnect(peerData)\n      }).catch(err => {\n        this.log.error('could not add %p to routing table', peerId, err)\n      })\n    })\n  }\n\n  get [symbol] (): true {\n    return true\n  }\n\n  get [Symbol.toStringTag] () {\n    return '@libp2p/kad-dht'\n  }\n\n  init (components: Components): void {\n    this.components = components\n\n    this.routingTable.init(components)\n    this.providers.init(components)\n    this.network.init(components)\n    this.queryManager.init(components)\n    this.peerRouting.init(components)\n    this.contentFetching.init(components)\n    this.contentRouting.init(components)\n    this.routingTableRefresh.init(components)\n    this.rpc.init(components)\n    this.topologyListener.init(components)\n    this.querySelf.init(components)\n  }\n\n  async onPeerConnect (peerData: PeerInfo) {\n    this.log('peer %p connected with protocols %s', peerData.id, peerData.protocols)\n\n    if (this.lan) {\n      peerData = removePublicAddresses(peerData)\n    } else {\n      peerData = removePrivateAddresses(peerData)\n    }\n\n    if (peerData.multiaddrs.length === 0) {\n      this.log('ignoring %p as they do not have any %s addresses in %s', peerData.id, this.lan ? 'private' : 'public', peerData.multiaddrs.map(addr => addr.toString()))\n      return\n    }\n\n    try {\n      await this.routingTable.add(peerData.id)\n    } catch (err: any) {\n      this.log.error('could not add %p to routing table', peerData.id, err)\n    }\n  }\n\n  /**\n   * Is this DHT running.\n   */\n  isStarted () {\n    return this.running\n  }\n\n  /**\n   * If 'server' this node will respond to DHT queries, if 'client' this node will not\n   */\n  async getMode () {\n    return this.clientMode ? 'client' : 'server'\n  }\n\n  /**\n   * If 'server' this node will respond to DHT queries, if 'client' this node will not\n   */\n  async setMode (mode: 'client' | 'server') {\n    await this.components.getRegistrar().unhandle(this.protocol)\n\n    if (mode === 'client') {\n      this.log('enabling client mode')\n      this.clientMode = true\n    } else {\n      this.log('enabling server mode')\n      this.clientMode = false\n      await this.components.getRegistrar().handle(this.protocol, this.rpc.onIncomingStream.bind(this.rpc), {\n        maxInboundStreams: this.maxInboundStreams,\n        maxOutboundStreams: this.maxOutboundStreams\n      })\n    }\n  }\n\n  /**\n   * Start listening to incoming connections.\n   */\n  async start () {\n    this.running = true\n\n    // Only respond to queries when not in client mode\n    await this.setMode(this.clientMode ? 'client' : 'server')\n\n    await Promise.all([\n      this.providers.start(),\n      this.queryManager.start(),\n      this.network.start(),\n      this.routingTable.start(),\n      this.topologyListener.start(),\n      this.querySelf.start()\n    ])\n\n    await this.routingTableRefresh.start()\n  }\n\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   */\n  async stop () {\n    this.running = false\n\n    await Promise.all([\n      this.providers.stop(),\n      this.queryManager.stop(),\n      this.network.stop(),\n      this.routingTable.stop(),\n      this.routingTableRefresh.stop(),\n      this.topologyListener.stop(),\n      this.querySelf.stop()\n    ])\n  }\n\n  /**\n   * Store the given key/value pair in the DHT\n   */\n  async * put (key: Uint8Array, value: Uint8Array, options: QueryOptions = {}) { // eslint-disable-line require-await\n    yield * this.contentFetching.put(key, value, options)\n  }\n\n  /**\n   * Get the value that corresponds to the passed key\n   */\n  async * get (key: Uint8Array, options: QueryOptions = {}) { // eslint-disable-line require-await\n    yield * this.contentFetching.get(key, options)\n  }\n\n  // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value\n   */\n  async * provide (key: CID, options: QueryOptions = {}) { // eslint-disable-line require-await\n    yield * this.contentRouting.provide(key, this.components.getAddressManager().getAddresses(), options)\n  }\n\n  /**\n   * Search the dht for providers of the given CID\n   */\n  async * findProviders (key: CID, options: QueryOptions = {}) {\n    yield * this.contentRouting.findProviders(key, options)\n  }\n\n  // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID\n   */\n  async * findPeer (id: PeerId, options: QueryOptions = {}) { // eslint-disable-line require-await\n    yield * this.peerRouting.findPeer(id, options)\n  }\n\n  /**\n   * Kademlia 'node lookup' operation\n   */\n  async * getClosestPeers (key: Uint8Array, options: QueryOptions = {}) {\n    yield * this.peerRouting.getClosestPeers(key, options)\n  }\n\n  async refreshRoutingTable () {\n    await this.routingTableRefresh.refreshTable(true)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
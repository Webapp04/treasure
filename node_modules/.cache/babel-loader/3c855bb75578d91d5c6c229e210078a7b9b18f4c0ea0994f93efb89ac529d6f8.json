{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { mapIterable } from './util.js';\n/**\n * We can't use PeerIds as list entries because list entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerList } from '@libp2p/peer-collections'\n *\n * const list = peerList()\n * list.push(peerId)\n * ```\n */\nexport var PeerList = /*#__PURE__*/function (_Symbol$iterator) {\n  function PeerList(list) {\n    _classCallCheck(this, PeerList);\n    this.list = [];\n    if (list != null) {\n      var _iterator = _createForOfIteratorHelper(list),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          this.list.push(value.toString());\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n  _createClass(PeerList, [{\n    key: _Symbol$iterator,\n    value: function value() {\n      return mapIterable(this.list.entries(), function (val) {\n        return peerIdFromString(val[1]);\n      });\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(list) {\n      var output = new PeerList(this);\n      var _iterator2 = _createForOfIteratorHelper(list),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var value = _step2.value;\n          output.push(value);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return output;\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return mapIterable(this.list.entries(), function (val) {\n        return [val[0], peerIdFromString(val[1])];\n      });\n    }\n  }, {\n    key: \"every\",\n    value: function every(predicate) {\n      var _this = this;\n      return this.list.every(function (str, index) {\n        return predicate(peerIdFromString(str), index, _this);\n      });\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      var _this2 = this;\n      var output = new PeerList();\n      this.list.forEach(function (str, index) {\n        var peerId = peerIdFromString(str);\n        if (predicate(peerId, index, _this2)) {\n          output.push(peerId);\n        }\n      });\n      return output;\n    }\n  }, {\n    key: \"find\",\n    value: function find(predicate) {\n      var _this3 = this;\n      var str = this.list.find(function (str, index) {\n        return predicate(peerIdFromString(str), index, _this3);\n      });\n      if (str == null) {\n        return undefined;\n      }\n      return peerIdFromString(str);\n    }\n  }, {\n    key: \"findIndex\",\n    value: function findIndex(predicate) {\n      var _this4 = this;\n      return this.list.findIndex(function (str, index) {\n        return predicate(peerIdFromString(str), index, _this4);\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(predicate) {\n      var _this5 = this;\n      this.list.forEach(function (str, index) {\n        predicate(peerIdFromString(str), index, _this5);\n      });\n    }\n  }, {\n    key: \"includes\",\n    value: function includes(peerId) {\n      return this.list.includes(peerId.toString());\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(peerId) {\n      return this.list.indexOf(peerId.toString());\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var str = this.list.pop();\n      if (str == null) {\n        return undefined;\n      }\n      return peerIdFromString(str);\n    }\n  }, {\n    key: \"push\",\n    value: function push() {\n      for (var _len = arguments.length, peerIds = new Array(_len), _key = 0; _key < _len; _key++) {\n        peerIds[_key] = arguments[_key];\n      }\n      for (var _i = 0, _peerIds = peerIds; _i < _peerIds.length; _i++) {\n        var peerId = _peerIds[_i];\n        this.list.push(peerId.toString());\n      }\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      var str = this.list.shift();\n      if (str == null) {\n        return undefined;\n      }\n      return peerIdFromString(str);\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift() {\n      var len = this.list.length;\n      for (var _len2 = arguments.length, peerIds = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        peerIds[_key2] = arguments[_key2];\n      }\n      for (var i = peerIds.length - 1; i > -1; i--) {\n        len = this.list.unshift(peerIds[i].toString());\n      }\n      return len;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.list.length;\n    }\n  }]);\n  return PeerList;\n}(Symbol.iterator);","map":{"version":3,"names":["peerIdFromString","mapIterable","PeerList","_Symbol$iterator","list","_classCallCheck","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","push","toString","err","e","f","_createClass","key","entries","val","concat","output","_iterator2","_step2","every","predicate","_this","str","index","filter","_this2","forEach","peerId","find","_this3","undefined","findIndex","_this4","_this5","includes","indexOf","pop","_len","arguments","length","peerIds","Array","_key","_i","_peerIds","shift","unshift","len","_len2","_key2","i","get","Symbol","iterator"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/peer-collections/src/list.ts"],"sourcesContent":["import type { PeerId } from '@libp2p/interface-peer-id'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { mapIterable } from './util.js'\n\n/**\n * We can't use PeerIds as list entries because list entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerList } from '@libp2p/peer-collections'\n *\n * const list = peerList()\n * list.push(peerId)\n * ```\n */\nexport class PeerList {\n  private readonly list: string[]\n\n  constructor (list?: PeerList | Iterable<PeerId>) {\n    this.list = []\n\n    if (list != null) {\n      for (const value of list) {\n        this.list.push(value.toString())\n      }\n    }\n  }\n\n  [Symbol.iterator] (): IterableIterator<PeerId> {\n    return mapIterable<[number, string], PeerId>(\n      this.list.entries(),\n      (val) => {\n        return peerIdFromString(val[1])\n      }\n    )\n  }\n\n  concat (list: PeerList): PeerList {\n    const output = new PeerList(this)\n\n    for (const value of list) {\n      output.push(value)\n    }\n\n    return output\n  }\n\n  entries (): IterableIterator<[number, PeerId]> {\n    return mapIterable<[number, string], [number, PeerId]>(\n      this.list.entries(),\n      (val) => {\n        return [val[0], peerIdFromString(val[1])]\n      }\n    )\n  }\n\n  every (predicate: (peerId: PeerId, index: number, arr: PeerList) => boolean): boolean {\n    return this.list.every((str, index) => {\n      return predicate(peerIdFromString(str), index, this)\n    })\n  }\n\n  filter (predicate: (peerId: PeerId, index: number, arr: PeerList) => boolean): PeerList {\n    const output = new PeerList()\n\n    this.list.forEach((str, index) => {\n      const peerId = peerIdFromString(str)\n\n      if (predicate(peerId, index, this)) {\n        output.push(peerId)\n      }\n    })\n\n    return output\n  }\n\n  find (predicate: (peerId: PeerId, index: number, arr: PeerList) => boolean): PeerId | undefined {\n    const str = this.list.find((str, index) => {\n      return predicate(peerIdFromString(str), index, this)\n    })\n\n    if (str == null) {\n      return undefined\n    }\n\n    return peerIdFromString(str)\n  }\n\n  findIndex (predicate: (peerId: PeerId, index: number, arr: PeerList) => boolean): number {\n    return this.list.findIndex((str, index) => {\n      return predicate(peerIdFromString(str), index, this)\n    })\n  }\n\n  forEach (predicate: (peerId: PeerId, index: number, arr: PeerList) => void): void {\n    this.list.forEach((str, index) => {\n      predicate(peerIdFromString(str), index, this)\n    })\n  }\n\n  includes (peerId: PeerId): boolean {\n    return this.list.includes(peerId.toString())\n  }\n\n  indexOf (peerId: PeerId): number {\n    return this.list.indexOf(peerId.toString())\n  }\n\n  pop (): PeerId | undefined {\n    const str = this.list.pop()\n\n    if (str == null) {\n      return undefined\n    }\n\n    return peerIdFromString(str)\n  }\n\n  push (...peerIds: PeerId[]): void {\n    for (const peerId of peerIds) {\n      this.list.push(peerId.toString())\n    }\n  }\n\n  shift (): PeerId | undefined {\n    const str = this.list.shift()\n\n    if (str == null) {\n      return undefined\n    }\n\n    return peerIdFromString(str)\n  }\n\n  unshift (...peerIds: PeerId[]): number {\n    let len = this.list.length\n\n    for (let i = peerIds.length - 1; i > -1; i--) {\n      len = this.list.unshift(peerIds[i].toString())\n    }\n\n    return len\n  }\n\n  get length (): number {\n    return this.list.length\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { arrayEquals } from '@libp2p/utils/array-equals';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { PeerRecord as Protobuf } from './peer-record.js';\nimport { ENVELOPE_DOMAIN_PEER_RECORD, ENVELOPE_PAYLOAD_TYPE_PEER_RECORD } from './consts.js';\n/**\n * The PeerRecord is used for distributing peer routing records across the network.\n * It contains the peer's reachable listen addresses.\n */\nexport var PeerRecord = /*#__PURE__*/function () {\n  function PeerRecord(init) {\n    _classCallCheck(this, PeerRecord);\n    this.domain = PeerRecord.DOMAIN;\n    this.codec = PeerRecord.CODEC;\n    var peerId = init.peerId,\n      multiaddrs = init.multiaddrs,\n      seqNumber = init.seqNumber;\n    this.peerId = peerId;\n    this.multiaddrs = multiaddrs !== null && multiaddrs !== void 0 ? multiaddrs : [];\n    this.seqNumber = seqNumber !== null && seqNumber !== void 0 ? seqNumber : BigInt(Date.now());\n  }\n  /**\n   * Marshal a record to be used in an envelope\n   */\n  _createClass(PeerRecord, [{\n    key: \"marshal\",\n    value: function marshal() {\n      if (this.marshaled == null) {\n        this.marshaled = Protobuf.encode({\n          peerId: this.peerId.toBytes(),\n          seq: BigInt(this.seqNumber),\n          addresses: this.multiaddrs.map(function (m) {\n            return {\n              multiaddr: m.bytes\n            };\n          })\n        });\n      }\n      return this.marshaled;\n    }\n    /**\n     * Returns true if `this` record equals the `other`\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!(other instanceof PeerRecord)) {\n        return false;\n      }\n      // Validate PeerId\n      if (!this.peerId.equals(other.peerId)) {\n        return false;\n      }\n      // Validate seqNumber\n      if (this.seqNumber !== other.seqNumber) {\n        return false;\n      }\n      // Validate multiaddrs\n      if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n        return false;\n      }\n      return true;\n    }\n  }]);\n  return PeerRecord;\n}();\n/**\n * Unmarshal Peer Record Protobuf\n */\nPeerRecord.createFromProtobuf = function (buf) {\n  var _peerRecord$addresses;\n  var peerRecord = Protobuf.decode(buf);\n  var peerId = peerIdFromBytes(peerRecord.peerId);\n  var multiaddrs = ((_peerRecord$addresses = peerRecord.addresses) !== null && _peerRecord$addresses !== void 0 ? _peerRecord$addresses : []).map(function (a) {\n    return multiaddr(a.multiaddr);\n  });\n  var seqNumber = peerRecord.seq;\n  return new PeerRecord({\n    peerId: peerId,\n    multiaddrs: multiaddrs,\n    seqNumber: seqNumber\n  });\n};\nPeerRecord.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;\nPeerRecord.CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;","map":{"version":3,"names":["multiaddr","arrayEquals","peerIdFromBytes","PeerRecord","Protobuf","ENVELOPE_DOMAIN_PEER_RECORD","ENVELOPE_PAYLOAD_TYPE_PEER_RECORD","init","_classCallCheck","domain","DOMAIN","codec","CODEC","peerId","multiaddrs","seqNumber","BigInt","Date","now","_createClass","key","value","marshal","marshaled","encode","toBytes","seq","addresses","map","m","bytes","equals","other","createFromProtobuf","buf","_peerRecord$addresses","peerRecord","decode","a"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/peer-record/src/peer-record/index.ts"],"sourcesContent":["import type { Multiaddr } from '@multiformats/multiaddr'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { arrayEquals } from '@libp2p/utils/array-equals'\nimport { peerIdFromBytes } from '@libp2p/peer-id'\nimport { PeerRecord as Protobuf } from './peer-record.js'\nimport {\n  ENVELOPE_DOMAIN_PEER_RECORD,\n  ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n} from './consts.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface PeerRecordInit {\n  peerId: PeerId\n\n  /**\n   * Addresses of the associated peer.\n   */\n  multiaddrs?: Multiaddr[]\n\n  /**\n   * Monotonically-increasing sequence counter that's used to order PeerRecords in time.\n   */\n  seqNumber?: bigint\n}\n\n/**\n * The PeerRecord is used for distributing peer routing records across the network.\n * It contains the peer's reachable listen addresses.\n */\nexport class PeerRecord {\n  /**\n   * Unmarshal Peer Record Protobuf\n   */\n  static createFromProtobuf = (buf: Uint8Array | Uint8ArrayList): PeerRecord => {\n    const peerRecord = Protobuf.decode(buf)\n    const peerId = peerIdFromBytes(peerRecord.peerId)\n    const multiaddrs = (peerRecord.addresses ?? []).map((a) => multiaddr(a.multiaddr))\n    const seqNumber = peerRecord.seq\n\n    return new PeerRecord({ peerId, multiaddrs, seqNumber })\n  }\n\n  static DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD\n  static CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n\n  public peerId: PeerId\n  public multiaddrs: Multiaddr[]\n  public seqNumber: bigint\n  public domain = PeerRecord.DOMAIN\n  public codec = PeerRecord.CODEC\n  private marshaled?: Uint8Array\n\n  constructor (init: PeerRecordInit) {\n    const { peerId, multiaddrs, seqNumber } = init\n\n    this.peerId = peerId\n    this.multiaddrs = multiaddrs ?? []\n    this.seqNumber = seqNumber ?? BigInt(Date.now())\n  }\n\n  /**\n   * Marshal a record to be used in an envelope\n   */\n  marshal () {\n    if (this.marshaled == null) {\n      this.marshaled = Protobuf.encode({\n        peerId: this.peerId.toBytes(),\n        seq: BigInt(this.seqNumber),\n        addresses: this.multiaddrs.map((m) => ({\n          multiaddr: m.bytes\n        }))\n      })\n    }\n\n    return this.marshaled\n  }\n\n  /**\n   * Returns true if `this` record equals the `other`\n   */\n  equals (other: unknown) {\n    if (!(other instanceof PeerRecord)) {\n      return false\n    }\n\n    // Validate PeerId\n    if (!this.peerId.equals(other.peerId)) {\n      return false\n    }\n\n    // Validate seqNumber\n    if (this.seqNumber !== other.seqNumber) {\n      return false\n    }\n\n    // Validate multiaddrs\n    if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n      return false\n    }\n\n    return true\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Service } from '../utils/service.js';\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nexport function createStop(_ref) {\n  var network = _ref.network,\n    preload = _ref.preload,\n    ipns = _ref.ipns,\n    repo = _ref.repo,\n    mfsPreload = _ref.mfsPreload;\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"stop\"]}\n   */\n  var stop = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Promise.all([preload.stop(), ipns.stop(), mfsPreload.stop()]);\n          case 2:\n            _context.next = 4;\n            return Service.stop(network);\n          case 4:\n            _context.next = 6;\n            return repo.close();\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function stop() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return stop;\n}","map":{"version":3,"names":["Service","createStop","_ref","network","preload","ipns","repo","mfsPreload","stop","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","Promise","all","close","apply","arguments"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/stop.js"],"sourcesContent":["import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nexport function createStop ({ network, preload, ipns, repo, mfsPreload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop()\n    ])\n\n    await Service.stop(network)\n\n    // must be closed after stopping services as some of them\n    // will write into the datastore\n    await repo.close()\n  }\n\n  return stop\n}\n"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,qBAAqB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAAC,IAAA,EAAgD;EAAA,IAA5CC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IAAEC,IAAI,GAAAH,IAAA,CAAJG,IAAI;IAAEC,IAAI,GAAAJ,IAAA,CAAJI,IAAI;IAAEC,UAAU,GAAAL,IAAA,CAAVK,UAAU;EACpE;AACF;AACA;EACE,IAAMC,IAAI;IAAA,IAAAC,KAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA;MAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACLC,OAAO,CAACC,GAAG,CAAC,CAChBhB,OAAO,CAACI,IAAI,CAAC,CAAC,EACdH,IAAI,CAACG,IAAI,CAAC,CAAC,EACXD,UAAU,CAACC,IAAI,CAAC,CAAC,CAClB,CAAC;UAAA;YAAAQ,QAAA,CAAAE,IAAA;YAAA,OAEIlB,OAAO,CAACQ,IAAI,CAACL,OAAO,CAAC;UAAA;YAAAa,QAAA,CAAAE,IAAA;YAAA,OAIrBZ,IAAI,CAACe,KAAK,CAAC,CAAC;UAAA;UAAA;YAAA,OAAAL,QAAA,CAAAR,IAAA;QAAA;MAAA,GAAAK,OAAA;IAAA,CACnB;IAAA,gBAZKL,IAAIA,CAAA;MAAA,OAAAC,KAAA,CAAAa,KAAA,OAAAC,SAAA;IAAA;EAAA,GAYT;EAED,OAAOf,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}
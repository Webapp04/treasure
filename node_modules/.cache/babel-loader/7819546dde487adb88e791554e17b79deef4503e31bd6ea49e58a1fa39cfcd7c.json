{"ast":null,"code":"import _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport extractDataFromBlock from '../../../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../../../utils/validate-offset-and-length.js';\nimport { UnixFS } from 'ipfs-unixfs';\nimport errCode from 'err-code';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\nimport { pushable } from 'it-pushable';\nimport parallel from 'it-parallel';\nimport { pipe } from 'it-pipe';\nimport map from 'it-map';\nimport PQueue from 'p-queue';\n\n/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode | Uint8Array} node\n * @param {import('it-pushable').Pushable<Uint8Array>} queue\n * @param {number} streamPosition\n * @param {number} start\n * @param {number} end\n * @param {PQueue} walkQueue\n * @param {ExporterOptions} options\n * @returns {Promise<void>}\n */\nfunction walkDAG(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n  return _walkDAG.apply(this, arguments);\n}\n/**\n * @type {import('../').UnixfsV1Resolver}\n */\nfunction _walkDAG() {\n  _walkDAG = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(blockstore, node, queue, streamPosition, start, end, walkQueue, options) {\n    var file, data, buf, childOps, i, childLink, childStart, childEnd;\n    return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(node instanceof Uint8Array)) {\n            _context7.next = 3;\n            break;\n          }\n          queue.push(extractDataFromBlock(node, streamPosition, start, end));\n          return _context7.abrupt(\"return\");\n        case 3:\n          if (!(node.Data == null)) {\n            _context7.next = 5;\n            break;\n          }\n          throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n        case 5:\n          _context7.prev = 5;\n          file = UnixFS.unmarshal(node.Data);\n          _context7.next = 12;\n          break;\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](5);\n          throw errCode(_context7.t0, 'ERR_NOT_UNIXFS');\n        case 12:\n          // might be a unixfs `raw` node or have data on intermediate nodes\n          if (file.data != null) {\n            data = file.data;\n            buf = extractDataFromBlock(data, streamPosition, start, end);\n            queue.push(buf);\n            streamPosition += buf.byteLength;\n          }\n\n          /** @type {Array<{ link: PBLink, blockStart: number }>} */\n          childOps = [];\n          i = 0;\n        case 15:\n          if (!(i < node.Links.length)) {\n            _context7.next = 26;\n            break;\n          }\n          childLink = node.Links[i];\n          childStart = streamPosition; // inclusive\n          childEnd = childStart + file.blockSizes[i]; // exclusive\n          if (start >= childStart && start < childEnd ||\n          // child has offset byte\n          end >= childStart && end <= childEnd ||\n          // child has end byte\n          start < childStart && end > childEnd) {\n            // child is between offset and end bytes\n            childOps.push({\n              link: childLink,\n              blockStart: streamPosition\n            });\n          }\n          streamPosition = childEnd;\n          if (!(streamPosition > end)) {\n            _context7.next = 23;\n            break;\n          }\n          return _context7.abrupt(\"break\", 26);\n        case 23:\n          i++;\n          _context7.next = 15;\n          break;\n        case 26:\n          _context7.next = 28;\n          return pipe(childOps, function (source) {\n            return map(source, function (op) {\n              return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                var block;\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _context3.next = 2;\n                      return blockstore.get(op.link.Hash, {\n                        signal: options.signal\n                      });\n                    case 2:\n                      block = _context3.sent;\n                      return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, op), {}, {\n                        block: block\n                      }));\n                    case 4:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }, _callee3);\n              }));\n            });\n          }, function (source) {\n            return parallel(source, {\n              ordered: true\n            });\n          }, /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(source) {\n              var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _loop, _ret, _iterator, _step;\n              return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _iteratorAbruptCompletion = false;\n                    _didIteratorError = false;\n                    _context6.prev = 2;\n                    _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                      var _step$value, link, block, blockStart, child;\n                      return _regeneratorRuntime().wrap(function _loop$(_context5) {\n                        while (1) switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _step$value = _step.value, link = _step$value.link, block = _step$value.block, blockStart = _step$value.blockStart;\n                            _context5.t0 = link.Hash.code;\n                            _context5.next = _context5.t0 === dagPb.code ? 4 : _context5.t0 === raw.code ? 6 : 8;\n                            break;\n                          case 4:\n                            child = dagPb.decode(block);\n                            return _context5.abrupt(\"break\", 10);\n                          case 6:\n                            child = block;\n                            return _context5.abrupt(\"break\", 10);\n                          case 8:\n                            queue.end(errCode(new Error(\"Unsupported codec: \".concat(link.Hash.code)), 'ERR_NOT_UNIXFS'));\n                            return _context5.abrupt(\"return\", {\n                              v: void 0\n                            });\n                          case 10:\n                            walkQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                                while (1) switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    _context4.next = 2;\n                                    return walkDAG(blockstore, child, queue, blockStart, start, end, walkQueue, options);\n                                  case 2:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }, _callee4);\n                            })));\n                          case 11:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }, _loop);\n                    });\n                    _iterator = _asyncIterator(source);\n                  case 5:\n                    _context6.next = 7;\n                    return _iterator.next();\n                  case 7:\n                    if (!(_iteratorAbruptCompletion = !(_step = _context6.sent).done)) {\n                      _context6.next = 15;\n                      break;\n                    }\n                    return _context6.delegateYield(_loop(), \"t0\", 9);\n                  case 9:\n                    _ret = _context6.t0;\n                    if (!_ret) {\n                      _context6.next = 12;\n                      break;\n                    }\n                    return _context6.abrupt(\"return\", _ret.v);\n                  case 12:\n                    _iteratorAbruptCompletion = false;\n                    _context6.next = 5;\n                    break;\n                  case 15:\n                    _context6.next = 21;\n                    break;\n                  case 17:\n                    _context6.prev = 17;\n                    _context6.t1 = _context6[\"catch\"](2);\n                    _didIteratorError = true;\n                    _iteratorError = _context6.t1;\n                  case 21:\n                    _context6.prev = 21;\n                    _context6.prev = 22;\n                    if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                      _context6.next = 26;\n                      break;\n                    }\n                    _context6.next = 26;\n                    return _iterator.return();\n                  case 26:\n                    _context6.prev = 26;\n                    if (!_didIteratorError) {\n                      _context6.next = 29;\n                      break;\n                    }\n                    throw _iteratorError;\n                  case 29:\n                    return _context6.finish(26);\n                  case 30:\n                    return _context6.finish(21);\n                  case 31:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee5, null, [[2, 17, 21, 31], [22,, 26, 30]]);\n            }));\n            return function (_x9) {\n              return _ref3.apply(this, arguments);\n            };\n          }());\n        case 28:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee6, null, [[5, 9]]);\n  }));\n  return _walkDAG.apply(this, arguments);\n}\nvar fileContent = function fileContent(cid, node, unixfs, path, resolve, depth, blockstore) {\n  /**\n   * @param {ExporterOptions} options\n   */\n  function yieldFileContent() {\n    return _yieldFileContent.apply(this, arguments);\n  }\n  function _yieldFileContent() {\n    _yieldFileContent = _wrapAsyncGenerator(function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var fileSize, _validateOffsetAndLen, offset, length, walkQueue, queue, read, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, buf;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              fileSize = unixfs.fileSize();\n              if (!(fileSize === undefined)) {\n                _context2.next = 3;\n                break;\n              }\n              throw new Error('File was a directory');\n            case 3:\n              _validateOffsetAndLen = validateOffsetAndLength(fileSize, options.offset, options.length), offset = _validateOffsetAndLen.offset, length = _validateOffsetAndLen.length;\n              if (!(length === 0)) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 6:\n              // use a queue to walk the DAG instead of recursion to ensure very deep DAGs\n              // don't overflow the stack\n              walkQueue = new PQueue({\n                concurrency: 1\n              });\n              queue = pushable();\n              walkQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return walkDAG(blockstore, node, queue, 0, offset, offset + length, walkQueue, options);\n                    case 2:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              })));\n              walkQueue.on('error', function (error) {\n                queue.end(error);\n              });\n              read = 0;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context2.prev = 13;\n              _iterator2 = _asyncIterator(queue);\n            case 15:\n              _context2.next = 17;\n              return _awaitAsyncGenerator(_iterator2.next());\n            case 17:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n                _context2.next = 28;\n                break;\n              }\n              buf = _step2.value;\n              if (!(buf == null)) {\n                _context2.next = 21;\n                break;\n              }\n              return _context2.abrupt(\"continue\", 25);\n            case 21:\n              read += buf.byteLength;\n              if (read === length) {\n                queue.end();\n              }\n              _context2.next = 25;\n              return buf;\n            case 25:\n              _iteratorAbruptCompletion2 = false;\n              _context2.next = 15;\n              break;\n            case 28:\n              _context2.next = 34;\n              break;\n            case 30:\n              _context2.prev = 30;\n              _context2.t0 = _context2[\"catch\"](13);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t0;\n            case 34:\n              _context2.prev = 34;\n              _context2.prev = 35;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context2.next = 39;\n                break;\n              }\n              _context2.next = 39;\n              return _awaitAsyncGenerator(_iterator2.return());\n            case 39:\n              _context2.prev = 39;\n              if (!_didIteratorError2) {\n                _context2.next = 42;\n                break;\n              }\n              throw _iteratorError2;\n            case 42:\n              return _context2.finish(39);\n            case 43:\n              return _context2.finish(34);\n            case 44:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[13, 30, 34, 44], [35,, 39, 43]]);\n      })();\n    });\n    return _yieldFileContent.apply(this, arguments);\n  }\n  return yieldFileContent;\n};\nexport default fileContent;","map":{"version":3,"names":["extractDataFromBlock","validateOffsetAndLength","UnixFS","errCode","dagPb","raw","pushable","parallel","pipe","map","PQueue","walkDAG","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_walkDAG","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee6","blockstore","node","queue","streamPosition","start","end","walkQueue","options","file","data","buf","childOps","i","childLink","childStart","childEnd","wrap","_callee6$","_context7","prev","next","Uint8Array","push","abrupt","Data","Error","unmarshal","t0","byteLength","Links","length","blockSizes","link","blockStart","source","op","_callee3","block","_callee3$","_context3","get","Hash","signal","sent","_objectSpread","stop","ordered","_ref3","_callee5","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_loop","_ret","_iterator","_step","_callee5$","_context6","_step$value","child","_loop$","_context5","value","code","decode","concat","v","add","_callee4","_callee4$","_context4","_asyncIterator","done","delegateYield","t1","return","finish","_x9","fileContent","cid","unixfs","path","resolve","depth","yieldFileContent","_yieldFileContent","_wrapAsyncGenerator","undefined","_callee2","fileSize","_validateOffsetAndLen","offset","read","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee2$","_context2","concurrency","_callee","_callee$","_context","on","error","_awaitAsyncGenerator"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/file.js"],"sourcesContent":["import extractDataFromBlock from '../../../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../../../utils/validate-offset-and-length.js'\nimport { UnixFS } from 'ipfs-unixfs'\nimport errCode from 'err-code'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\nimport { pushable } from 'it-pushable'\nimport parallel from 'it-parallel'\nimport { pipe } from 'it-pipe'\nimport map from 'it-map'\nimport PQueue from 'p-queue'\n\n/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode | Uint8Array} node\n * @param {import('it-pushable').Pushable<Uint8Array>} queue\n * @param {number} streamPosition\n * @param {number} start\n * @param {number} end\n * @param {PQueue} walkQueue\n * @param {ExporterOptions} options\n * @returns {Promise<void>}\n */\nasync function walkDAG (blockstore, node, queue, streamPosition, start, end, walkQueue, options) {\n  // a `raw` node\n  if (node instanceof Uint8Array) {\n    queue.push(extractDataFromBlock(node, streamPosition, start, end))\n\n    return\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  /** @type {UnixFS} */\n  let file\n\n  try {\n    file = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  // might be a unixfs `raw` node or have data on intermediate nodes\n  if (file.data != null) {\n    const data = file.data\n    const buf = extractDataFromBlock(data, streamPosition, start, end)\n\n    queue.push(buf)\n\n    streamPosition += buf.byteLength\n  }\n\n  /** @type {Array<{ link: PBLink, blockStart: number }>} */\n  const childOps = []\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const childLink = node.Links[i]\n    const childStart = streamPosition // inclusive\n    const childEnd = childStart + file.blockSizes[i] // exclusive\n\n    if ((start >= childStart && start < childEnd) || // child has offset byte\n        (end >= childStart && end <= childEnd) || // child has end byte\n        (start < childStart && end > childEnd)) { // child is between offset and end bytes\n      childOps.push({\n        link: childLink,\n        blockStart: streamPosition\n      })\n    }\n\n    streamPosition = childEnd\n\n    if (streamPosition > end) {\n      break\n    }\n  }\n\n  await pipe(\n    childOps,\n    (source) => map(source, (op) => {\n      return async () => {\n        const block = await blockstore.get(op.link.Hash, {\n          signal: options.signal\n        })\n\n        return {\n          ...op,\n          block\n        }\n      }\n    }),\n    (source) => parallel(source, {\n      ordered: true\n    }),\n    async (source) => {\n      for await (const { link, block, blockStart } of source) {\n        /** @type {PBNode | Uint8Array} */\n        let child\n        switch (link.Hash.code) {\n          case dagPb.code:\n            child = dagPb.decode(block)\n            break\n          case raw.code:\n            child = block\n            break\n          default:\n            queue.end(errCode(new Error(`Unsupported codec: ${link.Hash.code}`), 'ERR_NOT_UNIXFS'))\n            return\n        }\n\n        walkQueue.add(async () => {\n          await walkDAG(blockstore, child, queue, blockStart, start, end, walkQueue, options)\n        })\n      }\n    }\n  )\n}\n\n/**\n * @type {import('../').UnixfsV1Resolver}\n */\nconst fileContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * yieldFileContent (options = {}) {\n    const fileSize = unixfs.fileSize()\n\n    if (fileSize === undefined) {\n      throw new Error('File was a directory')\n    }\n\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(fileSize, options.offset, options.length)\n\n    if (length === 0) {\n      return\n    }\n\n    // use a queue to walk the DAG instead of recursion to ensure very deep DAGs\n    // don't overflow the stack\n    const walkQueue = new PQueue({\n      concurrency: 1\n    })\n    const queue = pushable()\n\n    walkQueue.add(async () => {\n      await walkDAG(blockstore, node, queue, 0, offset, offset + length, walkQueue, options)\n    })\n\n    walkQueue.on('error', error => {\n      queue.end(error)\n    })\n\n    let read = 0\n\n    for await (const buf of queue) {\n      if (buf == null) {\n        continue\n      }\n\n      read += buf.byteLength\n\n      if (read === length) {\n        queue.end()\n      }\n\n      yield buf\n    }\n  }\n\n  return yieldFileContent\n}\n\nexport default fileContent\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isRepoInitialized } from './init.js';\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js';\nimport { VERSION_KEY } from '../utils.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport function getVersion(_x) {\n  return _getVersion.apply(this, arguments);\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nfunction _getVersion() {\n  _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(backends) {\n    var store;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return isRepoInitialized(backends);\n        case 2:\n          if (_context.sent) {\n            _context.next = 4;\n            break;\n          }\n          throw new NotInitializedRepoError('Repo is not initialized!');\n        case 4:\n          store = backends.root;\n          _context.next = 7;\n          return store.open();\n        case 7:\n          _context.prev = 7;\n          _context.t0 = parseInt;\n          _context.t1 = uint8ArrayToString;\n          _context.next = 12;\n          return store.get(VERSION_KEY);\n        case 12:\n          _context.t2 = _context.sent;\n          _context.t3 = (0, _context.t1)(_context.t2);\n          return _context.abrupt(\"return\", (0, _context.t0)(_context.t3));\n        case 15:\n          _context.prev = 15;\n          _context.next = 18;\n          return store.close();\n        case 18:\n          return _context.finish(15);\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[7,, 15, 19]]);\n  }));\n  return _getVersion.apply(this, arguments);\n}\nexport function setVersion(_x2, _x3) {\n  return _setVersion.apply(this, arguments);\n}\nfunction _setVersion() {\n  _setVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(version, backends) {\n    var store;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (backends) {\n            _context2.next = 2;\n            break;\n          }\n          throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n        case 2:\n          store = backends.root;\n          _context2.next = 5;\n          return store.open();\n        case 5:\n          _context2.next = 7;\n          return store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n        case 7:\n          _context2.next = 9;\n          return store.close();\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _setVersion.apply(this, arguments);\n}","map":{"version":3,"names":["isRepoInitialized","MissingRepoOptionsError","NotInitializedRepoError","VERSION_KEY","fromString","uint8ArrayFromString","toString","uint8ArrayToString","getVersion","_x","_getVersion","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","backends","store","wrap","_callee$","_context","prev","next","sent","root","open","t0","parseInt","t1","get","t2","t3","abrupt","close","finish","stop","setVersion","_x2","_x3","_setVersion","_callee2","version","_callee2$","_context2","put","String"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-repo-migrations/src/repo/version.js"],"sourcesContent":["\nimport { isRepoInitialized } from './init.js'\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js'\nimport { VERSION_KEY } from '../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion (backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
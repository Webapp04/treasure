{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { logger } from '@libp2p/logger';\nimport { profiles } from './profiles.js';\nvar log = logger('ipfs:core:config');\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig(_ref) {\n  var repo = _ref.repo;\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  };\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  function getAll() {\n    return _getAll.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  function _getAll() {\n    _getAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            return _context.abrupt(\"return\", repo.config.getAll(options));\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _getAll.apply(this, arguments);\n  }\n  function get(_x, _x2) {\n    return _get.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key, options) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (key) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt(\"return\", Promise.reject(new Error('key argument is required')));\n          case 2:\n            return _context2.abrupt(\"return\", repo.config.get(key, options));\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _get.apply(this, arguments);\n  }\n  function set(_x3, _x4, _x5) {\n    return _set.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  function _set() {\n    _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, value, options) {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", repo.config.set(key, value, options));\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _set.apply(this, arguments);\n  }\n  function replace(_x6, _x7) {\n    return _replace.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  function _replace() {\n    _replace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(value, options) {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", repo.config.replace(value, options));\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _replace.apply(this, arguments);\n  }\n  function applyProfile(_x8) {\n    return _applyProfile.apply(this, arguments);\n  }\n  function _applyProfile() {\n    _applyProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(profileName) {\n      var options,\n        dryRun,\n        profile,\n        oldCfg,\n        newCfg,\n        _args5 = arguments;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {\n              dryRun: false\n            };\n            dryRun = options.dryRun;\n            profile = profiles[profileName];\n            if (profile) {\n              _context5.next = 5;\n              break;\n            }\n            throw new Error(\"No profile with name '\".concat(profileName, \"' exists\"));\n          case 5:\n            _context5.prev = 5;\n            _context5.next = 8;\n            return repo.config.getAll(options);\n          case 8:\n            oldCfg = _context5.sent;\n            newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone\n            newCfg = profile.transform(newCfg);\n            if (dryRun) {\n              _context5.next = 14;\n              break;\n            }\n            _context5.next = 14;\n            return repo.config.replace(newCfg, options);\n          case 14:\n            // Scrub private key from output\n            // @ts-expect-error `oldCfg.Identity` maybe undefined\n            delete oldCfg.Identity.PrivKey;\n            delete newCfg.Identity.PrivKey;\n            return _context5.abrupt(\"return\", {\n              original: oldCfg,\n              updated: newCfg\n            });\n          case 19:\n            _context5.prev = 19;\n            _context5.t0 = _context5[\"catch\"](5);\n            log(_context5.t0);\n            throw new Error(\"Could not apply profile '\".concat(profileName, \"' to config: \").concat(_context5.t0.message));\n          case 23:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[5, 19]]);\n    }));\n    return _applyProfile.apply(this, arguments);\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nfunction listProfiles(_x9) {\n  return _listProfiles.apply(this, arguments);\n}\nfunction _listProfiles() {\n  _listProfiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_options) {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.abrupt(\"return\", Object.keys(profiles).map(function (name) {\n            return {\n              name: name,\n              description: profiles[name].description\n            };\n          }));\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _listProfiles.apply(this, arguments);\n}","map":{"version":3,"names":["withTimeoutOption","logger","profiles","log","createConfig","_ref","repo","getAll","get","set","replace","apply","applyProfile","list","listProfiles","_getAll","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","_args","wrap","_callee$","_context","prev","next","length","undefined","abrupt","config","stop","_x","_x2","_get","_callee2","key","_callee2$","_context2","Promise","reject","Error","_x3","_x4","_x5","_set","_callee3","value","_callee3$","_context3","_x6","_x7","_replace","_callee4","_callee4$","_context4","_x8","_applyProfile","_callee5","profileName","dryRun","profile","oldCfg","newCfg","_args5","_callee5$","_context5","concat","sent","JSON","parse","stringify","transform","Identity","PrivKey","original","updated","t0","message","_x9","_listProfiles","_callee6","_options","_callee6$","_context6","Object","keys","map","name","description"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/config/index.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport { profiles } from './profiles.js'\n\nconst log = logger('ipfs:core:config')\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig ({ repo }) {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      return { original: oldCfg, updated: newCfg }\n    } catch (/** @type {any} */ err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
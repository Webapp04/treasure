{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n// @ts-ignore\nimport BufferList from 'bl/BufferList.js';\n\n/**\n * @type {import('../types').Chunker}\n */\nfunction fixedSizeChunker(_x, _x2) {\n  return _fixedSizeChunker.apply(this, arguments);\n}\nfunction _fixedSizeChunker() {\n  _fixedSizeChunker = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source, options) {\n    var bl, currentLength, emitted, maxChunkSize, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, buffer, newBl;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          bl = new BufferList();\n          currentLength = 0;\n          emitted = false;\n          maxChunkSize = options.maxChunkSize;\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 6;\n          _iterator = _asyncIterator(source);\n        case 8:\n          _context.next = 10;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 10:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 24;\n            break;\n          }\n          buffer = _step.value;\n          bl.append(buffer);\n          currentLength += buffer.length;\n        case 14:\n          if (!(currentLength >= maxChunkSize)) {\n            _context.next = 21;\n            break;\n          }\n          _context.next = 17;\n          return bl.slice(0, maxChunkSize);\n        case 17:\n          emitted = true;\n\n          // throw away consumed bytes\n          if (maxChunkSize === bl.length) {\n            bl = new BufferList();\n            currentLength = 0;\n          } else {\n            newBl = new BufferList();\n            newBl.append(bl.shallowSlice(maxChunkSize));\n            bl = newBl;\n\n            // update our offset\n            currentLength -= maxChunkSize;\n          }\n          _context.next = 14;\n          break;\n        case 21:\n          _iteratorAbruptCompletion = false;\n          _context.next = 8;\n          break;\n        case 24:\n          _context.next = 30;\n          break;\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](6);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n        case 30:\n          _context.prev = 30;\n          _context.prev = 31;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 35;\n            break;\n          }\n          _context.next = 35;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 35:\n          _context.prev = 35;\n          if (!_didIteratorError) {\n            _context.next = 38;\n            break;\n          }\n          throw _iteratorError;\n        case 38:\n          return _context.finish(35);\n        case 39:\n          return _context.finish(30);\n        case 40:\n          if (!(!emitted || currentLength)) {\n            _context.next = 43;\n            break;\n          }\n          _context.next = 43;\n          return bl.slice(0, currentLength);\n        case 43:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[6, 26, 30, 40], [31,, 35, 39]]);\n  }));\n  return _fixedSizeChunker.apply(this, arguments);\n}\nexport default fixedSizeChunker;","map":{"version":3,"names":["BufferList","fixedSizeChunker","_x","_x2","_fixedSizeChunker","apply","arguments","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","source","options","bl","currentLength","emitted","maxChunkSize","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","buffer","newBl","wrap","_callee$","_context","prev","next","_asyncIterator","_awaitAsyncGenerator","sent","done","value","append","length","slice","shallowSlice","t0","return","finish","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-importer/src/chunker/fixed-size.js"],"sourcesContent":["// @ts-ignore\nimport BufferList from 'bl/BufferList.js'\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * fixedSizeChunker (source, options) {\n  let bl = new BufferList()\n  let currentLength = 0\n  let emitted = false\n  const maxChunkSize = options.maxChunkSize\n\n  for await (const buffer of source) {\n    bl.append(buffer)\n\n    currentLength += buffer.length\n\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize)\n      emitted = true\n\n      // throw away consumed bytes\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList()\n        currentLength = 0\n      } else {\n        const newBl = new BufferList()\n        newBl.append(bl.shallowSlice(maxChunkSize))\n        bl = newBl\n\n        // update our offset\n        currentLength -= maxChunkSize\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield bl.slice(0, currentLength)\n  }\n}\n\nexport default fixedSizeChunker\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\nimport { CircuitRelay } from '../pb/index.js';\n/**\n * Write a response\n */\nfunction writeResponse(streamHandler, status) {\n  streamHandler.write({\n    type: CircuitRelay.Type.STATUS,\n    code: status\n  });\n}\n/**\n * Validate incomming HOP/STOP message\n */\nexport function validateAddrs(msg, streamHandler) {\n  try {\n    var _msg$dstPeer;\n    if (((_msg$dstPeer = msg.dstPeer) === null || _msg$dstPeer === void 0 ? void 0 : _msg$dstPeer.addrs) != null) {\n      msg.dstPeer.addrs.forEach(function (addr) {\n        return multiaddr(addr);\n      });\n    }\n  } catch (err) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID);\n    throw err;\n  }\n  try {\n    var _msg$srcPeer;\n    if (((_msg$srcPeer = msg.srcPeer) === null || _msg$srcPeer === void 0 ? void 0 : _msg$srcPeer.addrs) != null) {\n      msg.srcPeer.addrs.forEach(function (addr) {\n        return multiaddr(addr);\n      });\n    }\n  } catch (err) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID);\n    throw err;\n  }\n}","map":{"version":3,"names":["multiaddr","CircuitRelay","writeResponse","streamHandler","status","write","type","Type","STATUS","code","validateAddrs","msg","_msg$dstPeer","dstPeer","addrs","forEach","addr","err","HOP","Status","HOP_DST_MULTIADDR_INVALID","STOP_DST_MULTIADDR_INVALID","_msg$srcPeer","srcPeer","HOP_SRC_MULTIADDR_INVALID","STOP_SRC_MULTIADDR_INVALID"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/circuit/circuit/utils.ts"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { CircuitRelay } from '../pb/index.js'\nimport type { StreamHandler } from './stream-handler.js'\n\n/**\n * Write a response\n */\nfunction writeResponse (streamHandler: StreamHandler, status: CircuitRelay.Status) {\n  streamHandler.write({\n    type: CircuitRelay.Type.STATUS,\n    code: status\n  })\n}\n\n/**\n * Validate incomming HOP/STOP message\n */\nexport function validateAddrs (msg: CircuitRelay, streamHandler: StreamHandler) {\n  try {\n    if (msg.dstPeer?.addrs != null) {\n      msg.dstPeer.addrs.forEach((addr) => {\n        return multiaddr(addr)\n      })\n    }\n  } catch (err: any) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n      ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID\n      : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID)\n    throw err\n  }\n\n  try {\n    if (msg.srcPeer?.addrs != null) {\n      msg.srcPeer.addrs.forEach((addr) => {\n        return multiaddr(addr)\n      })\n    }\n  } catch (err: any) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n      ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID\n      : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID)\n    throw err\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,YAAY,QAAQ,gBAAgB;AAG7C;;;AAGA,SAASC,aAAaA,CAAEC,aAA4B,EAAEC,MAA2B;EAC/ED,aAAa,CAACE,KAAK,CAAC;IAClBC,IAAI,EAAEL,YAAY,CAACM,IAAI,CAACC,MAAM;IAC9BC,IAAI,EAAEL;GACP,CAAC;AACJ;AAEA;;;AAGA,OAAM,SAAUM,aAAaA,CAAEC,GAAiB,EAAER,aAA4B;EAC5E,IAAI;IAAA,IAAAS,YAAA;IACF,IAAI,EAAAA,YAAA,GAAAD,GAAG,CAACE,OAAO,cAAAD,YAAA,uBAAXA,YAAA,CAAaE,KAAK,KAAI,IAAI,EAAE;MAC9BH,GAAG,CAACE,OAAO,CAACC,KAAK,CAACC,OAAO,CAAC,UAACC,IAAI,EAAI;QACjC,OAAOhB,SAAS,CAACgB,IAAI,CAAC;MACxB,CAAC,CAAC;;GAEL,CAAC,OAAOC,GAAQ,EAAE;IACjBf,aAAa,CAACC,aAAa,EAAEQ,GAAG,CAACL,IAAI,KAAKL,YAAY,CAACM,IAAI,CAACW,GAAG,GAC3DjB,YAAY,CAACkB,MAAM,CAACC,yBAAyB,GAC7CnB,YAAY,CAACkB,MAAM,CAACE,0BAA0B,CAAC;IACnD,MAAMJ,GAAG;;EAGX,IAAI;IAAA,IAAAK,YAAA;IACF,IAAI,EAAAA,YAAA,GAAAX,GAAG,CAACY,OAAO,cAAAD,YAAA,uBAAXA,YAAA,CAAaR,KAAK,KAAI,IAAI,EAAE;MAC9BH,GAAG,CAACY,OAAO,CAACT,KAAK,CAACC,OAAO,CAAC,UAACC,IAAI,EAAI;QACjC,OAAOhB,SAAS,CAACgB,IAAI,CAAC;MACxB,CAAC,CAAC;;GAEL,CAAC,OAAOC,GAAQ,EAAE;IACjBf,aAAa,CAACC,aAAa,EAAEQ,GAAG,CAACL,IAAI,KAAKL,YAAY,CAACM,IAAI,CAACW,GAAG,GAC3DjB,YAAY,CAACkB,MAAM,CAACK,yBAAyB,GAC7CvB,YAAY,CAACkB,MAAM,CAACM,0BAA0B,CAAC;IACnD,MAAMR,GAAG;;AAEb"},"metadata":{},"sourceType":"module","externalDependencies":[]}
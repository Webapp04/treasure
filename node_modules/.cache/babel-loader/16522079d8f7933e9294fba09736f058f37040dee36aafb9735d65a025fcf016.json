{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport accessor from 'byte-access';\nvar TWO_32 = 4294967296;\nexport var LongBits = /*#__PURE__*/function () {\n  function LongBits() {\n    var hi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var lo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, LongBits);\n    this.hi = hi;\n    this.lo = lo;\n  }\n  /**\n   * Returns these hi/lo bits as a BigInt\n   */\n  _createClass(LongBits, [{\n    key: \"toBigInt\",\n    value: function toBigInt(unsigned) {\n      if (unsigned === true) {\n        return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);\n      }\n      if (this.hi >>> 31 !== 0) {\n        var lo = ~this.lo + 1 >>> 0;\n        var hi = ~this.hi >>> 0;\n        if (lo === 0) {\n          hi = hi + 1 >>> 0;\n        }\n        return -(BigInt(lo) + (BigInt(hi) << 32n));\n      }\n      return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);\n    }\n    /**\n     * Returns these hi/lo bits as a Number - this may overflow, toBigInt\n     * should be preferred\n     */\n  }, {\n    key: \"toNumber\",\n    value: function toNumber(unsigned) {\n      return Number(this.toBigInt(unsigned));\n    }\n    /**\n     * ZigZag decode a LongBits object\n     */\n  }, {\n    key: \"zzDecode\",\n    value: function zzDecode() {\n      var mask = -(this.lo & 1);\n      var lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n      var hi = (this.hi >>> 1 ^ mask) >>> 0;\n      return new LongBits(hi, lo);\n    }\n    /**\n     * ZigZag encode a LongBits object\n     */\n  }, {\n    key: \"zzEncode\",\n    value: function zzEncode() {\n      var mask = this.hi >> 31;\n      var hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n      var lo = (this.lo << 1 ^ mask) >>> 0;\n      return new LongBits(hi, lo);\n    }\n    /**\n     * Encode a LongBits object as a varint byte array\n     */\n  }, {\n    key: \"toBytes\",\n    value: function toBytes(buf) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var access = accessor(buf);\n      while (this.hi > 0) {\n        access.set(offset++, this.lo & 127 | 128);\n        this.lo = (this.lo >>> 7 | this.hi << 25) >>> 0;\n        this.hi >>>= 7;\n      }\n      while (this.lo > 127) {\n        access.set(offset++, this.lo & 127 | 128);\n        this.lo = this.lo >>> 7;\n      }\n      access.set(offset++, this.lo);\n    }\n    /**\n     * Parse a LongBits object from a BigInt\n     */\n  }], [{\n    key: \"fromBigInt\",\n    value: function fromBigInt(value) {\n      if (value === 0n) {\n        return new LongBits();\n      }\n      var negative = value < 0;\n      if (negative) {\n        value = -value;\n      }\n      var hi = Number(value >> 32n) | 0;\n      var lo = Number(value - (BigInt(hi) << 32n)) | 0;\n      if (negative) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > TWO_32) {\n          lo = 0;\n          if (++hi > TWO_32) {\n            hi = 0;\n          }\n        }\n      }\n      return new LongBits(hi, lo);\n    }\n    /**\n     * Parse a LongBits object from a Number\n     */\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(value) {\n      if (value === 0) {\n        return new LongBits();\n      }\n      var sign = value < 0;\n      if (sign) {\n        value = -value;\n      }\n      var lo = value >>> 0;\n      var hi = (value - lo) / 4294967296 >>> 0;\n      if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n          lo = 0;\n          if (++hi > 4294967295) {\n            hi = 0;\n          }\n        }\n      }\n      return new LongBits(hi, lo);\n    }\n    /**\n     * Parse a LongBits object from a varint byte array\n     */\n  }, {\n    key: \"fromBytes\",\n    value: function fromBytes(buf) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var access = accessor(buf);\n      // tends to deopt with local vars for octet etc.\n      var bits = new LongBits();\n      var i = 0;\n      if (buf.length - offset > 4) {\n        // fast route (lo)\n        for (; i < 4; ++i) {\n          // 1st..4th\n          bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0;\n          if (access.get(offset++) < 128) {\n            return bits;\n          }\n        }\n        // 5th\n        bits.lo = (bits.lo | (access.get(offset) & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (access.get(offset) & 127) >> 4) >>> 0;\n        if (access.get(offset++) < 128) {\n          return bits;\n        }\n        i = 0;\n      } else {\n        for (; i < 4; ++i) {\n          /* istanbul ignore if */\n          if (offset >= buf.length) {\n            throw RangeError(\"index out of range: \".concat(offset, \" > \").concat(buf.length));\n          }\n          // 1st..4th\n          bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0;\n          if (access.get(offset++) < 128) {\n            return bits;\n          }\n        }\n      }\n      if (buf.length - offset > 4) {\n        // fast route (hi)\n        for (; i < 5; ++i) {\n          // 6th..10th\n          bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0;\n          if (access.get(offset++) < 128) {\n            return bits;\n          }\n        }\n      } else if (offset < buf.byteLength) {\n        for (; i < 5; ++i) {\n          /* istanbul ignore if */\n          if (offset >= buf.length) {\n            throw RangeError(\"index out of range: \".concat(offset, \" > \").concat(buf.length));\n          }\n          // 6th..10th\n          bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0;\n          if (access.get(offset++) < 128) {\n            return bits;\n          }\n        }\n      }\n      /* istanbul ignore next */\n      throw RangeError('invalid varint encoding');\n    }\n  }]);\n  return LongBits;\n}();","map":{"version":3,"names":["accessor","TWO_32","LongBits","hi","arguments","length","undefined","lo","_classCallCheck","_createClass","key","value","toBigInt","unsigned","BigInt","toNumber","Number","zzDecode","mask","zzEncode","toBytes","buf","offset","access","set","fromBigInt","negative","fromNumber","sign","fromBytes","bits","i","get","RangeError","concat","byteLength"],"sources":["/Users/apple/Documents/treasure/node_modules/longbits/src/index.ts"],"sourcesContent":["import type { Uint8ArrayList } from 'uint8arraylist'\nimport accessor from 'byte-access'\n\nconst TWO_32 = 4294967296\n\nexport class LongBits {\n  public hi: number\n  public lo: number\n\n  constructor (hi: number = 0, lo: number = 0) {\n    this.hi = hi\n    this.lo = lo\n  }\n\n  /**\n   * Returns these hi/lo bits as a BigInt\n   */\n  toBigInt (unsigned?: boolean): bigint {\n    if (unsigned === true) {\n      return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n    }\n\n    if ((this.hi >>> 31) !== 0) {\n      const lo = ~this.lo + 1 >>> 0\n      let hi = ~this.hi >>> 0\n\n      if (lo === 0) {\n        hi = hi + 1 >>> 0\n      }\n\n      return -(BigInt(lo) + (BigInt(hi) << 32n))\n    }\n\n    return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n  }\n\n  /**\n   * Returns these hi/lo bits as a Number - this may overflow, toBigInt\n   * should be preferred\n   */\n  toNumber (unsigned?: boolean): number {\n    return Number(this.toBigInt(unsigned))\n  }\n\n  /**\n   * ZigZag decode a LongBits object\n   */\n  zzDecode () {\n    const mask = -(this.lo & 1)\n    const lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0\n    const hi = (this.hi >>> 1 ^ mask) >>> 0\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * ZigZag encode a LongBits object\n   */\n  zzEncode () {\n    const mask = this.hi >> 31\n    const hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0\n    const lo = (this.lo << 1 ^ mask) >>> 0\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * Encode a LongBits object as a varint byte array\n   */\n  toBytes (buf: Uint8ArrayList | Uint8Array, offset = 0) {\n    const access = accessor(buf)\n\n    while (this.hi > 0) {\n      access.set(offset++, this.lo & 127 | 128)\n      this.lo = (this.lo >>> 7 | this.hi << 25) >>> 0\n      this.hi >>>= 7\n    }\n\n    while (this.lo > 127) {\n      access.set(offset++, this.lo & 127 | 128)\n      this.lo = this.lo >>> 7\n    }\n\n    access.set(offset++, this.lo)\n  }\n\n  /**\n   * Parse a LongBits object from a BigInt\n   */\n  static fromBigInt (value: bigint) {\n    if (value === 0n) {\n      return new LongBits()\n    }\n\n    const negative = value < 0\n\n    if (negative) {\n      value = -value\n    }\n\n    let hi = Number(value >> 32n) | 0\n    let lo = Number(value - (BigInt(hi) << 32n)) | 0\n\n    if (negative) {\n      hi = ~hi >>> 0\n      lo = ~lo >>> 0\n\n      if (++lo > TWO_32) {\n        lo = 0\n\n        if (++hi > TWO_32) {\n          hi = 0\n        }\n      }\n    }\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * Parse a LongBits object from a Number\n   */\n  static fromNumber (value: number) {\n    if (value === 0) {\n      return new LongBits()\n    }\n\n    const sign = value < 0\n\n    if (sign) {\n      value = -value\n    }\n\n    let lo = value >>> 0\n    let hi = (value - lo) / 4294967296 >>> 0\n\n    if (sign) {\n      hi = ~hi >>> 0\n      lo = ~lo >>> 0\n\n      if (++lo > 4294967295) {\n        lo = 0\n\n        if (++hi > 4294967295) {\n          hi = 0\n        }\n      }\n    }\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * Parse a LongBits object from a varint byte array\n   */\n  static fromBytes (buf: Uint8ArrayList | Uint8Array, offset: number = 0) {\n    const access = accessor(buf)\n\n    // tends to deopt with local vars for octet etc.\n    const bits = new LongBits()\n    let i = 0\n\n    if (buf.length - offset > 4) { // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n\n      // 5th\n      bits.lo = (bits.lo | (access.get(offset) & 127) << 28) >>> 0\n      bits.hi = (bits.hi | (access.get(offset) & 127) >> 4) >>> 0\n\n      if (access.get(offset++) < 128) {\n        return bits\n      }\n\n      i = 0\n    } else {\n      for (; i < 4; ++i) {\n        /* istanbul ignore if */\n        if (offset >= buf.length) {\n          throw RangeError(`index out of range: ${offset} > ${buf.length}`)\n        }\n\n        // 1st..4th\n        bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n    }\n\n    if (buf.length - offset > 4) { // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n    } else if (offset < buf.byteLength) {\n      for (; i < 5; ++i) {\n        /* istanbul ignore if */\n        if (offset >= buf.length) {\n          throw RangeError(`index out of range: ${offset} > ${buf.length}`)\n        }\n\n        // 6th..10th\n        bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n    }\n\n    /* istanbul ignore next */\n    throw RangeError('invalid varint encoding')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
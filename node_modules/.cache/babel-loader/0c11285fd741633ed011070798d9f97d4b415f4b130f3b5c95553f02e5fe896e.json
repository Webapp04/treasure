{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { mapIterable } from './util.js';\n/**\n * We can't use PeerIds as set entries because set entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerSet } from '@libp2p/peer-collections'\n *\n * const set = peerSet()\n * set.add(peerId)\n * ```\n */\nexport var PeerSet = /*#__PURE__*/function (_Symbol$iterator) {\n  function PeerSet(set) {\n    _classCallCheck(this, PeerSet);\n    this.set = new Set();\n    if (set != null) {\n      var _iterator = _createForOfIteratorHelper(set),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          this.set.add(key.toString());\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n  _createClass(PeerSet, [{\n    key: \"size\",\n    get: function get() {\n      return this.set.size;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this.values();\n    }\n  }, {\n    key: \"add\",\n    value: function add(peer) {\n      this.set.add(peer.toString());\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.set.clear();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(peer) {\n      this.set.delete(peer.toString());\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return mapIterable(this.set.entries(), function (val) {\n        var peerId = peerIdFromString(val[0]);\n        return [peerId, peerId];\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(predicate) {\n      var _this = this;\n      this.set.forEach(function (str) {\n        var id = peerIdFromString(str);\n        predicate(id, id, _this);\n      });\n    }\n  }, {\n    key: \"has\",\n    value: function has(peer) {\n      return this.set.has(peer.toString());\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return mapIterable(this.set.values(), function (val) {\n        return peerIdFromString(val);\n      });\n    }\n  }, {\n    key: \"intersection\",\n    value: function intersection(other) {\n      var output = new PeerSet();\n      var _iterator2 = _createForOfIteratorHelper(other),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var peerId = _step2.value;\n          if (this.has(peerId)) {\n            output.add(peerId);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return output;\n    }\n  }, {\n    key: \"difference\",\n    value: function difference(other) {\n      var output = new PeerSet();\n      var _iterator3 = _createForOfIteratorHelper(this),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var peerId = _step3.value;\n          if (!other.has(peerId)) {\n            output.add(peerId);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return output;\n    }\n  }, {\n    key: \"union\",\n    value: function union(other) {\n      var output = new PeerSet();\n      var _iterator4 = _createForOfIteratorHelper(other),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var peerId = _step4.value;\n          output.add(peerId);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(this),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _peerId = _step5.value;\n          output.add(_peerId);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return output;\n    }\n  }]);\n  return PeerSet;\n}(Symbol.iterator);","map":{"version":3,"names":["peerIdFromString","mapIterable","PeerSet","_Symbol$iterator","set","_classCallCheck","Set","_iterator","_createForOfIteratorHelper","_step","s","n","done","key","value","add","toString","err","e","f","_createClass","get","size","values","peer","clear","_delete","delete","entries","val","peerId","forEach","predicate","_this","str","id","has","intersection","other","output","_iterator2","_step2","difference","_iterator3","_step3","union","_iterator4","_step4","_iterator5","_step5","Symbol","iterator"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/peer-collections/src/set.ts"],"sourcesContent":["import type { PeerId } from '@libp2p/interface-peer-id'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { mapIterable } from './util.js'\n\n/**\n * We can't use PeerIds as set entries because set entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerSet } from '@libp2p/peer-collections'\n *\n * const set = peerSet()\n * set.add(peerId)\n * ```\n */\nexport class PeerSet {\n  private readonly set: Set<string>\n\n  constructor (set?: PeerSet | Iterable<PeerId>) {\n    this.set = new Set()\n\n    if (set != null) {\n      for (const key of set) {\n        this.set.add(key.toString())\n      }\n    }\n  }\n\n  get size (): number {\n    return this.set.size\n  }\n\n  [Symbol.iterator] (): IterableIterator<PeerId> {\n    return this.values()\n  }\n\n  add (peer: PeerId): void {\n    this.set.add(peer.toString())\n  }\n\n  clear (): void {\n    this.set.clear()\n  }\n\n  delete (peer: PeerId): void {\n    this.set.delete(peer.toString())\n  }\n\n  entries (): IterableIterator<[PeerId, PeerId]> {\n    return mapIterable<[string, string], [PeerId, PeerId]>(\n      this.set.entries(),\n      (val) => {\n        const peerId = peerIdFromString(val[0])\n\n        return [peerId, peerId]\n      }\n    )\n  }\n\n  forEach (predicate: (peerId: PeerId, index: PeerId, set: PeerSet) => void): void {\n    this.set.forEach((str) => {\n      const id = peerIdFromString(str)\n\n      predicate(id, id, this)\n    })\n  }\n\n  has (peer: PeerId): boolean {\n    return this.set.has(peer.toString())\n  }\n\n  values (): IterableIterator<PeerId> {\n    return mapIterable<string, PeerId>(\n      this.set.values(),\n      (val) => {\n        return peerIdFromString(val)\n      }\n    )\n  }\n\n  intersection (other: PeerSet): PeerSet {\n    const output = new PeerSet()\n\n    for (const peerId of other) {\n      if (this.has(peerId)) {\n        output.add(peerId)\n      }\n    }\n\n    return output\n  }\n\n  difference (other: PeerSet): PeerSet {\n    const output = new PeerSet()\n\n    for (const peerId of this) {\n      if (!other.has(peerId)) {\n        output.add(peerId)\n      }\n    }\n\n    return output\n  }\n\n  union (other: PeerSet): PeerSet {\n    const output = new PeerSet()\n\n    for (const peerId of other) {\n      output.add(peerId)\n    }\n\n    for (const peerId of this) {\n      output.add(peerId)\n    }\n\n    return output\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js';\nimport { logger } from '@libp2p/logger';\nimport PQueue from 'p-queue';\nvar log = logger('ipfs:preload');\n\n// @ts-expect-error PQueue@6 is broken\nvar Queue = PQueue.default ? PQueue.default : PQueue;\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nvar httpQueue = new Queue({\n  concurrency: 4\n});\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  log(url);\n  return httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var res, reader, _yield$reader$read, done;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return HTTP.post(url, {\n            signal: options.signal\n          });\n        case 2:\n          res = _context.sent;\n          // @ts-expect-error\n          reader = res.body.getReader();\n          _context.prev = 4;\n        case 5:\n          if (!true) {\n            _context.next = 14;\n            break;\n          }\n          _context.next = 8;\n          return reader.read();\n        case 8:\n          _yield$reader$read = _context.sent;\n          done = _yield$reader$read.done;\n          if (!done) {\n            _context.next = 12;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 12:\n          _context.next = 5;\n          break;\n        case 14:\n          _context.prev = 14;\n          reader.releaseLock();\n          return _context.finish(14);\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[4,, 14, 17]]);\n  })));\n}","map":{"version":3,"names":["HTTP","logger","PQueue","log","Queue","default","httpQueue","concurrency","preload","url","options","arguments","length","undefined","add","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","reader","_yield$reader$read","done","wrap","_callee$","_context","prev","next","post","signal","sent","body","getReader","read","abrupt","releaseLock","finish","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core-config/src/preload.browser.js"],"sourcesContent":["/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js'\nimport { logger } from '@libp2p/logger'\nimport PQueue from 'p-queue'\n\nconst log = logger('ipfs:preload')\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-expect-error\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"],"mappings":";;AAAA;;AAEA,OAAOA,IAAI,MAAM,wBAAwB;AACzC,SAASC,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,SAAS;AAE5B,IAAMC,GAAG,GAAGF,MAAM,CAAC,cAAc,CAAC;;AAElC;AACA,IAAMG,KAAK,GAAGF,MAAM,CAACG,OAAO,GAAGH,MAAM,CAACG,OAAO,GAAGH,MAAM;;AAEtD;AACA;AACA,IAAMI,SAAS,GAAG,IAAIF,KAAK,CAAC;EAAEG,WAAW,EAAE;AAAE,CAAC,CAAC;;AAE/C;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAAEC,GAAG,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACxCR,GAAG,CAACM,GAAG,CAAC;EAER,OAAOH,SAAS,CAACQ,GAAG,eAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAC,QAAA;IAAA,IAAAC,GAAA,EAAAC,MAAA,EAAAC,kBAAA,EAAAC,IAAA;IAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OACD3B,IAAI,CAAC4B,IAAI,CAACnB,GAAG,EAAE;YAAEoB,MAAM,EAAEnB,OAAO,CAACmB;UAAO,CAAC,CAAC;QAAA;UAAtDV,GAAG,GAAAM,QAAA,CAAAK,IAAA;UAET;UACMV,MAAM,GAAGD,GAAG,CAACY,IAAI,CAACC,SAAS,CAAC,CAAC;UAAAP,QAAA,CAAAC,IAAA;QAAA;UAAA,KAG1B,IAAI;YAAAD,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OACcP,MAAM,CAACa,IAAI,CAAC,CAAC;QAAA;UAAAZ,kBAAA,GAAAI,QAAA,CAAAK,IAAA;UAA5BR,IAAI,GAAAD,kBAAA,CAAJC,IAAI;UAAA,KACRA,IAAI;YAAAG,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAS,MAAA;QAAA;UAAAT,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAIVN,MAAM,CAACe,WAAW,CAAC,CAAC;UAAA,OAAAV,QAAA,CAAAW,MAAA;QAAA;QAAA;UAAA,OAAAX,QAAA,CAAAY,IAAA;MAAA;IAAA,GAAAnB,OAAA;EAAA,CAEvB,GAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
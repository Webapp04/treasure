{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport 'node-forge/lib/x509.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nvar pki = forge.pki;\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n */\nexport var certificateForKey = function certificateForKey(key, privateKey) {\n  var publicKey = pki.rsa.setPublicKey(privateKey.n, privateKey.e);\n  var cert = pki.createCertificate();\n  cert.publicKey = publicKey;\n  cert.serialNumber = '01';\n  cert.validity.notBefore = new Date();\n  cert.validity.notAfter = new Date();\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n  var attrs = [{\n    name: 'organizationName',\n    value: 'ipfs'\n  }, {\n    shortName: 'OU',\n    value: 'keystore'\n  }, {\n    name: 'commonName',\n    value: key.id\n  }];\n  cert.setSubject(attrs);\n  cert.setIssuer(attrs);\n  cert.setExtensions([{\n    name: 'basicConstraints',\n    cA: true\n  }, {\n    name: 'keyUsage',\n    keyCertSign: true,\n    digitalSignature: true,\n    nonRepudiation: true,\n    keyEncipherment: true,\n    dataEncipherment: true\n  }, {\n    name: 'extKeyUsage',\n    serverAuth: true,\n    clientAuth: true,\n    codeSigning: true,\n    emailProtection: true,\n    timeStamping: true\n  }, {\n    name: 'nsCertType',\n    client: true,\n    server: true,\n    email: true,\n    objsign: true,\n    sslCA: true,\n    emailCA: true,\n    objCA: true\n  }]);\n  // self-sign certificate\n  cert.sign(privateKey);\n  return cert;\n};\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\nexport function findAsync(_x, _x2) {\n  return _findAsync.apply(this, arguments);\n}\nfunction _findAsync() {\n  _findAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(array, asyncCompare) {\n    var promises, results, index;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          promises = array.map(asyncCompare);\n          _context.next = 3;\n          return Promise.all(promises);\n        case 3:\n          results = _context.sent;\n          index = results.findIndex(function (result) {\n            return result;\n          });\n          return _context.abrupt(\"return\", array[index]);\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _findAsync.apply(this, arguments);\n}","map":{"version":3,"names":["forge","pki","certificateForKey","key","privateKey","publicKey","rsa","setPublicKey","n","e","cert","createCertificate","serialNumber","validity","notBefore","Date","notAfter","setFullYear","getFullYear","attrs","name","value","shortName","id","setSubject","setIssuer","setExtensions","cA","keyCertSign","digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","serverAuth","clientAuth","codeSigning","emailProtection","timeStamping","client","server","email","objsign","sslCA","emailCA","objCA","sign","findAsync","_x","_x2","_findAsync","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","array","asyncCompare","promises","results","index","wrap","_callee$","_context","prev","next","map","Promise","all","sent","findIndex","result","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/keychain/util.ts"],"sourcesContent":["import 'node-forge/lib/x509.js'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\n\nconst pki = forge.pki\n\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n */\nexport const certificateForKey = (key: any, privateKey: forge.pki.rsa.PrivateKey) => {\n  const publicKey = pki.rsa.setPublicKey(privateKey.n, privateKey.e)\n  const cert = pki.createCertificate()\n  cert.publicKey = publicKey\n  cert.serialNumber = '01'\n  cert.validity.notBefore = new Date()\n  cert.validity.notAfter = new Date()\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10) // eslint-disable-line @typescript-eslint/restrict-plus-operands\n  const attrs = [{\n    name: 'organizationName',\n    value: 'ipfs'\n  }, {\n    shortName: 'OU',\n    value: 'keystore'\n  }, {\n    name: 'commonName',\n    value: key.id\n  }]\n  cert.setSubject(attrs)\n  cert.setIssuer(attrs)\n  cert.setExtensions([{\n    name: 'basicConstraints',\n    cA: true\n  }, {\n    name: 'keyUsage',\n    keyCertSign: true,\n    digitalSignature: true,\n    nonRepudiation: true,\n    keyEncipherment: true,\n    dataEncipherment: true\n  }, {\n    name: 'extKeyUsage',\n    serverAuth: true,\n    clientAuth: true,\n    codeSigning: true,\n    emailProtection: true,\n    timeStamping: true\n  }, {\n    name: 'nsCertType',\n    client: true,\n    server: true,\n    email: true,\n    objsign: true,\n    sslCA: true,\n    emailCA: true,\n    objCA: true\n  }])\n  // self-sign certificate\n  cert.sign(privateKey)\n\n  return cert\n}\n\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\nexport async function findAsync <T> (array: T[], asyncCompare: (val: T) => Promise<any>) {\n  const promises = array.map(asyncCompare)\n  const results = await Promise.all(promises)\n  const index = results.findIndex(result => result)\n  return array[index]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport batch from 'it-batch';\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').InProgressImportResult} InProgressImportResult\n * @typedef {import('../../types').TrickleDagNode} TrickleDagNode\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nfunction trickleStream(_x, _x2, _x3) {\n  return _trickleStream.apply(this, arguments);\n}\nfunction _trickleStream() {\n  _trickleStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(source, reduce, options) {\n    var root, iteration, maxDepth, subTree, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, layer;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          root = new Root(options.layerRepeat);\n          iteration = 0;\n          maxDepth = 1;\n          /** @type {SubTree} */\n          subTree = root;\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context2.prev = 6;\n          _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode));\n        case 8:\n          _context2.next = 10;\n          return _iterator.next();\n        case 10:\n          if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n            _context2.next = 26;\n            break;\n          }\n          layer = _step.value;\n          if (!subTree.isFull()) {\n            _context2.next = 22;\n            break;\n          }\n          if (!(subTree !== root)) {\n            _context2.next = 19;\n            break;\n          }\n          _context2.t0 = root;\n          _context2.next = 17;\n          return subTree.reduce(reduce);\n        case 17:\n          _context2.t1 = _context2.sent;\n          _context2.t0.addChild.call(_context2.t0, _context2.t1);\n        case 19:\n          if (iteration && iteration % options.layerRepeat === 0) {\n            maxDepth++;\n          }\n          subTree = new SubTree(maxDepth, options.layerRepeat, iteration);\n          iteration++;\n        case 22:\n          subTree.append(layer);\n        case 23:\n          _iteratorAbruptCompletion = false;\n          _context2.next = 8;\n          break;\n        case 26:\n          _context2.next = 32;\n          break;\n        case 28:\n          _context2.prev = 28;\n          _context2.t2 = _context2[\"catch\"](6);\n          _didIteratorError = true;\n          _iteratorError = _context2.t2;\n        case 32:\n          _context2.prev = 32;\n          _context2.prev = 33;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context2.next = 37;\n            break;\n          }\n          _context2.next = 37;\n          return _iterator.return();\n        case 37:\n          _context2.prev = 37;\n          if (!_didIteratorError) {\n            _context2.next = 40;\n            break;\n          }\n          throw _iteratorError;\n        case 40:\n          return _context2.finish(37);\n        case 41:\n          return _context2.finish(32);\n        case 42:\n          if (!(subTree && subTree !== root)) {\n            _context2.next = 48;\n            break;\n          }\n          _context2.t3 = root;\n          _context2.next = 46;\n          return subTree.reduce(reduce);\n        case 46:\n          _context2.t4 = _context2.sent;\n          _context2.t3.addChild.call(_context2.t3, _context2.t4);\n        case 48:\n          return _context2.abrupt(\"return\", root.reduce(reduce));\n        case 49:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[6, 28, 32, 42], [33,, 37, 41]]);\n  }));\n  return _trickleStream.apply(this, arguments);\n}\nexport default trickleStream;\nvar SubTree = /*#__PURE__*/function () {\n  /**\n   * @param {number} maxDepth\n   * @param {number} layerRepeat\n   * @param {number} [iteration=0]\n   */\n  function SubTree(maxDepth, layerRepeat) {\n    var iteration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    _classCallCheck(this, SubTree);\n    this.maxDepth = maxDepth;\n    this.layerRepeat = layerRepeat;\n    this.currentDepth = 1;\n    this.iteration = iteration;\n\n    /** @type {TrickleDagNode} */\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth: maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    };\n  }\n  _createClass(SubTree, [{\n    key: \"isFull\",\n    value: function isFull() {\n      if (!this.root.data) {\n        return false;\n      }\n      if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n        // can descend\n        this._addNextNodeToParent(this.node);\n        return false;\n      }\n\n      // try to find new node from node.parent\n      var distantRelative = this._findParent(this.node, this.currentDepth);\n      if (distantRelative) {\n        this._addNextNodeToParent(distantRelative);\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * @param {TrickleDagNode} parent\n     */\n  }, {\n    key: \"_addNextNodeToParent\",\n    value: function _addNextNodeToParent(parent) {\n      this.parent = parent;\n\n      // find site for new node\n      var nextNode = {\n        children: [],\n        depth: parent.depth + 1,\n        parent: parent,\n        maxDepth: this.maxDepth,\n        maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n      };\n\n      // @ts-ignore\n      parent.children.push(nextNode);\n      this.currentDepth = nextNode.depth;\n      this.node = nextNode;\n    }\n\n    /**\n     *\n     * @param {InProgressImportResult[]} layer\n     */\n  }, {\n    key: \"append\",\n    value: function append(layer) {\n      this.node.data = layer;\n    }\n\n    /**\n     * @param {Reducer} reduce\n     */\n  }, {\n    key: \"reduce\",\n    value: function reduce(_reduce) {\n      return this._reduce(this.root, _reduce);\n    }\n\n    /**\n     * @param {TrickleDagNode} node\n     * @param {Reducer} reduce\n     * @returns {Promise<InProgressImportResult>}\n     */\n  }, {\n    key: \"_reduce\",\n    value: function () {\n      var _reduce2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(node, reduce) {\n        var _this = this;\n        var children;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              /** @type {InProgressImportResult[]} */\n              children = [];\n              if (!node.children.length) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 4;\n              return Promise.all(node.children\n              // @ts-ignore\n              .filter(function (child) {\n                return child.data;\n              })\n              // @ts-ignore\n              .map(function (child) {\n                return _this._reduce(child, reduce);\n              }));\n            case 4:\n              children = _context.sent;\n            case 5:\n              return _context.abrupt(\"return\", reduce((node.data || []).concat(children)));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function _reduce(_x4, _x5) {\n        return _reduce2.apply(this, arguments);\n      }\n      return _reduce;\n    }()\n    /**\n     * @param {TrickleDagNode} node\n     * @param {number} depth\n     * @returns {TrickleDagNode | undefined}\n     */\n  }, {\n    key: \"_findParent\",\n    value: function _findParent(node, depth) {\n      var parent = node.parent;\n      if (!parent || parent.depth === 0) {\n        return;\n      }\n      if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n        // this layer is full, may be able to traverse to a different branch\n        return this._findParent(parent, depth);\n      }\n      return parent;\n    }\n  }]);\n  return SubTree;\n}();\nvar Root = /*#__PURE__*/function (_SubTree) {\n  _inherits(Root, _SubTree);\n  var _super = _createSuper(Root);\n  /**\n   * @param {number} layerRepeat\n   */\n  function Root(layerRepeat) {\n    var _this2;\n    _classCallCheck(this, Root);\n    _this2 = _super.call(this, 0, layerRepeat);\n    _this2.root.depth = 0;\n    _this2.currentDepth = 1;\n    return _this2;\n  }\n\n  /**\n   * @param {InProgressImportResult} child\n   */\n  _createClass(Root, [{\n    key: \"addChild\",\n    value: function addChild(child) {\n      this.root.children.push(child);\n    }\n\n    /**\n     * @param {Reducer} reduce\n     */\n  }, {\n    key: \"reduce\",\n    value: function reduce(_reduce3) {\n      return _reduce3((this.root.data || []).concat(this.root.children));\n    }\n  }]);\n  return Root;\n}(SubTree);","map":{"version":3,"names":["batch","trickleStream","_x","_x2","_x3","_trickleStream","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","source","reduce","options","root","iteration","maxDepth","subTree","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","layer","wrap","_callee2$","_context2","prev","next","Root","layerRepeat","_asyncIterator","maxChildrenPerNode","sent","done","value","isFull","t0","t1","addChild","call","SubTree","append","t2","return","finish","t3","t4","abrupt","stop","length","undefined","_classCallCheck","currentDepth","node","parent","children","depth","maxChildren","_createClass","key","data","_addNextNodeToParent","distantRelative","_findParent","nextNode","Math","floor","push","_reduce","_reduce2","_callee","_this","_callee$","_context","Promise","all","filter","child","map","concat","_x4","_x5","_SubTree","_inherits","_super","_createSuper","_this2"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-importer/src/dag-builder/file/trickle.js"],"sourcesContent":["import batch from 'it-batch'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').InProgressImportResult} InProgressImportResult\n * @typedef {import('../../types').TrickleDagNode} TrickleDagNode\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function trickleStream (source, reduce, options) {\n  const root = new Root(options.layerRepeat)\n  let iteration = 0\n  let maxDepth = 1\n\n  /** @type {SubTree} */\n  let subTree = root\n\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce))\n      }\n\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++\n      }\n\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration)\n\n      iteration++\n    }\n\n    subTree.append(layer)\n  }\n\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce))\n  }\n\n  return root.reduce(reduce)\n}\n\nexport default trickleStream\n\nclass SubTree {\n  /**\n   * @param {number} maxDepth\n   * @param {number} layerRepeat\n   * @param {number} [iteration=0]\n   */\n  constructor (maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth\n    this.layerRepeat = layerRepeat\n    this.currentDepth = 1\n    this.iteration = iteration\n\n    /** @type {TrickleDagNode} */\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    }\n  }\n\n  isFull () {\n    if (!this.root.data) {\n      return false\n    }\n\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      // can descend\n      this._addNextNodeToParent(this.node)\n\n      return false\n    }\n\n    // try to find new node from node.parent\n    const distantRelative = this._findParent(this.node, this.currentDepth)\n\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative)\n\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * @param {TrickleDagNode} parent\n   */\n  _addNextNodeToParent (parent) {\n    this.parent = parent\n\n    // find site for new node\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    }\n\n    // @ts-ignore\n    parent.children.push(nextNode)\n\n    this.currentDepth = nextNode.depth\n    this.node = nextNode\n  }\n\n  /**\n   *\n   * @param {InProgressImportResult[]} layer\n   */\n  append (layer) {\n    this.node.data = layer\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return this._reduce(this.root, reduce)\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {Reducer} reduce\n   * @returns {Promise<InProgressImportResult>}\n   */\n  async _reduce (node, reduce) {\n    /** @type {InProgressImportResult[]} */\n    let children = []\n\n    if (node.children.length) {\n      children = await Promise.all(\n        node.children\n          // @ts-ignore\n          .filter(child => child.data)\n          // @ts-ignore\n          .map(child => this._reduce(child, reduce))\n      )\n    }\n\n    return reduce((node.data || []).concat(children))\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {number} depth\n   * @returns {TrickleDagNode | undefined}\n   */\n  _findParent (node, depth) {\n    const parent = node.parent\n\n    if (!parent || parent.depth === 0) {\n      return\n    }\n\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      // this layer is full, may be able to traverse to a different branch\n      return this._findParent(parent, depth)\n    }\n\n    return parent\n  }\n}\n\nclass Root extends SubTree {\n  /**\n   * @param {number} layerRepeat\n   */\n  constructor (layerRepeat) {\n    super(0, layerRepeat)\n\n    this.root.depth = 0\n    this.currentDepth = 1\n  }\n\n  /**\n   * @param {InProgressImportResult} child\n   */\n  addChild (child) {\n    this.root.children.push(child)\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return reduce((this.root.data || []).concat(this.root.children))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
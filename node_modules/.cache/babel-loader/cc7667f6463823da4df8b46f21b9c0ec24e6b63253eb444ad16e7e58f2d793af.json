{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\n\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\nfunction bufferImporter(_x, _x2, _x3) {\n  return _bufferImporter.apply(this, arguments);\n}\nfunction _bufferImporter() {\n  _bufferImporter = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(file, block, options) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context3.prev = 2;\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var buffer;\n            return _regeneratorRuntime().wrap(function _loop$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  buffer = _step.value;\n                  _context2.next = 3;\n                  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                    var unixfs, opts;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          options.progress(buffer.length, file.path);\n                          /** @type {import('../../types').PersistOptions} */\n                          opts = {\n                            codec: dagPb,\n                            cidVersion: options.cidVersion,\n                            hasher: options.hasher,\n                            onlyHash: options.onlyHash\n                          };\n                          if (options.rawLeaves) {\n                            opts.codec = raw;\n                            opts.cidVersion = 1;\n                          } else {\n                            unixfs = new UnixFS({\n                              type: options.leafType,\n                              data: buffer\n                            });\n                            buffer = dagPb.encode({\n                              Data: unixfs.marshal(),\n                              Links: []\n                            });\n                          }\n                          _context.next = 5;\n                          return persist(buffer, block, opts);\n                        case 5:\n                          _context.t0 = _context.sent;\n                          _context.t1 = unixfs;\n                          _context.t2 = buffer.length;\n                          return _context.abrupt(\"return\", {\n                            cid: _context.t0,\n                            unixfs: _context.t1,\n                            size: _context.t2\n                          });\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee);\n                  }));\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _loop);\n          });\n          _iterator = _asyncIterator(file.content);\n        case 5:\n          _context3.next = 7;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 7:\n          if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n            _context3.next = 12;\n            break;\n          }\n          return _context3.delegateYield(_loop(), \"t0\", 9);\n        case 9:\n          _iteratorAbruptCompletion = false;\n          _context3.next = 5;\n          break;\n        case 12:\n          _context3.next = 18;\n          break;\n        case 14:\n          _context3.prev = 14;\n          _context3.t1 = _context3[\"catch\"](2);\n          _didIteratorError = true;\n          _iteratorError = _context3.t1;\n        case 18:\n          _context3.prev = 18;\n          _context3.prev = 19;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context3.next = 23;\n            break;\n          }\n          _context3.next = 23;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 23:\n          _context3.prev = 23;\n          if (!_didIteratorError) {\n            _context3.next = 26;\n            break;\n          }\n          throw _iteratorError;\n        case 26:\n          return _context3.finish(23);\n        case 27:\n          return _context3.finish(18);\n        case 28:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee2, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n  return _bufferImporter.apply(this, arguments);\n}\nexport default bufferImporter;","map":{"version":3,"names":["UnixFS","persist","dagPb","raw","bufferImporter","_x","_x2","_x3","_bufferImporter","apply","arguments","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee2","file","block","options","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","wrap","_callee2$","_context3","prev","next","buffer","_loop$","_context2","value","_asyncToGenerator","_callee","unixfs","opts","_callee$","_context","progress","length","path","codec","cidVersion","hasher","onlyHash","rawLeaves","type","leafType","data","encode","Data","marshal","Links","t0","sent","t1","t2","abrupt","cid","size","stop","_asyncIterator","content","_awaitAsyncGenerator","done","delegateYield","return","finish"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-importer/src/dag-builder/file/buffer-importer.js"],"sourcesContent":["import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\n\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\nasync function * bufferImporter (file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path)\n      let unixfs\n\n      /** @type {import('../../types').PersistOptions} */\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      }\n\n      if (options.rawLeaves) {\n        opts.codec = raw\n        opts.cidVersion = 1\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        })\n\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        })\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      }\n    }\n  }\n}\n\nexport default bufferImporter\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
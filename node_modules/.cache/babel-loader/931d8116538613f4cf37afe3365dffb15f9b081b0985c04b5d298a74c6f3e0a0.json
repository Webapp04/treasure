{"ast":null,"code":"import _regeneratorRuntime from\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _createForOfIteratorHelper from\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _asyncToGenerator from\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import AirdropApi from\"api/AirdropApi\";import{ALERT_STATUS_FAILURE,ALERT_STATUS_SUCCESS,UPGRADE_KEY_ALERT}from\"constant/alert\";import useHandleToken from\"hooks/token/useHandleToken\";import{useDispatch,useSelector}from\"react-redux\";import ACTIONS from\"redux/action\";import{selectNftSelected}from\"redux/slice/nftSlice\";import{selectUser}from\"redux/slice/userSlice\";import useLoadNFTBalance from\"./useLoadNFTBalance\";import{useContractNFKeyWithSigner}from\"hooks/blockchain/useHandleContracts\";export default function useBulkUpgradeKeys(){var dispatch=useDispatch();var user=useSelector(selectUser);var nftSelected=useSelector(selectNftSelected);var handleToken=useHandleToken();var handleLoadNFTBalance=useLoadNFTBalance();var handleContractNFKeyWithSigner=useContractNFKeyWithSigner();var bulkUpgradeKeys=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tokenList,amountSMRTR){var contractNFKeyWithSigner;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return handleContractNFKeyWithSigner;case 2:contractNFKeyWithSigner=_context2.sent;return _context2.abrupt(\"return\",contractNFKeyWithSigner.bulkUpgradeKeys(tokenList).then(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(tx){var _iterator,_step,tokenItem;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return new AirdropApi().logger({wallet_id:user===null||user===void 0?void 0:user.wallet_id,type:\"PENDING\",action:\"bulk upgradeKey\",description:\"Bulk Upgraded\",tx:JSON.stringify(tx)});case 2:_context.next=4;return tx.wait();case 4:_context.next=6;return handleToken.getcheckTxEvent(tx===null||tx===void 0?void 0:tx.hash,\"BulkUpgraded\");case 6:_context.next=8;return handleLoadNFTBalance.loadNFTBalance(user===null||user===void 0?void 0:user.wallet_id);case 8:_iterator=_createForOfIteratorHelper(tokenList);try{for(_iterator.s();!(_step=_iterator.n()).done;){tokenItem=_step.value;ACTIONS.SET_ALERT(dispatch,true,ALERT_STATUS_SUCCESS,UPGRADE_KEY_ALERT(tokenItem,true));}}catch(err){_iterator.e(err);}finally{_iterator.f();}return _context.abrupt(\"return\",true);case 11:case\"end\":return _context.stop();}},_callee);}));return function(_x3){return _ref2.apply(this,arguments);};}()).catch(function(err){new AirdropApi().logger({wallet_id:user===null||user===void 0?void 0:user.wallet_id,type:\"ERROR\",action:\"upgradeKey\",error:JSON.stringify(err)});ACTIONS.SET_ALERT(dispatch,true,ALERT_STATUS_FAILURE,UPGRADE_KEY_ALERT(nftSelected===null||nftSelected===void 0?void 0:nftSelected.tokenId,false));return null;}));case 4:case\"end\":return _context2.stop();}},_callee2);}));return function bulkUpgradeKeys(_x,_x2){return _ref.apply(this,arguments);};}();return{bulkUpgradeKeys:bulkUpgradeKeys};}","map":{"version":3,"names":["AirdropApi","ALERT_STATUS_FAILURE","ALERT_STATUS_SUCCESS","UPGRADE_KEY_ALERT","useHandleToken","useDispatch","useSelector","ACTIONS","selectNftSelected","selectUser","useLoadNFTBalance","useContractNFKeyWithSigner","useBulkUpgradeKeys","dispatch","user","nftSelected","handleToken","handleLoadNFTBalance","handleContractNFKeyWithSigner","bulkUpgradeKeys","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","tokenList","amountSMRTR","contractNFKeyWithSigner","wrap","_callee2$","_context2","prev","next","sent","abrupt","then","_ref2","_callee","tx","_iterator","_step","tokenItem","_callee$","_context","logger","wallet_id","type","action","description","JSON","stringify","wait","getcheckTxEvent","hash","loadNFTBalance","_createForOfIteratorHelper","s","n","done","value","SET_ALERT","err","e","f","stop","_x3","apply","arguments","catch","error","tokenId","_x","_x2"],"sources":["/Users/apple/Documents/treasure/src/hooks/nft/useBulkUpgradeKeys.js"],"sourcesContent":["import AirdropApi from \"api/AirdropApi\";\nimport {\n  ALERT_STATUS_FAILURE,\n  ALERT_STATUS_SUCCESS,\n  UPGRADE_KEY_ALERT,\n} from \"constant/alert\";\nimport useHandleToken from \"hooks/token/useHandleToken\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ACTIONS from \"redux/action\";\nimport { selectNftSelected } from \"redux/slice/nftSlice\";\nimport { selectUser } from \"redux/slice/userSlice\";\nimport useLoadNFTBalance from \"./useLoadNFTBalance\";\nimport { useContractNFKeyWithSigner } from \"hooks/blockchain/useHandleContracts\";\n\nexport default function useBulkUpgradeKeys() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const nftSelected = useSelector(selectNftSelected);\n  const handleToken = useHandleToken();\n  const handleLoadNFTBalance = useLoadNFTBalance();\n  const handleContractNFKeyWithSigner = useContractNFKeyWithSigner();\n\n  const bulkUpgradeKeys = async (tokenList, amountSMRTR) => {\n    // const isApprove = await approveSMRTRByAmount(amountSMRTR);\n    // if (!isApprove) return null;\n    const contractNFKeyWithSigner = await handleContractNFKeyWithSigner;\n    return contractNFKeyWithSigner\n      .bulkUpgradeKeys(tokenList)\n      .then(async (tx) => {\n        await new AirdropApi().logger({\n          wallet_id: user?.wallet_id,\n          type: \"PENDING\",\n          action: \"bulk upgradeKey\",\n          description: \"Bulk Upgraded\",\n          tx: JSON.stringify(tx),\n        });\n        await tx.wait();\n        await handleToken.getcheckTxEvent(tx?.hash, \"BulkUpgraded\");\n        await handleLoadNFTBalance.loadNFTBalance(user?.wallet_id);\n        for (const tokenItem of tokenList) {\n          ACTIONS.SET_ALERT(\n            dispatch,\n            true,\n            ALERT_STATUS_SUCCESS,\n            UPGRADE_KEY_ALERT(tokenItem, true)\n          );\n        }\n        return true;\n      })\n      .catch((err) => {\n        new AirdropApi().logger({\n          wallet_id: user?.wallet_id,\n          type: \"ERROR\",\n          action: \"upgradeKey\",\n          error: JSON.stringify(err),\n        });\n        ACTIONS.SET_ALERT(\n          dispatch,\n          true,\n          ALERT_STATUS_FAILURE,\n          UPGRADE_KEY_ALERT(nftSelected?.tokenId, false)\n        );\n        return null;\n      });\n  };\n  return { bulkUpgradeKeys };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
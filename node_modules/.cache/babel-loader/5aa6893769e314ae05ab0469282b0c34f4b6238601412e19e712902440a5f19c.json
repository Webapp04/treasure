{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport { randomBytes } from '@libp2p/crypto';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION } from './constants.js';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nvar log = logger('libp2p:ping');\nexport var PingService = /*#__PURE__*/function () {\n  function PingService(components, init) {\n    _classCallCheck(this, PingService);\n    this.components = components;\n    this.started = false;\n    this.protocol = \"/\".concat(init.protocolPrefix, \"/\").concat(PROTOCOL_NAME, \"/\").concat(PROTOCOL_VERSION);\n    this.init = init;\n  }\n  _createClass(PingService, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.components.getRegistrar().handle(this.protocol, this.handleMessage, {\n                maxInboundStreams: this.init.maxInboundStreams,\n                maxOutboundStreams: this.init.maxOutboundStreams\n              });\n            case 2:\n              this.started = true;\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.components.getRegistrar().unhandle(this.protocol);\n            case 2:\n              this.started = false;\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n    /**\n     * A handler to register with Libp2p to process ping messages\n     */\n  }, {\n    key: \"handleMessage\",\n    value: function handleMessage(data) {\n      var stream = data.stream;\n      void pipe(stream, stream).catch(function (err) {\n        log.error(err);\n      });\n    }\n    /**\n     * Ping a given peer and wait for its response, getting the operation latency.\n     *\n     * @param {PeerId|Multiaddr} peer\n     * @returns {Promise<number>}\n     */\n  }, {\n    key: \"ping\",\n    value: function () {\n      var _ping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(peer) {\n        var options,\n          start,\n          data,\n          connection,\n          timeoutController,\n          signal,\n          stream,\n          source,\n          result,\n          end,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              log('dialing %s to %p', this.protocol, peer);\n              start = Date.now();\n              data = randomBytes(PING_LENGTH);\n              _context4.next = 6;\n              return this.components.getConnectionManager().openConnection(peer, options);\n            case 6:\n              connection = _context4.sent;\n              signal = options.signal;\n              // create a timeout if no abort signal passed\n              if (signal == null) {\n                timeoutController = new TimeoutController(this.init.timeout);\n                signal = timeoutController.signal;\n                try {\n                  // fails on node < 15.4\n                  setMaxListeners === null || setMaxListeners === void 0 ? void 0 : setMaxListeners(Infinity, timeoutController.signal);\n                } catch (_unused) {}\n              }\n              _context4.prev = 9;\n              _context4.next = 12;\n              return connection.newStream([this.protocol], {\n                signal: signal\n              });\n            case 12:\n              stream = _context4.sent;\n              // make stream abortable\n              source = abortableDuplex(stream, signal);\n              _context4.next = 16;\n              return pipe([data], source, /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(source) {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.next = 2;\n                        return first(source);\n                      case 2:\n                        return _context3.abrupt(\"return\", _context3.sent);\n                      case 3:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3);\n                }));\n                return function (_x2) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            case 16:\n              result = _context4.sent;\n              end = Date.now();\n              if (!(result == null || !uint8ArrayEquals(data, result.subarray()))) {\n                _context4.next = 20;\n                break;\n              }\n              throw errCode(new Error('Received wrong ping ack'), codes.ERR_WRONG_PING_ACK);\n            case 20:\n              return _context4.abrupt(\"return\", end - start);\n            case 21:\n              _context4.prev = 21;\n              if (timeoutController != null) {\n                timeoutController.clear();\n              }\n              if (stream != null) {\n                stream.close();\n              }\n              return _context4.finish(21);\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[9,, 21, 25]]);\n      }));\n      function ping(_x) {\n        return _ping.apply(this, arguments);\n      }\n      return ping;\n    }()\n  }]);\n  return PingService;\n}();","map":{"version":3,"names":["logger","errCode","codes","randomBytes","pipe","first","equals","uint8ArrayEquals","PROTOCOL_NAME","PING_LENGTH","PROTOCOL_VERSION","abortableDuplex","TimeoutController","setMaxListeners","log","PingService","components","init","_classCallCheck","started","protocol","concat","protocolPrefix","_createClass","key","value","_start","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","getRegistrar","handle","handleMessage","maxInboundStreams","maxOutboundStreams","stop","start","apply","arguments","_stop","_callee2","_callee2$","_context2","unhandle","isStarted","data","stream","catch","err","error","_ping","_callee4","peer","options","connection","timeoutController","signal","source","result","end","_args4","_callee4$","_context4","length","undefined","Date","now","getConnectionManager","openConnection","sent","timeout","Infinity","_unused","newStream","_ref","_callee3","_callee3$","_context3","abrupt","_x2","subarray","Error","ERR_WRONG_PING_ACK","clear","close","finish","ping","_x"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/ping/index.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { codes } from '../errors.js'\nimport { randomBytes } from '@libp2p/crypto'\nimport { pipe } from 'it-pipe'\nimport first from 'it-first'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION } from './constants.js'\nimport type { IncomingStreamData } from '@libp2p/interface-registrar'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { Components } from '@libp2p/components'\nimport type { AbortOptions } from '@libp2p/interfaces'\nimport { abortableDuplex } from 'abortable-iterator'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport type { Stream } from '@libp2p/interface-connection'\nimport { setMaxListeners } from 'events'\n\nconst log = logger('libp2p:ping')\n\nexport interface PingServiceInit {\n  protocolPrefix: string\n  maxInboundStreams: number\n  maxOutboundStreams: number\n\n  /**\n   * How long we should wait for a ping response\n   */\n  timeout: number\n}\n\nexport class PingService implements Startable {\n  public readonly protocol: string\n  private readonly components: Components\n  private started: boolean\n  private readonly init: PingServiceInit\n\n  constructor (components: Components, init: PingServiceInit) {\n    this.components = components\n    this.started = false\n    this.protocol = `/${init.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n    this.init = init\n  }\n\n  async start () {\n    await this.components.getRegistrar().handle(this.protocol, this.handleMessage, {\n      maxInboundStreams: this.init.maxInboundStreams,\n      maxOutboundStreams: this.init.maxOutboundStreams\n    })\n    this.started = true\n  }\n\n  async stop () {\n    await this.components.getRegistrar().unhandle(this.protocol)\n    this.started = false\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  /**\n   * A handler to register with Libp2p to process ping messages\n   */\n  handleMessage (data: IncomingStreamData) {\n    const { stream } = data\n\n    void pipe(stream, stream)\n      .catch(err => {\n        log.error(err)\n      })\n  }\n\n  /**\n   * Ping a given peer and wait for its response, getting the operation latency.\n   *\n   * @param {PeerId|Multiaddr} peer\n   * @returns {Promise<number>}\n   */\n  async ping (peer: PeerId, options: AbortOptions = {}): Promise<number> {\n    log('dialing %s to %p', this.protocol, peer)\n\n    const start = Date.now()\n    const data = randomBytes(PING_LENGTH)\n    const connection = await this.components.getConnectionManager().openConnection(peer, options)\n    let timeoutController\n    let signal = options.signal\n    let stream: Stream | undefined\n\n    // create a timeout if no abort signal passed\n    if (signal == null) {\n      timeoutController = new TimeoutController(this.init.timeout)\n      signal = timeoutController.signal\n\n      try {\n        // fails on node < 15.4\n        setMaxListeners?.(Infinity, timeoutController.signal)\n      } catch {}\n    }\n\n    try {\n      stream = await connection.newStream([this.protocol], {\n        signal\n      })\n\n      // make stream abortable\n      const source = abortableDuplex(stream, signal)\n\n      const result = await pipe(\n        [data],\n        source,\n        async (source) => await first(source)\n      )\n      const end = Date.now()\n\n      if (result == null || !uint8ArrayEquals(data, result.subarray())) {\n        throw errCode(new Error('Received wrong ping ack'), codes.ERR_WRONG_PING_ACK)\n      }\n\n      return end - start\n    } finally {\n      if (timeoutController != null) {\n        timeoutController.clear()\n      }\n\n      if (stream != null) {\n        stream.close()\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
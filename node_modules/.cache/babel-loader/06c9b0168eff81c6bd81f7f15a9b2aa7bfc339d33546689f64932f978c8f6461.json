{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { randomBytes } from '@libp2p/crypto';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { codes } from './errors.js';\nimport errcode from 'err-code';\n/**\n * Generate a random sequence number\n */\nexport function randomSeqno() {\n  return BigInt(\"0x\".concat(uint8ArrayToString(randomBytes(8), 'base16')));\n}\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport var msgId = function msgId(key, seqno) {\n  var seqnoBytes = uint8ArrayFromString(seqno.toString(16).padStart(16, '0'), 'base16');\n  var msgId = new Uint8Array(key.length + seqnoBytes.length);\n  msgId.set(key, 0);\n  msgId.set(seqnoBytes, key.length);\n  return msgId;\n};\n/**\n * Generate a message id, based on message `data`\n */\nexport var noSignMsgId = function noSignMsgId(data) {\n  return sha256.encode(data);\n};\n/**\n * Check if any member of the first set is also a member\n * of the second set\n */\nexport var anyMatch = function anyMatch(a, b) {\n  var bHas;\n  if (Array.isArray(b)) {\n    bHas = function bHas(val) {\n      return b.includes(val);\n    };\n  } else {\n    bHas = function bHas(val) {\n      return b.has(val);\n    };\n  }\n  var _iterator = _createForOfIteratorHelper(a),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var val = _step.value;\n      if (bHas(val)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return false;\n};\n/**\n * Make everything an array\n */\nexport var ensureArray = function ensureArray(maybeArray) {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray];\n  }\n  return maybeArray;\n};\nexport var toMessage = function toMessage(message) {\n  var _message$topic2, _message$data2;\n  if (message.from == null) {\n    throw errcode(new Error('RPC message was missing from'), codes.ERR_MISSING_FROM);\n  }\n  if (message.sequenceNumber == null || message.from == null || message.signature == null || message.key == null) {\n    var _message$topic, _message$data;\n    return {\n      type: 'unsigned',\n      topic: (_message$topic = message.topic) !== null && _message$topic !== void 0 ? _message$topic : '',\n      data: (_message$data = message.data) !== null && _message$data !== void 0 ? _message$data : new Uint8Array(0)\n    };\n  }\n  return {\n    type: 'signed',\n    from: peerIdFromBytes(message.from),\n    topic: (_message$topic2 = message.topic) !== null && _message$topic2 !== void 0 ? _message$topic2 : '',\n    sequenceNumber: bigIntFromBytes(message.sequenceNumber),\n    data: (_message$data2 = message.data) !== null && _message$data2 !== void 0 ? _message$data2 : new Uint8Array(0),\n    signature: message.signature,\n    key: message.key\n  };\n};\nexport var toRpcMessage = function toRpcMessage(message) {\n  if (message.type === 'signed') {\n    return {\n      from: message.from.multihash.bytes,\n      data: message.data,\n      sequenceNumber: bigIntToBytes(message.sequenceNumber),\n      topic: message.topic,\n      signature: message.signature,\n      key: message.key\n    };\n  }\n  return {\n    data: message.data,\n    topic: message.topic\n  };\n};\nexport var bigIntToBytes = function bigIntToBytes(num) {\n  var str = num.toString(16);\n  if (str.length % 2 !== 0) {\n    str = \"0\".concat(str);\n  }\n  return uint8ArrayFromString(str, 'base16');\n};\nexport var bigIntFromBytes = function bigIntFromBytes(num) {\n  return BigInt(\"0x\".concat(uint8ArrayToString(num, 'base16')));\n};","map":{"version":3,"names":["randomBytes","fromString","uint8ArrayFromString","toString","uint8ArrayToString","sha256","peerIdFromBytes","codes","errcode","randomSeqno","BigInt","concat","msgId","key","seqno","seqnoBytes","padStart","Uint8Array","length","set","noSignMsgId","data","encode","anyMatch","a","b","bHas","Array","isArray","val","includes","has","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","e","f","ensureArray","maybeArray","toMessage","message","_message$topic2","_message$data2","from","Error","ERR_MISSING_FROM","sequenceNumber","signature","_message$topic","_message$data","type","topic","bigIntFromBytes","toRpcMessage","multihash","bytes","bigIntToBytes","num","str"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/pubsub/src/utils.ts"],"sourcesContent":["import { randomBytes } from '@libp2p/crypto'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport type { Message, PubSubRPCMessage } from '@libp2p/interface-pubsub'\nimport { peerIdFromBytes } from '@libp2p/peer-id'\nimport { codes } from './errors.js'\nimport errcode from 'err-code'\n\n/**\n * Generate a random sequence number\n */\nexport function randomSeqno (): bigint {\n  return BigInt(`0x${uint8ArrayToString(randomBytes(8), 'base16')}`)\n}\n\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport const msgId = (key: Uint8Array, seqno: bigint) => {\n  const seqnoBytes = uint8ArrayFromString(seqno.toString(16).padStart(16, '0'), 'base16')\n\n  const msgId = new Uint8Array(key.length + seqnoBytes.length)\n  msgId.set(key, 0)\n  msgId.set(seqnoBytes, key.length)\n\n  return msgId\n}\n\n/**\n * Generate a message id, based on message `data`\n */\nexport const noSignMsgId = (data: Uint8Array) => {\n  return sha256.encode(data)\n}\n\n/**\n * Check if any member of the first set is also a member\n * of the second set\n */\nexport const anyMatch = (a: Set<number> | number[], b: Set<number> | number[]) => {\n  let bHas\n  if (Array.isArray(b)) {\n    bHas = (val: number) => b.includes(val)\n  } else {\n    bHas = (val: number) => b.has(val)\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Make everything an array\n */\nexport const ensureArray = function <T> (maybeArray: T | T[]) {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray]\n  }\n\n  return maybeArray\n}\n\nexport const toMessage = (message: PubSubRPCMessage): Message => {\n  if (message.from == null) {\n    throw errcode(new Error('RPC message was missing from'), codes.ERR_MISSING_FROM)\n  }\n\n  if (message.sequenceNumber == null || message.from == null || message.signature == null || message.key == null) {\n    return {\n      type: 'unsigned',\n      topic: message.topic ?? '',\n      data: message.data ?? new Uint8Array(0)\n    }\n  }\n\n  return {\n    type: 'signed',\n    from: peerIdFromBytes(message.from),\n    topic: message.topic ?? '',\n    sequenceNumber: bigIntFromBytes(message.sequenceNumber),\n    data: message.data ?? new Uint8Array(0),\n    signature: message.signature,\n    key: message.key\n  }\n}\n\nexport const toRpcMessage = (message: Message): PubSubRPCMessage => {\n  if (message.type === 'signed') {\n    return {\n      from: message.from.multihash.bytes,\n      data: message.data,\n      sequenceNumber: bigIntToBytes(message.sequenceNumber),\n      topic: message.topic,\n      signature: message.signature,\n      key: message.key\n    }\n  }\n\n  return {\n    data: message.data,\n    topic: message.topic\n  }\n}\n\nexport const bigIntToBytes = (num: bigint): Uint8Array => {\n  let str = num.toString(16)\n\n  if (str.length % 2 !== 0) {\n    str = `0${str}`\n  }\n\n  return uint8ArrayFromString(str, 'base16')\n}\n\nexport const bigIntFromBytes = (num: Uint8Array): bigint => {\n  return BigInt(`0x${uint8ArrayToString(num, 'base16')}`)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nexport var Parser = /*#__PURE__*/function () {\n  function Parser() {\n    _classCallCheck(this, Parser);\n    _defineProperty(this, \"index\", 0);\n    _defineProperty(this, \"input\", \"\");\n  }\n  _createClass(Parser, [{\n    key: \"new\",\n    value: function _new(input) {\n      this.index = 0;\n      this.input = input;\n      return this;\n    }\n    /** Run a parser, and restore the pre-parse state if it fails. */\n  }, {\n    key: \"readAtomically\",\n    value: function readAtomically(fn) {\n      var index = this.index;\n      var result = fn();\n      if (result === undefined) {\n        this.index = index;\n      }\n      return result;\n    }\n    /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */\n  }, {\n    key: \"parseWith\",\n    value: function parseWith(fn) {\n      var result = fn();\n      if (this.index !== this.input.length) {\n        return undefined;\n      }\n      return result;\n    }\n    /** Peek the next character from the input */\n  }, {\n    key: \"peekChar\",\n    value: function peekChar() {\n      if (this.index >= this.input.length) {\n        return undefined;\n      }\n      return this.input[this.index];\n    }\n    /** Read the next character from the input */\n  }, {\n    key: \"readChar\",\n    value: function readChar() {\n      if (this.index >= this.input.length) {\n        return undefined;\n      }\n      return this.input[this.index++];\n    }\n    /** Read the next character from the input if it matches the target. */\n  }, {\n    key: \"readGivenChar\",\n    value: function readGivenChar(target) {\n      var _this = this;\n      return this.readAtomically(function () {\n        var char = _this.readChar();\n        if (char !== target) {\n          return undefined;\n        }\n        return char;\n      });\n    }\n    /**\n     * Helper for reading separators in an indexed loop. Reads the separator\n     * character iff index > 0, then runs the parser. When used in a loop,\n     * the separator character will only be read on index > 0 (see\n     * readIPv4Addr for an example)\n     */\n  }, {\n    key: \"readSeparator\",\n    value: function readSeparator(sep, index, inner) {\n      var _this2 = this;\n      return this.readAtomically(function () {\n        if (index > 0) {\n          if (_this2.readGivenChar(sep) === undefined) {\n            return undefined;\n          }\n        }\n        return inner();\n      });\n    }\n    /**\n     * Read a number off the front of the input in the given radix, stopping\n     * at the first non-digit character or eof. Fails if the number has more\n     * digits than max_digits or if there is no number.\n     */\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(radix, maxDigits, allowZeroPrefix, maxBytes) {\n      var _this3 = this;\n      return this.readAtomically(function () {\n        var result = 0;\n        var digitCount = 0;\n        var leadingChar = _this3.peekChar();\n        if (leadingChar === undefined) {\n          return undefined;\n        }\n        var hasLeadingZero = leadingChar === \"0\";\n        var maxValue = Math.pow(2, 8 * maxBytes) - 1;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          var digit = _this3.readAtomically(function () {\n            var char = _this3.readChar();\n            if (char === undefined) {\n              return undefined;\n            }\n            var num = Number.parseInt(char, radix);\n            if (Number.isNaN(num)) {\n              return undefined;\n            }\n            return num;\n          });\n          if (digit === undefined) {\n            break;\n          }\n          result *= radix;\n          result += digit;\n          if (result > maxValue) {\n            return undefined;\n          }\n          digitCount += 1;\n          if (maxDigits !== undefined) {\n            if (digitCount > maxDigits) {\n              return undefined;\n            }\n          }\n        }\n        if (digitCount === 0) {\n          return undefined;\n        } else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n          return undefined;\n        } else {\n          return result;\n        }\n      });\n    }\n    /** Read an IPv4 address. */\n  }, {\n    key: \"readIPv4Addr\",\n    value: function readIPv4Addr() {\n      var _this4 = this;\n      return this.readAtomically(function () {\n        var out = new Uint8Array(4);\n        for (var i = 0; i < out.length; i++) {\n          var ix = _this4.readSeparator(\".\", i, function () {\n            return _this4.readNumber(10, 3, false, 1);\n          });\n          if (ix === undefined) {\n            return undefined;\n          }\n          out[i] = ix;\n        }\n        return out;\n      });\n    }\n    /** Read an IPv6 Address. */\n  }, {\n    key: \"readIPv6Addr\",\n    value: function readIPv6Addr() {\n      var _this5 = this;\n      /**\n       * Read a chunk of an IPv6 address into `groups`. Returns the number\n       * of groups read, along with a bool indicating if an embedded\n       * trailing IPv4 address was read. Specifically, read a series of\n       * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n       * trailing embedded IPv4 address.\n       */\n      var readGroups = function readGroups(groups) {\n        for (var i = 0; i < groups.length / 2; i++) {\n          var ix = i * 2;\n          // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n          if (i < groups.length - 3) {\n            var ipv4 = _this5.readSeparator(\":\", i, function () {\n              return _this5.readIPv4Addr();\n            });\n            if (ipv4 !== undefined) {\n              groups[ix] = ipv4[0];\n              groups[ix + 1] = ipv4[1];\n              groups[ix + 2] = ipv4[2];\n              groups[ix + 3] = ipv4[3];\n              return [ix + 4, true];\n            }\n          }\n          var group = _this5.readSeparator(\":\", i, function () {\n            return _this5.readNumber(16, 4, true, 2);\n          });\n          if (group === undefined) {\n            return [ix, false];\n          }\n          groups[ix] = group >> 8;\n          groups[ix + 1] = group & 255;\n        }\n        return [groups.length, false];\n      };\n      return this.readAtomically(function () {\n        // Read the front part of the address; either the whole thing, or up to the first ::\n        var head = new Uint8Array(16);\n        var _readGroups = readGroups(head),\n          _readGroups2 = _slicedToArray(_readGroups, 2),\n          headSize = _readGroups2[0],\n          headIp4 = _readGroups2[1];\n        if (headSize === 16) {\n          return head;\n        }\n        // IPv4 part is not allowed before `::`\n        if (headIp4) {\n          return undefined;\n        }\n        // Read `::` if previous code parsed less than 8 groups.\n        // `::` indicates one or more groups of 16 bits of zeros.\n        if (_this5.readGivenChar(\":\") === undefined) {\n          return undefined;\n        }\n        if (_this5.readGivenChar(\":\") === undefined) {\n          return undefined;\n        }\n        // Read the back part of the address. The :: must contain at least one\n        // set of zeroes, so our max length is 7.\n        var tail = new Uint8Array(14);\n        var limit = 16 - (headSize + 2);\n        var _readGroups3 = readGroups(tail.subarray(0, limit)),\n          _readGroups4 = _slicedToArray(_readGroups3, 1),\n          tailSize = _readGroups4[0];\n        // Concat the head and tail of the IP address\n        head.set(tail.subarray(0, tailSize), 16 - tailSize);\n        return head;\n      });\n    }\n    /** Read an IP Address, either IPv4 or IPv6. */\n  }, {\n    key: \"readIPAddr\",\n    value: function readIPAddr() {\n      var _this$readIPv4Addr;\n      return (_this$readIPv4Addr = this.readIPv4Addr()) !== null && _this$readIPv4Addr !== void 0 ? _this$readIPv4Addr : this.readIPv6Addr();\n    }\n  }]);\n  return Parser;\n}();","map":{"version":3,"names":["Parser","_classCallCheck","_defineProperty","_createClass","key","value","_new","input","index","readAtomically","fn","result","undefined","parseWith","length","peekChar","readChar","readGivenChar","target","_this","char","readSeparator","sep","inner","_this2","readNumber","radix","maxDigits","allowZeroPrefix","maxBytes","_this3","digitCount","leadingChar","hasLeadingZero","maxValue","Math","pow","digit","num","Number","parseInt","isNaN","readIPv4Addr","_this4","out","Uint8Array","i","ix","readIPv6Addr","_this5","readGroups","groups","ipv4","group","head","_readGroups","_readGroups2","_slicedToArray","headSize","headIp4","tail","limit","_readGroups3","subarray","_readGroups4","tailSize","set","readIPAddr","_this$readIPv4Addr"],"sources":["../src/parser.ts"],"sourcesContent":[null],"mappings":";;;;AAAA;AAOA,WAAaA,MAAM;EAAA,SAAAA,OAAA;IAAAC,eAAA,OAAAD,MAAA;IAAAE,eAAA,gBACD,CAAC;IAAAA,eAAA,gBACD,EAAE;EAAA;EAAAC,YAAA,CAAAH,MAAA;IAAAI,GAAA;IAAAC,KAAA,EAElB,SAAAC,KAAIC,KAAa;MACf,IAAI,CAACC,KAAK,GAAG,CAAC;MACd,IAAI,CAACD,KAAK,GAAGA,KAAK;MAClB,OAAO,IAAI;IACb;IAEA;EAAA;IAAAH,GAAA;IAAAC,KAAA,EACA,SAAAI,eAA6BC,EAAK;MAChC,IAAMF,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAMG,MAAM,GAAGD,EAAE,EAAE;MACnB,IAAIC,MAAM,KAAKC,SAAS,EAAE;QACxB,IAAI,CAACJ,KAAK,GAAGA,KAAK;;MAEpB,OAAOG,MAAM;IACf;IAEA;EAAA;IAAAP,GAAA;IAAAC,KAAA,EACA,SAAAQ,UAAwBH,EAAK;MAC3B,IAAMC,MAAM,GAAGD,EAAE,EAAE;MACnB,IAAI,IAAI,CAACF,KAAK,KAAK,IAAI,CAACD,KAAK,CAACO,MAAM,EAAE;QACpC,OAAOF,SAAS;;MAElB,OAAOD,MAAM;IACf;IAEA;EAAA;IAAAP,GAAA;IAAAC,KAAA,EACA,SAAAU,SAAA,EAAQ;MACN,IAAI,IAAI,CAACP,KAAK,IAAI,IAAI,CAACD,KAAK,CAACO,MAAM,EAAE;QACnC,OAAOF,SAAS;;MAElB,OAAO,IAAI,CAACL,KAAK,CAAC,IAAI,CAACC,KAAK,CAAC;IAC/B;IAEA;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EACA,SAAAW,SAAA,EAAQ;MACN,IAAI,IAAI,CAACR,KAAK,IAAI,IAAI,CAACD,KAAK,CAACO,MAAM,EAAE;QACnC,OAAOF,SAAS;;MAElB,OAAO,IAAI,CAACL,KAAK,CAAC,IAAI,CAACC,KAAK,EAAE,CAAC;IACjC;IAEA;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EACA,SAAAY,cAAcC,MAAc;MAAA,IAAAC,KAAA;MAC1B,OAAO,IAAI,CAACV,cAAc,CAAC,YAAK;QAC9B,IAAMW,IAAI,GAAGD,KAAI,CAACH,QAAQ,EAAE;QAC5B,IAAII,IAAI,KAAKF,MAAM,EAAE;UACnB,OAAON,SAAS;;QAElB,OAAOQ,IAAI;MACb,CAAC,CAAC;IACJ;IAEA;;;;;;EAAA;IAAAhB,GAAA;IAAAC,KAAA,EAMA,SAAAgB,cAA4BC,GAAW,EAAEd,KAAa,EAAEe,KAAQ;MAAA,IAAAC,MAAA;MAC9D,OAAO,IAAI,CAACf,cAAc,CAAC,YAAK;QAC9B,IAAID,KAAK,GAAG,CAAC,EAAE;UACb,IAAIgB,MAAI,CAACP,aAAa,CAACK,GAAG,CAAC,KAAKV,SAAS,EAAE;YACzC,OAAOA,SAAS;;;QAGpB,OAAOW,KAAK,EAAE;MAChB,CAAC,CAAC;IACJ;IAEA;;;;;EAAA;IAAAnB,GAAA;IAAAC,KAAA,EAKA,SAAAoB,WACEC,KAAa,EACbC,SAA6B,EAC7BC,eAAwB,EACxBC,QAAgB;MAAA,IAAAC,MAAA;MAEhB,OAAO,IAAI,CAACrB,cAAc,CAAC,YAAK;QAC9B,IAAIE,MAAM,GAAG,CAAC;QACd,IAAIoB,UAAU,GAAG,CAAC;QAElB,IAAMC,WAAW,GAAGF,MAAI,CAACf,QAAQ,EAAE;QACnC,IAAIiB,WAAW,KAAKpB,SAAS,EAAE;UAC7B,OAAOA,SAAS;;QAElB,IAAMqB,cAAc,GAAGD,WAAW,KAAK,GAAG;QAC1C,IAAME,QAAQ,GAAGC,IAAA,CAAAC,GAAA,EAAC,EAAK,CAAC,GAAGP,QAAQ,IAAI,CAAC;QAExC;QACA,OAAO,IAAI,EAAE;UACX,IAAMQ,KAAK,GAAGP,MAAI,CAACrB,cAAc,CAAC,YAAK;YACrC,IAAMW,IAAI,GAAGU,MAAI,CAACd,QAAQ,EAAE;YAC5B,IAAII,IAAI,KAAKR,SAAS,EAAE;cACtB,OAAOA,SAAS;;YAElB,IAAM0B,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACpB,IAAI,EAAEM,KAAK,CAAC;YACxC,IAAIa,MAAM,CAACE,KAAK,CAACH,GAAG,CAAC,EAAE;cACrB,OAAO1B,SAAS;;YAElB,OAAO0B,GAAG;UACZ,CAAC,CAAC;UACF,IAAID,KAAK,KAAKzB,SAAS,EAAE;YACvB;;UAEFD,MAAM,IAAIe,KAAK;UACff,MAAM,IAAI0B,KAAK;UACf,IAAI1B,MAAM,GAAGuB,QAAQ,EAAE;YACrB,OAAOtB,SAAS;;UAElBmB,UAAU,IAAI,CAAC;UACf,IAAIJ,SAAS,KAAKf,SAAS,EAAE;YAC3B,IAAImB,UAAU,GAAGJ,SAAS,EAAE;cAC1B,OAAOf,SAAS;;;;QAKtB,IAAImB,UAAU,KAAK,CAAC,EAAE;UACpB,OAAOnB,SAAS;SACjB,MAAM,IAAI,CAACgB,eAAe,IAAIK,cAAc,IAAIF,UAAU,GAAG,CAAC,EAAE;UAC/D,OAAOnB,SAAS;SACjB,MAAM;UACL,OAAOD,MAAM;;MAEjB,CAAC,CAAC;IACJ;IAEA;EAAA;IAAAP,GAAA;IAAAC,KAAA,EACA,SAAAqC,aAAA,EAAY;MAAA,IAAAC,MAAA;MACV,OAAO,IAAI,CAAClC,cAAc,CAAC,YAAK;QAC9B,IAAMmC,GAAG,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC;QAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAAC9B,MAAM,EAAEgC,CAAC,EAAE,EAAE;UACnC,IAAMC,EAAE,GAAGJ,MAAI,CAACtB,aAAa,CAAC,GAAG,EAAEyB,CAAC,EAAE;YAAA,OAAMH,MAAI,CAAClB,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;UAAA,EAAC;UAC7E,IAAIsB,EAAE,KAAKnC,SAAS,EAAE;YACpB,OAAOA,SAAS;;UAElBgC,GAAG,CAACE,CAAC,CAAC,GAAGC,EAAE;;QAGb,OAAOH,GAAG;MACZ,CAAC,CAAC;IACJ;IAEA;EAAA;IAAAxC,GAAA;IAAAC,KAAA,EACA,SAAA2C,aAAA,EAAY;MAAA,IAAAC,MAAA;MACV;;;;;;;MAOA,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,MAAkB,EAAuB;QAC3D,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,MAAM,CAACrC,MAAM,GAAG,CAAC,EAAEgC,CAAC,EAAE,EAAE;UAC1C,IAAMC,EAAE,GAAGD,CAAC,GAAG,CAAC;UAChB;UACA,IAAIA,CAAC,GAAGK,MAAM,CAACrC,MAAM,GAAG,CAAC,EAAE;YACzB,IAAMsC,IAAI,GAAGH,MAAI,CAAC5B,aAAa,CAAC,GAAG,EAAEyB,CAAC,EAAE;cAAA,OAAMG,MAAI,CAACP,YAAY,EAAE;YAAA,EAAC;YAClE,IAAIU,IAAI,KAAKxC,SAAS,EAAE;cACtBuC,MAAM,CAACJ,EAAE,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC;cACpBD,MAAM,CAACJ,EAAE,GAAG,CAAC,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC;cACxBD,MAAM,CAACJ,EAAE,GAAG,CAAC,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC;cACxBD,MAAM,CAACJ,EAAE,GAAG,CAAC,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC;cAExB,OAAO,CAACL,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC;;;UAIzB,IAAMM,KAAK,GAAGJ,MAAI,CAAC5B,aAAa,CAAC,GAAG,EAAEyB,CAAC,EAAE;YAAA,OAAMG,MAAI,CAACxB,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;UAAA,EAAC;UAC/E,IAAI4B,KAAK,KAAKzC,SAAS,EAAE;YACvB,OAAO,CAACmC,EAAE,EAAE,KAAK,CAAC;;UAEpBI,MAAM,CAACJ,EAAE,CAAC,GAAGM,KAAK,IAAI,CAAC;UACvBF,MAAM,CAACJ,EAAE,GAAG,CAAC,CAAC,GAAGM,KAAK,GAAG,GAAG;;QAE9B,OAAO,CAACF,MAAM,CAACrC,MAAM,EAAE,KAAK,CAAC;MAC/B,CAAC;MAED,OAAO,IAAI,CAACL,cAAc,CAAC,YAAK;QAC9B;QACA,IAAM6C,IAAI,GAAG,IAAIT,UAAU,CAAC,EAAE,CAAC;QAC/B,IAAAU,WAAA,GAA4BL,UAAU,CAACI,IAAI,CAAC;UAAAE,YAAA,GAAAC,cAAA,CAAAF,WAAA;UAArCG,QAAQ,GAAAF,YAAA;UAAEG,OAAO,GAAAH,YAAA;QAExB,IAAIE,QAAQ,KAAK,EAAE,EAAE;UACnB,OAAOJ,IAAI;;QAGb;QACA,IAAIK,OAAO,EAAE;UACX,OAAO/C,SAAS;;QAGlB;QACA;QACA,IAAIqC,MAAI,CAAChC,aAAa,CAAC,GAAG,CAAC,KAAKL,SAAS,EAAE;UACzC,OAAOA,SAAS;;QAElB,IAAIqC,MAAI,CAAChC,aAAa,CAAC,GAAG,CAAC,KAAKL,SAAS,EAAE;UACzC,OAAOA,SAAS;;QAGlB;QACA;QACA,IAAMgD,IAAI,GAAG,IAAIf,UAAU,CAAC,EAAE,CAAC;QAC/B,IAAMgB,KAAK,GAAG,EAAE,IAAIH,QAAQ,GAAG,CAAC,CAAC;QACjC,IAAAI,YAAA,GAAmBZ,UAAU,CAACU,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC;UAAAG,YAAA,GAAAP,cAAA,CAAAK,YAAA;UAA/CG,QAAQ,GAAAD,YAAA;QAEf;QACAV,IAAI,CAACY,GAAG,CAACN,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAEE,QAAQ,CAAC,EAAE,EAAE,GAAGA,QAAQ,CAAC;QAEnD,OAAOX,IAAI;MACb,CAAC,CAAC;IACJ;IAEA;EAAA;IAAAlD,GAAA;IAAAC,KAAA,EACA,SAAA8D,WAAA,EAAU;MAAA,IAAAC,kBAAA;MACR,QAAAA,kBAAA,GAAO,IAAI,CAAC1B,YAAY,EAAE,cAAA0B,kBAAA,cAAAA,kBAAA,GAAI,IAAI,CAACpB,YAAY,EAAE;IACnD;EAAC;EAAA,OAAAhD,MAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
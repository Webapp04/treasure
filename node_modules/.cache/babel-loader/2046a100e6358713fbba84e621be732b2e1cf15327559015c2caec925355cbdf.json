{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { topologySymbol as symbol } from '@libp2p/interface-registrar';\nvar noop = function noop() {};\nvar TopologyImpl = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function TopologyImpl(init) {\n    var _init$min, _init$max, _init$onConnect, _init$onDisconnect;\n    _classCallCheck(this, TopologyImpl);\n    this.min = (_init$min = init.min) !== null && _init$min !== void 0 ? _init$min : 0;\n    this.max = (_init$max = init.max) !== null && _init$max !== void 0 ? _init$max : Infinity;\n    this.peers = new Set();\n    this.onConnect = (_init$onConnect = init.onConnect) !== null && _init$onConnect !== void 0 ? _init$onConnect : noop;\n    this.onDisconnect = (_init$onDisconnect = init.onDisconnect) !== null && _init$onDisconnect !== void 0 ? _init$onDisconnect : noop;\n  }\n  _createClass(TopologyImpl, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return symbol.toString();\n    }\n  }, {\n    key: symbol,\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"setRegistrar\",\n    value: function () {\n      var _setRegistrar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(registrar) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.registrar = registrar;\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function setRegistrar(_x) {\n        return _setRegistrar.apply(this, arguments);\n      }\n      return setRegistrar;\n    }()\n    /**\n     * Notify about peer disconnected event\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(peerId) {\n      this.onDisconnect(peerId);\n    }\n  }]);\n  return TopologyImpl;\n}(Symbol.toStringTag);\nexport function createTopology(init) {\n  return new TopologyImpl(init);\n}","map":{"version":3,"names":["topologySymbol","symbol","noop","TopologyImpl","_Symbol$toStringTag","init","_init$min","_init$max","_init$onConnect","_init$onDisconnect","_classCallCheck","min","max","Infinity","peers","Set","onConnect","onDisconnect","_createClass","key","get","toString","value","_setRegistrar","_asyncToGenerator","_regeneratorRuntime","mark","_callee","registrar","wrap","_callee$","_context","prev","next","stop","setRegistrar","_x","apply","arguments","disconnect","peerId","Symbol","toStringTag","createTopology"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/topology/src/index.ts"],"sourcesContent":["import { topologySymbol as symbol } from '@libp2p/interface-registrar'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { Topology, TopologyInit, onConnectHandler, onDisconnectHandler, Registrar } from '@libp2p/interface-registrar'\n\nconst noop = () => {}\n\nclass TopologyImpl implements Topology {\n  public min: number\n  public max: number\n\n  /**\n   * Set of peers that support the protocol\n   */\n  public peers: Set<string>\n  public onConnect: onConnectHandler\n  public onDisconnect: onDisconnectHandler\n\n  protected registrar: Registrar | undefined\n\n  constructor (init: TopologyInit) {\n    this.min = init.min ?? 0\n    this.max = init.max ?? Infinity\n    this.peers = new Set()\n\n    this.onConnect = init.onConnect ?? noop\n    this.onDisconnect = init.onDisconnect ?? noop\n  }\n\n  get [Symbol.toStringTag] () {\n    return symbol.toString()\n  }\n\n  get [symbol] () {\n    return true\n  }\n\n  async setRegistrar (registrar: Registrar) {\n    this.registrar = registrar\n  }\n\n  /**\n   * Notify about peer disconnected event\n   */\n  disconnect (peerId: PeerId) {\n    this.onDisconnect(peerId)\n  }\n}\n\nexport function createTopology (init: TopologyInit): Topology {\n  return new TopologyImpl(init)\n}\n"],"mappings":";;;;AAAA,SAASA,cAAc,IAAIC,MAAM,QAAQ,6BAA6B;AAItE,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAQ,CAAE,CAAC;AAAA,IAEfC,YAAY,0BAAAC,mBAAA;EAahB,SAAAD,aAAaE,IAAkB;IAAA,IAAAC,SAAA,EAAAC,SAAA,EAAAC,eAAA,EAAAC,kBAAA;IAAAC,eAAA,OAAAP,YAAA;IAC7B,IAAI,CAACQ,GAAG,IAAAL,SAAA,GAAGD,IAAI,CAACM,GAAG,cAAAL,SAAA,cAAAA,SAAA,GAAI,CAAC;IACxB,IAAI,CAACM,GAAG,IAAAL,SAAA,GAAGF,IAAI,CAACO,GAAG,cAAAL,SAAA,cAAAA,SAAA,GAAIM,QAAQ;IAC/B,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAAE;IAEtB,IAAI,CAACC,SAAS,IAAAR,eAAA,GAAGH,IAAI,CAACW,SAAS,cAAAR,eAAA,cAAAA,eAAA,GAAIN,IAAI;IACvC,IAAI,CAACe,YAAY,IAAAR,kBAAA,GAAGJ,IAAI,CAACY,YAAY,cAAAR,kBAAA,cAAAA,kBAAA,GAAIP,IAAI;EAC/C;EAACgB,YAAA,CAAAf,YAAA;IAAAgB,GAAA,EAAAf,mBAAA;IAAAgB,GAAA,EAED,SAAAA,IAAA,EAAwB;MACtB,OAAOnB,MAAM,CAACoB,QAAQ,EAAE;IAC1B;EAAC;IAAAF,GAAA,EAEIlB,MAAM;IAAAmB,GAAA,EAAX,SAAAA,IAAA,EAAY;MACV,OAAO,IAAI;IACb;EAAC;IAAAD,GAAA;IAAAG,KAAA;MAAA,IAAAC,aAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAoBC,SAAoB;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACtC,IAAI,CAACL,SAAS,GAAGA,SAAS;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAG,IAAA;UAAA;QAAA,GAAAP,OAAA;MAAA,CAC3B;MAAA,SAAAQ,aAAAC,EAAA;QAAA,OAAAb,aAAA,CAAAc,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,YAAA;IAAA;IAED;;;EAAA;IAAAhB,GAAA;IAAAG,KAAA,EAGA,SAAAiB,WAAYC,MAAc;MACxB,IAAI,CAACvB,YAAY,CAACuB,MAAM,CAAC;IAC3B;EAAC;EAAA,OAAArC,YAAA;AAAA,EAjBIsC,MAAM,CAACC,WAAW;AAoBzB,OAAM,SAAUC,cAAcA,CAAEtC,IAAkB;EAChD,OAAO,IAAIF,YAAY,CAACE,IAAI,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlistForPeer(_ref) {\n  var network = _ref.network;\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlistForPeer\"]}\n   */\n  function wantlistForPeer(_x) {\n    return _wantlistForPeer.apply(this, arguments);\n  }\n  function _wantlistForPeer() {\n    _wantlistForPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n      var options,\n        _yield$network$use,\n        bitswap,\n        list,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return network.use(options);\n          case 3:\n            _yield$network$use = _context.sent;\n            bitswap = _yield$network$use.bitswap;\n            list = bitswap.wantlistForPeer(peerId);\n            return _context.abrupt(\"return\", Array.from(list).map(function (e) {\n              return e[1].cid;\n            }));\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _wantlistForPeer.apply(this, arguments);\n  }\n  return withTimeoutOption(wantlistForPeer);\n}","map":{"version":3,"names":["withTimeoutOption","createWantlistForPeer","_ref","network","wantlistForPeer","_x","_wantlistForPeer","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","peerId","options","_yield$network$use","bitswap","list","_args","wrap","_callee$","_context","prev","next","length","undefined","use","sent","abrupt","Array","from","map","e","cid","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/bitswap/wantlist-for-peer.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlistForPeer ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.wantlistForPeer(peerId)\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlistForPeer)\n}\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAAAC,IAAA,EAAe;EAAA,IAAXC,OAAO,GAAAD,IAAA,CAAPC,OAAO;EAC9C;AACF;AACA;EAFE,SAGeC,eAAeA,CAAAC,EAAA;IAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,iBAAA;IAAAA,gBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA9B,SAAAC,QAAgCC,MAAM;MAAA,IAAAC,OAAA;QAAAC,kBAAA;QAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA,GAAAV,SAAA;MAAA,OAAAE,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAET,OAAO,GAAAI,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OACxBpB,OAAO,CAACuB,GAAG,CAACZ,OAAO,CAAC;UAAA;YAAAC,kBAAA,GAAAM,QAAA,CAAAM,IAAA;YAAtCX,OAAO,GAAAD,kBAAA,CAAPC,OAAO;YACTC,IAAI,GAAGD,OAAO,CAACZ,eAAe,CAACS,MAAM,CAAC;YAAA,OAAAQ,QAAA,CAAAO,MAAA,WAErCC,KAAK,CAACC,IAAI,CAACb,IAAI,CAAC,CAACc,GAAG,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG;YAAA,EAAC;UAAA;UAAA;YAAA,OAAAZ,QAAA,CAAAa,IAAA;QAAA;MAAA,GAAAtB,OAAA;IAAA,CAC3C;IAAA,OAAAN,gBAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOR,iBAAiB,CAACI,eAAe,CAAC;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}
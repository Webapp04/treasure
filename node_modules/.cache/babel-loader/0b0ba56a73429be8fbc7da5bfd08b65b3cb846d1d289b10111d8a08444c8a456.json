{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nvar LOAD_CODEC = function LOAD_CODEC(codeOrName) {\n  return Promise.reject(new Error(\"No codec found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\nexport var Multicodecs = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  function Multicodecs(options) {\n    _classCallCheck(this, Multicodecs);\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {};\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n\n    // Enable all supplied codecs\n    var _iterator = _createForOfIteratorHelper(options.codecs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var codec = _step.value;\n        this.addCodec(codec);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  _createClass(Multicodecs, [{\n    key: \"addCodec\",\n    value: function addCodec(codec) {\n      if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(codec.name, \"\\\"\"));\n      }\n      this._codecsByName[codec.name] = codec;\n      this._codecsByCode[codec.code] = codec;\n    }\n\n    /**\n     * Remove support for a block codec\n     *\n     * @param {BlockCodec} codec\n     */\n  }, {\n    key: \"removeCodec\",\n    value: function removeCodec(codec) {\n      delete this._codecsByName[codec.name];\n      delete this._codecsByCode[codec.code];\n    }\n\n    /**\n     * @param {number | string} code\n     */\n  }, {\n    key: \"getCodec\",\n    value: function () {\n      var _getCodec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(code) {\n        var table, codec;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n              if (!table[code]) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", table[code]);\n            case 3:\n              _context.next = 5;\n              return this._loadCodec(code);\n            case 5:\n              codec = _context.sent;\n              if (table[code] == null) {\n                this.addCodec(codec);\n              }\n              return _context.abrupt(\"return\", codec);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getCodec(_x) {\n        return _getCodec.apply(this, arguments);\n      }\n      return getCodec;\n    }()\n  }, {\n    key: \"listCodecs\",\n    value: function listCodecs() {\n      return Object.values(this._codecsByName);\n    }\n  }]);\n  return Multicodecs;\n}();","map":{"version":3,"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","concat","Multicodecs","options","_classCallCheck","_codecsByName","_codecsByCode","_loadCodec","loadCodec","_iterator","_createForOfIteratorHelper","codecs","_step","s","n","done","codec","value","addCodec","err","e","f","_createClass","key","name","code","removeCodec","_getCodec","_asyncToGenerator","_regeneratorRuntime","mark","_callee","table","wrap","_callee$","_context","prev","next","abrupt","sent","stop","getCodec","_x","apply","arguments","listCodecs","Object","values"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core-utils/src/multicodecs.js"],"sourcesContent":["/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { logger } from '@libp2p/logger';\nimport { CircuitRelay as CircuitPB } from '../pb/index.js';\nimport { RELAY_CODEC } from '../multicodec.js';\nimport { StreamHandler } from './stream-handler.js';\nimport { validateAddrs } from './utils.js';\nvar log = logger('libp2p:circuit:stop');\n/**\n * Handles incoming STOP requests\n */\nexport function handleStop(options) {\n  var connection = options.connection,\n    request = options.request,\n    streamHandler = options.streamHandler;\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    log.error('invalid stop request via peer %p %o', connection.remotePeer, err);\n    return;\n  }\n  // The request is valid\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n}\n/**\n * Creates a STOP request\n */\nexport function stop(_x) {\n  return _stop.apply(this, arguments);\n}\nfunction _stop() {\n  _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n    var connection, request, signal, stream, streamHandler, response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          connection = options.connection, request = options.request, signal = options.signal;\n          _context.next = 3;\n          return connection.newStream(RELAY_CODEC, {\n            signal: signal\n          });\n        case 3:\n          stream = _context.sent;\n          log('starting stop request to %p', connection.remotePeer);\n          streamHandler = new StreamHandler({\n            stream: stream\n          });\n          streamHandler.write(request);\n          _context.next = 9;\n          return streamHandler.read();\n        case 9:\n          response = _context.sent;\n          if (!(response == null)) {\n            _context.next = 13;\n            break;\n          }\n          streamHandler.close();\n          return _context.abrupt(\"return\");\n        case 13:\n          if (!(response.code === CircuitPB.Status.SUCCESS)) {\n            _context.next = 16;\n            break;\n          }\n          log('stop request to %p was successful', connection.remotePeer);\n          return _context.abrupt(\"return\", streamHandler.rest());\n        case 16:\n          log('stop request failed with code %d', response.code);\n          streamHandler.close();\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _stop.apply(this, arguments);\n}","map":{"version":3,"names":["logger","CircuitRelay","CircuitPB","RELAY_CODEC","StreamHandler","validateAddrs","log","handleStop","options","connection","request","streamHandler","err","error","remotePeer","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","_x","_stop","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","signal","stream","response","wrap","_callee$","_context","prev","next","newStream","sent","read","close","abrupt"],"sources":["/Users/apple/Documents/treasure/node_modules/libp2p/src/circuit/circuit/stop.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { CircuitRelay as CircuitPB } from '../pb/index.js'\nimport { RELAY_CODEC } from '../multicodec.js'\nimport { StreamHandler } from './stream-handler.js'\nimport { validateAddrs } from './utils.js'\nimport type { Connection } from '@libp2p/interface-connection'\nimport type { Duplex } from 'it-stream-types'\nimport type { AbortOptions } from '@libp2p/interfaces'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst log = logger('libp2p:circuit:stop')\n\nexport interface HandleStopOptions {\n  connection: Connection\n  request: CircuitPB\n  streamHandler: StreamHandler\n}\n\n/**\n * Handles incoming STOP requests\n */\nexport function handleStop (options: HandleStopOptions): Duplex<Uint8ArrayList, Uint8ArrayList | Uint8Array> | undefined {\n  const {\n    connection,\n    request,\n    streamHandler\n  } = options\n\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err: any) {\n    log.error('invalid stop request via peer %p %o', connection.remotePeer, err)\n    return\n  }\n\n  // The request is valid\n  log('stop request is valid')\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n\n  return streamHandler.rest()\n}\n\nexport interface StopOptions extends AbortOptions {\n  connection: Connection\n  request: CircuitPB\n}\n\n/**\n * Creates a STOP request\n */\nexport async function stop (options: StopOptions) {\n  const {\n    connection,\n    request,\n    signal\n  } = options\n\n  const stream = await connection.newStream(RELAY_CODEC, {\n    signal\n  })\n  log('starting stop request to %p', connection.remotePeer)\n  const streamHandler = new StreamHandler({ stream })\n\n  streamHandler.write(request)\n  const response = await streamHandler.read()\n\n  if (response == null) {\n    streamHandler.close()\n    return\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %p was successful', connection.remotePeer)\n    return streamHandler.rest()\n  }\n\n  log('stop request failed with code %d', response.code)\n  streamHandler.close()\n}\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,YAAY,IAAIC,SAAS,QAAQ,gBAAgB;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAa,QAAQ,YAAY;AAM1C,IAAMC,GAAG,GAAGN,MAAM,CAAC,qBAAqB,CAAC;AAQzC;;;AAGA,OAAM,SAAUO,UAAUA,CAAEC,OAA0B;EACpD,IACEC,UAAU,GAGRD,OAAO,CAHTC,UAAU;IACVC,OAAO,GAELF,OAAO,CAFTE,OAAO;IACPC,aAAa,GACXH,OAAO,CADTG,aAAa;EAGf;EACA,IAAI;IACFN,aAAa,CAACK,OAAO,EAAEC,aAAa,CAAC;GACtC,CAAC,OAAOC,GAAQ,EAAE;IACjBN,GAAG,CAACO,KAAK,CAAC,qCAAqC,EAAEJ,UAAU,CAACK,UAAU,EAAEF,GAAG,CAAC;IAC5E;;EAGF;EACAN,GAAG,CAAC,uBAAuB,CAAC;EAC5BK,aAAa,CAACI,KAAK,CAAC;IAClBC,IAAI,EAAEd,SAAS,CAACe,IAAI,CAACC,MAAM;IAC3BC,IAAI,EAAEjB,SAAS,CAACkB,MAAM,CAACC;GACxB,CAAC;EAEF,OAAOV,aAAa,CAACW,IAAI,EAAE;AAC7B;AAOA;;;AAGA,gBAAsBC,IAAIA,CAAAC,EAAA;EAAA,OAAAC,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA4BzB,SAAAF,MAAA;EAAAA,KAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CA5BM,SAAAC,QAAqBvB,OAAoB;IAAA,IAAAC,UAAA,EAAAC,OAAA,EAAAsB,MAAA,EAAAC,MAAA,EAAAtB,aAAA,EAAAuB,QAAA;IAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAE5C9B,UAAU,GAGRD,OAAO,CAHTC,UAAU,EACVC,OAAO,GAELF,OAAO,CAFTE,OAAO,EACPsB,MAAM,GACJxB,OAAO,CADTwB,MAAM;UAAAK,QAAA,CAAAE,IAAA;UAAA,OAGa9B,UAAU,CAAC+B,SAAS,CAACrC,WAAW,EAAE;YACrD6B,MAAM,EAANA;WACD,CAAC;QAAA;UAFIC,MAAM,GAAAI,QAAA,CAAAI,IAAA;UAGZnC,GAAG,CAAC,6BAA6B,EAAEG,UAAU,CAACK,UAAU,CAAC;UACnDH,aAAa,GAAG,IAAIP,aAAa,CAAC;YAAE6B,MAAM,EAANA;UAAM,CAAE,CAAC;UAEnDtB,aAAa,CAACI,KAAK,CAACL,OAAO,CAAC;UAAA2B,QAAA,CAAAE,IAAA;UAAA,OACL5B,aAAa,CAAC+B,IAAI,EAAE;QAAA;UAArCR,QAAQ,GAAAG,QAAA,CAAAI,IAAA;UAAA,MAEVP,QAAQ,IAAI,IAAI;YAAAG,QAAA,CAAAE,IAAA;YAAA;UAAA;UAClB5B,aAAa,CAACgC,KAAK,EAAE;UAAA,OAAAN,QAAA,CAAAO,MAAA;QAAA;UAAA,MAInBV,QAAQ,CAACf,IAAI,KAAKjB,SAAS,CAACkB,MAAM,CAACC,OAAO;YAAAgB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAC5CjC,GAAG,CAAC,mCAAmC,EAAEG,UAAU,CAACK,UAAU,CAAC;UAAA,OAAAuB,QAAA,CAAAO,MAAA,WACxDjC,aAAa,CAACW,IAAI,EAAE;QAAA;UAG7BhB,GAAG,CAAC,kCAAkC,EAAE4B,QAAQ,CAACf,IAAI,CAAC;UACtDR,aAAa,CAACgC,KAAK,EAAE;QAAA;QAAA;UAAA,OAAAN,QAAA,CAAAd,IAAA;MAAA;IAAA,GAAAQ,OAAA;EAAA,CACtB;EAAA,OAAAN,KAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
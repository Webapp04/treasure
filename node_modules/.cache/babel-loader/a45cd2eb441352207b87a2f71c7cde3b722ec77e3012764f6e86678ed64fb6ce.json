{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as isIPFS from 'is-ipfs';\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path';\nimport drain from 'it-drain';\nimport { resolve } from '../../utils.js';\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport function resolvePath(_x, _x2, _x3) {\n  return _resolvePath.apply(this, arguments);\n}\nfunction _resolvePath() {\n  _resolvePath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref, name, options) {\n    var ipns, repo, codecs, _toCidAndPath, cid, path;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          ipns = _ref.ipns, repo = _ref.repo, codecs = _ref.codecs;\n          if (!isIPFS.ipnsPath(name)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", ipns.resolve(name));\n        case 3:\n          _toCidAndPath = toCidAndPath(name), cid = _toCidAndPath.cid, path = _toCidAndPath.path; // ipfs path\n          _context.next = 6;\n          return drain(resolve(cid, path || '', codecs, repo, options));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _resolvePath.apply(this, arguments);\n}","map":{"version":3,"names":["isIPFS","toCidAndPath","drain","resolve","resolvePath","_x","_x2","_x3","_resolvePath","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","name","options","ipns","repo","codecs","_toCidAndPath","cid","path","wrap","_callee$","_context","prev","next","ipnsPath","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/name/utils.js"],"sourcesContent":["import * as isIPFS from 'is-ipfs'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport drain from 'it-drain'\nimport { resolve } from '../../utils.js'\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function resolvePath ({ ipns, repo, codecs }, name, options) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n"],"mappings":";;AAAA,OAAO,KAAKA,MAAM,MAAM,SAAS;AACjC,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,OAAO,QAAQ,gBAAgB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAsBC,WAAWA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAahC,SAAAF,aAAA;EAAAA,YAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAbM,SAAAC,QAAAC,IAAA,EAAoDC,IAAI,EAAEC,OAAO;IAAA,IAAAC,IAAA,EAAAC,IAAA,EAAAC,MAAA,EAAAC,aAAA,EAAAC,GAAA,EAAAC,IAAA;IAAA,OAAAX,mBAAA,GAAAY,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAnCV,IAAI,GAAAH,IAAA,CAAJG,IAAI,EAAEC,IAAI,GAAAJ,IAAA,CAAJI,IAAI,EAAEC,MAAM,GAAAL,IAAA,CAANK,MAAM;UAAA,KAEjDpB,MAAM,CAAC6B,QAAQ,CAACb,IAAI,CAAC;YAAAU,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAI,MAAA,WAChBZ,IAAI,CAACf,OAAO,CAACa,IAAI,CAAC;QAAA;UAAAK,aAAA,GAMvBpB,YAAY,CAACe,IAAI,CAAC,EAFpBM,GAAG,GAAAD,aAAA,CAAHC,GAAG,EACHC,IAAI,GAAAF,aAAA,CAAJE,IAAI,EAGN;UAAAG,QAAA,CAAAE,IAAA;UAAA,OACM1B,KAAK,CAACC,OAAO,CAACmB,GAAG,EAAEC,IAAI,IAAI,EAAE,EAAEH,MAAM,EAAED,IAAI,EAAEF,OAAO,CAAC,CAAC;QAAA;QAAA;UAAA,OAAAS,QAAA,CAAAK,IAAA;MAAA;IAAA,GAAAjB,OAAA;EAAA,CAC7D;EAAA,OAAAN,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require('catering'),\n  fromCallback = _require.fromCallback;\nvar ModuleError = require('module-error');\nvar _require2 = require('./lib/common'),\n  getCallback = _require2.getCallback,\n  getOptions = _require2.getOptions;\nvar kPromise = Symbol('promise');\nvar kStatus = Symbol('status');\nvar kOperations = Symbol('operations');\nvar kFinishClose = Symbol('finishClose');\nvar kCloseCallbacks = Symbol('closeCallbacks');\nvar AbstractChainedBatch = /*#__PURE__*/function () {\n  function AbstractChainedBatch(db) {\n    _classCallCheck(this, AbstractChainedBatch);\n    if (typeof db !== 'object' || db === null) {\n      var hint = db === null ? 'null' : typeof db;\n      throw new TypeError(\"The first argument must be an abstract-level database, received \".concat(hint));\n    }\n    this[kOperations] = [];\n    this[kCloseCallbacks] = [];\n    this[kStatus] = 'open';\n    this[kFinishClose] = this[kFinishClose].bind(this);\n    this.db = db;\n    this.db.attachResource(this);\n    this.nextTick = db.nextTick;\n  }\n  _createClass(AbstractChainedBatch, [{\n    key: \"length\",\n    get: function get() {\n      return this[kOperations].length;\n    }\n  }, {\n    key: \"put\",\n    value: function put(key, value, options) {\n      if (this[kStatus] !== 'open') {\n        throw new ModuleError('Batch is not open: cannot call put() after write() or close()', {\n          code: 'LEVEL_BATCH_NOT_OPEN'\n        });\n      }\n      var err = this.db._checkKey(key) || this.db._checkValue(value);\n      if (err) throw err;\n      var db = options && options.sublevel != null ? options.sublevel : this.db;\n      var original = options;\n      var keyEncoding = db.keyEncoding(options && options.keyEncoding);\n      var valueEncoding = db.valueEncoding(options && options.valueEncoding);\n      var keyFormat = keyEncoding.format;\n\n      // Forward encoding options\n      options = _objectSpread(_objectSpread({}, options), {}, {\n        keyEncoding: keyFormat,\n        valueEncoding: valueEncoding.format\n      });\n\n      // Prevent double prefixing\n      if (db !== this.db) {\n        options.sublevel = null;\n      }\n      var mappedKey = db.prefixKey(keyEncoding.encode(key), keyFormat);\n      var mappedValue = valueEncoding.encode(value);\n      this._put(mappedKey, mappedValue, options);\n      this[kOperations].push(_objectSpread(_objectSpread({}, original), {}, {\n        type: 'put',\n        key: key,\n        value: value\n      }));\n      return this;\n    }\n  }, {\n    key: \"_put\",\n    value: function _put(key, value, options) {}\n  }, {\n    key: \"del\",\n    value: function del(key, options) {\n      if (this[kStatus] !== 'open') {\n        throw new ModuleError('Batch is not open: cannot call del() after write() or close()', {\n          code: 'LEVEL_BATCH_NOT_OPEN'\n        });\n      }\n      var err = this.db._checkKey(key);\n      if (err) throw err;\n      var db = options && options.sublevel != null ? options.sublevel : this.db;\n      var original = options;\n      var keyEncoding = db.keyEncoding(options && options.keyEncoding);\n      var keyFormat = keyEncoding.format;\n\n      // Forward encoding options\n      options = _objectSpread(_objectSpread({}, options), {}, {\n        keyEncoding: keyFormat\n      });\n\n      // Prevent double prefixing\n      if (db !== this.db) {\n        options.sublevel = null;\n      }\n      this._del(db.prefixKey(keyEncoding.encode(key), keyFormat), options);\n      this[kOperations].push(_objectSpread(_objectSpread({}, original), {}, {\n        type: 'del',\n        key: key\n      }));\n      return this;\n    }\n  }, {\n    key: \"_del\",\n    value: function _del(key, options) {}\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this[kStatus] !== 'open') {\n        throw new ModuleError('Batch is not open: cannot call clear() after write() or close()', {\n          code: 'LEVEL_BATCH_NOT_OPEN'\n        });\n      }\n      this._clear();\n      this[kOperations] = [];\n      return this;\n    }\n  }, {\n    key: \"_clear\",\n    value: function _clear() {}\n  }, {\n    key: \"write\",\n    value: function write(options, callback) {\n      var _this = this;\n      callback = getCallback(options, callback);\n      callback = fromCallback(callback, kPromise);\n      options = getOptions(options);\n      if (this[kStatus] !== 'open') {\n        this.nextTick(callback, new ModuleError('Batch is not open: cannot call write() after write() or close()', {\n          code: 'LEVEL_BATCH_NOT_OPEN'\n        }));\n      } else if (this.length === 0) {\n        this.close(callback);\n      } else {\n        this[kStatus] = 'writing';\n        this._write(options, function (err) {\n          _this[kStatus] = 'closing';\n          _this[kCloseCallbacks].push(function () {\n            return callback(err);\n          });\n\n          // Emit after setting 'closing' status, because event may trigger a\n          // db close which in turn triggers (idempotently) closing this batch.\n          if (!err) _this.db.emit('batch', _this[kOperations]);\n          _this._close(_this[kFinishClose]);\n        });\n      }\n      return callback[kPromise];\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(options, callback) {}\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      callback = fromCallback(callback, kPromise);\n      if (this[kStatus] === 'closing') {\n        this[kCloseCallbacks].push(callback);\n      } else if (this[kStatus] === 'closed') {\n        this.nextTick(callback);\n      } else {\n        this[kCloseCallbacks].push(callback);\n        if (this[kStatus] !== 'writing') {\n          this[kStatus] = 'closing';\n          this._close(this[kFinishClose]);\n        }\n      }\n      return callback[kPromise];\n    }\n  }, {\n    key: \"_close\",\n    value: function _close(callback) {\n      this.nextTick(callback);\n    }\n  }, {\n    key: kFinishClose,\n    value: function value() {\n      this[kStatus] = 'closed';\n      this.db.detachResource(this);\n      var callbacks = this[kCloseCallbacks];\n      this[kCloseCallbacks] = [];\n      var _iterator = _createForOfIteratorHelper(callbacks),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var cb = _step.value;\n          cb();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n  return AbstractChainedBatch;\n}();\nexports.AbstractChainedBatch = AbstractChainedBatch;","map":{"version":3,"names":["_createForOfIteratorHelper","require","default","_objectSpread","_classCallCheck","_createClass","_require","fromCallback","ModuleError","_require2","getCallback","getOptions","kPromise","Symbol","kStatus","kOperations","kFinishClose","kCloseCallbacks","AbstractChainedBatch","db","hint","TypeError","concat","bind","attachResource","nextTick","key","get","length","value","put","options","code","err","_checkKey","_checkValue","sublevel","original","keyEncoding","valueEncoding","keyFormat","format","mappedKey","prefixKey","encode","mappedValue","_put","push","type","del","_del","clear","_clear","write","callback","_this","close","_write","emit","_close","detachResource","callbacks","_iterator","_step","s","n","done","cb","e","f","exports"],"sources":["/Users/apple/Documents/treasure/node_modules/abstract-level/abstract-chained-batch.js"],"sourcesContent":["'use strict'\n\nconst { fromCallback } = require('catering')\nconst ModuleError = require('module-error')\nconst { getCallback, getOptions } = require('./lib/common')\n\nconst kPromise = Symbol('promise')\nconst kStatus = Symbol('status')\nconst kOperations = Symbol('operations')\nconst kFinishClose = Symbol('finishClose')\nconst kCloseCallbacks = Symbol('closeCallbacks')\n\nclass AbstractChainedBatch {\n  constructor (db) {\n    if (typeof db !== 'object' || db === null) {\n      const hint = db === null ? 'null' : typeof db\n      throw new TypeError(`The first argument must be an abstract-level database, received ${hint}`)\n    }\n\n    this[kOperations] = []\n    this[kCloseCallbacks] = []\n    this[kStatus] = 'open'\n    this[kFinishClose] = this[kFinishClose].bind(this)\n\n    this.db = db\n    this.db.attachResource(this)\n    this.nextTick = db.nextTick\n  }\n\n  get length () {\n    return this[kOperations].length\n  }\n\n  put (key, value, options) {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call put() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      })\n    }\n\n    const err = this.db._checkKey(key) || this.db._checkValue(value)\n    if (err) throw err\n\n    const db = options && options.sublevel != null ? options.sublevel : this.db\n    const original = options\n    const keyEncoding = db.keyEncoding(options && options.keyEncoding)\n    const valueEncoding = db.valueEncoding(options && options.valueEncoding)\n    const keyFormat = keyEncoding.format\n\n    // Forward encoding options\n    options = { ...options, keyEncoding: keyFormat, valueEncoding: valueEncoding.format }\n\n    // Prevent double prefixing\n    if (db !== this.db) {\n      options.sublevel = null\n    }\n\n    const mappedKey = db.prefixKey(keyEncoding.encode(key), keyFormat)\n    const mappedValue = valueEncoding.encode(value)\n\n    this._put(mappedKey, mappedValue, options)\n    this[kOperations].push({ ...original, type: 'put', key, value })\n\n    return this\n  }\n\n  _put (key, value, options) {}\n\n  del (key, options) {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call del() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      })\n    }\n\n    const err = this.db._checkKey(key)\n    if (err) throw err\n\n    const db = options && options.sublevel != null ? options.sublevel : this.db\n    const original = options\n    const keyEncoding = db.keyEncoding(options && options.keyEncoding)\n    const keyFormat = keyEncoding.format\n\n    // Forward encoding options\n    options = { ...options, keyEncoding: keyFormat }\n\n    // Prevent double prefixing\n    if (db !== this.db) {\n      options.sublevel = null\n    }\n\n    this._del(db.prefixKey(keyEncoding.encode(key), keyFormat), options)\n    this[kOperations].push({ ...original, type: 'del', key })\n\n    return this\n  }\n\n  _del (key, options) {}\n\n  clear () {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call clear() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      })\n    }\n\n    this._clear()\n    this[kOperations] = []\n\n    return this\n  }\n\n  _clear () {}\n\n  write (options, callback) {\n    callback = getCallback(options, callback)\n    callback = fromCallback(callback, kPromise)\n    options = getOptions(options)\n\n    if (this[kStatus] !== 'open') {\n      this.nextTick(callback, new ModuleError('Batch is not open: cannot call write() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      }))\n    } else if (this.length === 0) {\n      this.close(callback)\n    } else {\n      this[kStatus] = 'writing'\n      this._write(options, (err) => {\n        this[kStatus] = 'closing'\n        this[kCloseCallbacks].push(() => callback(err))\n\n        // Emit after setting 'closing' status, because event may trigger a\n        // db close which in turn triggers (idempotently) closing this batch.\n        if (!err) this.db.emit('batch', this[kOperations])\n\n        this._close(this[kFinishClose])\n      })\n    }\n\n    return callback[kPromise]\n  }\n\n  _write (options, callback) {}\n\n  close (callback) {\n    callback = fromCallback(callback, kPromise)\n\n    if (this[kStatus] === 'closing') {\n      this[kCloseCallbacks].push(callback)\n    } else if (this[kStatus] === 'closed') {\n      this.nextTick(callback)\n    } else {\n      this[kCloseCallbacks].push(callback)\n\n      if (this[kStatus] !== 'writing') {\n        this[kStatus] = 'closing'\n        this._close(this[kFinishClose])\n      }\n    }\n\n    return callback[kPromise]\n  }\n\n  _close (callback) {\n    this.nextTick(callback)\n  }\n\n  [kFinishClose] () {\n    this[kStatus] = 'closed'\n    this.db.detachResource(this)\n\n    const callbacks = this[kCloseCallbacks]\n    this[kCloseCallbacks] = []\n\n    for (const cb of callbacks) {\n      cb()\n    }\n  }\n}\n\nexports.AbstractChainedBatch = AbstractChainedBatch\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
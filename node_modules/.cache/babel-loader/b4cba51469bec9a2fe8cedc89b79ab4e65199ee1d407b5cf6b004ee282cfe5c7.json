{"ast":null,"code":"import _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { KadDHT as SingleKadDHT } from './kad-dht.js';\nimport { DualKadDHT } from './dual-kad-dht.js';\nexport var KadDHT = /*#__PURE__*/function (_DualKadDHT) {\n  _inherits(KadDHT, _DualKadDHT);\n  var _super = _createSuper(KadDHT);\n  function KadDHT(init) {\n    _classCallCheck(this, KadDHT);\n    return _super.call(this, new SingleKadDHT(_objectSpread(_objectSpread({\n      protocolPrefix: '/ipfs'\n    }, init), {}, {\n      lan: false\n    })), new SingleKadDHT(_objectSpread(_objectSpread({\n      protocolPrefix: '/ipfs'\n    }, init), {}, {\n      clientMode: false,\n      lan: true\n    })));\n  }\n  return _createClass(KadDHT);\n}(DualKadDHT);","map":{"version":3,"names":["KadDHT","SingleKadDHT","DualKadDHT","_DualKadDHT","_inherits","_super","_createSuper","init","_classCallCheck","call","_objectSpread","protocolPrefix","lan","clientMode","_createClass"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/index.ts"],"sourcesContent":["import { KadDHT as SingleKadDHT } from './kad-dht.js'\nimport { DualKadDHT } from './dual-kad-dht.js'\nimport type { Selectors, Validators } from '@libp2p/interface-dht'\n\nexport interface KadDHTInit {\n  /**\n   * How many peers to store in each kBucket (default 20)\n   */\n  kBucketSize?: number\n\n  /**\n   * Whether to start up as a DHT client or server\n   */\n  clientMode?: boolean\n\n  /**\n   * Record selectors\n   */\n  selectors?: Selectors\n\n  /**\n   * Record validators\n   */\n  validators?: Validators\n\n  /**\n   * How often to query our own PeerId in order to ensure we have a\n   * good view on the KAD address space local to our PeerId\n   */\n  querySelfInterval?: number\n\n  /**\n   * A custom protocol prefix to use (default: '/ipfs')\n   */\n  protocolPrefix?: string\n\n  /**\n   * How long to wait in ms when pinging DHT peers to decide if they\n   * should be evicted from the routing table or not (default 10000)\n   */\n  pingTimeout?: number\n\n  /**\n   * How many peers to ping in parallel when deciding if they should\n   * be evicted from the routing table or not (default 10)\n   */\n  pingConcurrency?: number\n\n  /**\n   * How many parallel incoming streams to allow on the DHT protocol per-connection\n   */\n  maxInboundStreams?: number\n\n  /**\n   * How many parallel outgoing streams to allow on the DHT protocol per-connection\n   */\n  maxOutboundStreams?: number\n}\n\nexport class KadDHT extends DualKadDHT {\n  constructor (init?: KadDHTInit) {\n    super(new SingleKadDHT({\n      protocolPrefix: '/ipfs',\n      ...init,\n      lan: false\n    }),\n    new SingleKadDHT({\n      protocolPrefix: '/ipfs',\n      ...init,\n      clientMode: false,\n      lan: true\n    }))\n  }\n}\n"],"mappings":";;;;;AAAA,SAASA,MAAM,IAAIC,YAAY,QAAQ,cAAc;AACrD,SAASC,UAAU,QAAQ,mBAAmB;AA0D9C,WAAaF,MAAO,0BAAAG,WAAA;EAAAC,SAAA,CAAAJ,MAAA,EAAAG,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAN,MAAA;EAClB,SAAAA,OAAaO,IAAiB;IAAAC,eAAA,OAAAR,MAAA;IAAA,OAAAK,MAAA,CAAAI,IAAA,OACtB,IAAIR,YAAY,CAAAS,aAAA,CAAAA,aAAA;MACpBC,cAAc,EAAE;IAAO,GACpBJ,IAAI;MACPK,GAAG,EAAE;IAAK,EACX,CAAC,EACF,IAAIX,YAAY,CAAAS,aAAA,CAAAA,aAAA;MACdC,cAAc,EAAE;IAAO,GACpBJ,IAAI;MACPM,UAAU,EAAE,KAAK;MACjBD,GAAG,EAAE;IAAI,EACV,CAAC;EACJ;EAAC,OAAAE,YAAA,CAAAd,MAAA;AAAA,EAbyBE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}
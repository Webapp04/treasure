{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { P2P } from '@multiformats/mafmt';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nvar log = logger('libp2p:bootstrap');\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nexport var Bootstrap = /*#__PURE__*/function (_EventEmitter, _Symbol$toStringTag) {\n  _inherits(Bootstrap, _EventEmitter);\n  var _super = _createSuper(Bootstrap);\n  function Bootstrap() {\n    var _options$interval;\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      list: []\n    };\n    _classCallCheck(this, Bootstrap);\n    if (options.list == null || options.list.length === 0) {\n      throw new Error('Bootstrap requires a list of peer addresses');\n    }\n    _this = _super.call(this);\n    _this.interval = (_options$interval = options.interval) !== null && _options$interval !== void 0 ? _options$interval : 10000;\n    _this.list = [];\n    var _iterator = _createForOfIteratorHelper(options.list),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var candidate = _step.value;\n        if (!P2P.matches(candidate)) {\n          log.error('Invalid multiaddr');\n          continue;\n        }\n        var ma = multiaddr(candidate);\n        var peerIdStr = ma.getPeerId();\n        if (peerIdStr == null) {\n          log.error('Invalid bootstrap multiaddr without peer id');\n          continue;\n        }\n        var peerData = {\n          id: peerIdFromString(peerIdStr),\n          multiaddrs: [ma],\n          protocols: []\n        };\n        _this.list.push(peerData);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return _this;\n  }\n  _createClass(Bootstrap, [{\n    key: symbol,\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return '@libp2p/bootstrap';\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return Boolean(this.timer);\n    }\n    /**\n     * Start emitting events\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n      if (this.timer != null) {\n        return;\n      }\n      this.timer = setInterval(function () {\n        return _this2._discoverBootstrapPeers();\n      }, this.interval);\n      log('Starting bootstrap node discovery');\n      this._discoverBootstrapPeers();\n    }\n    /**\n     * Emit each address in the list as a PeerInfo\n     */\n  }, {\n    key: \"_discoverBootstrapPeers\",\n    value: function _discoverBootstrapPeers() {\n      var _this3 = this;\n      if (this.timer == null) {\n        return;\n      }\n      this.list.forEach(function (peerData) {\n        _this3.dispatchEvent(new CustomEvent('peer', {\n          detail: peerData\n        }));\n      });\n    }\n    /**\n     * Stop emitting events\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.timer != null) {\n        clearInterval(this.timer);\n      }\n      this.timer = undefined;\n    }\n  }]);\n  return Bootstrap;\n}(EventEmitter, Symbol.toStringTag);\nBootstrap.tag = 'bootstrap';","map":{"version":3,"names":["multiaddr","P2P","CustomEvent","EventEmitter","logger","peerIdFromString","symbol","log","Bootstrap","_EventEmitter","_Symbol$toStringTag","_inherits","_super","_createSuper","_options$interval","_this","options","arguments","length","undefined","list","_classCallCheck","Error","call","interval","_iterator","_createForOfIteratorHelper","_step","s","n","done","candidate","value","matches","error","ma","peerIdStr","getPeerId","peerData","id","multiaddrs","protocols","push","err","e","f","_createClass","key","get","isStarted","Boolean","timer","start","_this2","setInterval","_discoverBootstrapPeers","_this3","forEach","dispatchEvent","detail","stop","clearInterval","Symbol","toStringTag","tag"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/bootstrap/src/index.ts"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { P2P } from '@multiformats/mafmt'\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport { logger } from '@libp2p/logger'\nimport type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interface-peer-discovery'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { symbol } from '@libp2p/interface-peer-discovery'\n\nconst log = logger('libp2p:bootstrap')\n\nexport interface BootstrapOptions {\n  /**\n   * The list of peer addresses in multi-address format\n   */\n  list: string[]\n\n  /**\n   * The interval between emitting addresses in milliseconds\n   */\n  interval?: number\n}\n\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nexport class Bootstrap extends EventEmitter<PeerDiscoveryEvents> implements PeerDiscovery {\n  static tag = 'bootstrap'\n\n  private timer?: ReturnType<typeof setInterval>\n  private readonly list: PeerInfo[]\n  private readonly interval: number\n\n  constructor (options: BootstrapOptions = { list: [] }) {\n    if (options.list == null || options.list.length === 0) {\n      throw new Error('Bootstrap requires a list of peer addresses')\n    }\n    super()\n\n    this.interval = options.interval ?? 10000\n    this.list = []\n\n    for (const candidate of options.list) {\n      if (!P2P.matches(candidate)) {\n        log.error('Invalid multiaddr')\n        continue\n      }\n\n      const ma = multiaddr(candidate)\n      const peerIdStr = ma.getPeerId()\n\n      if (peerIdStr == null) {\n        log.error('Invalid bootstrap multiaddr without peer id')\n        continue\n      }\n\n      const peerData: PeerInfo = {\n        id: peerIdFromString(peerIdStr),\n        multiaddrs: [ma],\n        protocols: []\n      }\n\n      this.list.push(peerData)\n    }\n  }\n\n  get [symbol] (): true {\n    return true\n  }\n\n  get [Symbol.toStringTag] () {\n    return '@libp2p/bootstrap'\n  }\n\n  isStarted () {\n    return Boolean(this.timer)\n  }\n\n  /**\n   * Start emitting events\n   */\n  start () {\n    if (this.timer != null) {\n      return\n    }\n\n    this.timer = setInterval(() => this._discoverBootstrapPeers(), this.interval)\n    log('Starting bootstrap node discovery')\n    this._discoverBootstrapPeers()\n  }\n\n  /**\n   * Emit each address in the list as a PeerInfo\n   */\n  _discoverBootstrapPeers () {\n    if (this.timer == null) {\n      return\n    }\n\n    this.list.forEach((peerData) => {\n      this.dispatchEvent(new CustomEvent<PeerInfo>('peer', { detail: peerData }))\n    })\n  }\n\n  /**\n   * Stop emitting events\n   */\n  stop () {\n    if (this.timer != null) {\n      clearInterval(this.timer)\n    }\n\n    this.timer = undefined\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
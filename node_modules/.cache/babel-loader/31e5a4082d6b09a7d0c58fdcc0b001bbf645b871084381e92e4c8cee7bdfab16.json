{"ast":null,"code":"import bases from './util/bases.js';\nimport { asUint8Array } from './util/as-uint8array.js';\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString(string) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  var base = bases[encoding];\n  if (base == null) {\n    throw new Error(\"Unsupported encoding \\\"\".concat(encoding, \"\\\"\"));\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  // add multibase prefix\n  return base.decoder.decode(\"\".concat(base.prefix).concat(string)); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}","map":{"version":3,"names":["bases","asUint8Array","fromString","string","encoding","arguments","length","undefined","base","Error","concat","globalThis","Buffer","from","decoder","decode","prefix"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/node_modules/uint8arrays/src/from-string.ts"],"sourcesContent":["import bases, { SupportedEncodings } from './util/bases.js'\nimport { asUint8Array } from './util/as-uint8array.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString (string: string, encoding: SupportedEncodings = 'utf8'): Uint8Array {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'))\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n"],"mappings":"AAAA,OAAOA,KAA6B,MAAM,iBAAiB;AAC3D,SAASC,YAAY,QAAQ,yBAAyB;AAItD;;;;;;;AAOA,OAAM,SAAUC,UAAUA,CAAEC,MAAc,EAAuC;EAAA,IAArCC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,MAAM;EAC/E,IAAMG,IAAI,GAAGR,KAAK,CAACI,QAAQ,CAAC;EAE5B,IAAII,IAAI,IAAI,IAAI,EAAE;IAChB,MAAM,IAAIC,KAAK,2BAAAC,MAAA,CAA0BN,QAAQ,OAAG,CAAC;;EAGvD,IAAI,CAACA,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,KAAKO,UAAU,CAACC,MAAM,IAAI,IAAI,IAAID,UAAU,CAACC,MAAM,CAACC,IAAI,IAAI,IAAI,EAAE;IAChH,OAAOZ,YAAY,CAACU,UAAU,CAACC,MAAM,CAACC,IAAI,CAACV,MAAM,EAAE,OAAO,CAAC,CAAC;;EAG9D;EACA,OAAOK,IAAI,CAACM,OAAO,CAACC,MAAM,IAAAL,MAAA,CAAIF,IAAI,CAACQ,MAAM,EAAAN,MAAA,CAAGP,MAAM,CAAE,CAAC,EAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
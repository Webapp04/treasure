{"ast":null,"code":"var _classCallCheck = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nvar RateLimiterRes = require('./RateLimiterRes');\nvar RateLimiterPostgres = /*#__PURE__*/function (_RateLimiterStoreAbst) {\n  \"use strict\";\n\n  _inherits(RateLimiterPostgres, _RateLimiterStoreAbst);\n  var _super = _createSuper(RateLimiterPostgres);\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: postgresClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   tableName: 'string',\n   * }\n   */\n  function RateLimiterPostgres(opts) {\n    var _this;\n    var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, RateLimiterPostgres);\n    _this = _super.call(this, opts);\n    _this.client = opts.storeClient;\n    _this.clientType = opts.storeType;\n    _this.tableName = opts.tableName;\n    _this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n    _this.tableCreated = opts.tableCreated;\n    if (!_this.tableCreated) {\n      _this._createTable().then(function () {\n        _this.tableCreated = true;\n        if (_this.clearExpiredByTimeout) {\n          _this._clearExpiredHourAgo();\n        }\n        if (typeof cb === 'function') {\n          cb();\n        }\n      }).catch(function (err) {\n        if (typeof cb === 'function') {\n          cb(err);\n        } else {\n          throw err;\n        }\n      });\n    } else {\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n    return _this;\n  }\n  _createClass(RateLimiterPostgres, [{\n    key: \"clearExpired\",\n    value: function clearExpired(expire) {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        var q = {\n          name: 'rlflx-clear-expired',\n          text: \"DELETE FROM \".concat(_this2.tableName, \" WHERE expire < $1\"),\n          values: [expire]\n        };\n        _this2._query(q).then(function () {\n          resolve();\n        }).catch(function () {\n          // Deleting expired query is not critical\n          resolve();\n        });\n      });\n    }\n\n    /**\n     * Delete all rows expired 1 hour ago once per 5 minutes\n     *\n     * @private\n     */\n  }, {\n    key: \"_clearExpiredHourAgo\",\n    value: function _clearExpiredHourAgo() {\n      var _this3 = this;\n      if (this._clearExpiredTimeoutId) {\n        clearTimeout(this._clearExpiredTimeoutId);\n      }\n      this._clearExpiredTimeoutId = setTimeout(function () {\n        _this3.clearExpired(Date.now() - 3600000) // Never rejected\n        .then(function () {\n          _this3._clearExpiredHourAgo();\n        });\n      }, 300000);\n      this._clearExpiredTimeoutId.unref();\n    }\n\n    /**\n     *\n     * @return Promise<any>\n     * @private\n     */\n  }, {\n    key: \"_getConnection\",\n    value: function _getConnection() {\n      switch (this.clientType) {\n        case 'pool':\n          return Promise.resolve(this.client);\n        case 'sequelize':\n          return this.client.connectionManager.getConnection();\n        case 'knex':\n          return this.client.client.acquireConnection();\n        case 'typeorm':\n          return Promise.resolve(this.client.driver.master);\n        default:\n          return Promise.resolve(this.client);\n      }\n    }\n  }, {\n    key: \"_releaseConnection\",\n    value: function _releaseConnection(conn) {\n      switch (this.clientType) {\n        case 'pool':\n          return true;\n        case 'sequelize':\n          return this.client.connectionManager.releaseConnection(conn);\n        case 'knex':\n          return this.client.client.releaseConnection(conn);\n        case 'typeorm':\n          return true;\n        default:\n          return true;\n      }\n    }\n\n    /**\n     *\n     * @returns {Promise<any>}\n     * @private\n     */\n  }, {\n    key: \"_createTable\",\n    value: function _createTable() {\n      var _this4 = this;\n      return new Promise(function (resolve, reject) {\n        _this4._query({\n          text: _this4._getCreateTableStmt()\n        }).then(function () {\n          resolve();\n        }).catch(function (err) {\n          if (err.code === '23505') {\n            // Error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n            // Postgres doesn't handle concurrent table creation\n            // It is supposed, that table is created by another worker\n            resolve();\n          } else {\n            reject(err);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_getCreateTableStmt\",\n    value: function _getCreateTableStmt() {\n      return \"CREATE TABLE IF NOT EXISTS \".concat(this.tableName, \" ( \\n      key varchar(255) PRIMARY KEY,\\n      points integer NOT NULL DEFAULT 0,\\n      expire bigint\\n    );\");\n    }\n  }, {\n    key: \"clientType\",\n    get: function get() {\n      return this._clientType;\n    },\n    set: function set(value) {\n      var constructorName = this.client.constructor.name;\n      if (typeof value === 'undefined') {\n        if (constructorName === 'Client') {\n          value = 'client';\n        } else if (constructorName === 'Pool' || constructorName === 'BoundPool') {\n          value = 'pool';\n        } else if (constructorName === 'Sequelize') {\n          value = 'sequelize';\n        } else {\n          throw new Error('storeType is not defined');\n        }\n      }\n      this._clientType = value.toLowerCase();\n    }\n  }, {\n    key: \"tableName\",\n    get: function get() {\n      return this._tableName;\n    },\n    set: function set(value) {\n      this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n    }\n  }, {\n    key: \"tableCreated\",\n    get: function get() {\n      return this._tableCreated;\n    },\n    set: function set(value) {\n      this._tableCreated = typeof value === 'undefined' ? false : !!value;\n    }\n  }, {\n    key: \"clearExpiredByTimeout\",\n    get: function get() {\n      return this._clearExpiredByTimeout;\n    },\n    set: function set(value) {\n      this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n    }\n  }, {\n    key: \"_getRateLimiterRes\",\n    value: function _getRateLimiterRes(rlKey, changedPoints, result) {\n      var res = new RateLimiterRes();\n      var row = result.rows[0];\n      res.isFirstInDuration = changedPoints === row.points;\n      res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n      res.msBeforeNext = row.expire ? Math.max(row.expire - Date.now(), 0) : -1;\n      return res;\n    }\n  }, {\n    key: \"_query\",\n    value: function _query(q) {\n      var _this5 = this;\n      var prefix = this.tableName.toLowerCase();\n      var queryObj = {\n        name: \"\".concat(prefix, \":\").concat(q.name),\n        text: q.text,\n        values: q.values\n      };\n      return new Promise(function (resolve, reject) {\n        _this5._getConnection().then(function (conn) {\n          conn.query(queryObj).then(function (res) {\n            resolve(res);\n            _this5._releaseConnection(conn);\n          }).catch(function (err) {\n            reject(err);\n            _this5._releaseConnection(conn);\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_upsert\",\n    value: function _upsert(key, points, msDuration) {\n      var forceExpire = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (!this.tableCreated) {\n        return Promise.reject(Error('Table is not created yet'));\n      }\n      var newExpire = msDuration > 0 ? Date.now() + msDuration : null;\n      var expireQ = forceExpire ? ' $3 ' : \" CASE\\n             WHEN \".concat(this.tableName, \".expire <= $4 THEN $3\\n             ELSE \").concat(this.tableName, \".expire\\n            END \");\n      return this._query({\n        name: forceExpire ? 'rlflx-upsert-force' : 'rlflx-upsert',\n        text: \"\\n            INSERT INTO \".concat(this.tableName, \" VALUES ($1, $2, $3)\\n              ON CONFLICT(key) DO UPDATE SET\\n                points = CASE\\n                          WHEN (\").concat(this.tableName, \".expire <= $4 OR 1=\").concat(forceExpire ? 1 : 0, \") THEN $2\\n                          ELSE \").concat(this.tableName, \".points + ($2)\\n                         END,\\n                expire = \").concat(expireQ, \"\\n            RETURNING points, expire;\"),\n        values: [key, points, newExpire, Date.now()]\n      });\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(rlKey) {\n      var _this6 = this;\n      if (!this.tableCreated) {\n        return Promise.reject(Error('Table is not created yet'));\n      }\n      return new Promise(function (resolve, reject) {\n        _this6._query({\n          name: 'rlflx-get',\n          text: \"\\n            SELECT points, expire FROM \".concat(_this6.tableName, \" WHERE key = $1 AND (expire > $2 OR expire IS NULL);\"),\n          values: [rlKey, Date.now()]\n        }).then(function (res) {\n          if (res.rowCount === 0) {\n            res = null;\n          }\n          resolve(res);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(rlKey) {\n      if (!this.tableCreated) {\n        return Promise.reject(Error('Table is not created yet'));\n      }\n      return this._query({\n        name: 'rlflx-delete',\n        text: \"DELETE FROM \".concat(this.tableName, \" WHERE key = $1\"),\n        values: [rlKey]\n      }).then(function (res) {\n        return res.rowCount > 0;\n      });\n    }\n  }]);\n  return RateLimiterPostgres;\n}(RateLimiterStoreAbstract);\nmodule.exports = RateLimiterPostgres;","map":{"version":3,"names":["RateLimiterStoreAbstract","require","RateLimiterRes","RateLimiterPostgres","_RateLimiterStoreAbst","_inherits","_super","_createSuper","opts","_this","cb","arguments","length","undefined","_classCallCheck","call","client","storeClient","clientType","storeType","tableName","clearExpiredByTimeout","tableCreated","_createTable","then","_clearExpiredHourAgo","catch","err","_createClass","key","value","clearExpired","expire","_this2","Promise","resolve","q","name","text","concat","values","_query","_this3","_clearExpiredTimeoutId","clearTimeout","setTimeout","Date","now","unref","_getConnection","connectionManager","getConnection","acquireConnection","driver","master","_releaseConnection","conn","releaseConnection","_this4","reject","_getCreateTableStmt","code","get","_clientType","set","constructorName","constructor","Error","toLowerCase","_tableName","keyPrefix","_tableCreated","_clearExpiredByTimeout","Boolean","_getRateLimiterRes","rlKey","changedPoints","result","res","row","rows","isFirstInDuration","points","consumedPoints","remainingPoints","Math","max","msBeforeNext","_this5","prefix","queryObj","query","_upsert","msDuration","forceExpire","newExpire","expireQ","_get","_this6","rowCount","_delete","module","exports"],"sources":["/Users/apple/Documents/treasure/node_modules/rate-limiter-flexible/lib/RateLimiterPostgres.js"],"sourcesContent":["const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nclass RateLimiterPostgres extends RateLimiterStoreAbstract {\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: postgresClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   tableName: 'string',\n   * }\n   */\n  constructor(opts, cb = null) {\n    super(opts);\n\n    this.client = opts.storeClient;\n    this.clientType = opts.storeType;\n\n    this.tableName = opts.tableName;\n\n    this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n\n    this.tableCreated = opts.tableCreated;\n    if (!this.tableCreated) {\n      this._createTable()\n        .then(() => {\n          this.tableCreated = true;\n          if (this.clearExpiredByTimeout) {\n            this._clearExpiredHourAgo();\n          }\n          if (typeof cb === 'function') {\n            cb();\n          }\n        })\n        .catch((err) => {\n          if (typeof cb === 'function') {\n            cb(err);\n          } else {\n            throw err;\n          }\n        });\n    } else {\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n  }\n\n  clearExpired(expire) {\n    return new Promise((resolve) => {\n      const q = {\n        name: 'rlflx-clear-expired',\n        text: `DELETE FROM ${this.tableName} WHERE expire < $1`,\n        values: [expire],\n      };\n      this._query(q)\n        .then(() => {\n          resolve();\n        })\n        .catch(() => {\n          // Deleting expired query is not critical\n          resolve();\n        });\n    });\n  }\n\n  /**\n   * Delete all rows expired 1 hour ago once per 5 minutes\n   *\n   * @private\n   */\n  _clearExpiredHourAgo() {\n    if (this._clearExpiredTimeoutId) {\n      clearTimeout(this._clearExpiredTimeoutId);\n    }\n    this._clearExpiredTimeoutId = setTimeout(() => {\n      this.clearExpired(Date.now() - 3600000) // Never rejected\n        .then(() => {\n          this._clearExpiredHourAgo();\n        });\n    }, 300000);\n    this._clearExpiredTimeoutId.unref();\n  }\n\n  /**\n   *\n   * @return Promise<any>\n   * @private\n   */\n  _getConnection() {\n    switch (this.clientType) {\n      case 'pool':\n        return Promise.resolve(this.client);\n      case 'sequelize':\n        return this.client.connectionManager.getConnection();\n      case 'knex':\n        return this.client.client.acquireConnection();\n      case 'typeorm':\n        return Promise.resolve(this.client.driver.master);\n      default:\n        return Promise.resolve(this.client);\n    }\n  }\n\n  _releaseConnection(conn) {\n    switch (this.clientType) {\n      case 'pool':\n        return true;\n      case 'sequelize':\n        return this.client.connectionManager.releaseConnection(conn);\n      case 'knex':\n        return this.client.client.releaseConnection(conn);\n      case 'typeorm':\n        return true;\n      default:\n        return true;\n    }\n  }\n\n  /**\n   *\n   * @returns {Promise<any>}\n   * @private\n   */\n  _createTable() {\n    return new Promise((resolve, reject) => {\n      this._query({\n        text: this._getCreateTableStmt(),\n      })\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          if (err.code === '23505') {\n            // Error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n            // Postgres doesn't handle concurrent table creation\n            // It is supposed, that table is created by another worker\n            resolve();\n          } else {\n            reject(err);\n          }\n        });\n    });\n  }\n\n  _getCreateTableStmt() {\n    return `CREATE TABLE IF NOT EXISTS ${this.tableName} ( \n      key varchar(255) PRIMARY KEY,\n      points integer NOT NULL DEFAULT 0,\n      expire bigint\n    );`;\n  }\n\n  get clientType() {\n    return this._clientType;\n  }\n\n  set clientType(value) {\n    const constructorName = this.client.constructor.name;\n\n    if (typeof value === 'undefined') {\n      if (constructorName === 'Client') {\n        value = 'client';\n      } else if (\n        constructorName === 'Pool' ||\n        constructorName === 'BoundPool'\n      ) {\n        value = 'pool';\n      } else if (constructorName === 'Sequelize') {\n        value = 'sequelize';\n      } else {\n        throw new Error('storeType is not defined');\n      }\n    }\n\n    this._clientType = value.toLowerCase();\n  }\n\n  get tableName() {\n    return this._tableName;\n  }\n\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n\n  get tableCreated() {\n    return this._tableCreated\n  }\n\n  set tableCreated(value) {\n    this._tableCreated = typeof value === 'undefined' ? false : !!value;\n  }\n\n  get clearExpiredByTimeout() {\n    return this._clearExpiredByTimeout;\n  }\n\n  set clearExpiredByTimeout(value) {\n    this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n    const row = result.rows[0];\n\n    res.isFirstInDuration = changedPoints === row.points;\n    res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = row.expire\n      ? Math.max(row.expire - Date.now(), 0)\n      : -1;\n\n    return res;\n  }\n\n  _query(q) {\n    const prefix = this.tableName.toLowerCase();\n    const queryObj = { name: `${prefix}:${q.name}`, text: q.text, values: q.values };\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(queryObj)\n            .then((res) => {\n              resolve(res);\n              this._releaseConnection(conn);\n            })\n            .catch((err) => {\n              reject(err);\n              this._releaseConnection(conn);\n            });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _upsert(key, points, msDuration, forceExpire = false) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    const newExpire = msDuration > 0 ? Date.now() + msDuration : null;\n    const expireQ = forceExpire\n      ? ' $3 '\n      : ` CASE\n             WHEN ${this.tableName}.expire <= $4 THEN $3\n             ELSE ${this.tableName}.expire\n            END `;\n\n    return this._query({\n      name: forceExpire ? 'rlflx-upsert-force' : 'rlflx-upsert',\n      text: `\n            INSERT INTO ${this.tableName} VALUES ($1, $2, $3)\n              ON CONFLICT(key) DO UPDATE SET\n                points = CASE\n                          WHEN (${this.tableName}.expire <= $4 OR 1=${forceExpire ? 1 : 0}) THEN $2\n                          ELSE ${this.tableName}.points + ($2)\n                         END,\n                expire = ${expireQ}\n            RETURNING points, expire;`,\n      values: [key, points, newExpire, Date.now()],\n    });\n  }\n\n  _get(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._query({\n        name: 'rlflx-get',\n        text: `\n            SELECT points, expire FROM ${this.tableName} WHERE key = $1 AND (expire > $2 OR expire IS NULL);`,\n        values: [rlKey, Date.now()],\n      })\n        .then((res) => {\n          if (res.rowCount === 0) {\n            res = null;\n          }\n          resolve(res);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _delete(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return this._query({\n      name: 'rlflx-delete',\n      text: `DELETE FROM ${this.tableName} WHERE key = $1`,\n      values: [rlKey],\n    })\n      .then(res => res.rowCount > 0);\n  }\n}\n\nmodule.exports = RateLimiterPostgres;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
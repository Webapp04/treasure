{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { UnixFS } from 'ipfs-unixfs';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew(_ref) {\n  var repo = _ref.repo,\n    preload = _ref.preload;\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  function _new() {\n    return _new2.apply(this, arguments);\n  }\n  function _new2() {\n    _new2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        data,\n        buf,\n        hash,\n        cid,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            if (!options.template) {\n              _context.next = 7;\n              break;\n            }\n            if (!(options.template === 'unixfs-dir')) {\n              _context.next = 6;\n              break;\n            }\n            data = new UnixFS({\n              type: 'directory'\n            }).marshal();\n            _context.next = 7;\n            break;\n          case 6:\n            throw new Error('unknown template');\n          case 7:\n            buf = dagPB.encode({\n              Data: data,\n              Links: []\n            });\n            _context.next = 10;\n            return sha256.digest(buf);\n          case 10:\n            hash = _context.sent;\n            cid = CID.createV0(hash);\n            _context.next = 14;\n            return repo.blocks.put(cid, buf, {\n              signal: options.signal\n            });\n          case 14:\n            if (options.preload !== false) {\n              preload(cid);\n            }\n            return _context.abrupt(\"return\", cid);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _new2.apply(this, arguments);\n  }\n  return withTimeoutOption(_new);\n}","map":{"version":3,"names":["dagPB","sha256","UnixFS","withTimeoutOption","CID","createNew","_ref","repo","preload","_new","_new2","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","data","buf","hash","cid","_args","wrap","_callee$","_context","prev","next","length","undefined","template","type","marshal","Error","encode","Data","Links","digest","sent","createV0","blocks","put","signal","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/object/new.js"],"sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,cAAc;AACrC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAAC,IAAA,EAAqB;EAAA,IAAjBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EACxC;AACF;AACA;EAFE,SAGeC,IAAIA,CAAA;IAAA,OAAAC,KAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,MAAA;IAAAA,KAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAnB,SAAAC,QAAA;MAAA,IAAAC,OAAA;QAAAC,IAAA;QAAAC,GAAA;QAAAC,IAAA;QAAAC,GAAA;QAAAC,KAAA,GAAAV,SAAA;MAAA,OAAAE,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAqBV,OAAO,GAAAK,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAA,KAG3BL,OAAO,CAACa,QAAQ;cAAAL,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAA,MACdV,OAAO,CAACa,QAAQ,KAAK,YAAY;cAAAL,QAAA,CAAAE,IAAA;cAAA;YAAA;YACnCT,IAAI,GAAI,IAAIhB,MAAM,CAAC;cAAE6B,IAAI,EAAE;YAAY,CAAC,CAAC,CAAEC,OAAO,CAAC,CAAC;YAAAP,QAAA,CAAAE,IAAA;YAAA;UAAA;YAAA,MAE9C,IAAIM,KAAK,CAAC,kBAAkB,CAAC;UAAA;YAIjCd,GAAG,GAAGnB,KAAK,CAACkC,MAAM,CAAC;cACvBC,IAAI,EAAEjB,IAAI;cACVkB,KAAK,EAAE;YACT,CAAC,CAAC;YAAAX,QAAA,CAAAE,IAAA;YAAA,OACiB1B,MAAM,CAACoC,MAAM,CAAClB,GAAG,CAAC;UAAA;YAA/BC,IAAI,GAAAK,QAAA,CAAAa,IAAA;YACJjB,GAAG,GAAGjB,GAAG,CAACmC,QAAQ,CAACnB,IAAI,CAAC;YAAAK,QAAA,CAAAE,IAAA;YAAA,OAExBpB,IAAI,CAACiC,MAAM,CAACC,GAAG,CAACpB,GAAG,EAAEF,GAAG,EAAE;cAC9BuB,MAAM,EAAEzB,OAAO,CAACyB;YAClB,CAAC,CAAC;UAAA;YAEF,IAAIzB,OAAO,CAACT,OAAO,KAAK,KAAK,EAAE;cAC7BA,OAAO,CAACa,GAAG,CAAC;YACd;YAAC,OAAAI,QAAA,CAAAkB,MAAA,WAEMtB,GAAG;UAAA;UAAA;YAAA,OAAAI,QAAA,CAAAmB,IAAA;QAAA;MAAA,GAAA5B,OAAA;IAAA,CACX;IAAA,OAAAN,KAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOT,iBAAiB,CAACM,IAAI,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
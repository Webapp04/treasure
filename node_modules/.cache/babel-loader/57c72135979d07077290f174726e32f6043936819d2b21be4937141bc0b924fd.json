{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { base64 } from 'multiformats/bases/base64';\nimport * as ciphers from '../ciphers/aes-gcm.js';\n/**\n * Attempts to decrypt a base64 encoded PrivateKey string\n * with the given password. The privateKey must have been exported\n * using the same password and underlying cipher (aes-gcm)\n */\nexport function importer(_x, _x2) {\n  return _importer.apply(this, arguments);\n}\nfunction _importer() {\n  _importer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(privateKey, password) {\n    var encryptedKey, cipher;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          encryptedKey = base64.decode(privateKey);\n          cipher = ciphers.create();\n          _context.next = 4;\n          return cipher.decrypt(encryptedKey, password);\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _importer.apply(this, arguments);\n}","map":{"version":3,"names":["base64","ciphers","importer","_x","_x2","_importer","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","privateKey","password","encryptedKey","cipher","wrap","_callee$","_context","prev","next","decode","create","decrypt","abrupt","sent","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/importer.ts"],"sourcesContent":["import { base64 } from 'multiformats/bases/base64'\nimport * as ciphers from '../ciphers/aes-gcm.js'\n\n/**\n * Attempts to decrypt a base64 encoded PrivateKey string\n * with the given password. The privateKey must have been exported\n * using the same password and underlying cipher (aes-gcm)\n */\nexport async function importer (privateKey: string, password: string) {\n  const encryptedKey = base64.decode(privateKey)\n  const cipher = ciphers.create()\n  return await cipher.decrypt(encryptedKey, password)\n}\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,2BAA2B;AAClD,OAAO,KAAKC,OAAO,MAAM,uBAAuB;AAEhD;;;;;AAKA,gBAAsBC,QAAQA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAI7B,SAAAF,UAAA;EAAAA,SAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAJM,SAAAC,QAAyBC,UAAkB,EAAEC,QAAgB;IAAA,IAAAC,YAAA,EAAAC,MAAA;IAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAC5DN,YAAY,GAAGd,MAAM,CAACqB,MAAM,CAACT,UAAU,CAAC;UACxCG,MAAM,GAAGd,OAAO,CAACqB,MAAM,EAAE;UAAAJ,QAAA,CAAAE,IAAA;UAAA,OAClBL,MAAM,CAACQ,OAAO,CAACT,YAAY,EAAED,QAAQ,CAAC;QAAA;UAAA,OAAAK,QAAA,CAAAM,MAAA,WAAAN,QAAA,CAAAO,IAAA;QAAA;QAAA;UAAA,OAAAP,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAf,OAAA;EAAA,CACpD;EAAA,OAAAN,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
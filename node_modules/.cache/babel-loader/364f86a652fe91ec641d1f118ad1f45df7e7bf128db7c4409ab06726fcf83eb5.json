{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport mortice from 'mortice';\n\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\nvar lock;\n\n/**\n * @param {boolean} [repoOwner]\n */\nexport function createLock() {\n  var repoOwner = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (lock) {\n    return lock;\n  }\n  var mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  });\n  lock = {\n    readLock: function readLock(func) {\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var releaseLock,\n          _len,\n          args,\n          _key,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return mutex.readLock();\n            case 2:\n              releaseLock = _context.sent;\n              _context.prev = 3;\n              for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = _args[_key];\n              }\n              _context.next = 7;\n              return func.apply(null, args);\n            case 7:\n              return _context.abrupt(\"return\", _context.sent);\n            case 8:\n              _context.prev = 8;\n              releaseLock();\n              return _context.finish(8);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[3,, 8, 11]]);\n      }));\n    },\n    writeLock: function writeLock(func) {\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var releaseLock,\n          _len2,\n          args,\n          _key2,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return mutex.writeLock();\n            case 2:\n              releaseLock = _context2.sent;\n              _context2.prev = 3;\n              for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = _args2[_key2];\n              }\n              _context2.next = 7;\n              return func.apply(null, args);\n            case 7:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 8:\n              _context2.prev = 8;\n              releaseLock();\n              return _context2.finish(8);\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3,, 8, 11]]);\n      }));\n    }\n  };\n  return lock;\n}","map":{"version":3,"names":["mortice","lock","createLock","repoOwner","arguments","length","undefined","mutex","singleProcess","readLock","func","_asyncToGenerator","_regeneratorRuntime","mark","_callee","releaseLock","_len","args","_key","_args","wrap","_callee$","_context","prev","next","sent","Array","apply","abrupt","finish","stop","writeLock","_callee2","_len2","_key2","_args2","_callee2$","_context2"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/files/utils/create-lock.js"],"sourcesContent":["import mortice from 'mortice'\n\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\nlet lock\n\n/**\n * @param {boolean} [repoOwner]\n */\nexport function createLock (repoOwner = false) {\n  if (lock) {\n    return lock\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  })\n\n  lock = {\n    readLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.readLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    },\n\n    writeLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.writeLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    }\n  }\n\n  return lock\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
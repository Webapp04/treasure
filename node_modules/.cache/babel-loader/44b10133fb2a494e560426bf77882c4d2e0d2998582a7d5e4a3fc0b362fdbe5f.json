{"ast":null,"code":"import _regeneratorRuntime from\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import AirdropApi from\"api/AirdropApi\";import{ALERT_STATUS_FAILURE,ALERT_STATUS_SUCCESS,UPGRADE_KEY_ALERT}from\"constant/alert\";import{useContractNFKeyWithSigner}from\"hooks/blockchain/useHandleContracts\";import useHandleToken from\"hooks/token/useHandleToken\";import{useDispatch,useSelector}from\"react-redux\";import ACTIONS from\"redux/action\";import{selectNftSelected}from\"redux/slice/nftSlice\";import{selectUser}from\"redux/slice/userSlice\";export default function useUpgradeKey(){var dispatch=useDispatch();var user=useSelector(selectUser);var nftSelected=useSelector(selectNftSelected);var handleToken=useHandleToken();var handleContractNFKeyWithSigner=useContractNFKeyWithSigner();var upgradeKey=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var contractNFKeyWithSigner;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return handleContractNFKeyWithSigner;case 2:contractNFKeyWithSigner=_context2.sent;return _context2.abrupt(\"return\",contractNFKeyWithSigner.upgradeKey(nftSelected===null||nftSelected===void 0?void 0:nftSelected.tokenId).then(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(tx){var _token;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return new AirdropApi().logger({wallet_id:user===null||user===void 0?void 0:user.wallet_id,type:\"PENDING\",action:\"upgradeKey\",description:\"Upgraded\",tx:JSON.stringify(tx)});case 2:_context.next=4;return tx.wait();case 4:_context.next=6;return handleToken.getcheckTxEvent(tx===null||tx===void 0?void 0:tx.hash,\"KeyUpgraded\");case 6:_context.next=8;return handleToken.checkToken(nftSelected===null||nftSelected===void 0?void 0:nftSelected.tokenId);case 8:_token=_context.sent;if(_token){_context.next=11;break;}return _context.abrupt(\"return\");case 11:ACTIONS.SET_NFT_LIST_ITEM(dispatch,_token);ACTIONS.SET_NFT_SELECTED(dispatch,_token);ACTIONS.SET_TRANSANCTION_HASH(dispatch,tx===null||tx===void 0?void 0:tx.hash);ACTIONS.SET_ALERT(dispatch,true,ALERT_STATUS_SUCCESS,UPGRADE_KEY_ALERT(nftSelected===null||nftSelected===void 0?void 0:nftSelected.tokenId,true));return _context.abrupt(\"return\",true);case 16:case\"end\":return _context.stop();}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}()).catch(function(err){new AirdropApi().logger({wallet_id:user===null||user===void 0?void 0:user.wallet_id,type:\"ERROR\",action:\"upgradeKey\",error:JSON.stringify(err)});ACTIONS.SET_ALERT(dispatch,true,ALERT_STATUS_FAILURE,UPGRADE_KEY_ALERT(nftSelected===null||nftSelected===void 0?void 0:nftSelected.tokenId,false));return null;}));case 4:case\"end\":return _context2.stop();}},_callee2);}));return function upgradeKey(){return _ref.apply(this,arguments);};}();return{upgradeKey:upgradeKey};}","map":{"version":3,"names":["AirdropApi","ALERT_STATUS_FAILURE","ALERT_STATUS_SUCCESS","UPGRADE_KEY_ALERT","useContractNFKeyWithSigner","useHandleToken","useDispatch","useSelector","ACTIONS","selectNftSelected","selectUser","useUpgradeKey","dispatch","user","nftSelected","handleToken","handleContractNFKeyWithSigner","upgradeKey","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","contractNFKeyWithSigner","wrap","_callee2$","_context2","prev","next","sent","abrupt","tokenId","then","_ref2","_callee","tx","_token","_callee$","_context","logger","wallet_id","type","action","description","JSON","stringify","wait","getcheckTxEvent","hash","checkToken","SET_NFT_LIST_ITEM","SET_NFT_SELECTED","SET_TRANSANCTION_HASH","SET_ALERT","stop","_x","apply","arguments","catch","err","error"],"sources":["/Users/apple/Documents/treasure/src/hooks/nft/useUpgradeKey.js"],"sourcesContent":["import AirdropApi from \"api/AirdropApi\";\nimport {\n  ALERT_STATUS_FAILURE,\n  ALERT_STATUS_SUCCESS,\n  UPGRADE_KEY_ALERT,\n} from \"constant/alert\";\nimport { useContractNFKeyWithSigner } from \"hooks/blockchain/useHandleContracts\";\nimport useHandleToken from \"hooks/token/useHandleToken\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ACTIONS from \"redux/action\";\nimport { selectNftSelected } from \"redux/slice/nftSlice\";\nimport { selectUser } from \"redux/slice/userSlice\";\n\nexport default function useUpgradeKey() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const nftSelected = useSelector(selectNftSelected);\n  const handleToken = useHandleToken();\n  const handleContractNFKeyWithSigner = useContractNFKeyWithSigner();\n\n  const upgradeKey = async () => {\n    // const isApprove = await approveSMRTR();\n    // if (!isApprove) return null;\n    const contractNFKeyWithSigner = await handleContractNFKeyWithSigner;\n    return contractNFKeyWithSigner\n      .upgradeKey(nftSelected?.tokenId)\n      .then(async (tx) => {\n        await new AirdropApi().logger({\n          wallet_id: user?.wallet_id,\n          type: \"PENDING\",\n          action: \"upgradeKey\",\n          description: \"Upgraded\",\n          tx: JSON.stringify(tx),\n        });\n        await tx.wait();\n        // await sleep(15);\n        await handleToken.getcheckTxEvent(tx?.hash, \"KeyUpgraded\");\n        const _token = await handleToken.checkToken(nftSelected?.tokenId);\n        if (!_token) return;\n        ACTIONS.SET_NFT_LIST_ITEM(dispatch, _token);\n        ACTIONS.SET_NFT_SELECTED(dispatch, _token);\n        ACTIONS.SET_TRANSANCTION_HASH(dispatch, tx?.hash);\n        ACTIONS.SET_ALERT(\n          dispatch,\n          true,\n          ALERT_STATUS_SUCCESS,\n          UPGRADE_KEY_ALERT(nftSelected?.tokenId, true)\n        );\n\n        return true;\n      })\n      .catch((err) => {\n        new AirdropApi().logger({\n          wallet_id: user?.wallet_id,\n          type: \"ERROR\",\n          action: \"upgradeKey\",\n          error: JSON.stringify(err),\n        });\n\n        ACTIONS.SET_ALERT(\n          dispatch,\n          true,\n          ALERT_STATUS_FAILURE,\n          UPGRADE_KEY_ALERT(nftSelected?.tokenId, false)\n        );\n\n        return null;\n      });\n  };\n  return { upgradeKey };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
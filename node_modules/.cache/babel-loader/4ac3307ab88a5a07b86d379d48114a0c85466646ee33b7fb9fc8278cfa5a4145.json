{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { logger } from '@libp2p/logger';\nvar log = logger('ipfs:mfs-preload');\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nexport function createMfsPreloader(_ref) {\n  var preload = _ref.preload,\n    files = _ref.files,\n    _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options;\n  options.interval = options.interval || 30 * 1000;\n  if (!options.enabled) {\n    log('MFS preload disabled');\n    var noop = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function noop() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n  var rootCid = '';\n  /** @type {any} */\n  var timeoutId;\n  var preloadMfs = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var stats, nextRootCid;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return files.stat('/');\n          case 3:\n            stats = _context2.sent;\n            nextRootCid = stats.cid.toString();\n            if (!(rootCid !== nextRootCid)) {\n              _context2.next = 10;\n              break;\n            }\n            log(\"preloading updated MFS root \".concat(rootCid, \" -> \").concat(stats.cid));\n            _context2.next = 9;\n            return preload(stats.cid);\n          case 9:\n            rootCid = nextRootCid;\n          case 10:\n            _context2.next = 15;\n            break;\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            log.error('failed to preload MFS root', _context2.t0);\n          case 15:\n            _context2.prev = 15;\n            timeoutId = setTimeout(preloadMfs, options.interval);\n            return _context2.finish(15);\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 12, 15, 18]]);\n    }));\n    return function preloadMfs() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    start: function start() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var stats;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return files.stat('/');\n            case 2:\n              stats = _context3.sent;\n              rootCid = stats.cid.toString();\n              log(\"monitoring MFS root \".concat(stats.cid));\n              timeoutId = setTimeout(preloadMfs, options.interval);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    /**\n     * @returns {void}\n     */\n    stop: function stop() {\n      clearTimeout(timeoutId);\n    }\n  };\n}","map":{"version":3,"names":["logger","log","createMfsPreloader","_ref","preload","files","_ref$options","options","interval","enabled","noop","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","stop","apply","arguments","start","rootCid","timeoutId","preloadMfs","_ref3","_callee2","stats","nextRootCid","_callee2$","_context2","stat","sent","cid","toString","concat","t0","error","setTimeout","finish","_callee3","_callee3$","_context3","clearTimeout"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/mfs-preload.js"],"sourcesContent":["import { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs-preload')\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nexport function createMfsPreloader ({ preload, files, options = {} }) {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (/** @type {any} */ err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
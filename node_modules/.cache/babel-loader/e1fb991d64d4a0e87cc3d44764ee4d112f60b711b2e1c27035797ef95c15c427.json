{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport 'node-forge/lib/sha512.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport * as crypto from './rsa.js';\nimport * as pbm from './keys.js';\nimport { exporter } from './exporter.js';\nexport var RsaPublicKey = /*#__PURE__*/function () {\n  function RsaPublicKey(key) {\n    _classCallCheck(this, RsaPublicKey);\n    this._key = key;\n  }\n  _createClass(RsaPublicKey, [{\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, sig) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return crypto.hashAndVerify(this._key, sig, data);\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function verify(_x, _x2) {\n        return _verify.apply(this, arguments);\n      }\n      return verify;\n    }()\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkix(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PublicKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      }).subarray();\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(bytes) {\n      return crypto.encrypt(this._key, bytes);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$sha256$digest, bytes;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return sha256.digest(this.bytes);\n            case 2:\n              _yield$sha256$digest = _context2.sent;\n              bytes = _yield$sha256$digest.bytes;\n              return _context2.abrupt(\"return\", bytes);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function hash() {\n        return _hash.apply(this, arguments);\n      }\n      return hash;\n    }()\n  }]);\n  return RsaPublicKey;\n}();\nexport var RsaPrivateKey = /*#__PURE__*/function () {\n  function RsaPrivateKey(key, publicKey) {\n    _classCallCheck(this, RsaPrivateKey);\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n  _createClass(RsaPrivateKey, [{\n    key: \"genSecret\",\n    value: function genSecret() {\n      return crypto.getRandomValues(16);\n    }\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(message) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return crypto.hashAndSign(this._key, message);\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function sign(_x3) {\n        return _sign.apply(this, arguments);\n      }\n      return sign;\n    }()\n  }, {\n    key: \"public\",\n    get: function get() {\n      if (this._publicKey == null) {\n        throw new CodeError('public key not provided', 'ERR_PUBKEY_NOT_PROVIDED');\n      }\n      return new RsaPublicKey(this._publicKey);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(bytes) {\n      return crypto.decrypt(this._key, bytes);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkcs1(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PrivateKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      }).subarray();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$sha256$digest2, bytes;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return sha256.digest(this.bytes);\n            case 2:\n              _yield$sha256$digest2 = _context4.sent;\n              bytes = _yield$sha256$digest2.bytes;\n              return _context4.abrupt(\"return\", bytes);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function hash() {\n        return _hash2.apply(this, arguments);\n      }\n      return hash;\n    }()\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n  }, {\n    key: \"id\",\n    value: function () {\n      var _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var hash;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.public.hash();\n            case 2:\n              hash = _context5.sent;\n              return _context5.abrupt(\"return\", uint8ArrayToString(hash, 'base58btc'));\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function id() {\n        return _id.apply(this, arguments);\n      }\n      return id;\n    }()\n    /**\n     * Exports the key into a password protected PEM format\n     */\n  }, {\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(password) {\n        var format,\n          buffer,\n          asn1,\n          privateKey,\n          options,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              format = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 'pkcs-8';\n              if (!(format === 'pkcs-8')) {\n                _context6.next = 9;\n                break;\n              }\n              buffer = new forge.util.ByteBuffer(this.marshal());\n              asn1 = forge.asn1.fromDer(buffer);\n              privateKey = forge.pki.privateKeyFromAsn1(asn1);\n              options = {\n                algorithm: 'aes256',\n                count: 10000,\n                saltSize: 128 / 8,\n                prfAlgorithm: 'sha512'\n              };\n              return _context6.abrupt(\"return\", forge.pki.encryptRsaPrivateKey(privateKey, password, options));\n            case 9:\n              if (!(format === 'libp2p-key')) {\n                _context6.next = 15;\n                break;\n              }\n              _context6.next = 12;\n              return exporter(this.bytes, password);\n            case 12:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 15:\n              throw new CodeError(\"export format '\".concat(format, \"' is not supported\"), 'ERR_INVALID_EXPORT_FORMAT');\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _export(_x4) {\n        return _export2.apply(this, arguments);\n      }\n      return _export;\n    }()\n  }]);\n  return RsaPrivateKey;\n}();\nexport function unmarshalRsaPrivateKey(_x5) {\n  return _unmarshalRsaPrivateKey.apply(this, arguments);\n}\nfunction _unmarshalRsaPrivateKey() {\n  _unmarshalRsaPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bytes) {\n    var jwk, keys;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          jwk = crypto.utils.pkcs1ToJwk(bytes);\n          _context7.next = 3;\n          return crypto.unmarshalPrivateKey(jwk);\n        case 3:\n          keys = _context7.sent;\n          return _context7.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _unmarshalRsaPrivateKey.apply(this, arguments);\n}\nexport function unmarshalRsaPublicKey(bytes) {\n  var jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\nexport function fromJwk(_x6) {\n  return _fromJwk.apply(this, arguments);\n}\nfunction _fromJwk() {\n  _fromJwk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(jwk) {\n    var keys;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return crypto.unmarshalPrivateKey(jwk);\n        case 2:\n          keys = _context8.sent;\n          return _context8.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _fromJwk.apply(this, arguments);\n}\nexport function generateKeyPair(_x7) {\n  return _generateKeyPair.apply(this, arguments);\n}\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(bits) {\n    var keys;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return crypto.generateKey(bits);\n        case 2:\n          keys = _context9.sent;\n          return _context9.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n  return _generateKeyPair.apply(this, arguments);\n}","map":{"version":3,"names":["sha256","CodeError","equals","uint8ArrayEquals","toString","uint8ArrayToString","forge","crypto","pbm","exporter","RsaPublicKey","key","_classCallCheck","_key","_createClass","value","_verify","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","sig","wrap","_callee$","_context","prev","next","hashAndVerify","abrupt","sent","stop","verify","_x","_x2","apply","arguments","marshal","utils","jwkToPkix","get","PublicKey","encode","Type","KeyType","RSA","Data","subarray","encrypt","bytes","_hash","_callee2","_yield$sha256$digest","_callee2$","_context2","digest","hash","RsaPrivateKey","publicKey","_publicKey","genSecret","getRandomValues","_sign","_callee3","message","_callee3$","_context3","hashAndSign","sign","_x3","decrypt","jwkToPkcs1","PrivateKey","_hash2","_callee4","_yield$sha256$digest2","_callee4$","_context4","_id","_callee5","_callee5$","_context5","public","id","_export2","_callee6","password","format","buffer","asn1","privateKey","options","_args6","_callee6$","_context6","length","undefined","util","ByteBuffer","fromDer","pki","privateKeyFromAsn1","algorithm","count","saltSize","prfAlgorithm","encryptRsaPrivateKey","concat","_export","_x4","unmarshalRsaPrivateKey","_x5","_unmarshalRsaPrivateKey","_callee7","jwk","keys","_callee7$","_context7","pkcs1ToJwk","unmarshalPrivateKey","unmarshalRsaPublicKey","pkixToJwk","fromJwk","_x6","_fromJwk","_callee8","_callee8$","_context8","generateKeyPair","_x7","_generateKeyPair","_callee9","bits","_callee9$","_context9","generateKey"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/keys/rsa-class.ts"],"sourcesContent":["\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport 'node-forge/lib/sha512.js'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\nimport * as crypto from './rsa.js'\nimport * as pbm from './keys.js'\nimport { exporter } from './exporter.js'\n\nexport class RsaPublicKey {\n  private readonly _key: JsonWebKey\n\n  constructor (key: JsonWebKey) {\n    this._key = key\n  }\n\n  async verify (data: Uint8Array, sig: Uint8Array) { // eslint-disable-line require-await\n    return await crypto.hashAndVerify(this._key, sig, data)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkix(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    }).subarray()\n  }\n\n  encrypt (bytes: Uint8Array) {\n    return crypto.encrypt(this._key, bytes)\n  }\n\n  equals (key: any) {\n    return uint8ArrayEquals(this.bytes, key.bytes)\n  }\n\n  async hash () {\n    const { bytes } = await sha256.digest(this.bytes)\n\n    return bytes\n  }\n}\n\nexport class RsaPrivateKey {\n  private readonly _key: JsonWebKey\n  private readonly _publicKey: JsonWebKey\n\n  constructor (key: JsonWebKey, publicKey: JsonWebKey) {\n    this._key = key\n    this._publicKey = publicKey\n  }\n\n  genSecret () {\n    return crypto.getRandomValues(16)\n  }\n\n  async sign (message: Uint8Array) { // eslint-disable-line require-await\n    return await crypto.hashAndSign(this._key, message)\n  }\n\n  get public () {\n    if (this._publicKey == null) {\n      throw new CodeError('public key not provided', 'ERR_PUBKEY_NOT_PROVIDED')\n    }\n\n    return new RsaPublicKey(this._publicKey)\n  }\n\n  decrypt (bytes: Uint8Array) {\n    return crypto.decrypt(this._key, bytes)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkcs1(this._key)\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    }).subarray()\n  }\n\n  equals (key: any) {\n    return uint8ArrayEquals(this.bytes, key.bytes)\n  }\n\n  async hash () {\n    const { bytes } = await sha256.digest(this.bytes)\n\n    return bytes\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   */\n  async id () {\n    const hash = await this.public.hash()\n    return uint8ArrayToString(hash, 'base58btc')\n  }\n\n  /**\n   * Exports the key into a password protected PEM format\n   */\n  async export (password: string, format = 'pkcs-8') { // eslint-disable-line require-await\n    if (format === 'pkcs-8') {\n      const buffer = new forge.util.ByteBuffer(this.marshal())\n      const asn1 = forge.asn1.fromDer(buffer)\n      const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n      const options = {\n        algorithm: 'aes256',\n        count: 10000,\n        saltSize: 128 / 8,\n        prfAlgorithm: 'sha512'\n      }\n      return forge.pki.encryptRsaPrivateKey(privateKey, password, options)\n    } else if (format === 'libp2p-key') {\n      return await exporter(this.bytes, password)\n    } else {\n      throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT')\n    }\n  }\n}\n\nexport async function unmarshalRsaPrivateKey (bytes: Uint8Array) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes)\n  const keys = await crypto.unmarshalPrivateKey(jwk)\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey)\n}\n\nexport function unmarshalRsaPublicKey (bytes: Uint8Array) {\n  const jwk = crypto.utils.pkixToJwk(bytes)\n  return new RsaPublicKey(jwk)\n}\n\nexport async function fromJwk (jwk: JsonWebKey) {\n  const keys = await crypto.unmarshalPrivateKey(jwk)\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey)\n}\n\nexport async function generateKeyPair (bits: number) {\n  const keys = await crypto.generateKey(bits)\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
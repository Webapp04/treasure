{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { validatePeerScoreParams } from './peer-score-params.js';\nimport { computeScore } from './compute-score.js';\nimport { MessageDeliveries, DeliveryRecordStatus } from './message-deliveries.js';\nimport { logger } from '@libp2p/logger';\nimport { RejectReason } from '../types.js';\nimport { Components } from '@libp2p/components';\nimport { peerIdFromString } from '@libp2p/peer-id';\nvar log = logger('libp2p:gossipsub:score');\nexport var PeerScore = /*#__PURE__*/function () {\n  function PeerScore(params, metrics, opts) {\n    var _opts$computeScore;\n    _classCallCheck(this, PeerScore);\n    this.params = params;\n    this.metrics = metrics;\n    /**\n     * Per-peer stats for score calculation\n     */\n    this.peerStats = new Map();\n    /**\n     * IP colocation tracking; maps IP => set of peers.\n     */\n    this.peerIPs = new Map();\n    /**\n     * Cache score up to decayInterval if topic stats are unchanged.\n     */\n    this.scoreCache = new Map();\n    /**\n     * Recent message delivery timing/participants\n     */\n    this.deliveryRecords = new MessageDeliveries();\n    this.components = new Components();\n    validatePeerScoreParams(params);\n    this.scoreCacheValidityMs = opts.scoreCacheValidityMs;\n    this.computeScore = (_opts$computeScore = opts.computeScore) !== null && _opts$computeScore !== void 0 ? _opts$computeScore : computeScore;\n  }\n  _createClass(PeerScore, [{\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.peerStats.size;\n    }\n    /**\n     * Start PeerScore instance\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n      if (this._backgroundInterval) {\n        log('Peer score already running');\n        return;\n      }\n      this._backgroundInterval = setInterval(function () {\n        return _this.background();\n      }, this.params.decayInterval);\n      log('started');\n    }\n    /**\n     * Stop PeerScore instance\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._backgroundInterval) {\n        log('Peer score already stopped');\n        return;\n      }\n      clearInterval(this._backgroundInterval);\n      delete this._backgroundInterval;\n      this.peerIPs.clear();\n      this.peerStats.clear();\n      this.deliveryRecords.clear();\n      log('stopped');\n    }\n    /**\n     * Periodic maintenance\n     */\n  }, {\n    key: \"background\",\n    value: function background() {\n      this.refreshScores();\n      this.updateIPs();\n      this.deliveryRecords.gc();\n    }\n  }, {\n    key: \"dumpPeerScoreStats\",\n    value: function dumpPeerScoreStats() {\n      return Object.fromEntries(Array.from(this.peerStats.entries()).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          peer = _ref2[0],\n          stats = _ref2[1];\n        return [peer, stats];\n      }));\n    }\n    /**\n     * Decays scores, and purges score records for disconnected peers once their expiry has elapsed.\n     */\n  }, {\n    key: \"refreshScores\",\n    value: function refreshScores() {\n      var _this2 = this;\n      var now = Date.now();\n      var decayToZero = this.params.decayToZero;\n      this.peerStats.forEach(function (pstats, id) {\n        if (!pstats.connected) {\n          // has the retention period expired?\n          if (now > pstats.expire) {\n            // yes, throw it away (but clean up the IP tracking first)\n            _this2.removeIPs(id, pstats.ips);\n            _this2.peerStats.delete(id);\n            _this2.scoreCache.delete(id);\n          }\n          // we don't decay retained scores, as the peer is not active.\n          // this way the peer cannot reset a negative score by simply disconnecting and reconnecting,\n          // unless the retention period has elapsed.\n          // similarly, a well behaved peer does not lose its score by getting disconnected.\n          return;\n        }\n        Object.entries(pstats.topics).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            topic = _ref4[0],\n            tstats = _ref4[1];\n          var tparams = _this2.params.topics[topic];\n          if (tparams === undefined) {\n            // we are not scoring this topic\n            // should be unreachable, we only add scored topics to pstats\n            return;\n          }\n          // decay counters\n          tstats.firstMessageDeliveries *= tparams.firstMessageDeliveriesDecay;\n          if (tstats.firstMessageDeliveries < decayToZero) {\n            tstats.firstMessageDeliveries = 0;\n          }\n          tstats.meshMessageDeliveries *= tparams.meshMessageDeliveriesDecay;\n          if (tstats.meshMessageDeliveries < decayToZero) {\n            tstats.meshMessageDeliveries = 0;\n          }\n          tstats.meshFailurePenalty *= tparams.meshFailurePenaltyDecay;\n          if (tstats.meshFailurePenalty < decayToZero) {\n            tstats.meshFailurePenalty = 0;\n          }\n          tstats.invalidMessageDeliveries *= tparams.invalidMessageDeliveriesDecay;\n          if (tstats.invalidMessageDeliveries < decayToZero) {\n            tstats.invalidMessageDeliveries = 0;\n          }\n          // update mesh time and activate mesh message delivery parameter if need be\n          if (tstats.inMesh) {\n            tstats.meshTime = now - tstats.graftTime;\n            if (tstats.meshTime > tparams.meshMessageDeliveriesActivation) {\n              tstats.meshMessageDeliveriesActive = true;\n            }\n          }\n        });\n        // decay P7 counter\n        pstats.behaviourPenalty *= _this2.params.behaviourPenaltyDecay;\n        if (pstats.behaviourPenalty < decayToZero) {\n          pstats.behaviourPenalty = 0;\n        }\n      });\n    }\n    /**\n     * Return the score for a peer\n     */\n  }, {\n    key: \"score\",\n    value: function score(id) {\n      var _this$metrics, _this$metrics2;\n      (_this$metrics = this.metrics) === null || _this$metrics === void 0 ? void 0 : _this$metrics.scoreFnCalls.inc();\n      var pstats = this.peerStats.get(id);\n      if (!pstats) {\n        return 0;\n      }\n      var now = Date.now();\n      var cacheEntry = this.scoreCache.get(id);\n      // Found cached score within validity period\n      if (cacheEntry && cacheEntry.cacheUntil > now) {\n        return cacheEntry.score;\n      }\n      (_this$metrics2 = this.metrics) === null || _this$metrics2 === void 0 ? void 0 : _this$metrics2.scoreFnRuns.inc();\n      var score = this.computeScore(id, pstats, this.params, this.peerIPs);\n      var cacheUntil = now + this.scoreCacheValidityMs;\n      if (cacheEntry) {\n        var _this$metrics3;\n        (_this$metrics3 = this.metrics) === null || _this$metrics3 === void 0 ? void 0 : _this$metrics3.scoreCachedDelta.observe(Math.abs(score - cacheEntry.score));\n        cacheEntry.score = score;\n        cacheEntry.cacheUntil = cacheUntil;\n      } else {\n        this.scoreCache.set(id, {\n          score: score,\n          cacheUntil: cacheUntil\n        });\n      }\n      return score;\n    }\n    /**\n     * Apply a behavioural penalty to a peer\n     */\n  }, {\n    key: \"addPenalty\",\n    value: function addPenalty(id, penalty, penaltyLabel) {\n      var pstats = this.peerStats.get(id);\n      if (pstats) {\n        var _this$metrics4;\n        pstats.behaviourPenalty += penalty;\n        (_this$metrics4 = this.metrics) === null || _this$metrics4 === void 0 ? void 0 : _this$metrics4.onScorePenalty(penaltyLabel);\n      }\n    }\n  }, {\n    key: \"addPeer\",\n    value: function addPeer(id) {\n      // create peer stats (not including topic stats for each topic to be scored)\n      // topic stats will be added as needed\n      var pstats = {\n        connected: true,\n        expire: 0,\n        topics: {},\n        ips: [],\n        behaviourPenalty: 0\n      };\n      this.peerStats.set(id, pstats);\n      // get + update peer IPs\n      var ips = this.getIPs(id);\n      this.setIPs(id, ips, pstats.ips);\n      pstats.ips = ips;\n    }\n  }, {\n    key: \"removePeer\",\n    value: function removePeer(id) {\n      var _this3 = this;\n      var pstats = this.peerStats.get(id);\n      if (!pstats) {\n        return;\n      }\n      // decide whether to retain the score; this currently only retains non-positive scores\n      // to dissuade attacks on the score function.\n      if (this.score(id) > 0) {\n        this.removeIPs(id, pstats.ips);\n        this.peerStats.delete(id);\n        return;\n      }\n      // furthermore, when we decide to retain the score, the firstMessageDelivery counters are\n      // reset to 0 and mesh delivery penalties applied.\n      Object.entries(pstats.topics).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          topic = _ref6[0],\n          tstats = _ref6[1];\n        tstats.firstMessageDeliveries = 0;\n        var threshold = _this3.params.topics[topic].meshMessageDeliveriesThreshold;\n        if (tstats.inMesh && tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n          var deficit = threshold - tstats.meshMessageDeliveries;\n          tstats.meshFailurePenalty += deficit * deficit;\n        }\n        tstats.inMesh = false;\n        tstats.meshMessageDeliveriesActive = false;\n      });\n      pstats.connected = false;\n      pstats.expire = Date.now() + this.params.retainScore;\n    }\n    /** Handles scoring functionality as a peer GRAFTs to a topic. */\n  }, {\n    key: \"graft\",\n    value: function graft(id, topic) {\n      var pstats = this.peerStats.get(id);\n      if (pstats) {\n        var tstats = this.getPtopicStats(pstats, topic);\n        if (tstats) {\n          // if we are scoring the topic, update the mesh status.\n          tstats.inMesh = true;\n          tstats.graftTime = Date.now();\n          tstats.meshTime = 0;\n          tstats.meshMessageDeliveriesActive = false;\n        }\n      }\n    }\n    /** Handles scoring functionality as a peer PRUNEs from a topic. */\n  }, {\n    key: \"prune\",\n    value: function prune(id, topic) {\n      var pstats = this.peerStats.get(id);\n      if (pstats) {\n        var tstats = this.getPtopicStats(pstats, topic);\n        if (tstats) {\n          // sticky mesh delivery rate failure penalty\n          var threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n          if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n            var deficit = threshold - tstats.meshMessageDeliveries;\n            tstats.meshFailurePenalty += deficit * deficit;\n          }\n          tstats.meshMessageDeliveriesActive = false;\n          tstats.inMesh = false;\n          // TODO: Consider clearing score cache on important penalties\n          // this.scoreCache.delete(id)\n        }\n      }\n    }\n  }, {\n    key: \"validateMessage\",\n    value: function validateMessage(msgIdStr) {\n      this.deliveryRecords.ensureRecord(msgIdStr);\n    }\n  }, {\n    key: \"deliverMessage\",\n    value: function deliverMessage(from, msgIdStr, topic) {\n      var _this4 = this;\n      this.markFirstMessageDelivery(from, topic);\n      var drec = this.deliveryRecords.ensureRecord(msgIdStr);\n      var now = Date.now();\n      // defensive check that this is the first delivery trace -- delivery status should be unknown\n      if (drec.status !== DeliveryRecordStatus.unknown) {\n        log('unexpected delivery: message from %s was first seen %s ago and has delivery status %s', from, now - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n        return;\n      }\n      // mark the message as valid and reward mesh peers that have already forwarded it to us\n      drec.status = DeliveryRecordStatus.valid;\n      drec.validated = now;\n      drec.peers.forEach(function (p) {\n        // this check is to make sure a peer can't send us a message twice and get a double count\n        // if it is a first delivery.\n        if (p !== from.toString()) {\n          _this4.markDuplicateMessageDelivery(p, topic);\n        }\n      });\n    }\n    /**\n     * Similar to `rejectMessage` except does not require the message id or reason for an invalid message.\n     */\n  }, {\n    key: \"rejectInvalidMessage\",\n    value: function rejectInvalidMessage(from, topic) {\n      this.markInvalidMessageDelivery(from, topic);\n    }\n  }, {\n    key: \"rejectMessage\",\n    value: function rejectMessage(from, msgIdStr, topic, reason) {\n      var _this5 = this;\n      switch (reason) {\n        // these messages are not tracked, but the peer is penalized as they are invalid\n        case RejectReason.Error:\n          this.markInvalidMessageDelivery(from, topic);\n          return;\n        // we ignore those messages, so do nothing.\n        case RejectReason.Blacklisted:\n          return;\n        // the rest are handled after record creation\n      }\n\n      var drec = this.deliveryRecords.ensureRecord(msgIdStr);\n      // defensive check that this is the first rejection -- delivery status should be unknown\n      if (drec.status !== DeliveryRecordStatus.unknown) {\n        log('unexpected rejection: message from %s was first seen %s ago and has delivery status %d', from, Date.now() - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n        return;\n      }\n      if (reason === RejectReason.Ignore) {\n        // we were explicitly instructed by the validator to ignore the message but not penalize the peer\n        drec.status = DeliveryRecordStatus.ignored;\n        drec.peers.clear();\n        return;\n      }\n      // mark the message as invalid and penalize peers that have already forwarded it.\n      drec.status = DeliveryRecordStatus.invalid;\n      this.markInvalidMessageDelivery(from, topic);\n      drec.peers.forEach(function (p) {\n        _this5.markInvalidMessageDelivery(p, topic);\n      });\n      // release the delivery time tracking map to free some memory early\n      drec.peers.clear();\n    }\n  }, {\n    key: \"duplicateMessage\",\n    value: function duplicateMessage(from, msgIdStr, topic) {\n      var drec = this.deliveryRecords.ensureRecord(msgIdStr);\n      if (drec.peers.has(from)) {\n        // we have already seen this duplicate\n        return;\n      }\n      switch (drec.status) {\n        case DeliveryRecordStatus.unknown:\n          // the message is being validated; track the peer delivery and wait for\n          // the Deliver/Reject/Ignore notification.\n          drec.peers.add(from);\n          break;\n        case DeliveryRecordStatus.valid:\n          // mark the peer delivery time to only count a duplicate delivery once.\n          drec.peers.add(from);\n          this.markDuplicateMessageDelivery(from, topic, drec.validated);\n          break;\n        case DeliveryRecordStatus.invalid:\n          // we no longer track delivery time\n          this.markInvalidMessageDelivery(from, topic);\n          break;\n        case DeliveryRecordStatus.ignored:\n          // the message was ignored; do nothing (we don't know if it was valid)\n          break;\n      }\n    }\n    /**\n     * Increments the \"invalid message deliveries\" counter for all scored topics the message is published in.\n     */\n  }, {\n    key: \"markInvalidMessageDelivery\",\n    value: function markInvalidMessageDelivery(from, topic) {\n      var pstats = this.peerStats.get(from);\n      if (pstats) {\n        var tstats = this.getPtopicStats(pstats, topic);\n        if (tstats) {\n          tstats.invalidMessageDeliveries += 1;\n        }\n      }\n    }\n    /**\n     * Increments the \"first message deliveries\" counter for all scored topics the message is published in,\n     * as well as the \"mesh message deliveries\" counter, if the peer is in the mesh for the topic.\n     * Messages already known (with the seenCache) are counted with markDuplicateMessageDelivery()\n     */\n  }, {\n    key: \"markFirstMessageDelivery\",\n    value: function markFirstMessageDelivery(from, topic) {\n      var pstats = this.peerStats.get(from);\n      if (pstats) {\n        var tstats = this.getPtopicStats(pstats, topic);\n        if (tstats) {\n          var cap = this.params.topics[topic].firstMessageDeliveriesCap;\n          tstats.firstMessageDeliveries = Math.min(cap, tstats.firstMessageDeliveries + 1);\n          if (tstats.inMesh) {\n            cap = this.params.topics[topic].meshMessageDeliveriesCap;\n            tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n          }\n        }\n      }\n    }\n    /**\n     * Increments the \"mesh message deliveries\" counter for messages we've seen before,\n     * as long the message was received within the P3 window.\n     */\n  }, {\n    key: \"markDuplicateMessageDelivery\",\n    value: function markDuplicateMessageDelivery(from, topic, validatedTime) {\n      var pstats = this.peerStats.get(from);\n      if (pstats) {\n        var now = validatedTime !== undefined ? Date.now() : 0;\n        var tstats = this.getPtopicStats(pstats, topic);\n        if (tstats && tstats.inMesh) {\n          var tparams = this.params.topics[topic];\n          // check against the mesh delivery window -- if the validated time is passed as 0, then\n          // the message was received before we finished validation and thus falls within the mesh\n          // delivery window.\n          if (validatedTime !== undefined) {\n            var _this$metrics5;\n            var deliveryDelayMs = now - validatedTime;\n            var isLateDelivery = deliveryDelayMs > tparams.meshMessageDeliveriesWindow;\n            (_this$metrics5 = this.metrics) === null || _this$metrics5 === void 0 ? void 0 : _this$metrics5.onDuplicateMsgDelivery(topic, deliveryDelayMs, isLateDelivery);\n            if (isLateDelivery) {\n              return;\n            }\n          }\n          var cap = tparams.meshMessageDeliveriesCap;\n          tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n        }\n      }\n    }\n    /**\n     * Gets the current IPs for a peer.\n     */\n  }, {\n    key: \"getIPs\",\n    value: function getIPs(id) {\n      return this.components.getConnectionManager().getConnections(peerIdFromString(id)).map(function (c) {\n        return c.remoteAddr.toOptions().host;\n      });\n    }\n    /**\n     * Adds tracking for the new IPs in the list, and removes tracking from the obsolete IPs.\n     */\n  }, {\n    key: \"setIPs\",\n    value: function setIPs(id, newIPs, oldIPs) {\n      // add the new IPs to the tracking\n      // eslint-disable-next-line no-labels\n      var _iterator = _createForOfIteratorHelper(newIPs),\n        _step;\n      try {\n        addNewIPs: for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ip = _step.value;\n          // check if it is in the old ips list\n          var _iterator3 = _createForOfIteratorHelper(oldIPs),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var xip = _step3.value;\n              if (ip === xip) {\n                // eslint-disable-next-line no-labels\n                continue addNewIPs;\n              }\n            }\n            // no, it's a new one -- add it to the tracker\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          var peers = this.peerIPs.get(ip);\n          if (!peers) {\n            peers = new Set();\n            this.peerIPs.set(ip, peers);\n          }\n          peers.add(id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      } // remove the obsolete old IPs from the tracking\n      // eslint-disable-next-line no-labels\n      var _iterator2 = _createForOfIteratorHelper(oldIPs),\n        _step2;\n      try {\n        removeOldIPs: for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _ip = _step2.value;\n          // check if it is in the new ips list\n          var _iterator4 = _createForOfIteratorHelper(newIPs),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _xip = _step4.value;\n              if (_ip === _xip) {\n                // eslint-disable-next-line no-labels\n                continue removeOldIPs;\n              }\n            }\n            // no, its obselete -- remove it from the tracker\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          var _peers = this.peerIPs.get(_ip);\n          if (!_peers) {\n            continue;\n          }\n          _peers.delete(id);\n          if (!_peers.size) {\n            this.peerIPs.delete(_ip);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Removes an IP list from the tracking list for a peer.\n     */\n  }, {\n    key: \"removeIPs\",\n    value: function removeIPs(id, ips) {\n      var _this6 = this;\n      ips.forEach(function (ip) {\n        var peers = _this6.peerIPs.get(ip);\n        if (!peers) {\n          return;\n        }\n        peers.delete(id);\n        if (!peers.size) {\n          _this6.peerIPs.delete(ip);\n        }\n      });\n    }\n    /**\n     * Update all peer IPs to currently open connections\n     */\n  }, {\n    key: \"updateIPs\",\n    value: function updateIPs() {\n      var _this7 = this;\n      this.peerStats.forEach(function (pstats, id) {\n        var newIPs = _this7.getIPs(id);\n        _this7.setIPs(id, newIPs, pstats.ips);\n        pstats.ips = newIPs;\n      });\n    }\n    /**\n     * Returns topic stats if they exist, otherwise if the supplied parameters score the\n     * topic, inserts the default stats and returns a reference to those. If neither apply, returns None.\n     */\n  }, {\n    key: \"getPtopicStats\",\n    value: function getPtopicStats(pstats, topic) {\n      var topicStats = pstats.topics[topic];\n      if (topicStats !== undefined) {\n        return topicStats;\n      }\n      if (this.params.topics[topic] !== undefined) {\n        topicStats = {\n          inMesh: false,\n          graftTime: 0,\n          meshTime: 0,\n          firstMessageDeliveries: 0,\n          meshMessageDeliveries: 0,\n          meshMessageDeliveriesActive: false,\n          meshFailurePenalty: 0,\n          invalidMessageDeliveries: 0\n        };\n        pstats.topics[topic] = topicStats;\n        return topicStats;\n      }\n      return null;\n    }\n  }]);\n  return PeerScore;\n}();","map":{"version":3,"names":["validatePeerScoreParams","computeScore","MessageDeliveries","DeliveryRecordStatus","logger","RejectReason","Components","peerIdFromString","log","PeerScore","params","metrics","opts","_opts$computeScore","_classCallCheck","peerStats","Map","peerIPs","scoreCache","deliveryRecords","components","scoreCacheValidityMs","_createClass","key","value","init","get","size","start","_this","_backgroundInterval","setInterval","background","decayInterval","stop","clearInterval","clear","refreshScores","updateIPs","gc","dumpPeerScoreStats","Object","fromEntries","Array","from","entries","map","_ref","_ref2","_slicedToArray","peer","stats","_this2","now","Date","decayToZero","forEach","pstats","id","connected","expire","removeIPs","ips","delete","topics","_ref3","_ref4","topic","tstats","tparams","undefined","firstMessageDeliveries","firstMessageDeliveriesDecay","meshMessageDeliveries","meshMessageDeliveriesDecay","meshFailurePenalty","meshFailurePenaltyDecay","invalidMessageDeliveries","invalidMessageDeliveriesDecay","inMesh","meshTime","graftTime","meshMessageDeliveriesActivation","meshMessageDeliveriesActive","behaviourPenalty","behaviourPenaltyDecay","score","_this$metrics","_this$metrics2","scoreFnCalls","inc","cacheEntry","cacheUntil","scoreFnRuns","_this$metrics3","scoreCachedDelta","observe","Math","abs","set","addPenalty","penalty","penaltyLabel","_this$metrics4","onScorePenalty","addPeer","getIPs","setIPs","removePeer","_this3","_ref5","_ref6","threshold","meshMessageDeliveriesThreshold","deficit","retainScore","graft","getPtopicStats","prune","validateMessage","msgIdStr","ensureRecord","deliverMessage","_this4","markFirstMessageDelivery","drec","status","unknown","firstSeen","valid","validated","peers","p","toString","markDuplicateMessageDelivery","rejectInvalidMessage","markInvalidMessageDelivery","rejectMessage","reason","_this5","Error","Blacklisted","Ignore","ignored","invalid","duplicateMessage","has","add","cap","firstMessageDeliveriesCap","min","meshMessageDeliveriesCap","validatedTime","_this$metrics5","deliveryDelayMs","isLateDelivery","meshMessageDeliveriesWindow","onDuplicateMsgDelivery","getConnectionManager","getConnections","c","remoteAddr","toOptions","host","newIPs","oldIPs","_iterator","_createForOfIteratorHelper","_step","addNewIPs","s","n","done","ip","_iterator3","_step3","xip","err","e","f","Set","_iterator2","_step2","removeOldIPs","_iterator4","_step4","_this6","_this7","topicStats"],"sources":["../../../src/score/peer-score.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
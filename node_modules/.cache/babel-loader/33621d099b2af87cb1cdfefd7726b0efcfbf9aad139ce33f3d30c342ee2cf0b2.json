{"ast":null,"code":"var word = '[a-fA-F\\\\d:]';\nvar boundry = function boundry(options) {\n  return options && options.includeBoundaries ? \"(?:(?<=\\\\s|^)(?=\".concat(word, \")|(?<=\").concat(word, \")(?=\\\\s|$))\") : '';\n};\nvar v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\nvar v6segment = '[a-fA-F\\\\d]{1,4}';\nvar v6 = \"\\n(?:\\n(?:\".concat(v6segment, \":){7}(?:\").concat(v6segment, \"|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\\n(?:\").concat(v6segment, \":){6}(?:\").concat(v4, \"|:\").concat(v6segment, \"|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\\n(?:\").concat(v6segment, \":){5}(?::\").concat(v4, \"|(?::\").concat(v6segment, \"){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\\n(?:\").concat(v6segment, \":){4}(?:(?::\").concat(v6segment, \"){0,1}:\").concat(v4, \"|(?::\").concat(v6segment, \"){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\\n(?:\").concat(v6segment, \":){3}(?:(?::\").concat(v6segment, \"){0,2}:\").concat(v4, \"|(?::\").concat(v6segment, \"){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\\n(?:\").concat(v6segment, \":){2}(?:(?::\").concat(v6segment, \"){0,3}:\").concat(v4, \"|(?::\").concat(v6segment, \"){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\\n(?:\").concat(v6segment, \":){1}(?:(?::\").concat(v6segment, \"){0,4}:\").concat(v4, \"|(?::\").concat(v6segment, \"){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\\n(?::(?:(?::\").concat(v6segment, \"){0,5}:\").concat(v4, \"|(?::\").concat(v6segment, \"){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\\n\").replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nvar v46Exact = new RegExp(\"(?:^\".concat(v4, \"$)|(?:^\").concat(v6, \"$)\"));\nvar v4exact = new RegExp(\"^\".concat(v4, \"$\"));\nvar v6exact = new RegExp(\"^\".concat(v6, \"$\"));\nvar ipRegex = function ipRegex(options) {\n  return options && options.exact ? v46Exact : new RegExp(\"(?:\".concat(boundry(options)).concat(v4).concat(boundry(options), \")|(?:\").concat(boundry(options)).concat(v6).concat(boundry(options), \")\"), 'g');\n};\nipRegex.v4 = function (options) {\n  return options && options.exact ? v4exact : new RegExp(\"\".concat(boundry(options)).concat(v4).concat(boundry(options)), 'g');\n};\nipRegex.v6 = function (options) {\n  return options && options.exact ? v6exact : new RegExp(\"\".concat(boundry(options)).concat(v6).concat(boundry(options)), 'g');\n};\nexport default ipRegex;","map":{"version":3,"names":["word","boundry","options","includeBoundaries","concat","v4","v6segment","v6","replace","trim","v46Exact","RegExp","v4exact","v6exact","ipRegex","exact"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/utils/node_modules/ip-regex/index.js"],"sourcesContent":["const word = '[a-fA-F\\\\d:]';\n\nconst boundry = options => options && options.includeBoundaries\n\t? `(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))`\n\t: '';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6segment = '[a-fA-F\\\\d]{1,4}';\n\nconst v6 = `\n(?:\n(?:${v6segment}:){7}(?:${v6segment}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6segment}:){6}(?:${v4}|:${v6segment}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6segment}:){5}(?::${v4}|(?::${v6segment}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6segment}:){4}(?:(?::${v6segment}){0,1}:${v4}|(?::${v6segment}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6segment}:){3}(?:(?::${v6segment}){0,2}:${v4}|(?::${v6segment}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6segment}:){2}(?:(?::${v6segment}){0,3}:${v4}|(?::${v6segment}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6segment}:){1}(?:(?::${v6segment}){0,4}:${v4}|(?::${v6segment}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6segment}){0,5}:${v4}|(?::${v6segment}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ipRegex = options => options && options.exact\n\t? v46Exact\n\t: new RegExp(`(?:${boundry(options)}${v4}${boundry(options)})|(?:${boundry(options)}${v6}${boundry(options)})`, 'g');\n\nipRegex.v4 = options => options && options.exact ? v4exact : new RegExp(`${boundry(options)}${v4}${boundry(options)}`, 'g');\nipRegex.v6 = options => options && options.exact ? v6exact : new RegExp(`${boundry(options)}${v6}${boundry(options)}`, 'g');\n\nexport default ipRegex;\n"],"mappings":"AAAA,IAAMA,IAAI,GAAG,cAAc;AAE3B,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAGC,OAAO;EAAA,OAAIA,OAAO,IAAIA,OAAO,CAACC,iBAAiB,sBAAAC,MAAA,CACzCJ,IAAI,YAAAI,MAAA,CAASJ,IAAI,mBACpC,EAAE;AAAA;AAEL,IAAMK,EAAE,GAAG,gGAAgG;AAE3G,IAAMC,SAAS,GAAG,kBAAkB;AAEpC,IAAMC,EAAE,GAAG,aAAAH,MAAA,CAENE,SAAS,cAAAF,MAAA,CAAWE,SAAS,sFAAAF,MAAA,CAC7BE,SAAS,cAAAF,MAAA,CAAWC,EAAE,QAAAD,MAAA,CAAKE,SAAS,qHAAAF,MAAA,CACpCE,SAAS,eAAAF,MAAA,CAAYC,EAAE,WAAAD,MAAA,CAAQE,SAAS,iHAAAF,MAAA,CACxCE,SAAS,kBAAAF,MAAA,CAAeE,SAAS,aAAAF,MAAA,CAAUC,EAAE,WAAAD,MAAA,CAAQE,SAAS,+FAAAF,MAAA,CAC9DE,SAAS,kBAAAF,MAAA,CAAeE,SAAS,aAAAF,MAAA,CAAUC,EAAE,WAAAD,MAAA,CAAQE,SAAS,+FAAAF,MAAA,CAC9DE,SAAS,kBAAAF,MAAA,CAAeE,SAAS,aAAAF,MAAA,CAAUC,EAAE,WAAAD,MAAA,CAAQE,SAAS,+FAAAF,MAAA,CAC9DE,SAAS,kBAAAF,MAAA,CAAeE,SAAS,aAAAF,MAAA,CAAUC,EAAE,WAAAD,MAAA,CAAQE,SAAS,uGAAAF,MAAA,CACtDE,SAAS,aAAAF,MAAA,CAAUC,EAAE,WAAAD,MAAA,CAAQE,SAAS,wLAEjDE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;;AAEvD;AACA,IAAMC,QAAQ,GAAG,IAAIC,MAAM,QAAAP,MAAA,CAAQC,EAAE,aAAAD,MAAA,CAAUG,EAAE,OAAI,CAAC;AACtD,IAAMK,OAAO,GAAG,IAAID,MAAM,KAAAP,MAAA,CAAKC,EAAE,MAAG,CAAC;AACrC,IAAMQ,OAAO,GAAG,IAAIF,MAAM,KAAAP,MAAA,CAAKG,EAAE,MAAG,CAAC;AAErC,IAAMO,OAAO,GAAG,SAAVA,OAAOA,CAAGZ,OAAO;EAAA,OAAIA,OAAO,IAAIA,OAAO,CAACa,KAAK,GAChDL,QAAQ,GACR,IAAIC,MAAM,OAAAP,MAAA,CAAOH,OAAO,CAACC,OAAO,CAAC,EAAAE,MAAA,CAAGC,EAAE,EAAAD,MAAA,CAAGH,OAAO,CAACC,OAAO,CAAC,WAAAE,MAAA,CAAQH,OAAO,CAACC,OAAO,CAAC,EAAAE,MAAA,CAAGG,EAAE,EAAAH,MAAA,CAAGH,OAAO,CAACC,OAAO,CAAC,QAAK,GAAG,CAAC;AAAA;AAErHY,OAAO,CAACT,EAAE,GAAG,UAAAH,OAAO;EAAA,OAAIA,OAAO,IAAIA,OAAO,CAACa,KAAK,GAAGH,OAAO,GAAG,IAAID,MAAM,IAAAP,MAAA,CAAIH,OAAO,CAACC,OAAO,CAAC,EAAAE,MAAA,CAAGC,EAAE,EAAAD,MAAA,CAAGH,OAAO,CAACC,OAAO,CAAC,GAAI,GAAG,CAAC;AAAA;AAC3HY,OAAO,CAACP,EAAE,GAAG,UAAAL,OAAO;EAAA,OAAIA,OAAO,IAAIA,OAAO,CAACa,KAAK,GAAGF,OAAO,GAAG,IAAIF,MAAM,IAAAP,MAAA,CAAIH,OAAO,CAACC,OAAO,CAAC,EAAAE,MAAA,CAAGG,EAAE,EAAAH,MAAA,CAAGH,OAAO,CAACC,OAAO,CAAC,GAAI,GAAG,CAAC;AAAA;AAE3H,eAAeY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
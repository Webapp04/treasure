{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CID } from 'multiformats/cid';\nimport errcode from 'err-code';\nimport { Message } from '../../message/index.js';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { logger } from '@libp2p/logger';\nimport { Components } from '@libp2p/components';\nvar log = logger('libp2p:kad-dht:rpc:handlers:get-providers');\nexport var GetProvidersHandler = /*#__PURE__*/function () {\n  function GetProvidersHandler(init) {\n    _classCallCheck(this, GetProvidersHandler);\n    this.components = new Components();\n    var peerRouting = init.peerRouting,\n      providers = init.providers,\n      lan = init.lan;\n    this.peerRouting = peerRouting;\n    this.providers = providers;\n    this.lan = Boolean(lan);\n  }\n  _createClass(GetProvidersHandler, [{\n    key: \"init\",\n    value: function init(components) {\n      this.components = components;\n    }\n  }, {\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId, msg) {\n        var cid, _yield$Promise$all, _yield$Promise$all2, peers, closer, providerPeers, closerPeers, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              cid = CID.decode(msg.key);\n              _context.next = 7;\n              break;\n            case 4:\n              _context.prev = 4;\n              _context.t0 = _context[\"catch\"](0);\n              throw errcode(new Error('Invalid CID'), 'ERR_INVALID_CID');\n            case 7:\n              log('%p asking for providers for %s', peerId, cid);\n              _context.next = 10;\n              return Promise.all([this.providers.getProviders(cid), this.peerRouting.getCloserPeersOffline(msg.key, peerId)]);\n            case 10:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              peers = _yield$Promise$all2[0];\n              closer = _yield$Promise$all2[1];\n              _context.next = 16;\n              return this._getPeers(peers);\n            case 16:\n              providerPeers = _context.sent;\n              _context.next = 19;\n              return this._getPeers(closer.map(function (_ref) {\n                var id = _ref.id;\n                return id;\n              }));\n            case 19:\n              closerPeers = _context.sent;\n              response = new Message(msg.type, msg.key, msg.clusterLevel);\n              if (providerPeers.length > 0) {\n                response.providerPeers = providerPeers;\n              }\n              if (closerPeers.length > 0) {\n                response.closerPeers = closerPeers;\n              }\n              log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);\n              return _context.abrupt(\"return\", response);\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 4]]);\n      }));\n      function handle(_x, _x2) {\n        return _handle.apply(this, arguments);\n      }\n      return handle;\n    }()\n  }, {\n    key: \"_getAddresses\",\n    value: function () {\n      var _getAddresses2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peerId) {\n        var addrs;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.components.getPeerStore().addressBook.get(peerId);\n            case 2:\n              addrs = _context2.sent;\n              return _context2.abrupt(\"return\", addrs.map(function (address) {\n                return address.multiaddr;\n              }));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _getAddresses(_x3) {\n        return _getAddresses2.apply(this, arguments);\n      }\n      return _getAddresses;\n    }()\n  }, {\n    key: \"_getPeers\",\n    value: function () {\n      var _getPeers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(peerIds) {\n        var output, addrFilter, _iterator, _step, peerId, peer;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              output = [];\n              addrFilter = this.lan ? removePublicAddresses : removePrivateAddresses;\n              _iterator = _createForOfIteratorHelper(peerIds);\n              _context3.prev = 3;\n              _iterator.s();\n            case 5:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 18;\n                break;\n              }\n              peerId = _step.value;\n              _context3.t0 = addrFilter;\n              _context3.t1 = peerId;\n              _context3.next = 11;\n              return this._getAddresses(peerId);\n            case 11:\n              _context3.t2 = _context3.sent;\n              _context3.t3 = [];\n              _context3.t4 = {\n                id: _context3.t1,\n                multiaddrs: _context3.t2,\n                protocols: _context3.t3\n              };\n              peer = (0, _context3.t0)(_context3.t4);\n              if (peer.multiaddrs.length > 0) {\n                output.push(peer);\n              }\n            case 16:\n              _context3.next = 5;\n              break;\n            case 18:\n              _context3.next = 23;\n              break;\n            case 20:\n              _context3.prev = 20;\n              _context3.t5 = _context3[\"catch\"](3);\n              _iterator.e(_context3.t5);\n            case 23:\n              _context3.prev = 23;\n              _iterator.f();\n              return _context3.finish(23);\n            case 26:\n              return _context3.abrupt(\"return\", output);\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[3, 20, 23, 26]]);\n      }));\n      function _getPeers(_x4) {\n        return _getPeers2.apply(this, arguments);\n      }\n      return _getPeers;\n    }()\n  }]);\n  return GetProvidersHandler;\n}();","map":{"version":3,"names":["CID","errcode","Message","removePrivateAddresses","removePublicAddresses","logger","Components","log","GetProvidersHandler","init","_classCallCheck","components","peerRouting","providers","lan","Boolean","_createClass","key","value","_handle","_asyncToGenerator","_regeneratorRuntime","mark","_callee","peerId","msg","cid","_yield$Promise$all","_yield$Promise$all2","peers","closer","providerPeers","closerPeers","response","wrap","_callee$","_context","prev","next","decode","t0","Error","Promise","all","getProviders","getCloserPeersOffline","sent","_slicedToArray","_getPeers","map","_ref","id","type","clusterLevel","length","abrupt","stop","handle","_x","_x2","apply","arguments","_getAddresses2","_callee2","addrs","_callee2$","_context2","getPeerStore","addressBook","get","address","multiaddr","_getAddresses","_x3","_getPeers2","_callee3","peerIds","output","addrFilter","_iterator","_step","peer","_callee3$","_context3","_createForOfIteratorHelper","s","n","done","t1","t2","t3","t4","multiaddrs","protocols","push","t5","e","f","finish","_x4"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/kad-dht/src/rpc/handlers/get-providers.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport errcode from 'err-code'\nimport { Message } from '../../message/index.js'\nimport {\n  removePrivateAddresses,\n  removePublicAddresses\n} from '../../utils.js'\nimport { logger } from '@libp2p/logger'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { Providers } from '../../providers.js'\nimport type { PeerRouting } from '../../peer-routing/index.js'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\nimport { Components, Initializable } from '@libp2p/components'\n\nconst log = logger('libp2p:kad-dht:rpc:handlers:get-providers')\n\nexport interface GetProvidersHandlerInit {\n  peerRouting: PeerRouting\n  providers: Providers\n  lan: boolean\n}\n\nexport class GetProvidersHandler implements DHTMessageHandler, Initializable {\n  private components: Components = new Components()\n  private readonly peerRouting: PeerRouting\n  private readonly providers: Providers\n  private readonly lan: boolean\n\n  constructor (init: GetProvidersHandlerInit) {\n    const { peerRouting, providers, lan } = init\n\n    this.peerRouting = peerRouting\n    this.providers = providers\n    this.lan = Boolean(lan)\n  }\n\n  init (components: Components): void {\n    this.components = components\n  }\n\n  async handle (peerId: PeerId, msg: Message) {\n    let cid\n    try {\n      cid = CID.decode(msg.key)\n    } catch (err: any) {\n      throw errcode(new Error('Invalid CID'), 'ERR_INVALID_CID')\n    }\n\n    log('%p asking for providers for %s', peerId, cid)\n\n    const [peers, closer] = await Promise.all([\n      this.providers.getProviders(cid),\n      this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n    ])\n\n    const providerPeers = await this._getPeers(peers)\n    const closerPeers = await this._getPeers(closer.map(({ id }) => id))\n    const response = new Message(msg.type, msg.key, msg.clusterLevel)\n\n    if (providerPeers.length > 0) {\n      response.providerPeers = providerPeers\n    }\n\n    if (closerPeers.length > 0) {\n      response.closerPeers = closerPeers\n    }\n\n    log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length)\n    return response\n  }\n\n  async _getAddresses (peerId: PeerId) {\n    const addrs = await this.components.getPeerStore().addressBook.get(peerId)\n\n    return addrs.map(address => address.multiaddr)\n  }\n\n  async _getPeers (peerIds: PeerId[]) {\n    const output: PeerInfo[] = []\n    const addrFilter = this.lan ? removePublicAddresses : removePrivateAddresses\n\n    for (const peerId of peerIds) {\n      const peer = addrFilter({\n        id: peerId,\n        multiaddrs: await this._getAddresses(peerId),\n        protocols: []\n      })\n\n      if (peer.multiaddrs.length > 0) {\n        output.push(peer)\n      }\n    }\n\n    return output\n  }\n}\n"],"mappings":";;;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SACEC,sBAAsB,EACtBC,qBAAqB,QAChB,gBAAgB;AACvB,SAASC,MAAM,QAAQ,gBAAgB;AAMvC,SAASC,UAAU,QAAuB,oBAAoB;AAE9D,IAAMC,GAAG,GAAGF,MAAM,CAAC,2CAA2C,CAAC;AAQ/D,WAAaG,mBAAmB;EAM9B,SAAAA,oBAAaC,IAA6B;IAAAC,eAAA,OAAAF,mBAAA;IALlC,KAAAG,UAAU,GAAe,IAAIL,UAAU,EAAE;IAM/C,IAAQM,WAAW,GAAqBH,IAAI,CAApCG,WAAW;MAAEC,SAAS,GAAUJ,IAAI,CAAvBI,SAAS;MAAEC,GAAG,GAAKL,IAAI,CAAZK,GAAG;IAEnC,IAAI,CAACF,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,GAAG,GAAGC,OAAO,CAACD,GAAG,CAAC;EACzB;EAACE,YAAA,CAAAR,mBAAA;IAAAS,GAAA;IAAAC,KAAA,EAED,SAAAT,KAAME,UAAsB;MAC1B,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC9B;EAAC;IAAAM,GAAA;IAAAC,KAAA;MAAA,IAAAC,OAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAcC,MAAc,EAAEC,GAAY;QAAA,IAAAC,GAAA,EAAAC,kBAAA,EAAAC,mBAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAC,aAAA,EAAAC,WAAA,EAAAC,QAAA;QAAA,OAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAGtCX,GAAG,GAAG1B,GAAG,CAACuC,MAAM,CAACd,GAAG,CAACR,GAAG,CAAC;cAAAmB,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAI,EAAA,GAAAJ,QAAA;cAAA,MAEnBnC,OAAO,CAAC,IAAIwC,KAAK,CAAC,aAAa,CAAC,EAAE,iBAAiB,CAAC;YAAA;cAG5DlC,GAAG,CAAC,gCAAgC,EAAEiB,MAAM,EAAEE,GAAG,CAAC;cAAAU,QAAA,CAAAE,IAAA;cAAA,OAEpBI,OAAO,CAACC,GAAG,CAAC,CACxC,IAAI,CAAC9B,SAAS,CAAC+B,YAAY,CAAClB,GAAG,CAAC,EAChC,IAAI,CAACd,WAAW,CAACiC,qBAAqB,CAACpB,GAAG,CAACR,GAAG,EAAEO,MAAM,CAAC,CACxD,CAAC;YAAA;cAAAG,kBAAA,GAAAS,QAAA,CAAAU,IAAA;cAAAlB,mBAAA,GAAAmB,cAAA,CAAApB,kBAAA;cAHKE,KAAK,GAAAD,mBAAA;cAAEE,MAAM,GAAAF,mBAAA;cAAAQ,QAAA,CAAAE,IAAA;cAAA,OAKQ,IAAI,CAACU,SAAS,CAACnB,KAAK,CAAC;YAAA;cAA3CE,aAAa,GAAAK,QAAA,CAAAU,IAAA;cAAAV,QAAA,CAAAE,IAAA;cAAA,OACO,IAAI,CAACU,SAAS,CAAClB,MAAM,CAACmB,GAAG,CAAC,UAAAC,IAAA;gBAAA,IAAGC,EAAE,GAAAD,IAAA,CAAFC,EAAE;gBAAA,OAAOA,EAAE;cAAA,EAAC,CAAC;YAAA;cAA9DnB,WAAW,GAAAI,QAAA,CAAAU,IAAA;cACXb,QAAQ,GAAG,IAAI/B,OAAO,CAACuB,GAAG,CAAC2B,IAAI,EAAE3B,GAAG,CAACR,GAAG,EAAEQ,GAAG,CAAC4B,YAAY,CAAC;cAEjE,IAAItB,aAAa,CAACuB,MAAM,GAAG,CAAC,EAAE;gBAC5BrB,QAAQ,CAACF,aAAa,GAAGA,aAAa;;cAGxC,IAAIC,WAAW,CAACsB,MAAM,GAAG,CAAC,EAAE;gBAC1BrB,QAAQ,CAACD,WAAW,GAAGA,WAAW;;cAGpCzB,GAAG,CAAC,iCAAiC,EAAEwB,aAAa,CAACuB,MAAM,EAAEtB,WAAW,CAACsB,MAAM,CAAC;cAAA,OAAAlB,QAAA,CAAAmB,MAAA,WACzEtB,QAAQ;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAoB,IAAA;UAAA;QAAA,GAAAjC,OAAA;MAAA,CAChB;MAAA,SAAAkC,OAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAxC,OAAA,CAAAyC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,MAAA;IAAA;EAAA;IAAAxC,GAAA;IAAAC,KAAA;MAAA,IAAA4C,cAAA,GAAA1C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAyC,SAAqBvC,MAAc;QAAA,IAAAwC,KAAA;QAAA,OAAA3C,mBAAA,GAAAa,IAAA,UAAA+B,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA7B,IAAA,GAAA6B,SAAA,CAAA5B,IAAA;YAAA;cAAA4B,SAAA,CAAA5B,IAAA;cAAA,OACb,IAAI,CAAC3B,UAAU,CAACwD,YAAY,EAAE,CAACC,WAAW,CAACC,GAAG,CAAC7C,MAAM,CAAC;YAAA;cAApEwC,KAAK,GAAAE,SAAA,CAAApB,IAAA;cAAA,OAAAoB,SAAA,CAAAX,MAAA,WAEJS,KAAK,CAACf,GAAG,CAAC,UAAAqB,OAAO;gBAAA,OAAIA,OAAO,CAACC,SAAS;cAAA,EAAC;YAAA;YAAA;cAAA,OAAAL,SAAA,CAAAV,IAAA;UAAA;QAAA,GAAAO,QAAA;MAAA,CAC/C;MAAA,SAAAS,cAAAC,GAAA;QAAA,OAAAX,cAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAW,aAAA;IAAA;EAAA;IAAAvD,GAAA;IAAAC,KAAA;MAAA,IAAAwD,UAAA,GAAAtD,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAqD,SAAiBC,OAAiB;QAAA,IAAAC,MAAA,EAAAC,UAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAxD,MAAA,EAAAyD,IAAA;QAAA,OAAA5D,mBAAA,GAAAa,IAAA,UAAAgD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA9C,IAAA,GAAA8C,SAAA,CAAA7C,IAAA;YAAA;cAC1BuC,MAAM,GAAe,EAAE;cACvBC,UAAU,GAAG,IAAI,CAAChE,GAAG,GAAGV,qBAAqB,GAAGD,sBAAsB;cAAA4E,SAAA,GAAAK,0BAAA,CAEvDR,OAAO;cAAAO,SAAA,CAAA9C,IAAA;cAAA0C,SAAA,CAAAM,CAAA;YAAA;cAAA,KAAAL,KAAA,GAAAD,SAAA,CAAAO,CAAA,IAAAC,IAAA;gBAAAJ,SAAA,CAAA7C,IAAA;gBAAA;cAAA;cAAjBd,MAAM,GAAAwD,KAAA,CAAA9D,KAAA;cAAAiE,SAAA,CAAA3C,EAAA,GACFsC,UAAU;cAAAK,SAAA,CAAAK,EAAA,GACjBhE,MAAM;cAAA2D,SAAA,CAAA7C,IAAA;cAAA,OACQ,IAAI,CAACkC,aAAa,CAAChD,MAAM,CAAC;YAAA;cAAA2D,SAAA,CAAAM,EAAA,GAAAN,SAAA,CAAArC,IAAA;cAAAqC,SAAA,CAAAO,EAAA,GACjC,EAAE;cAAAP,SAAA,CAAAQ,EAAA;gBAFbxC,EAAE,EAAAgC,SAAA,CAAAK,EAAA;gBACFI,UAAU,EAAAT,SAAA,CAAAM,EAAA;gBACVI,SAAS,EAAAV,SAAA,CAAAO;cAAA;cAHLT,IAAI,OAAAE,SAAA,CAAA3C,EAAA,EAAA2C,SAAA,CAAAQ,EAAA;cAMV,IAAIV,IAAI,CAACW,UAAU,CAACtC,MAAM,GAAG,CAAC,EAAE;gBAC9BuB,MAAM,CAACiB,IAAI,CAACb,IAAI,CAAC;;YAClB;cAAAE,SAAA,CAAA7C,IAAA;cAAA;YAAA;cAAA6C,SAAA,CAAA7C,IAAA;cAAA;YAAA;cAAA6C,SAAA,CAAA9C,IAAA;cAAA8C,SAAA,CAAAY,EAAA,GAAAZ,SAAA;cAAAJ,SAAA,CAAAiB,CAAA,CAAAb,SAAA,CAAAY,EAAA;YAAA;cAAAZ,SAAA,CAAA9C,IAAA;cAAA0C,SAAA,CAAAkB,CAAA;cAAA,OAAAd,SAAA,CAAAe,MAAA;YAAA;cAAA,OAAAf,SAAA,CAAA5B,MAAA,WAGIsB,MAAM;YAAA;YAAA;cAAA,OAAAM,SAAA,CAAA3B,IAAA;UAAA;QAAA,GAAAmB,QAAA;MAAA,CACd;MAAA,SAAA3B,UAAAmD,GAAA;QAAA,OAAAzB,UAAA,CAAAd,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAb,SAAA;IAAA;EAAA;EAAA,OAAAxC,mBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
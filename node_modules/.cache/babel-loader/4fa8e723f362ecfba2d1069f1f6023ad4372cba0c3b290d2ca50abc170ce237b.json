{"ast":null,"code":"// @ts-expect-error types are missing\nimport forgePbkdf2 from 'node-forge/lib/pbkdf2.js';\n// @ts-expect-error types are missing\nimport forgeUtil from 'node-forge/lib/util.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nvar hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n};\n/**\n * Computes the Password-Based Key Derivation Function 2.\n */\nexport default function pbkdf2(password, salt, iterations, keySize, hash) {\n  if (hash !== 'sha1' && hash !== 'sha2-256' && hash !== 'sha2-512') {\n    var types = Object.keys(hashName).join(' / ');\n    throw new CodeError(\"Hash '\".concat(hash, \"' is unknown or not supported. Must be \").concat(types), 'ERR_UNSUPPORTED_HASH_TYPE');\n  }\n  var hasher = hashName[hash];\n  var dek = forgePbkdf2(password, salt, iterations, keySize, hasher);\n  return forgeUtil.encode64(dek, null);\n}","map":{"version":3,"names":["forgePbkdf2","forgeUtil","CodeError","hashName","sha1","pbkdf2","password","salt","iterations","keySize","hash","types","Object","keys","join","concat","hasher","dek","encode64"],"sources":["/Users/apple/Documents/treasure/node_modules/@libp2p/crypto/src/pbkdf2.ts"],"sourcesContent":["// @ts-expect-error types are missing\nimport forgePbkdf2 from 'node-forge/lib/pbkdf2.js'\n// @ts-expect-error types are missing\nimport forgeUtil from 'node-forge/lib/util.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n */\nexport default function pbkdf2 (password: string, salt: string, iterations: number, keySize: number, hash: string): string {\n  if (hash !== 'sha1' && hash !== 'sha2-256' && hash !== 'sha2-512') {\n    const types = Object.keys(hashName).join(' / ')\n    throw new CodeError(`Hash '${hash}' is unknown or not supported. Must be ${types}`, 'ERR_UNSUPPORTED_HASH_TYPE')\n  }\n\n  const hasher = hashName[hash]\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher\n  )\n\n  return forgeUtil.encode64(dek, null)\n}\n"],"mappings":"AAAA;AACA,OAAOA,WAAW,MAAM,0BAA0B;AAClD;AACA,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,SAAS,QAAQ,2BAA2B;AAErD;;;;;;;AAOA,IAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,MAAM;EACZ,UAAU,EAAE,QAAQ;EACpB,UAAU,EAAE;CACb;AAED;;;AAGA,eAAc,SAAUC,MAAMA,CAAEC,QAAgB,EAAEC,IAAY,EAAEC,UAAkB,EAAEC,OAAe,EAAEC,IAAY;EAC/G,IAAIA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,UAAU,EAAE;IACjE,IAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACV,QAAQ,CAAC,CAACW,IAAI,CAAC,KAAK,CAAC;IAC/C,MAAM,IAAIZ,SAAS,UAAAa,MAAA,CAAUL,IAAI,6CAAAK,MAAA,CAA0CJ,KAAK,GAAI,2BAA2B,CAAC;;EAGlH,IAAMK,MAAM,GAAGb,QAAQ,CAACO,IAAI,CAAC;EAC7B,IAAMO,GAAG,GAAGjB,WAAW,CACrBM,QAAQ,EACRC,IAAI,EACJC,UAAU,EACVC,OAAO,EACPO,MAAM,CACP;EAED,OAAOf,SAAS,CAACiB,QAAQ,CAACD,GAAG,EAAE,IAAI,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { resolvePath } from '../../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { PinTypes } from 'ipfs-repo/pin-types';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll(_ref) {\n  var repo = _ref.repo,\n    codecs = _ref.codecs;\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  function rmAll(_x) {\n    return _rmAll.apply(this, arguments);\n  }\n  function _rmAll() {\n    _rmAll = _wrapAsyncGenerator(function (source) {\n      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var release, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, path, recursive, _yield$_awaitAsyncGen, cid, _yield$_awaitAsyncGen2, pinned, reason;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _awaitAsyncGenerator(repo.gcLock.readLock());\n            case 2:\n              release = _context.sent;\n              _context.prev = 3;\n              // verify that each hash can be unpinned\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(normaliseInput(source));\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 10:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 42;\n                break;\n              }\n              _step$value = _step.value, path = _step$value.path, recursive = _step$value.recursive;\n              _context.next = 14;\n              return _awaitAsyncGenerator(resolvePath(repo, codecs, path));\n            case 14:\n              _yield$_awaitAsyncGen = _context.sent;\n              cid = _yield$_awaitAsyncGen.cid;\n              _context.next = 18;\n              return _awaitAsyncGenerator(repo.pins.isPinnedWithType(cid, PinTypes.all));\n            case 18:\n              _yield$_awaitAsyncGen2 = _context.sent;\n              pinned = _yield$_awaitAsyncGen2.pinned;\n              reason = _yield$_awaitAsyncGen2.reason;\n              if (pinned) {\n                _context.next = 23;\n                break;\n              }\n              throw new Error(\"\".concat(cid, \" is not pinned\"));\n            case 23:\n              _context.t0 = reason;\n              _context.next = _context.t0 === PinTypes.recursive ? 26 : _context.t0 === PinTypes.direct ? 33 : 38;\n              break;\n            case 26:\n              if (recursive) {\n                _context.next = 28;\n                break;\n              }\n              throw new Error(\"\".concat(cid, \" is pinned recursively\"));\n            case 28:\n              _context.next = 30;\n              return _awaitAsyncGenerator(repo.pins.unpin(cid));\n            case 30:\n              _context.next = 32;\n              return cid;\n            case 32:\n              return _context.abrupt(\"break\", 39);\n            case 33:\n              _context.next = 35;\n              return _awaitAsyncGenerator(repo.pins.unpin(cid));\n            case 35:\n              _context.next = 37;\n              return cid;\n            case 37:\n              return _context.abrupt(\"break\", 39);\n            case 38:\n              throw new Error(\"\".concat(cid, \" is pinned indirectly under \").concat(reason));\n            case 39:\n              _iteratorAbruptCompletion = false;\n              _context.next = 8;\n              break;\n            case 42:\n              _context.next = 48;\n              break;\n            case 44:\n              _context.prev = 44;\n              _context.t1 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n            case 48:\n              _context.prev = 48;\n              _context.prev = 49;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 53;\n                break;\n              }\n              _context.next = 53;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 53:\n              _context.prev = 53;\n              if (!_didIteratorError) {\n                _context.next = 56;\n                break;\n              }\n              throw _iteratorError;\n            case 56:\n              return _context.finish(53);\n            case 57:\n              return _context.finish(48);\n            case 58:\n              _context.prev = 58;\n              release();\n              return _context.finish(58);\n            case 61:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[3,, 58, 61], [6, 44, 48, 58], [49,, 53, 57]]);\n      })();\n    });\n    return _rmAll.apply(this, arguments);\n  }\n  return withTimeoutOption(rmAll);\n}","map":{"version":3,"names":["normaliseInput","resolvePath","withTimeoutOption","PinTypes","createRmAll","_ref","repo","codecs","rmAll","_x","_rmAll","apply","arguments","_wrapAsyncGenerator","source","_options","length","undefined","_regeneratorRuntime","mark","_callee","release","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_step$value","path","recursive","_yield$_awaitAsyncGen","cid","_yield$_awaitAsyncGen2","pinned","reason","wrap","_callee$","_context","prev","next","_awaitAsyncGenerator","gcLock","readLock","sent","_asyncIterator","done","value","pins","isPinnedWithType","all","Error","concat","t0","direct","unpin","abrupt","t1","return","finish","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/pin/rm-all.js"],"sourcesContent":["import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
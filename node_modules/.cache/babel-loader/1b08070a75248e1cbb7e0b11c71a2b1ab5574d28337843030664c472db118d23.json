{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { exporter } from 'ipfs-unixfs-exporter';\nimport errCode from 'err-code';\nimport { normalizeCidPath, mapFile } from '../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs(_ref) {\n  var repo = _ref.repo,\n    preload = _ref.preload;\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function (ipfsPath) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var legacyPath, pathComponents, ipfsPathOrCid, file, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, child;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              legacyPath = normalizeCidPath(ipfsPath);\n              pathComponents = legacyPath.split('/');\n              if (options.preload !== false) {\n                preload(CID.parse(pathComponents[0]));\n              }\n              ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath;\n              _context.next = 6;\n              return _awaitAsyncGenerator(exporter(ipfsPathOrCid, repo.blocks, options));\n            case 6:\n              file = _context.sent;\n              if (!(file.type === 'file')) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 10;\n              return mapFile(file);\n            case 10:\n              return _context.abrupt(\"return\");\n            case 11:\n              if (!(file.type === 'directory')) {\n                _context.next = 42;\n                break;\n              }\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 14;\n              _iterator = _asyncIterator(file.content());\n            case 16:\n              _context.next = 18;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 18:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 25;\n                break;\n              }\n              child = _step.value;\n              _context.next = 22;\n              return mapFile(child);\n            case 22:\n              _iteratorAbruptCompletion = false;\n              _context.next = 16;\n              break;\n            case 25:\n              _context.next = 31;\n              break;\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](14);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 31:\n              _context.prev = 31;\n              _context.prev = 32;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 36;\n                break;\n              }\n              _context.next = 36;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 36:\n              _context.prev = 36;\n              if (!_didIteratorError) {\n                _context.next = 39;\n                break;\n              }\n              throw _iteratorError;\n            case 39:\n              return _context.finish(36);\n            case 40:\n              return _context.finish(31);\n            case 41:\n              return _context.abrupt(\"return\");\n            case 42:\n              throw errCode(new Error(\"Unknown UnixFS type \".concat(file.type)), 'ERR_UNKNOWN_UNIXFS_TYPE');\n            case 43:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[14, 27, 31, 41], [32,, 36, 40]]);\n      })();\n    });\n    return _ls.apply(this, arguments);\n  }\n  return withTimeoutOption(ls);\n}","map":{"version":3,"names":["exporter","errCode","normalizeCidPath","mapFile","withTimeoutOption","CID","createLs","_ref","repo","preload","ls","_x","_ls","apply","arguments","_wrapAsyncGenerator","ipfsPath","options","length","undefined","_regeneratorRuntime","mark","_callee","legacyPath","pathComponents","ipfsPathOrCid","file","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","child","wrap","_callee$","_context","prev","next","split","parse","asCID","_awaitAsyncGenerator","blocks","sent","type","abrupt","_asyncIterator","content","done","value","t0","return","finish","Error","concat","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/ls.js"],"sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath, mapFile } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc() {\n  var _globalThis$Buffer;\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if (((_globalThis$Buffer = globalThis.Buffer) === null || _globalThis$Buffer === void 0 ? void 0 : _globalThis$Buffer.alloc) != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe() {\n  var _globalThis$Buffer2;\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if (((_globalThis$Buffer2 = globalThis.Buffer) === null || _globalThis$Buffer2 === void 0 ? void 0 : _globalThis$Buffer2.allocUnsafe) != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}","map":{"version":3,"names":["asUint8Array","alloc","_globalThis$Buffer","size","arguments","length","undefined","globalThis","Buffer","Uint8Array","allocUnsafe","_globalThis$Buffer2"],"sources":["/Users/apple/Documents/treasure/node_modules/@multiformats/multiaddr/node_modules/uint8arrays/src/alloc.ts"],"sourcesContent":["import { asUint8Array } from './util/as-uint8array.js'\n\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size))\n  }\n\n  return new Uint8Array(size)\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size))\n  }\n\n  return new Uint8Array(size)\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,yBAAyB;AAEtD;;;;AAIA,OAAM,SAAUC,KAAKA,CAAA,EAAkB;EAAA,IAAAC,kBAAA;EAAA,IAAhBC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe,CAAC;EACrC,IAAI,EAAAF,kBAAA,GAAAK,UAAU,CAACC,MAAM,cAAAN,kBAAA,uBAAjBA,kBAAA,CAAmBD,KAAK,KAAI,IAAI,EAAE;IACpC,OAAOD,YAAY,CAACO,UAAU,CAACC,MAAM,CAACP,KAAK,CAACE,IAAI,CAAC,CAAC;;EAGpD,OAAO,IAAIM,UAAU,CAACN,IAAI,CAAC;AAC7B;AAEA;;;;;AAKA,OAAM,SAAUO,WAAWA,CAAA,EAAkB;EAAA,IAAAC,mBAAA;EAAA,IAAhBR,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe,CAAC;EAC3C,IAAI,EAAAO,mBAAA,GAAAJ,UAAU,CAACC,MAAM,cAAAG,mBAAA,uBAAjBA,mBAAA,CAAmBD,WAAW,KAAI,IAAI,EAAE;IAC1C,OAAOV,YAAY,CAACO,UAAU,CAACC,MAAM,CAACE,WAAW,CAACP,IAAI,CAAC,CAAC;;EAG1D,OAAO,IAAIM,UAAU,CAACN,IAAI,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nimport { createHAMT, Bucket } from 'hamt-sharding';\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @typedef {import('./dir').DirProps} DirProps\n */\nvar DirSharded = /*#__PURE__*/function (_Dir) {\n  _inherits(DirSharded, _Dir);\n  var _super = _createSuper(DirSharded);\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  function DirSharded(props, options) {\n    var _this3;\n    _classCallCheck(this, DirSharded);\n    _this3 = _super.call(this, props, options);\n\n    /** @type {Bucket<InProgressImportResult | Dir>} */\n    _this3._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    });\n    return _this3;\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  _createClass(DirSharded, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, value) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._bucket.put(name, value);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function put(_x5, _x6) {\n        return _put.apply(this, arguments);\n      }\n      return put;\n    }()\n    /**\n     * @param {string} name\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this._bucket.get(name);\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return this._bucket.leafCount();\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this._bucket.childrenCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._bucket.onlyChild();\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context2.prev = 2;\n              _iterator = _asyncIterator(_this._bucket.eachLeafSeries());\n            case 4:\n              _context2.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                _context2.next = 13;\n                break;\n              }\n              _step$value = _step.value, key = _step$value.key, value = _step$value.value;\n              _context2.next = 10;\n              return {\n                key: key,\n                child: value\n              };\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _context2.next = 4;\n              break;\n            case 13:\n              _context2.next = 19;\n              break;\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context2.t0;\n            case 19:\n              _context2.prev = 19;\n              _context2.prev = 20;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context2.next = 24;\n                break;\n              }\n              _context2.next = 24;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 24:\n              _context2.prev = 24;\n              if (!_didIteratorError) {\n                _context2.next = 27;\n                break;\n              }\n              throw _iteratorError;\n            case 27:\n              return _context2.finish(24);\n            case 28:\n              return _context2.finish(19);\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n\n    /**\n     * @param {Blockstore} blockstore\n     * @returns {AsyncIterable<ImportResult>}\n     */\n  }, {\n    key: \"flush\",\n    value: function flush(blockstore) {\n      var _this2 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, entry;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context3.prev = 2;\n              _iterator2 = _asyncIterator(_flush2(_this2._bucket, blockstore, _this2, _this2.options));\n            case 4:\n              _context3.next = 6;\n              return _awaitAsyncGenerator(_iterator2.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context3.sent).done)) {\n                _context3.next = 13;\n                break;\n              }\n              entry = _step2.value;\n              _context3.next = 10;\n              return _objectSpread(_objectSpread({}, entry), {}, {\n                path: _this2.path\n              });\n            case 10:\n              _iteratorAbruptCompletion2 = false;\n              _context3.next = 4;\n              break;\n            case 13:\n              _context3.next = 19;\n              break;\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](2);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context3.t0;\n            case 19:\n              _context3.prev = 19;\n              _context3.prev = 20;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context3.next = 24;\n                break;\n              }\n              _context3.next = 24;\n              return _awaitAsyncGenerator(_iterator2.return());\n            case 24:\n              _context3.prev = 24;\n              if (!_didIteratorError2) {\n                _context3.next = 27;\n                break;\n              }\n              throw _iteratorError2;\n            case 27:\n              return _context3.finish(24);\n            case 28:\n              return _context3.finish(19);\n            case 29:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n  }]);\n  return DirSharded;\n}(Dir);\nexport default DirSharded;\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {ImporterOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nfunction _flush2(_x, _x2, _x3, _x4) {\n  return _flush.apply(this, arguments);\n}\nfunction _flush() {\n  _flush = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(bucket, blockstore, shardRoot, options) {\n    var children, links, childrenSize, i, child, labelPrefix, shard, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, subShard, _dir, flushedDir, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, entry, label, value, _label, _size, data, dir, node, buffer, cid, size;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          children = bucket._children;\n          links = [];\n          childrenSize = 0;\n          i = 0;\n        case 4:\n          if (!(i < children.length)) {\n            _context4.next = 97;\n            break;\n          }\n          child = children.get(i);\n          if (child) {\n            _context4.next = 8;\n            break;\n          }\n          return _context4.abrupt(\"continue\", 94);\n        case 8:\n          labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n          if (!(child instanceof Bucket)) {\n            _context4.next = 49;\n            break;\n          }\n          shard = void 0;\n          _iteratorAbruptCompletion3 = false;\n          _didIteratorError3 = false;\n          _context4.prev = 13;\n          _context4.t0 = _asyncIterator;\n          _context4.next = 17;\n          return _awaitAsyncGenerator(_flush2(child, blockstore, null, options));\n        case 17:\n          _context4.t1 = _context4.sent;\n          _iterator3 = (0, _context4.t0)(_context4.t1);\n        case 19:\n          _context4.next = 21;\n          return _awaitAsyncGenerator(_iterator3.next());\n        case 21:\n          if (!(_iteratorAbruptCompletion3 = !(_step3 = _context4.sent).done)) {\n            _context4.next = 27;\n            break;\n          }\n          subShard = _step3.value;\n          shard = subShard;\n        case 24:\n          _iteratorAbruptCompletion3 = false;\n          _context4.next = 19;\n          break;\n        case 27:\n          _context4.next = 33;\n          break;\n        case 29:\n          _context4.prev = 29;\n          _context4.t2 = _context4[\"catch\"](13);\n          _didIteratorError3 = true;\n          _iteratorError3 = _context4.t2;\n        case 33:\n          _context4.prev = 33;\n          _context4.prev = 34;\n          if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n            _context4.next = 38;\n            break;\n          }\n          _context4.next = 38;\n          return _awaitAsyncGenerator(_iterator3.return());\n        case 38:\n          _context4.prev = 38;\n          if (!_didIteratorError3) {\n            _context4.next = 41;\n            break;\n          }\n          throw _iteratorError3;\n        case 41:\n          return _context4.finish(38);\n        case 42:\n          return _context4.finish(33);\n        case 43:\n          if (shard) {\n            _context4.next = 45;\n            break;\n          }\n          throw new Error('Could not flush sharded directory, no subshard found');\n        case 45:\n          links.push({\n            Name: labelPrefix,\n            Tsize: shard.size,\n            Hash: shard.cid\n          });\n          childrenSize += shard.size;\n          _context4.next = 94;\n          break;\n        case 49:\n          if (!(typeof child.value.flush === 'function')) {\n            _context4.next = 87;\n            break;\n          }\n          _dir = child.value;\n          flushedDir = void 0;\n          _iteratorAbruptCompletion4 = false;\n          _didIteratorError4 = false;\n          _context4.prev = 54;\n          _iterator4 = _asyncIterator(_dir.flush(blockstore));\n        case 56:\n          _context4.next = 58;\n          return _awaitAsyncGenerator(_iterator4.next());\n        case 58:\n          if (!(_iteratorAbruptCompletion4 = !(_step4 = _context4.sent).done)) {\n            _context4.next = 66;\n            break;\n          }\n          entry = _step4.value;\n          flushedDir = entry;\n          _context4.next = 63;\n          return flushedDir;\n        case 63:\n          _iteratorAbruptCompletion4 = false;\n          _context4.next = 56;\n          break;\n        case 66:\n          _context4.next = 72;\n          break;\n        case 68:\n          _context4.prev = 68;\n          _context4.t3 = _context4[\"catch\"](54);\n          _didIteratorError4 = true;\n          _iteratorError4 = _context4.t3;\n        case 72:\n          _context4.prev = 72;\n          _context4.prev = 73;\n          if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n            _context4.next = 77;\n            break;\n          }\n          _context4.next = 77;\n          return _awaitAsyncGenerator(_iterator4.return());\n        case 77:\n          _context4.prev = 77;\n          if (!_didIteratorError4) {\n            _context4.next = 80;\n            break;\n          }\n          throw _iteratorError4;\n        case 80:\n          return _context4.finish(77);\n        case 81:\n          return _context4.finish(72);\n        case 82:\n          label = labelPrefix + child.key;\n          links.push({\n            Name: label,\n            Tsize: flushedDir.size,\n            Hash: flushedDir.cid\n          });\n          childrenSize += flushedDir.size;\n          _context4.next = 94;\n          break;\n        case 87:\n          value = child.value;\n          if (value.cid) {\n            _context4.next = 90;\n            break;\n          }\n          return _context4.abrupt(\"continue\", 94);\n        case 90:\n          _label = labelPrefix + child.key;\n          _size = value.size;\n          links.push({\n            Name: _label,\n            Tsize: _size,\n            Hash: value.cid\n          });\n          childrenSize += _size;\n        case 94:\n          i++;\n          _context4.next = 4;\n          break;\n        case 97:\n          // go-ipfs uses little endian, that's why we have to\n          // reverse the bit field before storing it\n          data = Uint8Array.from(children.bitField().reverse());\n          dir = new UnixFS({\n            type: 'hamt-sharded-directory',\n            data: data,\n            fanout: bucket.tableSize(),\n            hashType: options.hamtHashCode,\n            mtime: shardRoot && shardRoot.mtime,\n            mode: shardRoot && shardRoot.mode\n          });\n          node = {\n            Data: dir.marshal(),\n            Links: links\n          };\n          buffer = encode(prepare(node));\n          _context4.next = 103;\n          return _awaitAsyncGenerator(persist(buffer, blockstore, options));\n        case 103:\n          cid = _context4.sent;\n          size = buffer.length + childrenSize;\n          _context4.next = 107;\n          return {\n            cid: cid,\n            unixfs: dir,\n            size: size\n          };\n        case 107:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[13, 29, 33, 43], [34,, 38, 42], [54, 68, 72, 82], [73,, 77, 81]]);\n  }));\n  return _flush.apply(this, arguments);\n}","map":{"version":3,"names":["encode","prepare","UnixFS","Dir","persist","createHAMT","Bucket","DirSharded","_Dir","_inherits","_super","_createSuper","props","options","_this3","_classCallCheck","call","_bucket","hashFn","hamtHashFn","bits","hamtBucketBits","_createClass","key","value","_put","_asyncToGenerator","_regeneratorRuntime","mark","_callee","name","wrap","_callee$","_context","prev","next","put","stop","_x5","_x6","apply","arguments","get","childCount","leafCount","directChildrenCount","childrenCount","onlyChild","eachChildSeries","_this","_wrapAsyncGenerator","_callee2","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_step$value","_callee2$","_context2","_asyncIterator","eachLeafSeries","_awaitAsyncGenerator","sent","done","child","t0","return","finish","flush","blockstore","_this2","_callee3","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","entry","_callee3$","_context3","_objectSpread","path","_x","_x2","_x3","_x4","_flush","_callee4","bucket","shardRoot","children","links","childrenSize","i","labelPrefix","shard","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","subShard","_dir","flushedDir","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","label","_label","_size","data","dir","node","buffer","cid","size","_callee4$","_context4","_children","length","abrupt","toString","toUpperCase","padStart","t1","t2","Error","push","Name","Tsize","Hash","t3","Uint8Array","from","bitField","reverse","type","fanout","tableSize","hashType","hamtHashCode","mtime","mode","Data","marshal","Links","unixfs"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-unixfs-importer/src/dir-sharded.js"],"sourcesContent":["import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @typedef {import('./dir').DirProps} DirProps\n */\n\nclass DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<InProgressImportResult | Dir>} */\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield {\n        ...entry,\n        path: this.path\n      }\n    }\n  }\n}\n\nexport default DirSharded\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {ImporterOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _wrapAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { logger } from '@libp2p/logger';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js';\nvar log = logger('ipfs:repo:gc');\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc(_ref) {\n  var repo = _ref.repo,\n    hashers = _ref.hashers;\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  function gc() {\n    return _gc.apply(this, arguments);\n  }\n  function _gc() {\n    _gc = _wrapAsyncGenerator(function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var start, mfsRootCid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              start = Date.now();\n              _context.prev = 1;\n              _context.next = 4;\n              return _awaitAsyncGenerator(loadMfsRoot({\n                repo: repo,\n                hashers: hashers\n              }, options));\n            case 4:\n              mfsRootCid = _context.sent;\n              _context.next = 7;\n              return _awaitAsyncGenerator(repo.pins.pinRecursively(mfsRootCid));\n            case 7:\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(repo.gc()), _awaitAsyncGenerator), \"t0\", 8);\n            case 8:\n              _context.prev = 8;\n              if (!mfsRootCid) {\n                _context.next = 12;\n                break;\n              }\n              _context.next = 12;\n              return _awaitAsyncGenerator(repo.pins.unpin(mfsRootCid));\n            case 12:\n              return _context.finish(8);\n            case 13:\n              log(\"Complete (\".concat(Date.now() - start, \"ms)\"));\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1,, 8, 13]]);\n      })();\n    });\n    return _gc.apply(this, arguments);\n  }\n  return withTimeoutOption(gc);\n}","map":{"version":3,"names":["logger","withTimeoutOption","loadMfsRoot","log","createGc","_ref","repo","hashers","gc","_gc","apply","arguments","_wrapAsyncGenerator","options","length","undefined","_regeneratorRuntime","mark","_callee","start","mfsRootCid","wrap","_callee$","_context","prev","next","Date","now","_awaitAsyncGenerator","sent","pins","pinRecursively","delegateYield","_asyncGeneratorDelegate","_asyncIterator","unpin","finish","concat","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/repo/gc.js"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js'\n\nconst log = logger('ipfs:repo:gc')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc ({ repo, hashers }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n"],"mappings":";;;;;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,WAAW,QAAQ,iCAAiC;AAE7D,IAAMC,GAAG,GAAGH,MAAM,CAAC,cAAc,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,QAAQA,CAAAC,IAAA,EAAqB;EAAA,IAAjBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EACvC;AACF;AACA;EAFE,SAGiBC,EAAEA,CAAA;IAAA,OAAAC,GAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,IAAA;IAAAA,GAAA,GAAAG,mBAAA,CAAnB;MAAA,IAAqBC,OAAO,GAAAF,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAG,CAAC,CAAC;MAAA,oBAAAK,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,KAAA,EAAAC,UAAA;QAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACzBN,KAAK,GAAGO,IAAI,CAACC,GAAG,CAAC,CAAC;cAAAJ,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAAAG,oBAAA,CAIH1B,WAAW,CAAC;gBAC7BI,IAAI,EAAJA,IAAI;gBACJC,OAAO,EAAPA;cACF,CAAC,EAAEM,OAAO,CAAC;YAAA;cAHXO,UAAU,GAAAG,QAAA,CAAAM,IAAA;cAAAN,QAAA,CAAAE,IAAA;cAAA,OAAAG,oBAAA,CAMJtB,IAAI,CAACwB,IAAI,CAACC,cAAc,CAACX,UAAU,CAAC;YAAA;cAE1C,OAAAG,QAAA,CAAAS,aAAA,CAAAC,uBAAA,CAAAC,cAAA,CAAQ5B,IAAI,CAACE,EAAE,CAAC,CAAC,GAAAoB,oBAAA;YAAA;cAAAL,QAAA,CAAAC,IAAA;cAAA,KAGbJ,UAAU;gBAAAG,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAAAG,oBAAA,CACNtB,IAAI,CAACwB,IAAI,CAACK,KAAK,CAACf,UAAU,CAAC;YAAA;cAAA,OAAAG,QAAA,CAAAa,MAAA;YAAA;cAIrCjC,GAAG,cAAAkC,MAAA,CAAcX,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGR,KAAK,QAAK,CAAC;YAAA;YAAA;cAAA,OAAAI,QAAA,CAAAe,IAAA;UAAA;QAAA,GAAApB,OAAA;MAAA;IAAA,CAC1C;IAAA,OAAAT,GAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOV,iBAAiB,CAACO,EAAE,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { EventEmitter } from 'events';\nimport MovingAverage from '@vascosantos/moving-average';\n\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\nexport var Stat = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Stat, _EventEmitter);\n  var _super = _createSuper(Stat);\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  function Stat(initialCounters, options) {\n    var _this;\n    _classCallCheck(this, Stat);\n    _this = _super.call(this);\n    _this._options = options;\n    /** @type {Op[]} */\n    _this._queue = [];\n    /** @type {Record<string, bigint>} */\n    _this._stats = {};\n    _this._frequencyLastTime = Date.now();\n    /** @type {Record<string, number>} */\n    _this._frequencyAccumulators = {};\n\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n    _this._movingAverages = {};\n    _this._update = _this._update.bind(_assertThisInitialized(_this));\n    initialCounters.forEach(function (key) {\n      _this._stats[key] = BigInt(0);\n      _this._movingAverages[key] = {};\n      _this._options.movingAverageIntervals.forEach(function (interval) {\n        var ma = _this._movingAverages[key][interval] = MovingAverage(interval);\n        ma.push(_this._frequencyLastTime, 0);\n      });\n    });\n    _this._enabled = _this._options.enabled;\n    return _this;\n  }\n  _createClass(Stat, [{\n    key: \"enable\",\n    value: function enable() {\n      this._enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this._disabled = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return Object.assign({}, this._stats);\n    }\n  }, {\n    key: \"movingAverages\",\n    get: function get() {\n      return Object.assign({}, this._movingAverages);\n    }\n\n    /**\n     * @param {string} counter\n     * @param {number} inc\n     */\n  }, {\n    key: \"push\",\n    value: function push(counter, inc) {\n      if (this._enabled) {\n        this._queue.push([counter, inc, Date.now()]);\n        this._resetComputeTimeout();\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_resetComputeTimeout\",\n    value: function _resetComputeTimeout() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n      this._timeout = setTimeout(this._update, this._nextTimeout());\n    }\n\n    /**\n     * @private\n     * @returns {number}\n     */\n  }, {\n    key: \"_nextTimeout\",\n    value: function _nextTimeout() {\n      // calculate the need for an update, depending on the queue length\n      var urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n      return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._timeout = null;\n      if (this._queue.length) {\n        var last;\n        while (this._queue.length) {\n          var op = last = this._queue.shift();\n          op && this._applyOp(op);\n        }\n        last && this._updateFrequency(last[2]); // contains timestamp of last op\n\n        this.emit('update', this._stats);\n      }\n    }\n\n    /**\n     * @private\n     * @param {number} latestTime\n     */\n  }, {\n    key: \"_updateFrequency\",\n    value: function _updateFrequency(latestTime) {\n      var _this2 = this;\n      var timeDiff = latestTime - this._frequencyLastTime;\n      if (timeDiff) {\n        Object.keys(this._stats).forEach(function (key) {\n          _this2._updateFrequencyFor(key, timeDiff, latestTime);\n        });\n      }\n      this._frequencyLastTime = latestTime;\n    }\n\n    /**\n     * @private\n     * @param {string} key\n     * @param {number} timeDiffMS\n     * @param {number} latestTime\n     * @returns {void}\n     */\n  }, {\n    key: \"_updateFrequencyFor\",\n    value: function _updateFrequencyFor(key, timeDiffMS, latestTime) {\n      var count = this._frequencyAccumulators[key] || 0;\n      this._frequencyAccumulators[key] = 0;\n      var hz = count / timeDiffMS * 1000;\n      var movingAverages = this._movingAverages[key];\n      if (!movingAverages) {\n        movingAverages = this._movingAverages[key] = {};\n      }\n      this._options.movingAverageIntervals.forEach(function (movingAverageInterval) {\n        var movingAverage = movingAverages[movingAverageInterval];\n        if (!movingAverage) {\n          movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n        }\n        movingAverage.push(latestTime, hz);\n      });\n    }\n\n    /**\n     * @private\n     * @param {Op} op\n     */\n  }, {\n    key: \"_applyOp\",\n    value: function _applyOp(op) {\n      var key = op[0];\n      var inc = op[1];\n      if (typeof inc !== 'number') {\n        throw new Error(\"invalid increment number: \".concat(inc));\n      }\n      if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n        this._stats[key] = BigInt(0);\n      }\n      this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);\n      if (!this._frequencyAccumulators[key]) {\n        this._frequencyAccumulators[key] = 0;\n      }\n      this._frequencyAccumulators[key] += inc;\n    }\n  }]);\n  return Stat;\n}(EventEmitter);","map":{"version":3,"names":["EventEmitter","MovingAverage","Stat","_EventEmitter","_inherits","_super","_createSuper","initialCounters","options","_this","_classCallCheck","call","_options","_queue","_stats","_frequencyLastTime","Date","now","_frequencyAccumulators","_movingAverages","_update","bind","_assertThisInitialized","forEach","key","BigInt","movingAverageIntervals","interval","ma","push","_enabled","enabled","_createClass","value","enable","disable","_disabled","stop","_timeout","clearTimeout","get","Object","assign","counter","inc","_resetComputeTimeout","setTimeout","_nextTimeout","urgency","length","computeThrottleMaxQueueSize","Math","max","computeThrottleTimeout","last","op","shift","_applyOp","_updateFrequency","emit","latestTime","_this2","timeDiff","keys","_updateFrequencyFor","timeDiffMS","count","hz","movingAverages","movingAverageInterval","movingAverage","Error","concat","prototype","hasOwnProperty"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-bitswap/src/stats/stat.js"],"sourcesContent":["import { EventEmitter } from 'events'\nimport MovingAverage from '@vascosantos/moving-average'\n\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\nexport class Stat extends EventEmitter {\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    /** @type {Op[]} */\n    this._queue = []\n    /** @type {Record<string, bigint>} */\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    /** @type {Record<string, number>} */\n    this._frequencyAccumulators = {}\n\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    initialCounters.forEach((key) => {\n      this._stats[key] = BigInt(0)\n      this._movingAverages[key] = {}\n      this._options.movingAverageIntervals.forEach((interval) => {\n        const ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      })\n    })\n\n    this._enabled = this._options.enabled\n  }\n\n  enable () {\n    this._enabled = true\n  }\n\n  disable () {\n    this._disabled = true\n  }\n\n  stop () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n  }\n\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  /**\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()])\n      this._resetComputeTimeout()\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n    this._timeout = setTimeout(this._update, this._nextTimeout())\n  }\n\n  /**\n   * @private\n   * @returns {number}\n   */\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n  }\n\n  /**\n   * @private\n   */\n  _update () {\n    this._timeout = null\n\n    if (this._queue.length) {\n      let last\n      while (this._queue.length) {\n        const op = last = this._queue.shift()\n        op && this._applyOp(op)\n      }\n\n      last && this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} latestTime\n   */\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    if (timeDiff) {\n      Object.keys(this._stats).forEach((key) => {\n        this._updateFrequencyFor(key, timeDiff, latestTime)\n      })\n    }\n\n    this._frequencyLastTime = latestTime\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS\n   * @param {number} latestTime\n   * @returns {void}\n   */\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    const hz = (count / timeDiffMS) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n    this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n      let movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    })\n  }\n\n  /**\n   * @private\n   * @param {Op} op\n   */\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${inc}`)\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0)\n    }\n\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
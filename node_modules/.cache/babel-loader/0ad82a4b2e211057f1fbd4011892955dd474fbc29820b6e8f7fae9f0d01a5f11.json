{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport var createId = configure(function (api) {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        data,\n        output,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return api.post('id', {\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: options.peerId ? options.peerId.toString() : undefined\n              }, options)),\n              headers: options.headers\n            });\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n          case 6:\n            data = _context.sent;\n            output = _objectSpread({}, objectToCamel(data));\n            output.id = peerIdFromString(output.id);\n            if (output.addresses) {\n              output.addresses = output.addresses.map(function ( /** @type {string} */ma) {\n                return multiaddr(ma);\n              });\n            }\n\n            // @ts-expect-error server output is not typed\n            return _context.abrupt(\"return\", output);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n  return id;\n});","map":{"version":3,"names":["objectToCamel","multiaddr","configure","toUrlSearchParams","peerIdFromString","createId","api","id","_id","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","res","data","output","_args","wrap","_callee$","_context","prev","next","length","undefined","post","signal","searchParams","_objectSpread","arg","peerId","toString","headers","sent","json","addresses","map","ma","abrupt","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n"],"mappings":";;;AAAA,SAASA,aAAa,QAAQ,0BAA0B;AACxD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,QAAQ,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EACvC;AACF;AACA;EAFE,SAGeC,EAAEA,CAAA;IAAA,OAAAC,GAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,IAAA;IAAAA,GAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAjB,SAAAC,QAAA;MAAA,IAAAC,OAAA;QAAAC,GAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,KAAA,GAAAT,SAAA;MAAA,OAAAE,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAmBT,OAAO,GAAAI,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OACXlB,GAAG,CAACqB,IAAI,CAAC,IAAI,EAAE;cAC/BC,MAAM,EAAEb,OAAO,CAACa,MAAM;cACtBC,YAAY,EAAE1B,iBAAiB,CAAA2B,aAAA;gBAC7BC,GAAG,EAAEhB,OAAO,CAACiB,MAAM,GAAGjB,OAAO,CAACiB,MAAM,CAACC,QAAQ,CAAC,CAAC,GAAGP;cAAS,GACxDX,OAAO,CACX,CAAC;cACFmB,OAAO,EAAEnB,OAAO,CAACmB;YACnB,CAAC,CAAC;UAAA;YAPIlB,GAAG,GAAAM,QAAA,CAAAa,IAAA;YAAAb,QAAA,CAAAE,IAAA;YAAA,OAQUR,GAAG,CAACoB,IAAI,CAAC,CAAC;UAAA;YAAvBnB,IAAI,GAAAK,QAAA,CAAAa,IAAA;YAEJjB,MAAM,GAAAY,aAAA,KACP9B,aAAa,CAACiB,IAAI,CAAC;YAGxBC,MAAM,CAACX,EAAE,GAAGH,gBAAgB,CAACc,MAAM,CAACX,EAAE,CAAC;YAEvC,IAAIW,MAAM,CAACmB,SAAS,EAAE;cACpBnB,MAAM,CAACmB,SAAS,GAAGnB,MAAM,CAACmB,SAAS,CAACC,GAAG,CAAC,WAAC,qBAAsBC,EAAE;gBAAA,OAAKtC,SAAS,CAACsC,EAAE,CAAC;cAAA,EAAC;YACtF;;YAEA;YAAA,OAAAjB,QAAA,CAAAkB,MAAA,WACOtB,MAAM;UAAA;UAAA;YAAA,OAAAI,QAAA,CAAAmB,IAAA;QAAA;MAAA,GAAA3B,OAAA;IAAA,CACd;IAAA,OAAAN,GAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EACD,OAAOH,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
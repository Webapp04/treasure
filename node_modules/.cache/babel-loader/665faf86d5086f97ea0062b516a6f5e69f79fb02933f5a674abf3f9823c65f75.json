{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/apple/Documents/treasure/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createConnect(_ref) {\n  var network = _ref.network;\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"connect\"]}\n   */\n  function connect(_x) {\n    return _connect.apply(this, arguments);\n  }\n  function _connect() {\n    _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(multiaddrOrPeerId) {\n      var options,\n        _yield$network$use,\n        libp2p,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return network.use(options);\n          case 3:\n            _yield$network$use = _context.sent;\n            libp2p = _yield$network$use.libp2p;\n            _context.next = 7;\n            return libp2p.dial(multiaddrOrPeerId, options);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _connect.apply(this, arguments);\n  }\n  return withTimeoutOption(connect);\n}","map":{"version":3,"names":["withTimeoutOption","createConnect","_ref","network","connect","_x","_connect","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","multiaddrOrPeerId","options","_yield$network$use","libp2p","_args","wrap","_callee$","_context","prev","next","length","undefined","use","sent","dial","stop"],"sources":["/Users/apple/Documents/treasure/node_modules/ipfs-core/src/components/swarm/connect.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createConnect ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"connect\"]}\n   */\n  async function connect (multiaddrOrPeerId, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.dial(multiaddrOrPeerId, options)\n  }\n\n  return withTimeoutOption(connect)\n}\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAAC,IAAA,EAAe;EAAA,IAAXC,OAAO,GAAAD,IAAA,CAAPC,OAAO;EACtC;AACF;AACA;EAFE,SAGeC,OAAOA,CAAAC,EAAA;IAAA,OAAAC,QAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,SAAA;IAAAA,QAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAtB,SAAAC,QAAwBC,iBAAiB;MAAA,IAAAC,OAAA;QAAAC,kBAAA;QAAAC,MAAA;QAAAC,KAAA,GAAAT,SAAA;MAAA,OAAAE,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAER,OAAO,GAAAG,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;YAAAG,QAAA,CAAAE,IAAA;YAAA,OAC5BnB,OAAO,CAACsB,GAAG,CAACX,OAAO,CAAC;UAAA;YAAAC,kBAAA,GAAAK,QAAA,CAAAM,IAAA;YAArCV,MAAM,GAAAD,kBAAA,CAANC,MAAM;YAAAI,QAAA,CAAAE,IAAA;YAAA,OACRN,MAAM,CAACW,IAAI,CAACd,iBAAiB,EAAEC,OAAO,CAAC;UAAA;UAAA;YAAA,OAAAM,QAAA,CAAAQ,IAAA;QAAA;MAAA,GAAAhB,OAAA;IAAA,CAC9C;IAAA,OAAAN,QAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OAAOR,iBAAiB,CAACI,OAAO,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}